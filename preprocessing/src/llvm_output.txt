; ModuleID = 'test.cpp'
source_filename = "test.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: norecurse nounwind readnone ssp uwtable
define i32 @_Z3addii(i32, i32) local_unnamed_addr #0 {
  %3 = add nsw i32 %1, %0
  ret i32 %3
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 14]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple LLVM version 10.0.1 (clang-1001.0.46.4)"}

lltok.kw_source_filename
lltok.equal
lltok.StringConstant
lltok.kw_target
lltok.kw_datalayout
lltok.equal
lltok.StringConstant
lltok.kw_target
lltok.kw_triple
lltok.equal
lltok.StringConstant
lltok.kw_define
lltok.Type
lltok.GlobalVar
lltok.lparen
lltok.Type
lltok.comma
lltok.Type
lltok.rparen
lltok.kw_local_unnamed_addr
lltok.AttrGrpID
lltok.lbrace
lltok.LocalVarID
lltok.equal
lltok.kw_add
lltok.kw_nsw
lltok.Type
lltok.LocalVarID
lltok.comma
lltok.LocalVarID
lltok.kw_ret
lltok.Type
lltok.LocalVarID
lltok.rbrace
lltok.kw_attributes
lltok.AttrGrpID
lltok.equal
lltok.lbrace
lltok.kw_norecurse
lltok.kw_nounwind
lltok.kw_readnone
lltok.kw_ssp
lltok.kw_uwtable
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.StringConstant
lltok.equal
lltok.StringConstant
lltok.rbrace
lltok.MetadataVar
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.exclaim
lltok.APSInt
lltok.comma
lltok.exclaim
lltok.APSInt
lltok.comma
lltok.exclaim
lltok.APSInt
lltok.rbrace
lltok.MetadataVar
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.exclaim
lltok.APSInt
lltok.rbrace
lltok.exclaim
lltok.APSInt
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.Type
lltok.APSInt
lltok.comma
lltok.exclaim
lltok.StringConstant
lltok.comma
lltok.lsquare
lltok.APSInt
lltok.kw_x
lltok.Type
lltok.rsquare
lltok.lsquare
lltok.Type
lltok.APSInt
lltok.comma
lltok.Type
lltok.APSInt
lltok.rsquare
lltok.rbrace
lltok.exclaim
lltok.APSInt
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.Type
lltok.APSInt
lltok.comma
lltok.exclaim
lltok.StringConstant
lltok.comma
lltok.Type
lltok.APSInt
lltok.rbrace
lltok.exclaim
lltok.APSInt
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.Type
lltok.APSInt
lltok.comma
lltok.exclaim
lltok.StringConstant
lltok.comma
lltok.Type
lltok.APSInt
lltok.rbrace
lltok.exclaim
lltok.APSInt
lltok.equal
lltok.exclaim
lltok.lbrace
lltok.exclaim
lltok.StringConstant
lltok.rbrace
lltok.Eof
[lltok.kw_source_filename, lltok.equal, (lltok.StringConstant, 'test.cpp'), lltok.kw_target, lltok.kw_datalayout, lltok.equal, (lltok.StringConstant, 'e-m:o-i64:64-f80:128-n8:16:32:64-S128'), lltok.kw_target, lltok.kw_triple, lltok.equal, (lltok.StringConstant, 'x86_64-apple-macosx10.14.0'), lltok.kw_define, (lltok.Type, 'i32'), (lltok.GlobalVar, '_Z3addii'), lltok.lparen, (lltok.Type, 'i32'), lltok.comma, (lltok.Type, 'i32'), lltok.rparen, lltok.kw_local_unnamed_addr, (lltok.AttrGrpID, 0), lltok.lbrace, (lltok.LocalVarID, 3), lltok.equal, lltok.kw_add, lltok.kw_nsw, (lltok.Type, 'i32'), (lltok.LocalVarID, 1), lltok.comma, (lltok.LocalVarID, 0), lltok.kw_ret, (lltok.Type, 'i32'), (lltok.LocalVarID, 3), lltok.rbrace, lltok.kw_attributes, (lltok.AttrGrpID, 0), lltok.equal, lltok.lbrace, lltok.kw_norecurse, lltok.kw_nounwind, lltok.kw_readnone, lltok.kw_ssp, lltok.kw_uwtable, (lltok.StringConstant, 'correctly-rounded-divide-sqrt-fp-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'disable-tail-calls'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'less-precise-fpmad'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'no-frame-pointer-elim'), lltok.equal, (lltok.StringConstant, 'true'), (lltok.StringConstant, 'no-frame-pointer-elim-non-leaf'), (lltok.StringConstant, 'no-infs-fp-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'no-jump-tables'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'no-nans-fp-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'no-signed-zeros-fp-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'no-trapping-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'stack-protector-buffer-size'), lltok.equal, (lltok.StringConstant, '8'), (lltok.StringConstant, 'target-cpu'), lltok.equal, (lltok.StringConstant, 'penryn'), (lltok.StringConstant, 'target-features'), lltok.equal, (lltok.StringConstant, '+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87'), (lltok.StringConstant, 'unsafe-fp-math'), lltok.equal, (lltok.StringConstant, 'false'), (lltok.StringConstant, 'use-soft-float'), lltok.equal, (lltok.StringConstant, 'false'), lltok.rbrace, (lltok.MetadataVar, 'llvm.module.flags'), lltok.equal, lltok.exclaim, lltok.lbrace, lltok.exclaim, (lltok.APSInt, '0'), lltok.comma, lltok.exclaim, (lltok.APSInt, '1'), lltok.comma, lltok.exclaim, (lltok.APSInt, '2'), lltok.rbrace, (lltok.MetadataVar, 'llvm.ident'), lltok.equal, lltok.exclaim, lltok.lbrace, lltok.exclaim, (lltok.APSInt, '3'), lltok.rbrace, lltok.exclaim, (lltok.APSInt, '0'), lltok.equal, lltok.exclaim, lltok.lbrace, (lltok.Type, 'i32'), (lltok.APSInt, '2'), lltok.comma, lltok.exclaim, (lltok.StringConstant, 'SDK Version'), lltok.comma, lltok.lsquare, (lltok.APSInt, '2'), lltok.kw_x, (lltok.Type, 'i32'), lltok.rsquare, lltok.lsquare, (lltok.Type, 'i32'), (lltok.APSInt, '10'), lltok.comma, (lltok.Type, 'i32'), (lltok.APSInt, '14'), lltok.rsquare, lltok.rbrace, lltok.exclaim, (lltok.APSInt, '1'), lltok.equal, lltok.exclaim, lltok.lbrace, (lltok.Type, 'i32'), (lltok.APSInt, '1'), lltok.comma, lltok.exclaim, (lltok.StringConstant, 'wchar_size'), lltok.comma, (lltok.Type, 'i32'), (lltok.APSInt, '4'), lltok.rbrace, lltok.exclaim, (lltok.APSInt, '2'), lltok.equal, lltok.exclaim, lltok.lbrace, (lltok.Type, 'i32'), (lltok.APSInt, '7'), lltok.comma, lltok.exclaim, (lltok.StringConstant, 'PIC Level'), lltok.comma, (lltok.Type, 'i32'), (lltok.APSInt, '2'), lltok.rbrace, lltok.exclaim, (lltok.APSInt, '3'), lltok.equal, lltok.exclaim, lltok.lbrace, lltok.exclaim, (lltok.StringConstant, 'Apple LLVM version 10.0.1 (clang-1001.0.46.4)'), lltok.rbrace, lltok.Eof]
168
hello world
