def test_basic ( self ) : NEW_LINE INDENT p = Person ( first_name = " John " , last_name = " Smith " ) NEW_LINE self . assertEqual ( p . data , [ ] ) NEW_LINE p . save ( ) NEW_LINE self . assertEqual ( p . data , [ " Before ▁ save " , " After ▁ save " , ] ) NEW_LINE self . assertQuerysetEqual ( Person . objects . all ( ) , [ " John ▁ Smith " , ] , six . text_type ) NEW_LINE p . delete ( ) NEW_LINE self . assertEqual ( p . data , [ " Before ▁ save " , " After ▁ save " , " Before ▁ deletion " , " After ▁ deletion " , ] ) NEW_LINE self . assertQuerysetEqual ( Person . objects . all ( ) , [ ] ) NEW_LINE DEDENT
def get_db_converters ( self , connection ) : NEW_LINE INDENT return [ self . from_db_value ] NEW_LINE DEDENT
def select_format ( self , compiler , sql , params ) : NEW_LINE INDENT return sql , params NEW_LINE DEDENT
def __init__ ( self , area_att ) : NEW_LINE INDENT self . area_att = area_att NEW_LINE DEDENT
def from_db_value ( self , value , expression , connection , context ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT value = Area ( ** { self . area_att : value } ) NEW_LINE DEDENT return value NEW_LINE DEDENT
def get_internal_type ( self ) : NEW_LINE INDENT return ' AreaField ' NEW_LINE DEDENT
def __init__ ( self , distance_att ) : NEW_LINE INDENT self . distance_att = distance_att NEW_LINE DEDENT
def from_db_value ( self , value , expression , connection , context ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT value = Distance ( ** { self . distance_att : value } ) NEW_LINE DEDENT return value NEW_LINE DEDENT
def get_internal_type ( self ) : NEW_LINE INDENT return ' DistanceField ' NEW_LINE DEDENT
def from_db_value ( self , value , expression , connection , context ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT value = Geometry ( value ) NEW_LINE DEDENT return value NEW_LINE DEDENT
def get_internal_type ( self ) : NEW_LINE INDENT return ' GeometryField ' NEW_LINE DEDENT
def get_internal_type ( self ) : NEW_LINE INDENT return ' GMLField ' NEW_LINE DEDENT
def from_db_value ( self , value , expression , connection , context ) : NEW_LINE INDENT return value NEW_LINE DEDENT
def validate_rule ( self , rule , rule_type = None ) : NEW_LINE INDENT ''' STRNEWLINE ▁ Apply ▁ defaults ▁ to ▁ a ▁ rule ▁ dictionary ▁ and ▁ check ▁ that ▁ all ▁ values ▁ are ▁ valid . STRNEWLINE STRNEWLINE ▁ : param ▁ rule : ▁ rule ▁ dict STRNEWLINE ▁ : param ▁ rule _ type : ▁ Set ▁ to ▁ ' default ' ▁ if ▁ the ▁ rule ▁ is ▁ part ▁ of ▁ the ▁ default ▁ set ▁ of ▁ rules . STRNEWLINE ▁ : return : ▁ None STRNEWLINE ▁ ''' NEW_LINE priority = rule . get ( ' priority ' , 0 ) NEW_LINE if rule_type != ' default ' and ( priority < 100 or priority > 4096 ) : NEW_LINE INDENT raise Exception ( " Rule ▁ priority ▁ must ▁ be ▁ between ▁ 100 ▁ and ▁ 4096" ) NEW_LINE DEDENT def check_plural ( src , dest ) : NEW_LINE INDENT if isinstance ( rule . get ( src ) , list ) : NEW_LINE INDENT rule [ dest ] = rule [ src ] NEW_LINE rule [ src ] = None NEW_LINE DEDENT DEDENT check_plural ( ' destination _ address _ prefix ' , ' destination _ address _ prefixes ' ) NEW_LINE check_plural ( ' source _ address _ prefix ' , ' source _ address _ prefixes ' ) NEW_LINE check_plural ( ' source _ port _ range ' , ' source _ port _ ranges ' ) NEW_LINE check_plural ( ' destination _ port _ range ' , ' destination _ port _ ranges ' ) NEW_LINE DEDENT
def create_rule_instance ( self , rule ) : NEW_LINE INDENT ''' STRNEWLINE ▁ Create ▁ an ▁ instance ▁ of ▁ SecurityRule ▁ from ▁ a ▁ dict . STRNEWLINE STRNEWLINE ▁ : param ▁ rule : ▁ dict STRNEWLINE ▁ : return : ▁ SecurityRule STRNEWLINE ▁ ''' NEW_LINE return self . nsg_models . SecurityRule ( description = rule . get ( ' description ' , None ) , protocol = rule . get ( ' protocol ' , None ) , source_port_range = rule . get ( ' source _ port _ range ' , None ) , destination_port_range = rule . get ( ' destination _ port _ range ' , None ) , source_address_prefix = rule . get ( ' source _ address _ prefix ' , None ) , source_address_prefixes = rule . get ( ' source _ address _ prefixes ' , None ) , destination_address_prefix = rule . get ( ' destination _ address _ prefix ' , None ) , destination_address_prefixes = rule . get ( ' destination _ address _ prefixes ' , None ) , source_port_ranges = rule . get ( ' source _ port _ ranges ' , None ) , destination_port_ranges = rule . get ( ' destination _ port _ ranges ' , None ) , access = rule . get ( ' access ' , None ) , priority = rule . get ( ' priority ' , None ) , direction = rule . get ( ' direction ' , None ) , provisioning_state = rule . get ( ' provisioning _ state ' , None ) , name = rule . get ( ' name ' , None ) , etag = rule . get ( ' etag ' , None ) ) NEW_LINE DEDENT
def __init__ ( self ) : NEW_LINE INDENT self . module_arg_spec = dict ( default_rules = dict ( type = ' list ' , elements = ' dict ' , options = rule_spec ) , location = dict ( type = ' str ' ) , name = dict ( type = ' str ' , required = True ) , purge_default_rules = dict ( type = ' bool ' , default = False ) , purge_rules = dict ( type = ' bool ' , default = False ) , resource_group = dict ( required = True , type = ' str ' ) , rules = dict ( type = ' list ' , elements = ' dict ' , options = rule_spec ) , state = dict ( type = ' str ' , default = ' present ' , choices = [ ' present ' , ' absent ' ] ) , ) NEW_LINE self . default_rules = None NEW_LINE self . location = None NEW_LINE self . name = None NEW_LINE self . purge_default_rules = None NEW_LINE self . purge_rules = None NEW_LINE self . resource_group = None NEW_LINE self . rules = None NEW_LINE self . state = None NEW_LINE self . tags = None NEW_LINE self . nsg_models = None # ▁ type : ▁ azure . mgmt . network . models ENDCOM NEW_LINE self . results = dict ( changed = False , state = dict ( ) ) NEW_LINE super ( AzureRMSecurityGroup , self ) . __init__ ( self . module_arg_spec , supports_check_mode = True ) NEW_LINE DEDENT
def create_or_update ( self , results ) : NEW_LINE INDENT parameters = self . nsg_models . NetworkSecurityGroup ( ) NEW_LINE if results . get ( ' rules ' ) : NEW_LINE INDENT parameters . security_rules = [ ] NEW_LINE for rule in results . get ( ' rules ' ) : NEW_LINE INDENT parameters . security_rules . append ( create_rule_instance ( self , rule ) ) NEW_LINE DEDENT DEDENT if results . get ( ' default _ rules ' ) : NEW_LINE INDENT parameters . default_security_rules = [ ] NEW_LINE for rule in results . get ( ' default _ rules ' ) : NEW_LINE INDENT parameters . default_security_rules . append ( create_rule_instance ( self , rule ) ) NEW_LINE DEDENT DEDENT parameters . tags = results . get ( ' tags ' ) NEW_LINE parameters . location = results . get ( ' location ' ) NEW_LINE try : NEW_LINE INDENT poller = self . network_client . network_security_groups . create_or_update ( resource_group_name = self . resource_group , network_security_group_name = self . name , parameters = parameters ) NEW_LINE result = self . get_poller_result ( poller ) NEW_LINE DEDENT except CloudError as exc : NEW_LINE INDENT self . fail ( " Error ▁ creating / updating ▁ security ▁ group ▁ { 0 } ▁ - ▁ { 1 } " . format ( self . name , str ( exc ) ) ) NEW_LINE DEDENT return create_network_security_group_dict ( result ) NEW_LINE DEDENT
def delete ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT poller = self . network_client . network_security_groups . delete ( resource_group_name = self . resource_group , network_security_group_name = self . name ) NEW_LINE result = self . get_poller_result ( poller ) NEW_LINE DEDENT except CloudError as exc : NEW_LINE INDENT raise Exception ( " Error ▁ deleting ▁ security ▁ group ▁ { 0 } ▁ - ▁ { 1 } " . format ( self . name , str ( exc ) ) ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def __init__ ( self , home : AsyncHome , device ) -> None : NEW_LINE INDENT """ Initialize ▁ the ▁ weather ▁ sensor . """ NEW_LINE super ( ) . __init__ ( home , device ) NEW_LINE DEDENT
def name ( self ) -> str : NEW_LINE INDENT """ Return ▁ the ▁ name ▁ of ▁ the ▁ sensor . """ NEW_LINE return self . _device . label NEW_LINE DEDENT
def temperature ( self ) -> float : NEW_LINE INDENT """ Return ▁ the ▁ platform ▁ temperature . """ NEW_LINE return self . _device . actualTemperature NEW_LINE DEDENT
def temperature_unit ( self ) -> str : NEW_LINE INDENT """ Return ▁ the ▁ unit ▁ of ▁ measurement . """ NEW_LINE return TEMP_CELSIUS NEW_LINE DEDENT
def humidity ( self ) -> int : NEW_LINE INDENT """ Return ▁ the ▁ humidity . """ NEW_LINE return self . _device . humidity NEW_LINE DEDENT
def wind_speed ( self ) -> float : NEW_LINE INDENT """ Return ▁ the ▁ wind ▁ speed . """ NEW_LINE return self . _device . windSpeed NEW_LINE DEDENT
def attribution ( self ) -> str : NEW_LINE INDENT """ Return ▁ the ▁ attribution . """ NEW_LINE return " Powered ▁ by ▁ Homematic ▁ IP " NEW_LINE DEDENT
def condition ( self ) -> str : NEW_LINE INDENT """ Return ▁ the ▁ current ▁ condition . """ NEW_LINE if hasattr ( self . _device , " raining " ) and self . _device . raining : NEW_LINE INDENT return ' rainy ' NEW_LINE DEDENT if self . _device . storm : NEW_LINE INDENT return ' windy ' NEW_LINE DEDENT if self . _device . sunshine : NEW_LINE INDENT return ' sunny ' NEW_LINE DEDENT return ' ' NEW_LINE DEDENT
def wind_bearing ( self ) -> float : NEW_LINE INDENT """ Return ▁ the ▁ wind ▁ bearing . """ NEW_LINE return self . _device . windDirection NEW_LINE DEDENT
def __init__ ( self , type , occurrence ) : NEW_LINE INDENT self . type = type NEW_LINE self . occurrence = occurrence NEW_LINE DEDENT
def is_enum ( self ) : NEW_LINE INDENT return self . type in predefined_enums or self . type in enums_by_name NEW_LINE DEDENT
def is_object ( self ) : NEW_LINE INDENT return self . type in predefined_objects or self . type in objects_by_name NEW_LINE DEDENT
def is_type_generated ( self ) : NEW_LINE INDENT return self . type in enums_by_name or self . type in objects_by_name NEW_LINE DEDENT
def get_occurrence_comment ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__REQUIRED_ITEM : NEW_LINE INDENT return " / * ▁ required ▁ * / " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__REQUIRED_LIST : NEW_LINE INDENT return " / * ▁ required , ▁ list ▁ * / " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__OPTIONAL_ITEM : NEW_LINE INDENT return " / * ▁ optional ▁ * / " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__OPTIONAL_LIST : NEW_LINE INDENT return " / * ▁ optional , ▁ list ▁ * / " NEW_LINE DEDENT raise ValueError ( " unknown ▁ occurrence ▁ value ▁ ' % s ' " % self . occurrence ) NEW_LINE DEDENT
def __init__ ( self , type , name , occurrence ) : NEW_LINE INDENT Member . __init__ ( self , type , occurrence ) NEW_LINE if ' : ' in name and name . startswith ( " _ this " ) : NEW_LINE INDENT self . name , self . autobind_name = name . split ( " : " ) NEW_LINE DEDENT else : NEW_LINE INDENT self . name = name NEW_LINE self . autobind_name = None NEW_LINE DEDENT DEDENT
def generate_parameter ( self , is_last = False , is_header = True , offset = 0 ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT raise ValueError ( " invalid ▁ function ▁ parameter ▁ occurrence ▁ value ▁ ' % s ' " % self . occurrence ) NEW_LINE DEDENT elif self . autobind_name is not None : NEW_LINE INDENT return " " NEW_LINE DEDENT else : NEW_LINE INDENT string = " ▁ ▁ ▁ ▁ ▁ ▁ ▁ " NEW_LINE string += " ▁ " * offset NEW_LINE string += " % s % s " % ( self . get_type_string ( ) , self . name ) NEW_LINE if is_last : NEW_LINE INDENT if is_header : NEW_LINE INDENT string += " ) ; ▁ " NEW_LINE DEDENT else : NEW_LINE INDENT string += " ) , ▁ " NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT string += " , ▁ " NEW_LINE DEDENT return aligned ( string , self . get_occurrence_comment ( ) + " \n " ) NEW_LINE DEDENT DEDENT
def generate_return ( self , offset = 0 , end_of_line = " ; " ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT raise ValueError ( " invalid ▁ function ▁ parameter ▁ occurrence ▁ value ▁ ' % s ' " % self . occurrence ) NEW_LINE DEDENT else : NEW_LINE INDENT string = " ▁ ▁ ▁ ▁ ▁ ▁ ▁ " NEW_LINE string += " ▁ " * offset NEW_LINE string += " % s % s ) % s " % ( self . get_type_string ( True ) , self . name , end_of_line ) NEW_LINE return aligned ( string , self . get_occurrence_comment ( ) + " \n " ) NEW_LINE DEDENT DEDENT
def generate_require_code ( self ) : NEW_LINE INDENT if self . occurrence in [ OCCURRENCE__REQUIRED_ITEM , OCCURRENCE__REQUIRED_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ METHOD _ _ PARAMETER _ _ REQUIRE ( % s ) \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
def generate_serialize_code ( self ) : NEW_LINE INDENT if self . occurrence in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ METHOD _ _ PARAMETER _ _ SERIALIZE _ LIST ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT elif self . type == " String " : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ METHOD _ _ PARAMETER _ _ SERIALIZE _ VALUE ( String , ▁ % s ) \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ METHOD _ _ PARAMETER _ _ SERIALIZE ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT
def get_type_string ( self , as_return_value = False ) : NEW_LINE INDENT string = " " NEW_LINE if self . type == " String " and self . occurrence not in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT if as_return_value : NEW_LINE INDENT string += " char ▁ * " NEW_LINE DEDENT else : NEW_LINE INDENT string += " const ▁ char ▁ * " NEW_LINE DEDENT DEDENT elif self . is_enum ( ) : NEW_LINE INDENT string += " esxVI _ % s ▁ " % self . type NEW_LINE DEDENT else : NEW_LINE INDENT string += " esxVI _ % s ▁ * " % self . type NEW_LINE DEDENT if as_return_value : NEW_LINE INDENT string += " * " NEW_LINE DEDENT return string NEW_LINE DEDENT
def get_occurrence_short_enum ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__REQUIRED_ITEM : NEW_LINE INDENT return " RequiredItem " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__REQUIRED_LIST : NEW_LINE INDENT return " RequiredList " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__OPTIONAL_ITEM : NEW_LINE INDENT return " OptionalItem " NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__OPTIONAL_LIST : NEW_LINE INDENT return " OptionalList " NEW_LINE DEDENT raise ValueError ( " unknown ▁ occurrence ▁ value ▁ ' % s ' " % self . occurrence ) NEW_LINE DEDENT
def __init__ ( self , name , parameters , returns ) : NEW_LINE INDENT self . name = name NEW_LINE self . parameters = [ ] NEW_LINE self . autobind_parameter = None NEW_LINE self . returns = returns NEW_LINE for parameter in parameters : NEW_LINE INDENT if parameter . autobind_name is None : NEW_LINE INDENT self . parameters . append ( parameter ) NEW_LINE DEDENT else : NEW_LINE INDENT self . autobind_parameter = parameter NEW_LINE DEDENT DEDENT DEDENT
def generate_header ( self ) : NEW_LINE INDENT header = " int ▁ esxVI _ % s \n " % self . name NEW_LINE header += " ▁ ▁ ▁ ▁ ▁ ▁ ( esxVI _ Context ▁ * ctx " NEW_LINE if len ( self . parameters ) > 0 or self . returns is not None : NEW_LINE INDENT header += " , \n " NEW_LINE for parameter in self . parameters [ : - 1 ] : NEW_LINE INDENT header += parameter . generate_parameter ( ) NEW_LINE DEDENT if self . returns is None : NEW_LINE INDENT header += self . parameters [ - 1 ] . generate_parameter ( is_last = True ) NEW_LINE DEDENT else : NEW_LINE INDENT header += self . parameters [ - 1 ] . generate_parameter ( ) NEW_LINE header += self . returns . generate_return ( ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT header += " ) ; \n " NEW_LINE DEDENT header += " \n " NEW_LINE return header NEW_LINE DEDENT
def generate_source ( self ) : NEW_LINE INDENT source = " / * ▁ esxVI _ % s ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ METHOD ( % s , " % self . name NEW_LINE if self . autobind_parameter is not None : NEW_LINE INDENT autobind_names . add ( self . autobind_parameter . autobind_name ) NEW_LINE source += " ▁ % s , \n " % self . autobind_parameter . autobind_name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ / * ▁ explicit ▁ _ this ▁ * / , \n " NEW_LINE DEDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ( esxVI _ Context ▁ * ctx " NEW_LINE if len ( self . parameters ) > 0 or self . returns is not None : NEW_LINE INDENT source += " , \n " NEW_LINE for parameter in self . parameters [ : - 1 ] : NEW_LINE INDENT source += parameter . generate_parameter ( is_header = False , offset = 9 ) NEW_LINE DEDENT if self . returns is None : NEW_LINE INDENT source += self . parameters [ - 1 ] . generate_parameter ( is_last = True , is_header = False , offset = 9 ) NEW_LINE DEDENT else : NEW_LINE INDENT source += self . parameters [ - 1 ] . generate_parameter ( is_header = False , offset = 9 ) NEW_LINE source += self . returns . generate_return ( offset = 9 , end_of_line = " , " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT source += " ) , \n " NEW_LINE DEDENT if self . returns is None : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ void , ▁ / * ▁ nothing ▁ * / , ▁ None , \n " NEW_LINE DEDENT elif self . returns . type == " String " : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ String , ▁ Value , ▁ % s , \n " % self . returns . get_occurrence_short_enum ( ) NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ % s , ▁ / * ▁ nothing ▁ * / , ▁ % s , \n " % ( self . returns . type , self . returns . get_occurrence_short_enum ( ) ) NEW_LINE DEDENT source += " { \n " NEW_LINE if self . autobind_parameter is not None : NEW_LINE INDENT source += self . autobind_parameter . generate_require_code ( ) NEW_LINE DEDENT for parameter in self . parameters : NEW_LINE INDENT source += parameter . generate_require_code ( ) NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE if self . autobind_parameter is not None : NEW_LINE INDENT source += self . autobind_parameter . generate_serialize_code ( ) NEW_LINE DEDENT for parameter in self . parameters : NEW_LINE INDENT source += parameter . generate_serialize_code ( ) NEW_LINE DEDENT source += " } ) \n \n \n \n " NEW_LINE return source NEW_LINE DEDENT
def __init__ ( self , type , name , occurrence ) : NEW_LINE INDENT Member . __init__ ( self , type , occurrence ) NEW_LINE self . name = name NEW_LINE DEDENT
def generate_struct_member ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ / * ▁ FIXME : ▁ % s ▁ is ▁ currently ▁ ignored ▁ * / \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT string = " ▁ ▁ ▁ ▁ % s % s ; ▁ " % ( self . get_type_string ( ) , self . name ) NEW_LINE return aligned ( string , self . get_occurrence_comment ( ) + " \n " ) NEW_LINE DEDENT DEDENT
def generate_free_code ( self ) : NEW_LINE INDENT if self . type == " String " and self . occurrence not in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST , OCCURRENCE__IGNORED ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ VIR _ FREE ( item - > % s ) ; \n " % self . name NEW_LINE DEDENT elif self . is_enum ( ) : NEW_LINE INDENT return " " NEW_LINE DEDENT else : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ / * ▁ FIXME : ▁ % s ▁ is ▁ currently ▁ ignored ▁ * / \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & item - > % s ) ; \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT DEDENT
def generate_validate_code ( self , managed = False ) : NEW_LINE INDENT if managed : NEW_LINE INDENT macro = " ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ MANAGED _ REQUIRE " NEW_LINE DEDENT else : NEW_LINE INDENT macro = " ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ REQUIRE " NEW_LINE DEDENT if self . occurrence in [ OCCURRENCE__REQUIRED_ITEM , OCCURRENCE__REQUIRED_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ % s ( % s ) \n " % ( macro , self . name ) NEW_LINE DEDENT elif self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ / * ▁ FIXME : ▁ % s ▁ is ▁ currently ▁ ignored ▁ * / \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
def generate_deep_copy_code ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ / * ▁ FIXME : ▁ % s ▁ is ▁ currently ▁ ignored ▁ * / \n " % self . name NEW_LINE DEDENT elif self . occurrence in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DEEP _ COPY _ LIST ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT elif self . type == " String " : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DEEP _ COPY _ VALUE ( String , ▁ % s ) \n " % self . name NEW_LINE DEDENT elif self . is_enum ( ) : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ( * dest ) - > % s ▁ = ▁ src - > % s ; \n " % ( self . name , self . name ) NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DEEP _ COPY ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT
def generate_serialize_code ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ / * ▁ FIXME : ▁ % s ▁ is ▁ currently ▁ ignored ▁ * / \n " % self . name NEW_LINE DEDENT elif self . occurrence in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ SERIALIZE _ LIST ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT elif self . type == " String " : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ SERIALIZE _ VALUE ( String , ▁ % s ) \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ SERIALIZE ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT
def generate_deserialize_code ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DESERIALIZE _ IGNORE ( % s ) ▁ / * ▁ FIXME ▁ * / \n " % self . name NEW_LINE DEDENT elif self . occurrence in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DESERIALIZE _ LIST ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT elif self . type == " String " : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DESERIALIZE _ VALUE ( String , ▁ % s ) \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ DESERIALIZE ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT
def generate_lookup_code ( self ) : NEW_LINE INDENT if self . occurrence == OCCURRENCE__IGNORED : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ CAST _ FROM _ ANY _ TYPE _ IGNORE ( % s ) ▁ / * ▁ FIXME ▁ * / \n " % self . name NEW_LINE DEDENT elif self . occurrence in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ CAST _ LIST _ FROM _ ANY _ TYPE ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT elif self . type == " String " : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ CAST _ VALUE _ FROM _ ANY _ TYPE ( String , ▁ % s ) \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ PROPERTY _ _ CAST _ FROM _ ANY _ TYPE ( % s , ▁ % s ) \n " % ( self . type , self . name ) NEW_LINE DEDENT DEDENT
def get_type_string ( self ) : NEW_LINE INDENT if self . type == " String " and self . occurrence not in [ OCCURRENCE__REQUIRED_LIST , OCCURRENCE__OPTIONAL_LIST ] : NEW_LINE INDENT return " char ▁ * " NEW_LINE DEDENT elif self . is_enum ( ) : NEW_LINE INDENT return " esxVI _ % s ▁ " % self . type NEW_LINE DEDENT else : NEW_LINE INDENT return " esxVI _ % s ▁ * " % self . type NEW_LINE DEDENT DEDENT
def __init__ ( self , kind , name ) : NEW_LINE INDENT self . kind = kind NEW_LINE self . name = name NEW_LINE DEDENT
def generate_typedef ( self ) : NEW_LINE INDENT return " typedef ▁ % s ▁ _ esxVI _ % s ▁ esxVI _ % s ; \n " % ( self . kind , self . name , self . name ) NEW_LINE DEDENT
def generate_typeenum ( self ) : NEW_LINE INDENT return " ▁ ▁ ▁ ▁ esxVI _ Type _ % s , \n " % self . name NEW_LINE DEDENT
def generate_typetostring ( self ) : NEW_LINE INDENT string = " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ case ▁ esxVI _ Type _ % s : \n " % self . name NEW_LINE string += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ return ▁ \ " % s\ " ; \n \n " % self . name NEW_LINE return string NEW_LINE DEDENT
def generate_typefromstring ( self ) : NEW_LINE INDENT string = " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ else ▁ if ▁ ( STREQ ( type , ▁ \ " % s\ " ) ) ▁ { \n " % self . name NEW_LINE string += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ return ▁ esxVI _ Type _ % s ; \n " % self . name NEW_LINE string += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ } \n " NEW_LINE return string NEW_LINE DEDENT
def __init__ ( self , name , extends , properties , features = 0 , extended_by = None ) : NEW_LINE INDENT Type . __init__ ( self , " struct " , name ) NEW_LINE self . extends = extends NEW_LINE self . features = features NEW_LINE self . properties = properties NEW_LINE self . extended_by = extended_by NEW_LINE self . candidate_for_dynamic_cast = False NEW_LINE if self . extended_by is not None : NEW_LINE INDENT self . extended_by . sort ( ) NEW_LINE DEDENT DEDENT
def generate_struct_members ( self , add_banner = False , struct_gap = False ) : NEW_LINE INDENT members = " " NEW_LINE if struct_gap : NEW_LINE INDENT members += " \n " NEW_LINE DEDENT if self . extends is not None : NEW_LINE INDENT members += objects_by_name [ self . extends ] . generate_struct_members ( add_banner = True , struct_gap = False ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT members += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT for property in self . properties : NEW_LINE INDENT members += property . generate_struct_member ( ) NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT members += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT return members NEW_LINE DEDENT
def generate_free_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += objects_by_name [ self . extends ] . generate_free_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_free_code ( ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ to ▁ be ▁ freed ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_validate_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += objects_by_name [ self . extends ] . generate_validate_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_validate_code ( ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ required ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_dynamic_cast_code ( self , is_first = True ) : NEW_LINE INDENT source = " " NEW_LINE if self . extended_by is not None : NEW_LINE INDENT if not is_first : NEW_LINE INDENT source += " \n " NEW_LINE DEDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ CAST _ _ ACCEPT ( % s ) \n " % extended_by NEW_LINE DEDENT for extended_by in self . extended_by : NEW_LINE INDENT source += objects_by_name [ extended_by ] . generate_dynamic_cast_code ( False ) NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_deep_copy_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += objects_by_name [ self . extends ] . generate_deep_copy_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_deep_copy_code ( ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ to ▁ be ▁ deep ▁ copied ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_serialize_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += objects_by_name [ self . extends ] . generate_serialize_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT for property in self . properties : NEW_LINE INDENT source += property . generate_serialize_code ( ) NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_deserialize_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += objects_by_name [ self . extends ] . generate_deserialize_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT for property in self . properties : NEW_LINE INDENT source += property . generate_deserialize_code ( ) NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_header ( self ) : NEW_LINE INDENT header = separator NEW_LINE header += " ▁ * ▁ VI ▁ Object : ▁ % s \n " % self . name NEW_LINE if self . extends is not None : NEW_LINE INDENT header += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extends ▁ % s \n " % self . extends NEW_LINE DEDENT first = True NEW_LINE if self . extended_by is not None : NEW_LINE INDENT for extended_by in self . extended_by : NEW_LINE INDENT if first : NEW_LINE INDENT header += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extended ▁ by ▁ % s \n " % extended_by NEW_LINE first = False NEW_LINE DEDENT else : NEW_LINE INDENT header += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ % s \n " % extended_by NEW_LINE DEDENT DEDENT DEDENT header += " ▁ * / \n \n " NEW_LINE # ▁ struct ENDCOM header += " struct ▁ _ esxVI _ % s ▁ { \n " % self . name NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * _ next ; ▁ " % self . name , " / * ▁ optional ▁ * / \n " ) NEW_LINE DEDENT else : NEW_LINE INDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * _ unused ; ▁ " % self . name , " / * ▁ optional ▁ * / \n " ) NEW_LINE DEDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ Type ▁ _ type ; ▁ " , " / * ▁ required ▁ * / \n " ) NEW_LINE header += self . generate_struct_members ( struct_gap = True ) NEW_LINE header += " } ; \n \n " NEW_LINE # ▁ functions ENDCOM header += " int ▁ esxVI _ % s _ Alloc ( esxVI _ % s ▁ * * item ) ; \n " % ( self . name , self . name ) NEW_LINE header += " void ▁ esxVI _ % s _ Free ( esxVI _ % s ▁ * * item ) ; \n " % ( self . name , self . name ) NEW_LINE header += " int ▁ esxVI _ % s _ Validate ( esxVI _ % s ▁ * item ) ; \n " % ( self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__DYNAMIC_CAST : NEW_LINE INDENT if self . extended_by is not None or self . extends is not None : NEW_LINE INDENT header += " esxVI _ % s ▁ * esxVI _ % s _ DynamicCast ( void ▁ * item ) ; \n " % ( self . name , self . name ) NEW_LINE DEDENT else : NEW_LINE INDENT report_error ( " cannot ▁ add ▁ dynamic ▁ cast ▁ support ▁ for ▁ an ▁ untyped ▁ object " ) NEW_LINE DEDENT DEDENT if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += " int ▁ esxVI _ % s _ AppendToList ( esxVI _ % s ▁ * * list , ▁ esxVI _ % s ▁ * item ) ; \n " % ( self . name , self . name , self . name ) NEW_LINE DEDENT if self . features & Object . FEATURE__DEEP_COPY : NEW_LINE INDENT header += " int ▁ esxVI _ % s _ DeepCopy ( esxVI _ % s ▁ * * dst , ▁ esxVI _ % s ▁ * src ) ; \n " % ( self . name , self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ DeepCopyList ( esxVI _ % s ▁ * * dstList , ▁ " " esxVI _ % s ▁ * srcList ) ; \n " ) % ( self . name , self . name , self . name ) NEW_LINE DEDENT DEDENT if self . features & Object . FEATURE__ANY_TYPE : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ CastFromAnyType ( esxVI _ AnyType ▁ * anyType , ▁ " " esxVI _ % s ▁ * * item ) ; \n " ) % ( self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ CastListFromAnyType ( esxVI _ AnyType ▁ * anyType , ▁ " " esxVI _ % s ▁ * * list ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT DEDENT if self . features & Object . FEATURE__SERIALIZE : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ Serialize ( esxVI _ % s ▁ * item , ▁ " " const ▁ char ▁ * element , ▁ " " virBufferPtr ▁ output ) ; \n " ) % ( self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ SerializeList ( esxVI _ % s ▁ * list , ▁ " " const ▁ char ▁ * element , ▁ " " virBufferPtr ▁ output ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT DEDENT if self . features & Object . FEATURE__DESERIALIZE : NEW_LINE INDENT header += " int ▁ esxVI _ % s _ Deserialize ( xmlNodePtr ▁ node , ▁ esxVI _ % s ▁ * * item ) ; \n " % ( self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ DeserializeList ( xmlNodePtr ▁ node , ▁ " " esxVI _ % s ▁ * * list ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT DEDENT header += " \n \n \n " NEW_LINE return header NEW_LINE DEDENT
def generate_source ( self ) : NEW_LINE INDENT source = separator NEW_LINE source += " ▁ * ▁ VI ▁ Object : ▁ % s \n " % self . name NEW_LINE if self . extends is not None : NEW_LINE INDENT source += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extends ▁ % s \n " % self . extends NEW_LINE DEDENT first = True NEW_LINE if self . extended_by is not None : NEW_LINE INDENT for extended_by in self . extended_by : NEW_LINE INDENT if first : NEW_LINE INDENT source += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extended ▁ by ▁ % s \n " % extended_by NEW_LINE first = False NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ % s \n " % extended_by NEW_LINE DEDENT DEDENT DEDENT source += " ▁ * / \n \n " NEW_LINE # ▁ functions ENDCOM source += " / * ▁ esxVI _ % s _ Alloc ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ ALLOC ( % s ) \n \n " % self . name NEW_LINE # ▁ free ENDCOM if self . extended_by is None : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Free ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ FREE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT if self . extends is not None : NEW_LINE # ▁ avoid ▁ " dereferencing ▁ type - punned ▁ pointer ▁ will ▁ break ENDCOM # ▁ strict - aliasing ▁ rules " ▁ warnings ENDCOM INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * next ▁ = ▁ ( esxVI _ % s ▁ * ) item - > _ next ; \n \n " % ( self . extends , self . extends ) NEW_LINE source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & next ) ; \n " % self . extends NEW_LINE source += " ▁ ▁ ▁ ▁ item - > _ next ▁ = ▁ ( esxVI _ % s ▁ * ) next ; \n \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & item - > _ next ) ; \n \n " % self . name NEW_LINE DEDENT DEDENT source += self . generate_free_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Free ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ FREE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ FREE ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT if self . extends is not None : NEW_LINE # ▁ avoid ▁ " dereferencing ▁ type - punned ▁ pointer ▁ will ▁ brea ENDCOM # ▁ strict - aliasing ▁ rules " ▁ warnings ENDCOM INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * next ▁ = ▁ ( esxVI _ % s ▁ * ) item - > _ next ; \n \n " % ( self . extends , self . extends ) NEW_LINE source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & next ) ; \n " % self . extends NEW_LINE source += " ▁ ▁ ▁ ▁ item - > _ next ▁ = ▁ ( esxVI _ % s ▁ * ) next ; \n \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & item - > _ next ) ; \n \n " % self . name NEW_LINE DEDENT DEDENT source += self . generate_free_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE # ▁ validate ENDCOM DEDENT source += " / * ▁ esxVI _ % s _ Validate ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ VALIDATE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_validate_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE # ▁ dynamic ▁ cast ENDCOM if self . features & Object . FEATURE__DYNAMIC_CAST : NEW_LINE INDENT if self . extended_by is not None or self . extends is not None : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DynamicCast ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ CAST ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_dynamic_cast_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE DEDENT else : NEW_LINE INDENT report_error ( " cannot ▁ add ▁ dynamic ▁ cast ▁ support ▁ for ▁ an ▁ untyped ▁ object " ) NEW_LINE # ▁ append ▁ to ▁ list ENDCOM DEDENT DEDENT if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ AppendToList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ APPEND ( % s ) \n \n " % self . name NEW_LINE # ▁ deep ▁ copy ENDCOM DEDENT if self . extended_by is None : NEW_LINE INDENT if self . features & Object . FEATURE__DEEP_COPY : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeepCopy ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DEEP _ COPY ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_deep_copy_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeepCopyList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ DEEP _ COPY ( % s ) \n \n " % self . name NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if self . features & Object . FEATURE__DEEP_COPY : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeepCopy ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ DEEP _ COPY ( % s ) \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ DEEP _ COPY ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE source += self . generate_deep_copy_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeepCopyList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ DEEP _ COPY ( % s ) \n \n " % self . name NEW_LINE # ▁ cast ▁ from ▁ any ▁ type ENDCOM DEDENT DEDENT DEDENT if self . features & Object . FEATURE__ANY_TYPE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ CastFromAnyType ▁ * / \n " % self . name NEW_LINE if self . extended_by is None : NEW_LINE INDENT source += " ESX _ VI _ _ TEMPLATE _ _ CAST _ FROM _ ANY _ TYPE ( % s ) \n \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ CAST _ FROM _ ANY _ TYPE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ CAST _ FROM _ ANY _ TYPE ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } ) \n \n " NEW_LINE DEDENT if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ CastListFromAnyType ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ CAST _ FROM _ ANY _ TYPE ( % s ) \n \n " % self . name NEW_LINE # ▁ serialize ENDCOM DEDENT DEDENT if self . extended_by is None : NEW_LINE INDENT if self . features & Object . FEATURE__SERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Serialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ SERIALIZE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_serialize_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ SerializeList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ SERIALIZE ( % s ) \n \n " % self . name NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if self . features & Object . FEATURE__SERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Serialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ SERIALIZE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ SERIALIZE ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE source += self . generate_serialize_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ SerializeList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ SERIALIZE ( % s ) \n \n " % self . name NEW_LINE # ▁ deserialize ENDCOM DEDENT DEDENT DEDENT if self . extended_by is None : NEW_LINE INDENT if self . features & Object . FEATURE__DESERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Deserialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DESERIALIZE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_deserialize_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeserializeList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ DESERIALIZE ( % s ) \n \n " % self . name NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if self . features & Object . FEATURE__DESERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Deserialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ DESERIALIZE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ DESERIALIZE ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE source += self . generate_deserialize_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ DeserializeList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ DESERIALIZE ( % s ) \n \n " % self . name NEW_LINE DEDENT DEDENT DEDENT source += " \n \n " NEW_LINE return source NEW_LINE DEDENT
def __init__ ( self , name , extends , properties , features = 0 , extended_by = None ) : NEW_LINE INDENT Type . __init__ ( self , " struct " , name ) NEW_LINE self . extends = extends NEW_LINE self . features = features NEW_LINE self . properties = properties NEW_LINE self . extended_by = extended_by NEW_LINE if self . extended_by is not None : NEW_LINE INDENT self . extended_by . sort ( ) NEW_LINE DEDENT DEDENT
def generate_struct_members ( self , add_banner = False , struct_gap = False ) : NEW_LINE INDENT members = " " NEW_LINE if struct_gap : NEW_LINE INDENT members += " \n " NEW_LINE DEDENT if self . extends is not None : NEW_LINE INDENT members += managed_objects_by_name [ self . extends ] . generate_struct_members ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT members += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT for property in self . properties : NEW_LINE INDENT members += property . generate_struct_member ( ) NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT members += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT return members NEW_LINE DEDENT
def generate_free_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += managed_objects_by_name [ self . extends ] . generate_free_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_free_code ( ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ to ▁ be ▁ freed ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_validate_code ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += managed_objects_by_name [ self . extends ] . generate_validate_code ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_validate_code ( managed = True ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ required ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_lookup_code1 ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += managed_objects_by_name [ self . extends ] . generate_lookup_code1 ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += " ▁ ▁ ▁ ▁ \ " % s\\0\ " \n " % property . name NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_lookup_code2 ( self , add_banner = False ) : NEW_LINE INDENT source = " " NEW_LINE if self . extends is not None : NEW_LINE INDENT source += managed_objects_by_name [ self . extends ] . generate_lookup_code2 ( add_banner = True ) + " \n " NEW_LINE DEDENT if self . extends is not None or add_banner : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ % s ▁ * / \n " % self . name NEW_LINE DEDENT if len ( self . properties ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT string = " " NEW_LINE for property in self . properties : NEW_LINE INDENT string += property . generate_lookup_code ( ) NEW_LINE DEDENT if len ( string ) < 1 : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ / * ▁ no ▁ properties ▁ * / \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += string NEW_LINE DEDENT DEDENT return source NEW_LINE DEDENT
def generate_comment ( self ) : NEW_LINE INDENT comment = separator NEW_LINE comment += " ▁ * ▁ VI ▁ Managed ▁ Object : ▁ % s \n " % self . name NEW_LINE if self . extends is not None : NEW_LINE INDENT comment += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extends ▁ % s \n " % self . extends NEW_LINE DEDENT first = True NEW_LINE if self . extended_by is not None : NEW_LINE INDENT for extended_by in self . extended_by : NEW_LINE INDENT if first : NEW_LINE INDENT comment += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ extended ▁ by ▁ % s \n " % extended_by NEW_LINE first = False NEW_LINE DEDENT else : NEW_LINE INDENT comment += " ▁ * ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ % s \n " % extended_by NEW_LINE DEDENT DEDENT DEDENT comment += " ▁ * / \n \n " NEW_LINE return comment NEW_LINE DEDENT
def generate_header ( self ) : NEW_LINE INDENT header = self . generate_comment ( ) NEW_LINE # ▁ struct ENDCOM header += " struct ▁ _ esxVI _ % s ▁ { \n " % self . name NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * _ next ; ▁ " % self . name , " / * ▁ optional ▁ * / \n " ) NEW_LINE DEDENT else : NEW_LINE INDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * _ unused ; ▁ " % self . name , " / * ▁ optional ▁ * / \n " ) NEW_LINE DEDENT header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ Type ▁ _ type ; ▁ " , " / * ▁ required ▁ * / \n " ) NEW_LINE header += aligned ( " ▁ ▁ ▁ ▁ esxVI _ ManagedObjectReference ▁ * _ reference ; ▁ " , " / * ▁ required ▁ * / \n " ) NEW_LINE header += " \n " NEW_LINE header += self . generate_struct_members ( ) NEW_LINE header += " } ; \n \n " NEW_LINE # ▁ functions ENDCOM header += " int ▁ esxVI _ % s _ Alloc ( esxVI _ % s ▁ * * item ) ; \n " % ( self . name , self . name ) NEW_LINE header += " void ▁ esxVI _ % s _ Free ( esxVI _ % s ▁ * * item ) ; \n " % ( self . name , self . name ) NEW_LINE header += ( " int ▁ esxVI _ % s _ Validate ( esxVI _ % s ▁ * item , ▁ " " esxVI _ String ▁ * selectedPropertyNameList ) ; \n " ) % ( self . name , self . name ) NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT header += " int ▁ esxVI _ % s _ AppendToList ( esxVI _ % s ▁ * * list , ▁ esxVI _ % s ▁ * item ) ; \n " % ( self . name , self . name , self . name ) NEW_LINE DEDENT header += " \n \n \n " NEW_LINE return header NEW_LINE DEDENT
def generate_helper_header ( self ) : NEW_LINE INDENT header = " " NEW_LINE # ▁ functions ENDCOM header += ( " int ▁ esxVI _ Lookup % s ( esxVI _ Context ▁ * ctx , ▁ " " const ▁ char ▁ * name , ▁ " " esxVI _ ManagedObjectReference ▁ * root , ▁ " " esxVI _ String ▁ * selectedPropertyNameList , ▁ " " esxVI _ % s ▁ * * item , ▁ " " esxVI _ Occurrence ▁ occurrence ) ; \n " ) % ( self . name , self . name ) NEW_LINE header += " \n " NEW_LINE return header NEW_LINE DEDENT
def generate_source ( self ) : NEW_LINE INDENT source = self . generate_comment ( ) NEW_LINE # ▁ functions ENDCOM source += " / * ▁ esxVI _ % s _ Alloc ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ ALLOC ( % s ) \n \n " % self . name NEW_LINE # ▁ free ENDCOM if self . extended_by is None : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Free ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ FREE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE if self . features & ManagedObject . FEATURE__LIST : NEW_LINE INDENT if self . extends is not None : NEW_LINE # ▁ avoid ▁ " dereferencing ▁ type - punned ▁ pointer ▁ will ▁ break ENDCOM # ▁ strict - aliasing ▁ rules " ▁ warnings ENDCOM INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * next ▁ = ▁ ( esxVI _ % s ▁ * ) item - > _ next ; \n \n " % ( self . extends , self . extends ) NEW_LINE source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & next ) ; \n " % self . extends NEW_LINE source += " ▁ ▁ ▁ ▁ item - > _ next ▁ = ▁ ( esxVI _ % s ▁ * ) next ; \n \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & item - > _ next ) ; \n " % self . name NEW_LINE DEDENT DEDENT source += " ▁ ▁ ▁ ▁ esxVI _ ManagedObjectReference _ Free ( & item - > _ reference ) ; \n \n " NEW_LINE source += self . generate_free_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE DEDENT else : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Free ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ DYNAMIC _ FREE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE for extended_by in self . extended_by : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ESX _ VI _ _ TEMPLATE _ _ DISPATCH _ _ FREE ( % s ) \n " % extended_by NEW_LINE DEDENT source += " } , \n " NEW_LINE source += " { \n " NEW_LINE if self . features & Object . FEATURE__LIST : NEW_LINE INDENT if self . extends is not None : NEW_LINE # ▁ avoid ▁ " dereferencing ▁ type - punned ▁ pointer ▁ will ▁ break ENDCOM # ▁ strict - aliasing ▁ rules " ▁ warnings ENDCOM INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s ▁ * next ▁ = ▁ ( esxVI _ % s ▁ * ) item - > _ next ; \n \n " % ( self . extends , self . extends ) NEW_LINE source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & next ) ; \n " % self . extends NEW_LINE source += " ▁ ▁ ▁ ▁ item - > _ next ▁ = ▁ ( esxVI _ % s ▁ * ) next ; \n \n " % self . name NEW_LINE DEDENT else : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ esxVI _ % s _ Free ( & item - > _ next ) ; \n " % self . name NEW_LINE DEDENT DEDENT source += " ▁ ▁ ▁ ▁ esxVI _ ManagedObjectReference _ Free ( & item - > _ reference ) ; \n \n " NEW_LINE source += self . generate_free_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE # ▁ validate ENDCOM DEDENT source += " / * ▁ esxVI _ % s _ Validate ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ MANAGED _ VALIDATE ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_validate_code ( ) NEW_LINE source += " } ) \n \n " NEW_LINE # ▁ append ▁ to ▁ list ENDCOM if self . features & ManagedObject . FEATURE__LIST : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ AppendToList ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LIST _ _ APPEND ( % s ) \n \n " % self . name NEW_LINE DEDENT source += " \n \n " NEW_LINE return source NEW_LINE DEDENT
def generate_helper_source ( self ) : NEW_LINE INDENT source = " " NEW_LINE # ▁ lookup ENDCOM source += " / * ▁ esxVI _ Lookup % s ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ LOOKUP ( % s , \n " % self . name NEW_LINE source += " { \n " NEW_LINE source += self . generate_lookup_code1 ( ) NEW_LINE source += " } , \n " NEW_LINE source += " { \n " NEW_LINE source += self . generate_lookup_code2 ( ) NEW_LINE source += " } ) \n \n " NEW_LINE source += " \n \n " NEW_LINE return source NEW_LINE DEDENT
def __init__ ( self , name , values , features = 0 ) : NEW_LINE INDENT Type . __init__ ( self , " enum " , name ) NEW_LINE self . values = values NEW_LINE self . features = features NEW_LINE DEDENT
def generate_header ( self ) : NEW_LINE INDENT header = separator NEW_LINE header += " ▁ * ▁ VI ▁ Enum : ▁ % s \n " % self . name NEW_LINE header += " ▁ * / \n \n " NEW_LINE # ▁ enum ENDCOM header += " enum ▁ _ esxVI _ % s ▁ { \n " % self . name NEW_LINE header += " ▁ ▁ ▁ ▁ esxVI _ % s _ Undefined ▁ = ▁ 0 , \n " % self . name NEW_LINE for value in self . values : NEW_LINE INDENT header += " ▁ ▁ ▁ ▁ esxVI _ % s _ % s , \n " % ( self . name , capitalize_first ( value ) ) NEW_LINE DEDENT header += " } ; \n \n " NEW_LINE # ▁ functions ENDCOM if self . features & Enum . FEATURE__ANY_TYPE : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ CastFromAnyType ( esxVI _ AnyType ▁ * anyType , ▁ " " esxVI _ % s ▁ * item ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT if self . features & Enum . FEATURE__SERIALIZE : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ Serialize ( esxVI _ % s ▁ item , ▁ const ▁ char ▁ * element , ▁ " " virBufferPtr ▁ output ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT if self . features & Enum . FEATURE__DESERIALIZE : NEW_LINE INDENT header += ( " int ▁ esxVI _ % s _ Deserialize ( xmlNodePtr ▁ node , ▁ " " esxVI _ % s ▁ * item ) ; \n " ) % ( self . name , self . name ) NEW_LINE DEDENT header += " \n \n \n " NEW_LINE return header NEW_LINE DEDENT
def generate_source ( self ) : NEW_LINE INDENT source = separator NEW_LINE source += " ▁ * ▁ VI ▁ Enum : ▁ % s \n " % self . name NEW_LINE source += " ▁ * / \n \n " NEW_LINE source += " static ▁ const ▁ esxVI _ Enumeration ▁ _ esxVI _ % s _ Enumeration ▁ = ▁ { \n " % self . name NEW_LINE source += " ▁ ▁ ▁ ▁ esxVI _ Type _ % s , ▁ { \n " % self . name NEW_LINE for value in self . values : NEW_LINE INDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ { ▁ \ " % s\ " , ▁ esxVI _ % s _ % s ▁ } , \n " % ( value , self . name , capitalize_first ( value ) ) NEW_LINE DEDENT source += " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ { ▁ NULL , ▁ - 1 ▁ } , \n " NEW_LINE source += " ▁ ▁ ▁ ▁ } , \n " NEW_LINE source += " } ; \n \n " NEW_LINE # ▁ functions ENDCOM if self . features & Enum . FEATURE__ANY_TYPE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ CastFromAnyType ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ ENUMERATION _ _ CAST _ FROM _ ANY _ TYPE ( % s ) \n \n " % self . name NEW_LINE DEDENT if self . features & Enum . FEATURE__SERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Serialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ ENUMERATION _ _ SERIALIZE ( % s ) \n \n " % self . name NEW_LINE DEDENT if self . features & Enum . FEATURE__DESERIALIZE : NEW_LINE INDENT source += " / * ▁ esxVI _ % s _ Deserialize ▁ * / \n " % self . name NEW_LINE source += " ESX _ VI _ _ TEMPLATE _ _ ENUMERATION _ _ DESERIALIZE ( % s ) \n \n " % self . name NEW_LINE DEDENT source += " \n \n " NEW_LINE return source NEW_LINE DEDENT
def setUp ( self ) : NEW_LINE INDENT self . maxDiff = None NEW_LINE filename = ' chart _ column04 . xlsx ' NEW_LINE test_dir = ' xlsxwriter / test / comparison / ' NEW_LINE self . got_filename = test_dir + ' _ test _ ' + filename NEW_LINE self . exp_filename = test_dir + ' xlsx _ files / ' + filename NEW_LINE self . ignore_files = [ ] NEW_LINE self . ignore_elements = { ' xl / workbook . xml ' : [ ' < fileVersion ' , ' < calcPr ' ] } NEW_LINE DEDENT
def test_create_file ( self ) : NEW_LINE INDENT """ Test ▁ the ▁ creation ▁ of ▁ a ▁ simple ▁ XlsxWriter ▁ file . """ NEW_LINE workbook = Workbook ( self . got_filename ) NEW_LINE worksheet = workbook . add_worksheet ( ) NEW_LINE chart = workbook . add_chart ( { ' type ' : ' column ' } ) NEW_LINE chart . axis_ids = [ 63591936 , 63593856 ] NEW_LINE chart . axis2_ids = [ 63613568 , 63612032 ] NEW_LINE data = [ [ 1 , 2 , 3 , 4 , 5 ] , [ 6 , 8 , 6 , 4 , 2 ] ] NEW_LINE worksheet . write_column ( ' A1' , data [ 0 ] ) NEW_LINE worksheet . write_column ( ' B1' , data [ 1 ] ) NEW_LINE chart . add_series ( { ' values ' : ' = Sheet1 ! $ A $ 1 : $ A $ 5' } ) NEW_LINE chart . add_series ( { ' values ' : ' = Sheet1 ! $ B $ 1 : $ B $ 5' , ' y2 _ axis ' : 1 } ) NEW_LINE worksheet . insert_chart ( ' E9' , chart ) NEW_LINE workbook . close ( ) NEW_LINE self . assertExcelEqual ( ) NEW_LINE DEDENT
def is_cgi ( self ) : NEW_LINE INDENT if os . path . split ( self . path ) [ 1 ] == ' ' : NEW_LINE INDENT index_php = os . path . join ( self . path , ' index . php ' ) NEW_LINE if os . path . exists ( self . translate_path ( index_php ) ) : NEW_LINE INDENT self . path = index_php NEW_LINE DEDENT DEDENT if self . path . find ( ' . php ' ) != - 1 : NEW_LINE INDENT self . cgi_info = os . path . split ( self . path ) NEW_LINE return True NEW_LINE DEDENT for p in self . cgi_directories : NEW_LINE INDENT p = os . path . join ( p , ' ' ) NEW_LINE if self . path . startswith ( p ) : NEW_LINE INDENT self . cgi_info = os . path . split ( self . path ) NEW_LINE return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
