def is_in_group ( cls , value ) : NEW_LINE INDENT return True NEW_LINE DEDENT
def infix ( bp , func ) : NEW_LINE INDENT """ STRNEWLINE ▁ Creates ▁ an ▁ infix ▁ operator , ▁ given ▁ a ▁ binding ▁ power ▁ and ▁ a ▁ function ▁ that STRNEWLINE ▁ evaluates ▁ the ▁ node STRNEWLINE ▁ """ NEW_LINE class Operator ( TokenBase ) : NEW_LINE INDENT lbp = bp NEW_LINE def led ( self , left , parser ) : NEW_LINE INDENT self . first = left NEW_LINE self . second = parser . expression ( bp ) NEW_LINE return self NEW_LINE DEDENT def eval ( self , context ) : NEW_LINE INDENT try : NEW_LINE INDENT return func ( context , self . first , self . second ) NEW_LINE DEDENT except Exception : NEW_LINE # ▁ Templates ▁ shouldn ' t ▁ throw ▁ exceptions ▁ when ▁ rendering . ▁ We ▁ are ENDCOM # ▁ most ▁ likely ▁ to ▁ get ▁ exceptions ▁ for ▁ things ▁ like ▁ { % ▁ if ▁ foo ▁ in ▁ bar ENDCOM # ▁ % } ▁ where ▁ ' bar ' ▁ does ▁ not ▁ support ▁ ' in ' , ▁ so ▁ default ▁ to ▁ False ENDCOM INDENT return False NEW_LINE DEDENT DEDENT DEDENT return Operator NEW_LINE DEDENT
def prefix ( bp , func ) : NEW_LINE INDENT """ STRNEWLINE ▁ Creates ▁ a ▁ prefix ▁ operator , ▁ given ▁ a ▁ binding ▁ power ▁ and ▁ a ▁ function ▁ that STRNEWLINE ▁ evaluates ▁ the ▁ node . STRNEWLINE ▁ """ NEW_LINE class Operator ( TokenBase ) : NEW_LINE INDENT lbp = bp NEW_LINE def nud ( self , parser ) : NEW_LINE INDENT self . first = parser . expression ( bp ) NEW_LINE self . second = None NEW_LINE return self NEW_LINE DEDENT def eval ( self , context ) : NEW_LINE INDENT try : NEW_LINE INDENT return func ( context , self . first ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return Operator NEW_LINE # ▁ Operator ▁ precedence ▁ follows ▁ Python . ENDCOM # ▁ NB ▁ - ▁ we ▁ can ▁ get ▁ slightly ▁ more ▁ accurate ▁ syntax ▁ error ▁ messages ▁ by ▁ not ▁ using ▁ the ENDCOM # ▁ same ▁ object ▁ for ▁ ' = = ' ▁ and ▁ ' = ' . ENDCOM # ▁ We ▁ defer ▁ variable ▁ evaluation ▁ to ▁ the ▁ lambda ▁ to ▁ ensure ▁ that ▁ terms ▁ are ENDCOM # ▁ lazily ▁ evaluated ▁ using ▁ Python ' s ▁ boolean ▁ parsing ▁ logic . ENDCOM DEDENT
def dup ( * args , ** kw ) : NEW_LINE INDENT """ dup ( integer ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Duplicate ▁ an ▁ integer ▁ socket ▁ file ▁ descriptor . ▁ This ▁ is ▁ like ▁ os . dup ( ) , ▁ but ▁ for STRNEWLINE ▁ sockets ; ▁ on ▁ some ▁ platforms ▁ os . dup ( ) ▁ won ' t ▁ work ▁ for ▁ socket ▁ file ▁ descriptors . """ NEW_LINE pass NEW_LINE DEDENT
def getaddrinfo ( * args , ** kw ) : NEW_LINE INDENT """ getaddrinfo ( host , ▁ port ▁ [ , ▁ family , ▁ socktype , ▁ proto , ▁ flags ] ) ▁ - > ▁ list ▁ of ▁ ( family , ▁ socktype , ▁ proto , ▁ canonname , ▁ sockaddr ) STRNEWLINE ▁ STRNEWLINE ▁ Resolve ▁ host ▁ and ▁ port ▁ into ▁ addrinfo ▁ struct . """ NEW_LINE pass NEW_LINE DEDENT
def getdefaulttimeout ( * args , ** kw ) : NEW_LINE INDENT """ getdefaulttimeout ( ) ▁ - > ▁ timeout ▁ STRNEWLINE ▁ Returns ▁ the ▁ default ▁ timeout ▁ in ▁ seconds ▁ ( float ) ▁ for ▁ new ▁ socket ▁ objects . STRNEWLINE ▁ A ▁ value ▁ of ▁ None ▁ indicates ▁ that ▁ new ▁ socket ▁ objects ▁ have ▁ no ▁ timeout . STRNEWLINE ▁ When ▁ the ▁ socket ▁ module ▁ is ▁ first ▁ imported , ▁ the ▁ default ▁ is ▁ None . """ NEW_LINE pass NEW_LINE DEDENT
def gethostbyaddr ( * args , ** kw ) : NEW_LINE INDENT """ gethostbyaddr ( host ) ▁ - > ▁ ( name , ▁ aliaslist , ▁ addresslist ) ▁ STRNEWLINE ▁ Return ▁ the ▁ true ▁ host ▁ name , ▁ a ▁ list ▁ of ▁ aliases , ▁ and ▁ a ▁ list ▁ of ▁ IP ▁ addresses , STRNEWLINE ▁ for ▁ a ▁ host . ▁ The ▁ host ▁ argument ▁ is ▁ a ▁ string ▁ giving ▁ a ▁ host ▁ name ▁ or ▁ IP ▁ number . """ NEW_LINE pass NEW_LINE DEDENT
def gethostbyname ( * args , ** kw ) : NEW_LINE INDENT """ gethostbyname ( host ) ▁ - > ▁ address ▁ STRNEWLINE ▁ Return ▁ the ▁ IP ▁ address ▁ ( a ▁ string ▁ of ▁ the ▁ form ▁ ' 255.255.255.255 ' ) ▁ for ▁ a ▁ host . """ NEW_LINE pass NEW_LINE DEDENT
def gethostbyname_ex ( * args , ** kw ) : NEW_LINE INDENT """ gethostbyname _ ex ( host ) ▁ - > ▁ ( name , ▁ aliaslist , ▁ addresslist ) ▁ STRNEWLINE ▁ Return ▁ the ▁ true ▁ host ▁ name , ▁ a ▁ list ▁ of ▁ aliases , ▁ and ▁ a ▁ list ▁ of ▁ IP ▁ addresses , STRNEWLINE ▁ for ▁ a ▁ host . ▁ The ▁ host ▁ argument ▁ is ▁ a ▁ string ▁ giving ▁ a ▁ host ▁ name ▁ or ▁ IP ▁ number . """ NEW_LINE pass NEW_LINE DEDENT
def gethostname ( * args , ** kw ) : NEW_LINE INDENT """ gethostname ( ) ▁ - > ▁ string ▁ STRNEWLINE ▁ Return ▁ the ▁ current ▁ host ▁ name . """ NEW_LINE pass NEW_LINE DEDENT
def getnameinfo ( * args , ** kw ) : NEW_LINE INDENT """ getnameinfo ( sockaddr , ▁ flags ) ▁ - - > ▁ ( host , ▁ port ) ▁ STRNEWLINE ▁ Get ▁ host ▁ and ▁ port ▁ for ▁ a ▁ sockaddr . """ NEW_LINE pass NEW_LINE DEDENT
def getprotobyname ( * args , ** kw ) : NEW_LINE INDENT """ getprotobyname ( name ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Return ▁ the ▁ protocol ▁ number ▁ for ▁ the ▁ named ▁ protocol . ▁ ( Rarely ▁ used . ) """ NEW_LINE pass NEW_LINE DEDENT
def getservbyname ( * args , ** kw ) : NEW_LINE INDENT """ getservbyname ( servicename [ , ▁ protocolname ] ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Return ▁ a ▁ port ▁ number ▁ from ▁ a ▁ service ▁ name ▁ and ▁ protocol ▁ name . STRNEWLINE ▁ The ▁ optional ▁ protocol ▁ name , ▁ if ▁ given , ▁ should ▁ be ▁ ' tcp ' ▁ or ▁ ' udp ' , STRNEWLINE ▁ otherwise ▁ any ▁ protocol ▁ will ▁ match . """ NEW_LINE pass NEW_LINE DEDENT
def getservbyport ( * args , ** kw ) : NEW_LINE INDENT """ getservbyport ( port [ , ▁ protocolname ] ) ▁ - > ▁ string ▁ STRNEWLINE ▁ Return ▁ the ▁ service ▁ name ▁ from ▁ a ▁ port ▁ number ▁ and ▁ protocol ▁ name . STRNEWLINE ▁ The ▁ optional ▁ protocol ▁ name , ▁ if ▁ given , ▁ should ▁ be ▁ ' tcp ' ▁ or ▁ ' udp ' , STRNEWLINE ▁ otherwise ▁ any ▁ protocol ▁ will ▁ match . """ NEW_LINE pass NEW_LINE DEDENT
def htonl ( * args , ** kw ) : NEW_LINE INDENT """ htonl ( integer ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Convert ▁ a ▁ 32 - bit ▁ integer ▁ from ▁ host ▁ to ▁ network ▁ byte ▁ order . """ NEW_LINE pass NEW_LINE DEDENT
def htons ( * args , ** kw ) : NEW_LINE INDENT """ htons ( integer ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Convert ▁ a ▁ 16 - bit ▁ integer ▁ from ▁ host ▁ to ▁ network ▁ byte ▁ order . """ NEW_LINE pass NEW_LINE DEDENT
def inet_aton ( * args , ** kw ) : NEW_LINE INDENT """ inet _ aton ( string ) ▁ - > ▁ bytes ▁ giving ▁ packed ▁ 32 - bit ▁ IP ▁ representation ▁ STRNEWLINE ▁ Convert ▁ an ▁ IP ▁ address ▁ in ▁ string ▁ format ▁ ( 123.45.67.89 ) ▁ to ▁ the ▁ 32 - bit ▁ packed STRNEWLINE ▁ binary ▁ format ▁ used ▁ in ▁ low - level ▁ network ▁ functions . """ NEW_LINE pass NEW_LINE DEDENT
def inet_ntoa ( * args , ** kw ) : NEW_LINE INDENT """ inet _ ntoa ( packed _ ip ) ▁ - > ▁ ip _ address _ string ▁ STRNEWLINE ▁ Convert ▁ an ▁ IP ▁ address ▁ from ▁ 32 - bit ▁ packed ▁ binary ▁ format ▁ to ▁ string ▁ format """ NEW_LINE pass NEW_LINE DEDENT
def ntohl ( * args , ** kw ) : NEW_LINE INDENT """ ntohl ( integer ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Convert ▁ a ▁ 32 - bit ▁ integer ▁ from ▁ network ▁ to ▁ host ▁ byte ▁ order . """ NEW_LINE pass NEW_LINE DEDENT
def ntohs ( * args , ** kw ) : NEW_LINE INDENT """ ntohs ( integer ) ▁ - > ▁ integer ▁ STRNEWLINE ▁ Convert ▁ a ▁ 16 - bit ▁ integer ▁ from ▁ network ▁ to ▁ host ▁ byte ▁ order . """ NEW_LINE pass NEW_LINE DEDENT
def setdefaulttimeout ( * args , ** kw ) : NEW_LINE INDENT """ setdefaulttimeout ( timeout ) ▁ STRNEWLINE ▁ Set ▁ the ▁ default ▁ timeout ▁ in ▁ seconds ▁ ( float ) ▁ for ▁ new ▁ socket ▁ objects . STRNEWLINE ▁ A ▁ value ▁ of ▁ None ▁ indicates ▁ that ▁ new ▁ socket ▁ objects ▁ have ▁ no ▁ timeout . STRNEWLINE ▁ When ▁ the ▁ socket ▁ module ▁ is ▁ first ▁ imported , ▁ the ▁ default ▁ is ▁ None . """ NEW_LINE pass NEW_LINE DEDENT
def get_hdfs_client_from_conf ( conf ) : NEW_LINE INDENT """ Returns ▁ a ▁ new ▁ HTTP ▁ client ▁ for ▁ an ▁ HDFS ▁ cluster ▁ using ▁ an ▁ HdfsConfig ▁ object """ NEW_LINE hostport = conf . get ( ' dfs . namenode . http - address ' ) NEW_LINE if hostport is None : NEW_LINE INDENT raise Exception ( " dfs . namenode . http - address ▁ not ▁ found ▁ in ▁ config " ) NEW_LINE DEDENT host , port = hostport . split ( " : " ) NEW_LINE return get_hdfs_client ( host = host , port = port ) NEW_LINE DEDENT
def get_hdfs_client ( host , port , user_name = getpass . getuser ( ) ) : NEW_LINE INDENT """ Returns ▁ a ▁ new ▁ HTTP ▁ client ▁ for ▁ an ▁ HDFS ▁ cluster ▁ using ▁ an ▁ explict ▁ host : port ▁ pair """ NEW_LINE hdfs_client = PyWebHdfsClientWithChmod ( host = host , port = port , user_name = user_name ) NEW_LINE # ▁ Bind ▁ our ▁ " exists " ▁ method ▁ to ▁ hdfs _ client . exists ENDCOM hdfs_client . exists = types . MethodType ( __pyweb_hdfs_client_exists , hdfs_client ) NEW_LINE return hdfs_client NEW_LINE DEDENT
def current ( ) : NEW_LINE INDENT model = LauncherConfig . get ( " amiga _ model " ) NEW_LINE if model . startswith ( " CD32" ) : NEW_LINE INDENT platform = " CD32" NEW_LINE DEDENT elif model == " CDTV " : NEW_LINE INDENT platform = " CDTV " NEW_LINE DEDENT else : NEW_LINE INDENT platform = " Amiga " NEW_LINE DEDENT name = LauncherSettings . get ( " config _ name " ) NEW_LINE uuid = LauncherConfig . get ( " x _ game _ uuid " ) NEW_LINE return GamePaths ( name , platform , uuid ) NEW_LINE DEDENT
def get_override_path ( name ) : NEW_LINE INDENT path = LauncherConfig . get ( name ) NEW_LINE if not path : NEW_LINE INDENT return " " NEW_LINE DEDENT path = Paths . expand_path ( path ) NEW_LINE return path NEW_LINE DEDENT
def get_letter ( name ) : NEW_LINE INDENT letter_name = name . upper ( ) NEW_LINE if letter_name . startswith ( " THE ▁ " ) : NEW_LINE INDENT letter_name = letter_name [ 4 : ] NEW_LINE DEDENT if letter_name . startswith ( " A ▁ " ) : NEW_LINE INDENT letter_name = letter_name [ 2 : ] NEW_LINE DEDENT for i in range ( len ( letter_name ) ) : NEW_LINE INDENT letter = letter_name [ i ] NEW_LINE if letter in "01234567890" : NEW_LINE INDENT letter = "0" NEW_LINE break NEW_LINE DEDENT if letter in " ABCDEFGHIJKLMNOPQRSTUVWXYZ " : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT return letter NEW_LINE DEDENT
