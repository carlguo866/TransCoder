def test_production_log ( ) : NEW_LINE INDENT fm_log = ProductionLog ( context_wrap ( PRODUCTION_LOG ) ) NEW_LINE assert 2 == len ( fm_log . get ( " Rendered ▁ text ▁ template " ) ) NEW_LINE assert " Expired ▁ 48 ▁ Reports " in fm_log NEW_LINE assert fm_log . get ( " Completed ▁ 200 ▁ OK ▁ in ▁ 93" ) [ 0 ] == "2015-11-13 ▁ 09:41:58 ▁ [ I ] ▁ Completed ▁ 200 ▁ OK ▁ in ▁ 93ms ▁ ( Views : ▁ 2.9ms ▁ | ▁ ActiveRecord : ▁ 0.3ms ) " NEW_LINE DEDENT
def test_proxy_log ( ) : NEW_LINE INDENT px_log = ProxyLog ( context_wrap ( PROXY_LOG ) ) NEW_LINE assert " ERROR ▁ - - ▁ " in px_log NEW_LINE assert len ( px_log . get ( " KT _ Encore _ Library _ RHEL " ) ) == 3 NEW_LINE DEDENT
def test_candlepin_log ( ) : NEW_LINE INDENT cp_log = CandlepinLog ( context_wrap ( CANDLEPIN_LOG ) ) NEW_LINE assert " req = 49becd26-5dfe - 4d2f - 8667-470519230d88" in cp_log NEW_LINE assert len ( cp_log . get ( " req = bd5a4284 - d280-4fc5 - a3d5 - fc976b7aa5cc " ) ) == 2 NEW_LINE DEDENT
def test_satellite_log ( ) : NEW_LINE INDENT sat_log = SatelliteLog ( context_wrap ( SATELLITE_OUT ) ) NEW_LINE assert " subscribes ▁ to ▁ Class [ Qpid ] " in sat_log NEW_LINE assert len ( sat_log . get ( " notify : ▁ subscribes ▁ to ▁ Class [ " ) ) == 7 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT update_comments_viewed_timestamp ( ) NEW_LINE DEDENT
def update_comments_viewed_timestamp ( ) : NEW_LINE INDENT users = User . find ( Q ( ' comments _ viewed _ timestamp ' , ' ne ' , None ) & Q ( ' comments _ viewed _ timestamp ' , ' ne ' , { } ) ) NEW_LINE for user in users : NEW_LINE INDENT if user . comments_viewed_timestamp : NEW_LINE INDENT timestamps = { } NEW_LINE for node_id in user . comments_viewed_timestamp : NEW_LINE INDENT node_timestamps = user . comments_viewed_timestamp [ node_id ] NEW_LINE # ▁ node ▁ timestamp ENDCOM if node_timestamps . get ( ' node ' , None ) : NEW_LINE INDENT timestamps [ node_id ] = node_timestamps [ ' node ' ] NEW_LINE # ▁ file ▁ timestamps ENDCOM DEDENT file_timestamps = node_timestamps . get ( ' files ' , None ) NEW_LINE if file_timestamps : NEW_LINE INDENT for file_id in file_timestamps : NEW_LINE INDENT timestamps [ file_id ] = file_timestamps [ file_id ] NEW_LINE DEDENT DEDENT DEDENT user . comments_viewed_timestamp = timestamps NEW_LINE user . save ( ) NEW_LINE logger . info ( ' Migrated ▁ timestamp ▁ for ▁ user ▁ { 0 } ' . format ( user . _id ) ) NEW_LINE DEDENT DEDENT DEDENT
def dist_raw ( v1 , v2 ) : NEW_LINE INDENT delta = v1 - v2 NEW_LINE return sp . linalg . norm ( delta . toarray ( ) ) NEW_LINE DEDENT
def dist_norm ( v1 , v2 ) : NEW_LINE INDENT v1_normalized = v1 / sp . linalg . norm ( v1 . toarray ( ) ) NEW_LINE v2_normalized = v2 / sp . linalg . norm ( v2 . toarray ( ) ) NEW_LINE delta = v1_normalized - v2_normalized NEW_LINE return sp . linalg . norm ( delta . toarray ( ) ) NEW_LINE DEDENT
def upgrade ( migrate_engine ) : NEW_LINE INDENT pass NEW_LINE DEDENT
def _profile_json_to_module_state ( resp_json ) : NEW_LINE INDENT if resp_json [ ' type ' ] == ' error ' : NEW_LINE INDENT return ' absent ' NEW_LINE DEDENT return ' present ' NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT """ Ansible ▁ Main ▁ module . """ NEW_LINE module = AnsibleModule ( argument_spec = dict ( name = dict ( type = ' str ' , required = True ) , new_name = dict ( type = ' str ' , ) , config = dict ( type = ' dict ' , ) , description = dict ( type = ' str ' , ) , devices = dict ( type = ' dict ' , ) , state = dict ( choices = PROFILES_STATES , default = ' present ' ) , url = dict ( type = ' str ' , default = ' unix : / var / lib / lxd / unix . socket ' ) , key_file = dict ( type = ' str ' , default = ' { } / . config / lxc / client . key ' . format ( os . environ [ ' HOME ' ] ) ) , cert_file = dict ( type = ' str ' , default = ' { } / . config / lxc / client . crt ' . format ( os . environ [ ' HOME ' ] ) ) , trust_password = dict ( type = ' str ' , no_log = True ) ) , supports_check_mode = False , ) NEW_LINE lxd_manage = LXDProfileManagement ( module = module ) NEW_LINE lxd_manage . run ( ) NEW_LINE DEDENT
