public static byte [ ] convertObjectToJson@@ Bytes ( Object object ) throws IOException { ObjectMapper mapper = new ObjectMapper ( ) ; mapper . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ; JodaModule module = new JodaModule ( ) ; DateTimeFormatterFactory formatterFactory = new DateTimeFormatterFactory ( ) ; formatterFactory . setIso ( DateTimeFormat . ISO . DATE ) ; module . addSerializer ( DateTime . class , new DateTimeSerializer ( new JacksonJodaFormat ( formatterFactory . createDateTime@@ Formatter ( ) . withZone@@ UTC ( ) ) ) ) ; mapper . registerModule ( module ) ; return mapper . writeValueAs@@ Bytes ( object ) ; }
private static Properties loadBundleProperties ( ) { InputStream stream = null ; try { stream = JcrRepository . class . getClassLoader ( ) . getResourceAsStream ( " org / modeshape / jcr / repository . properties " ) ; assert stream != null ; Properties props = new Properties ( ) ; props . load ( stream ) ; return new UnmodifiableProperties ( props ) ; } catch ( IOException e ) { throw new IllegalStateException ( JcrI18n . failedToRead@@ PropertiesFromMan@@ ifest . text ( e . getLocalizedMessage ( ) ) , e ) ; } finally { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { } finally { stream = null ; } } } }
public static final String getName ( ) { return bundleProperties . getProperty ( " name " ) ; }
public static final String getVendor ( ) { return bundleProperties . getProperty ( " vendor " ) ; }
public static final String getUrl ( ) { return bundleProperties . getProperty ( " url " ) ; }
public static final String getVersion ( ) { return bundleProperties . getProperty ( " version " ) ; }
synchronized static FileLruCache getCache ( Context context ) throws IOException { if ( imageCache == null ) { imageCache = new FileLruCache ( context . getApplicationContext ( ) , TAG , new FileLruCache . Limits ( ) ) ; } return imageCache ; }
static InputStream getCachedImageStream ( URI url , Context context ) { InputStream imageStream = null ; if ( url != null ) { if ( isCDNURL ( url ) ) { try { FileLruCache cache = getCache ( context ) ; imageStream = cache . get ( url . toString ( ) ) ; } catch ( IOException e ) { Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , e . toString ( ) ) ; } } } return imageStream ; }
static InputStream interceptAndCacheImageStream ( Context context , HttpURLConnection connection ) throws IOException { InputStream stream = null ; if ( connection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { URL url = connection . getURL ( ) ; stream = connection . getInputStream ( ) ; try { if ( isCDNURL ( url . toURI ( ) ) ) { FileLruCache cache = getCache ( context ) ; stream = cache . interceptAndPut ( url . toString ( ) , new BufferedHttpInputStream ( stream , connection ) ) ; } } catch ( IOException e ) { } catch ( URISyntaxException e ) { } } return stream ; }
private static boolean isCDNURL ( URI url ) { if ( url != null ) { String uriHost = url . getHost ( ) ; if ( uriHost . endsWith ( " fbcdn . net " ) ) { return true ; } if ( uriHost . startsWith ( " fbcdn " ) && uriHost . endsWith ( " akamaih@@ d . net " ) ) { return true ; } } return false ; }
static void clearCache ( Context context ) { try { getCache ( context ) . clearCache ( ) ; } catch ( IOException e ) { Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , " clearCache ▁ failed ▁ " + e . getMessage ( ) ) ; } }
