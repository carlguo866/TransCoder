public static void main ( String [ ] args ) { I i = Fo@@ o :: foo ; }
synchronized static FileLruCache getCache ( Context context ) throws IOException { if ( imageCache == null ) { imageCache = new FileLruCache ( context . getApplicationContext ( ) , TAG , new FileLruCache . Limits ( ) ) ; } return imageCache ; }
static InputStream getCachedImageStream ( URI url , Context context ) { InputStream imageStream = null ; if ( url != null ) { if ( isCDNURL ( url ) ) { try { FileLruCache cache = getCache ( context ) ; imageStream = cache . get ( url . toString ( ) ) ; } catch ( IOException e ) { Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , e . toString ( ) ) ; } } } return imageStream ; }
static InputStream interceptAndCacheImageStream ( Context context , HttpURLConnection connection ) throws IOException { InputStream stream = null ; if ( connection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { URL url = connection . getURL ( ) ; stream = connection . getInputStream ( ) ; try { if ( isCDNURL ( url . toURI ( ) ) ) { FileLruCache cache = getCache ( context ) ; stream = cache . interceptAndPut ( url . toString ( ) , new BufferedHttpInputStream ( stream , connection ) ) ; } } catch ( IOException e ) { } catch ( URISyntaxException e ) { } } return stream ; }
private static boolean isCDNURL ( URI url ) { if ( url != null ) { String uriHost = url . getHost ( ) ; if ( uriHost . endsWith ( " fbcdn . net " ) ) { return true ; } if ( uriHost . startsWith ( " fbcdn " ) && uriHost . endsWith ( " akamaih@@ d . net " ) ) { return true ; } } return false ; }
static void clearCache ( Context context ) { try { getCache ( context ) . clearCache ( ) ; } catch ( IOException e ) { Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , " clearCache ▁ failed ▁ " + e . getMessage ( ) ) ; } }
@ Before@@ Class public static void init@@ TestData ( ) throws IOException { S@@ ju@@ k@@ fal@@ l@@ In@@ ty@@ g@@ Generator generator = new S@@ ju@@ k@@ fal@@ l@@ In@@ ty@@ g@@ Generator ( LOC@@ ATION_@@ INT@@ Y@@ GS@@ DATA ) ; int@@ y@@ g@@ Data@@ List = generator . generate ( ) . get ( ) ; assertTrue ( " Expected ▁ 16 ▁ bu@@ t ▁ was ▁ " + int@@ y@@ g@@ Data@@ List . size ( ) , int@@ y@@ g@@ Data@@ List . size ( ) == 16 ) ; }
private static void assert@@ Start@@ Date ( S@@ ju@@ k@@ fal@@ l@@ In@@ ty@@ g int@@ y@@ g@@ s@@ Data , String d@@ atu@@ m ) { assertTrue ( int@@ y@@ g@@ s@@ Data . getStart@@ D@@ atu@@ m ( ) . equals ( Local@@ Date . parse ( d@@ atu@@ m ) ) ) ; }
private static void assert@@ End@@ Date ( S@@ ju@@ k@@ fal@@ l@@ In@@ ty@@ g int@@ y@@ g@@ s@@ Data , String d@@ atu@@ m ) { assertTrue ( int@@ y@@ g@@ s@@ Data . get@@ S@@ l@@ ut@@ D@@ atu@@ m ( ) . equals ( Local@@ Date . parse ( d@@ atu@@ m ) ) ) ; }
public static List < ListView@@ Column > getDefault@@ Columns ( ) { return ListView@@ Column . create@@ Default@@ Initial@@ Column@@ List ( ) ; }
