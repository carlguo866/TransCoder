<DOCUMENT_ID="luc@@ afavat@@ ella/intellij-community/tree/master/platform/@@ platform-api/src/com/intellij@@ /openapi/ide/KillRing@@ Transferable.java"> package com . intellij . openapi . ide ; import com . intellij . openapi . editor . Document ; import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ; import java . awt . datatransfer . DataFlavor ; import java . awt . datatransfer . StringSelection ; import java . awt . datatransfer . Transferable ; import java . awt . datatransfer . UnsupportedFlavorException ; import java . io . IOException ; import java . lang . ref . WeakReference ; public class KillRingTransferable implements Transferable { private static final DataFlavor [ ] DATA_FLAVORS = { DataFlavor . stringFlavor } ; private final String myData ; private final WeakReference < Document > myDocument ; private final int myStartOffset ; private final int myEndOffset ; private final boolean myCut ; private volatile boolean myReadyToCombine = true ; public KillRingTransferable ( @ NotNull String data , @ NotNull Document document , int startOffset , int endOffset , boolean cut ) { myData = data ; myDocument = new WeakReference < Document > ( document ) ; myStartOffset = startOffset ; myEndOffset = endOffset ; myCut = cut ; } @ Override public DataFlavor [ ] getTransferDataFlavors ( ) { return DATA_FLAVORS ; } @ Override public boolean isDataFlavorSupported ( DataFlavor flavor ) { return flavor == DataFlavor . stringFlavor ; } @ Nullable @ Override public Object getTransferData ( DataFlavor flavor ) throws UnsupportedFlavorException , IOException { return isDataFlavorSupported ( flavor ) ? myData : null ; } @ Nullable public Document getDocument ( ) { return myDocument . get ( ) ; } public int getStartOffset ( ) { return myStartOffset ; } public int getEndOffset ( ) { return myEndOffset ; } public boolean isCut ( ) { return myCut ; } public boolean isReadyToCombine ( ) { return myReadyToCombine ; } public void setReadyToCombine ( boolean readyToCombine ) { myReadyToCombine = readyToCombine ; } @ Override public String toString ( ) { return " data = ' " + myData + " ' , ▁ startOffset = " + myStartOffset + " , ▁ endOffset = " + myEndOffset + " , ▁ cut = " + myCut ; } } </DOCUMENT>
<DOCUMENT_ID="fitermay/@@ intellij-community/tree/master/plugins/@@ InspectionGad@@ gets/test/com/@@ siyeh/igtest/@@ bugs/MisspelledToStringInsspection@@ .java"> package com . siyeh . igtest . bugs ; public class MisspelledToStringInsspection { private int m_bar ; public MisspelledToStringInsspection ( ) { m_bar = 0 ; } public String tostring ( ) { return String . valueOf ( m_bar == 3 ) ; } } </DOCUMENT>
<DOCUMENT_ID="nu@@ wanw/product-ap@@ im-2015-09-04/tree/master/modules/@@ integration/tests-common/@@ backend-service@@ /src/main/java/org/wso@@ 2/am/integration@@ .services/jaxrs/@@ peoplesample/App@@ Config.java"> package org . wso2 . am . integration . services . jaxrs . peoplesample ; import org . apache . cxf . bus . spring . SpringBus ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . jaxrs . JAXRSServerFactoryBean ; import org . codeha@@ us . jackson . jaxrs . JacksonJsonProvider ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import javax . ws . rs . ext . RuntimeDelegate ; import java . util . Arrays ; @ Configuration public class AppConfig { @ Bean ( destroyMethod = " shutdown " ) public SpringBus cxf ( ) { return new SpringBus ( ) ; } @ Bean public Server jaxRs@@ Server ( ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance ( ) . createEnd@@ point ( jaxRsApiApplication ( ) , JAXRSServerFactoryBean . class ) ; factory . setServiceBeans ( Arrays . < Object > asList ( peopleRestService ( ) ) ) ; factory . setAddress ( " / " + factory . getAddress ( ) ) ; factory . setProviders ( Arrays . < Object > asList ( jsonProvider ( ) ) ) ; return factory . create ( ) ; } @ Bean public JaxRsApiApplication jaxRsApiApplication ( ) { return new JaxRsApiApplication ( ) ; } @ Bean public PeopleRestService peopleRestService ( ) { return new PeopleRestService ( ) ; } @ Bean public PeopleService peopleService ( ) { return new PeopleService ( ) ; } @ Bean public JacksonJsonProvider jsonProvider ( ) { return new JacksonJsonProvider ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="jrver@@ steegh@@ /softsail@@ or/tree/master/deps/swig-2.@@ 0.4/Examples/@@ ruby/java/Example.java"> public class Example { public int mPublicInt ; public Example ( ) { mPublicInt = 0 ; } public Example ( int IntVal ) { mPublicInt = IntVal ; } public int Add ( int a , int b ) { return ( a + b ) ; } public float Add ( float a , float b ) { return ( a + b ) ; } public String Add ( String a , String b ) { return ( a + b ) ; } public Example Add ( Example a , Example b ) { return new Example ( a . mPublicInt + b . mPublicInt ) ; } } </DOCUMENT>
<DOCUMENT_ID="Rachels-@@ Courses/@@ Course-Common@@ -Files/tree/master/STUD@@ ENT_REFERENCE/EXAMPLE_@@ CODE/@@ File IO/Java/@@ OutputCSV@@ /FileOutputter.java"> import java . io . * ; public class FileOutputter { private BufferedWriter m_writer ; private String m_filename ; public static void print ( String filename , String text ) { try { File file = new File ( filename ) ; BufferedWriter bw = new BufferedWriter ( new FileWriter ( file . getAbsoluteFile ( ) , true ) ) ; bw . write ( text ) ; bw . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static void println ( String filename , String text ) { print ( filename , text + " \n " ) ; } public FileOutputter ( ) { m_filename = " default . txt " ; } public FileOutputter ( String filename ) { m_filename = filename ; } public void print ( String text ) { openFile ( m_filename ) ; try { m_writer . write ( text ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } closeFile ( ) ; } public void println ( String text ) { print ( text + " \n " ) ; } private void openFile ( String filename ) { try { File file = new File ( filename ) ; m_writer = new BufferedWriter ( new FileWriter ( file . getAbsoluteFile ( ) , true ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } private void closeFile ( ) { try { m_writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } </DOCUMENT>
<DOCUMENT_ID="qq@@ ming113/hadoop/tree/master/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/dao/TaskAttemptsInfo.java"> package org . apache . hadoop . mapreduce . v2 . app . webapp . dao ; import java . util . ArrayList ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = " taskAttempts " ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TaskAttemptsInfo { protected ArrayList < TaskAttemptInfo > taskAttempt = new ArrayList < TaskAttemptInfo > ( ) ; public TaskAttemptsInfo ( ) { } public void add ( TaskAttemptInfo taskattemptInfo ) { taskAttempt . add ( taskattemptInfo ) ; } public ArrayList < TaskAttemptInfo > getTaskAttempts ( ) { return taskAttempt ; } } </DOCUMENT>
<DOCUMENT_ID="pop@@ str/undertow/tree/master/core/src/main/java/io/undertow@@ /util/CanonicalPath@@ Utils@@ .java"> package io . undertow . util ; import java . util . ArrayList ; import java . util . List ; public class CanonicalPathUtils { public static String canonic@@ alize ( final String path ) { int state = START ; for ( int i = path . length ( ) - 1 ; i >= 0 ; -- i ) { final char c = path . charAt ( i ) ; switch ( c ) { case ' / ' : if ( state == FIRST_SLASH ) { return realCanonicalize ( path , i + 1 , FIRST_SLASH ) ; } else if ( state == ONE_DOT ) { return realCanonicalize ( path , i + 2 , FIRST_SLASH ) ; } else if ( state == TWO_DOT ) { return realCanonicalize ( path , i + 3 , FIRST_SLASH ) ; } state = FIRST_SLASH ; break ; case ' . ' : if ( state == FIRST_SLASH || state == START ) { state = ONE_DOT ; } else if ( state == ONE_DOT ) { state = TWO_DOT ; } else { state = NORMAL ; } break ; default : state = NORMAL ; break ; } } return path ; } static final int START = - 1 ; static final int NORMAL = 0 ; static final int FIRST_SLASH = 1 ; static final int ONE_DOT = 2 ; static final int TWO_DOT = 3 ; private static String realCanonicalize ( final String path , final int lastDot , final int initialState ) { int state = initialState ; int eatCount = 0 ; int tokenEnd = path . length ( ) ; final List < String > parts = new ArrayList < > ( ) ; for ( int i = lastDot - 1 ; i >= 0 ; -- i ) { final char c = path . charAt ( i ) ; switch ( state ) { case NORMAL : { if ( c == ' / ' ) { state = FIRST_SLASH ; if ( eatCount > 0 ) { -- eatCount ; tokenEnd = i ; } } break ; } case FIRST_SLASH : { if ( c == ' . ' ) { state = ONE_DOT ; } else if ( c == ' / ' ) { if ( eatCount > 0 ) { -- eatCount ; tokenEnd = i ; } else { parts . add ( path . substring ( i + 1 , tokenEnd ) ) ; tokenEnd = i ; } } else { state = NORMAL ; } break ; } case ONE_DOT : { if ( c == ' . ' ) { state = TWO_DOT ; } else if ( c == ' / ' ) { if ( i + 2 != tokenEnd ) { parts . add ( path . substring ( i + 2 , tokenEnd ) ) ; } tokenEnd = i ; state = FIRST_SLASH ; } else { state = NORMAL ; } break ; } case TWO_DOT : { if ( c == ' / ' ) { if ( i + 3 != tokenEnd ) { parts . add ( path . substring ( i + 3 , tokenEnd ) ) ; } tokenEnd = i ; eatCount ++ ; state = FIRST_SLASH ; } else { state = NORMAL ; } } } } final StringBuilder result = new StringBuilder ( ) ; if ( tokenEnd != 0 ) { result . append ( path . substring ( 0 , tokenEnd ) ) ; } for ( int i = parts . size ( ) - 1 ; i >= 0 ; -- i ) { result . append ( parts . get ( i ) ) ; } if ( result . length ( ) == 0 ) { return " / " ; } return result . toString ( ) ; } private CanonicalPathUtils ( ) { } } </DOCUMENT>
<DOCUMENT_ID="fore@@ ver342/dubbo@@ /tree/master/dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/BroadcastCluster.java"> package com . alibaba . dubbo . rpc . cluster . support ; import com . alibaba . dubbo . rpc . Invoker ; import com . alibaba . dubbo . rpc . RpcException ; import com . alibaba . dubbo . rpc . cluster . Cluster ; import com . alibaba . dubbo . rpc . cluster . Directory ; public class BroadcastCluster implements Cluster { public < T > Invoker < T > join ( Directory < T > directory ) throws RpcException { return new BroadcastClusterInvoker < T > ( directory ) ; } } </DOCUMENT>
<DOCUMENT_ID="noone@@ hide/Co@@ olW/tree/master/app/src/main/java/bauhini@@ a/cool@@ w/beans/@@ City.java"> package bauhinia . coolw . beans ; import com . lidroid . xutils . db . annotation . Column ; import com . lidroid . xutils . db . annotation . Id ; import com . lidroid . xutils . db . annotation . Table ; @ Table ( name = " city " ) public class City { @ Id ( column = " _ id " ) int id ; @ Column ( column = " province _ name " ) String city_name ; @ Column ( column = " province _ code " ) String city_code ; @ Column ( column = " province _ id " ) int province_id ; public City ( ) { } public City ( String city_name , String city_code , int province_id ) { this . city_name = city_name ; this . city_code = city_code ; this . province_id = province_id ; } public int getProvince_id ( ) { return province_id ; } public void setProvince_id ( int province_id ) { this . province_id = province_id ; } public int getId ( ) { return id ; } public void setId ( int id ) { this . id = id ; } public String getCity_name ( ) { return city_name ; } public void setCity_name ( String city_name ) { this . city_name = city_name ; } public String getCity_code ( ) { return city_code ; } public void setCity_code ( String city_code ) { this . city_code = city_code ; } } </DOCUMENT>
