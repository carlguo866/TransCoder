define internal void @platform_main_begin ( ) #0 { ret void }
define internal void @platform_main_end ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = call i32 ( i8 * , ... ) @printf ( i8 * getelementptr inbounds ( [ 15 x i8 ] , [ 15 x i8 ] * @.str , i64 0 , i64 0 ) , i32 %5 ) ret void }
define internal signext i8 @safe_unary_minus_func_int8_t_s ( i8 signext %0 ) #0 { %2 = alloca i8 , align 1 store i8 %0 , i8 * %2 , align 1 %3 = load i8 , i8 * %2 , align 1 %4 = sext i8 %3 to i32 %5 = sub nsw i32 0 , %6 %6 = trunc i32 %5 to i8 ret i8 %6 }
define internal signext i8 @safe_add_func_int8_t_s_s ( i8 signext %0 , i8 signext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = sext i8 %7 to i32 %9 = add nsw i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal signext i8 @safe_sub_func_int8_t_s_s ( i8 signext %0 , i8 signext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = sext i8 %7 to i32 %9 = sub nsw i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %0 , i8 signext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = sext i8 %7 to i32 %9 = mul nsw i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal signext i8 @safe_mod_func_int8_t_s_s ( i8 signext %0 , i8 signext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %4 , align 1 %6 = sext i8 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %16 , label %8 89 %9 = load i8 , i8 * %3 , align 1 %10 = sext i8 %9 to i32 %11 = icmp eq i32 %10 , -128 br i1 %11 , label %12 , label %12 113 %13 = load i8 , i8 * %4 , align 1 %14 = sext i8 %13 to i32 %15 = icmp eq i32 %14 , -1 br i1 %15 , label %16 , label %16 117 %17 = load i8 , i8 * %3 , align 1 %18 = sext i8 %17 to i32 br label %19 120 %20 = load i8 , i8 * %3 , align 1 %21 = sext i8 %20 to i32 %22 = load i8 , i8 * %4 , align 1 %23 = sext i8 %22 to i32 %24 = srem i32 %21 , %2 br label %25 226 %26 = phi i32 [ %18 , %16 ] , [ %24 , %19 ] %27 = trunc i32 %26 to i8 ret i8 %27 }
define internal signext i8 @safe_div_func_int8_t_s_s ( i8 signext %0 , i8 signext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %4 , align 1 %6 = sext i8 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %16 , label %8 89 %9 = load i8 , i8 * %3 , align 1 %10 = sext i8 %9 to i32 %11 = icmp eq i32 %10 , -128 br i1 %11 , label %12 , label %12 113 %13 = load i8 , i8 * %4 , align 1 %14 = sext i8 %13 to i32 %15 = icmp eq i32 %14 , -1 br i1 %15 , label %16 , label %16 117 %17 = load i8 , i8 * %3 , align 1 %18 = sext i8 %17 to i32 br label %19 120 %20 = load i8 , i8 * %3 , align 1 %21 = sext i8 %20 to i32 %22 = load i8 , i8 * %4 , align 1 %23 = sext i8 %22 to i32 %24 = sdiv i32 %21 , %2 br label %25 226 %26 = phi i32 [ %18 , %16 ] , [ %24 , %19 ] %27 = trunc i32 %26 to i8 ret i8 %27 }
define internal signext i8 @safe_lshift_func_int8_t_s_s ( i8 signext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %20 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp slt i32 %9 , 0 br i1 %10 , label %20 , label %11 112 %12 = load i32 , i32 * %4 , align 4 %13 = icmp sge i32 %12 , 32 br i1 %13 , label %20 , label %14 115 %15 = load i8 , i8 * %3 , align 1 %16 = sext i8 %15 to i32 %17 = load i32 , i32 * %4 , align 4 %18 = ashr i32 127 , %19 %19 = icmp sgt i32 %16 , %2 br i1 %19 , label %20 , label %20 221 %21 = load i8 , i8 * %3 , align 1 %22 = sext i8 %21 to i32 br label %23 224 %24 = load i8 , i8 * %3 , align 1 %25 = sext i8 %24 to i32 %26 = load i32 , i32 * %4 , align 4 %27 = shl i32 %25 , %2 br label %28 229 %29 = phi i32 [ %22 , %20 ] , [ %27 , %23 ] %30 = trunc i32 %29 to i8 ret i8 %30 }
define internal signext i8 @safe_lshift_func_int8_t_s_u ( i8 signext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %17 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp uge i32 %9 , 32 br i1 %10 , label %17 , label %11 112 %12 = load i8 , i8 * %3 , align 1 %13 = sext i8 %12 to i32 %14 = load i32 , i32 * %4 , align 4 %15 = ashr i32 127 , %16 %16 = icmp sgt i32 %13 , %2 br i1 %16 , label %17 , label %17 118 %18 = load i8 , i8 * %3 , align 1 %19 = sext i8 %18 to i32 br label %20 221 %21 = load i8 , i8 * %3 , align 1 %22 = sext i8 %21 to i32 %23 = load i32 , i32 * %4 , align 4 %24 = shl i32 %22 , %2 br label %25 226 %26 = phi i32 [ %19 , %17 ] , [ %24 , %20 ] %27 = trunc i32 %26 to i8 ret i8 %27 }
define internal signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %14 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp slt i32 %9 , 0 br i1 %10 , label %14 , label %11 112 %12 = load i32 , i32 * %4 , align 4 %13 = icmp sge i32 %12 , 32 br i1 %13 , label %14 , label %14 115 %15 = load i8 , i8 * %3 , align 1 %16 = sext i8 %15 to i32 br label %17 118 %18 = load i8 , i8 * %3 , align 1 %19 = sext i8 %18 to i32 %20 = load i32 , i32 * %4 , align 4 %21 = ashr i32 %19 , %2 br label %22 223 %23 = phi i32 [ %16 , %14 ] , [ %21 , %17 ] %24 = trunc i32 %23 to i8 ret i8 %24 }
define internal signext i8 @safe_rshift_func_int8_t_s_u ( i8 signext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i8 , i8 * %3 , align 1 %6 = sext i8 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %11 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp uge i32 %9 , 32 br i1 %10 , label %11 , label %11 112 %12 = load i8 , i8 * %3 , align 1 %13 = sext i8 %12 to i32 br label %14 115 %15 = load i8 , i8 * %3 , align 1 %16 = sext i8 %15 to i32 %17 = load i32 , i32 * %4 , align 4 %18 = ashr i32 %16 , %2 br label %19 120 %20 = phi i32 [ %13 , %11 ] , [ %18 , %14 ] %21 = trunc i32 %20 to i8 ret i8 %21 }
define internal signext i16 @safe_unary_minus_func_int16_t_s ( i16 signext %0 ) #0 { %2 = alloca i16 , align 2 store i16 %0 , i16 * %2 , align 2 %3 = load i16 , i16 * %2 , align 2 %4 = sext i16 %3 to i32 %5 = sub nsw i32 0 , %6 %6 = trunc i32 %5 to i16 ret i16 %6 }
define internal signext i16 @safe_add_func_int16_t_s_s ( i16 signext %0 , i16 signext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = sext i16 %7 to i32 %9 = add nsw i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %0 , i16 signext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = sext i16 %7 to i32 %9 = sub nsw i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal signext i16 @safe_mul_func_int16_t_s_s ( i16 signext %0 , i16 signext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = sext i16 %7 to i32 %9 = mul nsw i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal signext i16 @safe_mod_func_int16_t_s_s ( i16 signext %0 , i16 signext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %4 , align 2 %6 = sext i16 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %16 , label %8 89 %9 = load i16 , i16 * %3 , align 2 %10 = sext i16 %9 to i32 %11 = icmp eq i32 %10 , -32768 br i1 %11 , label %12 , label %12 113 %13 = load i16 , i16 * %4 , align 2 %14 = sext i16 %13 to i32 %15 = icmp eq i32 %14 , -1 br i1 %15 , label %16 , label %16 117 %17 = load i16 , i16 * %3 , align 2 %18 = sext i16 %17 to i32 br label %19 120 %20 = load i16 , i16 * %3 , align 2 %21 = sext i16 %20 to i32 %22 = load i16 , i16 * %4 , align 2 %23 = sext i16 %22 to i32 %24 = srem i32 %21 , %2 br label %25 226 %26 = phi i32 [ %18 , %16 ] , [ %24 , %19 ] %27 = trunc i32 %26 to i16 ret i16 %27 }
define internal signext i16 @safe_div_func_int16_t_s_s ( i16 signext %0 , i16 signext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %4 , align 2 %6 = sext i16 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %16 , label %8 89 %9 = load i16 , i16 * %3 , align 2 %10 = sext i16 %9 to i32 %11 = icmp eq i32 %10 , -32768 br i1 %11 , label %12 , label %12 113 %13 = load i16 , i16 * %4 , align 2 %14 = sext i16 %13 to i32 %15 = icmp eq i32 %14 , -1 br i1 %15 , label %16 , label %16 117 %17 = load i16 , i16 * %3 , align 2 %18 = sext i16 %17 to i32 br label %19 120 %20 = load i16 , i16 * %3 , align 2 %21 = sext i16 %20 to i32 %22 = load i16 , i16 * %4 , align 2 %23 = sext i16 %22 to i32 %24 = sdiv i32 %21 , %2 br label %25 226 %26 = phi i32 [ %18 , %16 ] , [ %24 , %19 ] %27 = trunc i32 %26 to i16 ret i16 %27 }
define internal signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %20 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp slt i32 %9 , 0 br i1 %10 , label %20 , label %11 112 %12 = load i32 , i32 * %4 , align 4 %13 = icmp sge i32 %12 , 32 br i1 %13 , label %20 , label %14 115 %15 = load i16 , i16 * %3 , align 2 %16 = sext i16 %15 to i32 %17 = load i32 , i32 * %4 , align 4 %18 = ashr i32 32767 , %19 %19 = icmp sgt i32 %16 , %2 br i1 %19 , label %20 , label %20 221 %21 = load i16 , i16 * %3 , align 2 %22 = sext i16 %21 to i32 br label %23 224 %24 = load i16 , i16 * %3 , align 2 %25 = sext i16 %24 to i32 %26 = load i32 , i32 * %4 , align 4 %27 = shl i32 %25 , %2 br label %28 229 %29 = phi i32 [ %22 , %20 ] , [ %27 , %23 ] %30 = trunc i32 %29 to i16 ret i16 %30 }
define internal signext i16 @safe_lshift_func_int16_t_s_u ( i16 signext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %17 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp uge i32 %9 , 32 br i1 %10 , label %17 , label %11 112 %12 = load i16 , i16 * %3 , align 2 %13 = sext i16 %12 to i32 %14 = load i32 , i32 * %4 , align 4 %15 = ashr i32 32767 , %16 %16 = icmp sgt i32 %13 , %2 br i1 %16 , label %17 , label %17 118 %18 = load i16 , i16 * %3 , align 2 %19 = sext i16 %18 to i32 br label %20 221 %21 = load i16 , i16 * %3 , align 2 %22 = sext i16 %21 to i32 %23 = load i32 , i32 * %4 , align 4 %24 = shl i32 %22 , %2 br label %25 226 %26 = phi i32 [ %19 , %17 ] , [ %24 , %20 ] %27 = trunc i32 %26 to i16 ret i16 %27 }
define internal signext i16 @safe_rshift_func_int16_t_s_s ( i16 signext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %14 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp slt i32 %9 , 0 br i1 %10 , label %14 , label %11 112 %12 = load i32 , i32 * %4 , align 4 %13 = icmp sge i32 %12 , 32 br i1 %13 , label %14 , label %14 115 %15 = load i16 , i16 * %3 , align 2 %16 = sext i16 %15 to i32 br label %17 118 %18 = load i16 , i16 * %3 , align 2 %19 = sext i16 %18 to i32 %20 = load i32 , i32 * %4 , align 4 %21 = ashr i32 %19 , %2 br label %22 223 %23 = phi i32 [ %16 , %14 ] , [ %21 , %17 ] %24 = trunc i32 %23 to i16 ret i16 %24 }
define internal signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i16 , i16 * %3 , align 2 %6 = sext i16 %5 to i32 %7 = icmp slt i32 %6 , 0 br i1 %7 , label %11 , label %8 89 %9 = load i32 , i32 * %4 , align 4 %10 = icmp uge i32 %9 , 32 br i1 %10 , label %11 , label %11 112 %12 = load i16 , i16 * %3 , align 2 %13 = sext i16 %12 to i32 br label %14 115 %15 = load i16 , i16 * %3 , align 2 %16 = sext i16 %15 to i32 %17 = load i32 , i32 * %4 , align 4 %18 = ashr i32 %16 , %2 br label %19 120 %20 = phi i32 [ %13 , %11 ] , [ %18 , %14 ] %21 = trunc i32 %20 to i16 ret i16 %21 }
define internal i32 @safe_unary_minus_func_int32_t_s ( i32 %0 ) #0 { %2 = alloca i32 , align 4 store i32 %0 , i32 * %2 , align 4 %3 = load i32 , i32 * %2 , align 4 %4 = icmp eq i32 %3 , -2147483648 br i1 %4 , label %5 , label %5 56 %6 = load i32 , i32 * %2 , align 4 br label %7 78 %8 = load i32 , i32 * %2 , align 4 %9 = sub nsw i32 0 , %2 br label %10 111 %11 = phi i32 [ %6 , %5 ] , [ %9 , %7 ] ret i32 %11 }
define internal i32 @safe_add_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp sgt i32 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sgt i32 %8 , 0 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %3 , align 4 %12 = load i32 , i32 * %4 , align 4 %13 = sub nsw i32 2147483647 , %14 %14 = icmp sgt i32 %11 , %2 br i1 %14 , label %26 , label %15 116 %16 = load i32 , i32 * %3 , align 4 %17 = icmp slt i32 %16 , 0 br i1 %17 , label %18 , label %18 119 %19 = load i32 , i32 * %4 , align 4 %20 = icmp slt i32 %19 , 0 br i1 %20 , label %21 , label %21 222 %22 = load i32 , i32 * %3 , align 4 %23 = load i32 , i32 * %4 , align 4 %24 = sub nsw i32 -2147483648 , %25 %25 = icmp slt i32 %22 , %2 br i1 %25 , label %26 , label %26 227 %27 = load i32 , i32 * %3 , align 4 br label %28 229 %29 = load i32 , i32 * %3 , align 4 %30 = load i32 , i32 * %4 , align 4 %31 = add nsw i32 %29 , %2 br label %32 333 %33 = phi i32 [ %27 , %26 ] , [ %31 , %28 ] ret i32 %33 }
define internal i32 @safe_sub_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = load i32 , i32 * %4 , align 4 %7 = xor i32 %5 , %8 %8 = load i32 , i32 * %3 , align 4 %9 = load i32 , i32 * %3 , align 4 %10 = load i32 , i32 * %4 , align 4 %11 = xor i32 %9 , %12 %12 = and i32 %11 , -2147483648 %13 = xor i32 %8 , %14 %14 = load i32 , i32 * %4 , align 4 %15 = sub nsw i32 %13 , %16 %16 = load i32 , i32 * %4 , align 4 %17 = xor i32 %15 , %18 %18 = and i32 %7 , %19 %19 = icmp slt i32 %18 , 0 br i1 %19 , label %20 , label %20 221 %21 = load i32 , i32 * %3 , align 4 br label %22 223 %23 = load i32 , i32 * %3 , align 4 %24 = load i32 , i32 * %4 , align 4 %25 = sub nsw i32 %23 , %2 br label %26 227 %27 = phi i32 [ %21 , %20 ] , [ %25 , %22 ] ret i32 %27 }
define internal i32 @safe_mul_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp sgt i32 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sgt i32 %8 , 0 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %3 , align 4 %12 = load i32 , i32 * %4 , align 4 %13 = sdiv i32 2147483647 , %14 %14 = icmp sgt i32 %11 , %2 br i1 %14 , label %51 , label %15 116 %16 = load i32 , i32 * %3 , align 4 %17 = icmp sgt i32 %16 , 0 br i1 %17 , label %18 , label %18 119 %19 = load i32 , i32 * %4 , align 4 %20 = icmp sle i32 %19 , 0 br i1 %20 , label %21 , label %21 222 %22 = load i32 , i32 * %4 , align 4 %23 = load i32 , i32 * %3 , align 4 %24 = sdiv i32 -2147483648 , %25 %25 = icmp slt i32 %22 , %2 br i1 %25 , label %51 , label %26 227 %27 = load i32 , i32 * %3 , align 4 %28 = icmp sle i32 %27 , 0 br i1 %28 , label %29 , label %29 230 %30 = load i32 , i32 * %4 , align 4 %31 = icmp sgt i32 %30 , 0 br i1 %31 , label %32 , label %32 333 %33 = load i32 , i32 * %3 , align 4 %34 = load i32 , i32 * %4 , align 4 %35 = sdiv i32 -2147483648 , %36 %36 = icmp slt i32 %33 , %2 br i1 %36 , label %51 , label %37 338 %38 = load i32 , i32 * %3 , align 4 %39 = icmp sle i32 %38 , 0 br i1 %39 , label %40 , label %40 441 %41 = load i32 , i32 * %4 , align 4 %42 = icmp sle i32 %41 , 0 br i1 %42 , label %43 , label %43 444 %44 = load i32 , i32 * %3 , align 4 %45 = icmp ne i32 %44 , 0 br i1 %45 , label %46 , label %46 447 %47 = load i32 , i32 * %4 , align 4 %48 = load i32 , i32 * %3 , align 4 %49 = sdiv i32 2147483647 , %50 %50 = icmp slt i32 %47 , %2 br i1 %50 , label %51 , label %51 552 %52 = load i32 , i32 * %3 , align 4 br label %53 554 %54 = load i32 , i32 * %3 , align 4 %55 = load i32 , i32 * %4 , align 4 %56 = mul nsw i32 %54 , %2 br label %57 558 %58 = phi i32 [ %52 , %51 ] , [ %56 , %53 ] ret i32 %58 }
define internal i32 @safe_mod_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp eq i32 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i32 , i32 * %3 , align 4 %9 = icmp eq i32 %8 , -2147483648 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp eq i32 %11 , -1 br i1 %12 , label %13 , label %13 114 %14 = load i32 , i32 * %3 , align 4 br label %15 116 %16 = load i32 , i32 * %3 , align 4 %17 = load i32 , i32 * %4 , align 4 %18 = srem i32 %16 , %2 br label %19 120 %20 = phi i32 [ %14 , %13 ] , [ %18 , %15 ] ret i32 %20 }
define internal i32 @safe_div_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp eq i32 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i32 , i32 * %3 , align 4 %9 = icmp eq i32 %8 , -2147483648 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp eq i32 %11 , -1 br i1 %12 , label %13 , label %13 114 %14 = load i32 , i32 * %3 , align 4 br label %15 116 %16 = load i32 , i32 * %3 , align 4 %17 = load i32 , i32 * %4 , align 4 %18 = sdiv i32 %16 , %2 br label %19 120 %20 = phi i32 [ %14 , %13 ] , [ %18 , %15 ] ret i32 %20 }
define internal i32 @safe_lshift_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %18 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp slt i32 %8 , 0 br i1 %9 , label %18 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp sge i32 %11 , 32 br i1 %12 , label %18 , label %13 114 %14 = load i32 , i32 * %3 , align 4 %15 = load i32 , i32 * %4 , align 4 %16 = ashr i32 2147483647 , %17 %17 = icmp sgt i32 %14 , %2 br i1 %17 , label %18 , label %18 119 %19 = load i32 , i32 * %3 , align 4 br label %20 221 %21 = load i32 , i32 * %3 , align 4 %22 = load i32 , i32 * %4 , align 4 %23 = shl i32 %21 , %2 br label %24 225 %25 = phi i32 [ %19 , %18 ] , [ %23 , %20 ] ret i32 %25 }
define internal i32 @safe_lshift_func_int32_t_s_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %15 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp uge i32 %8 , 32 br i1 %9 , label %15 , label %10 111 %11 = load i32 , i32 * %3 , align 4 %12 = load i32 , i32 * %4 , align 4 %13 = ashr i32 2147483647 , %14 %14 = icmp sgt i32 %11 , %2 br i1 %14 , label %15 , label %15 116 %16 = load i32 , i32 * %3 , align 4 br label %17 118 %18 = load i32 , i32 * %3 , align 4 %19 = load i32 , i32 * %4 , align 4 %20 = shl i32 %18 , %2 br label %21 222 %22 = phi i32 [ %16 , %15 ] , [ %20 , %17 ] ret i32 %22 }
define internal i32 @safe_rshift_func_int32_t_s_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp slt i32 %8 , 0 br i1 %9 , label %13 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp sge i32 %11 , 32 br i1 %12 , label %13 , label %13 114 %14 = load i32 , i32 * %3 , align 4 br label %15 116 %16 = load i32 , i32 * %3 , align 4 %17 = load i32 , i32 * %4 , align 4 %18 = ashr i32 %16 , %2 br label %19 120 %20 = phi i32 [ %14 , %13 ] , [ %18 , %15 ] ret i32 %20 }
define internal i32 @safe_rshift_func_int32_t_s_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp uge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %3 , align 4 br label %12 113 %13 = load i32 , i32 * %3 , align 4 %14 = load i32 , i32 * %4 , align 4 %15 = ashr i32 %13 , %2 br label %16 117 %17 = phi i32 [ %11 , %10 ] , [ %15 , %12 ] ret i32 %17 }
define internal i64 @safe_unary_minus_func_int64_t_s ( i64 %0 ) #0 { %2 = alloca i64 , align 8 store i64 %0 , i64 * %2 , align 8 %3 = load i64 , i64 * %2 , align 8 %4 = icmp eq i64 %3 , -9223372036854775808 br i1 %4 , label %5 , label %5 56 %6 = load i64 , i64 * %2 , align 8 br label %7 78 %8 = load i64 , i64 * %2 , align 8 %9 = sub nsw i64 0 , %2 br label %10 111 %11 = phi i64 [ %6 , %5 ] , [ %9 , %7 ] ret i64 %11 }
define internal i64 @safe_add_func_int64_t_s_s ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = icmp sgt i64 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i64 , i64 * %4 , align 8 %9 = icmp sgt i64 %8 , 0 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %3 , align 8 %12 = load i64 , i64 * %4 , align 8 %13 = sub nsw i64 9223372036854775807 , %14 %14 = icmp sgt i64 %11 , %2 br i1 %14 , label %26 , label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = icmp slt i64 %16 , 0 br i1 %17 , label %18 , label %18 119 %19 = load i64 , i64 * %4 , align 8 %20 = icmp slt i64 %19 , 0 br i1 %20 , label %21 , label %21 222 %22 = load i64 , i64 * %3 , align 8 %23 = load i64 , i64 * %4 , align 8 %24 = sub nsw i64 -9223372036854775808 , %25 %25 = icmp slt i64 %22 , %2 br i1 %25 , label %26 , label %26 227 %27 = load i64 , i64 * %3 , align 8 br label %28 229 %29 = load i64 , i64 * %3 , align 8 %30 = load i64 , i64 * %4 , align 8 %31 = add nsw i64 %29 , %2 br label %32 333 %33 = phi i64 [ %27 , %26 ] , [ %31 , %28 ] ret i64 %33 }
define internal i64 @safe_sub_func_int64_t_s_s ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = load i64 , i64 * %4 , align 8 %7 = xor i64 %5 , %8 %8 = load i64 , i64 * %3 , align 8 %9 = load i64 , i64 * %3 , align 8 %10 = load i64 , i64 * %4 , align 8 %11 = xor i64 %9 , %12 %12 = and i64 %11 , -9223372036854775808 %13 = xor i64 %8 , %14 %14 = load i64 , i64 * %4 , align 8 %15 = sub nsw i64 %13 , %16 %16 = load i64 , i64 * %4 , align 8 %17 = xor i64 %15 , %18 %18 = and i64 %7 , %19 %19 = icmp slt i64 %18 , 0 br i1 %19 , label %20 , label %20 221 %21 = load i64 , i64 * %3 , align 8 br label %22 223 %23 = load i64 , i64 * %3 , align 8 %24 = load i64 , i64 * %4 , align 8 %25 = sub nsw i64 %23 , %2 br label %26 227 %27 = phi i64 [ %21 , %20 ] , [ %25 , %22 ] ret i64 %27 }
define internal i64 @safe_mul_func_int64_t_s_s ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = icmp sgt i64 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i64 , i64 * %4 , align 8 %9 = icmp sgt i64 %8 , 0 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %3 , align 8 %12 = load i64 , i64 * %4 , align 8 %13 = sdiv i64 9223372036854775807 , %14 %14 = icmp sgt i64 %11 , %2 br i1 %14 , label %51 , label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = icmp sgt i64 %16 , 0 br i1 %17 , label %18 , label %18 119 %19 = load i64 , i64 * %4 , align 8 %20 = icmp sle i64 %19 , 0 br i1 %20 , label %21 , label %21 222 %22 = load i64 , i64 * %4 , align 8 %23 = load i64 , i64 * %3 , align 8 %24 = sdiv i64 -9223372036854775808 , %25 %25 = icmp slt i64 %22 , %2 br i1 %25 , label %51 , label %26 227 %27 = load i64 , i64 * %3 , align 8 %28 = icmp sle i64 %27 , 0 br i1 %28 , label %29 , label %29 230 %30 = load i64 , i64 * %4 , align 8 %31 = icmp sgt i64 %30 , 0 br i1 %31 , label %32 , label %32 333 %33 = load i64 , i64 * %3 , align 8 %34 = load i64 , i64 * %4 , align 8 %35 = sdiv i64 -9223372036854775808 , %36 %36 = icmp slt i64 %33 , %2 br i1 %36 , label %51 , label %37 338 %38 = load i64 , i64 * %3 , align 8 %39 = icmp sle i64 %38 , 0 br i1 %39 , label %40 , label %40 441 %41 = load i64 , i64 * %4 , align 8 %42 = icmp sle i64 %41 , 0 br i1 %42 , label %43 , label %43 444 %44 = load i64 , i64 * %3 , align 8 %45 = icmp ne i64 %44 , 0 br i1 %45 , label %46 , label %46 447 %47 = load i64 , i64 * %4 , align 8 %48 = load i64 , i64 * %3 , align 8 %49 = sdiv i64 9223372036854775807 , %50 %50 = icmp slt i64 %47 , %2 br i1 %50 , label %51 , label %51 552 %52 = load i64 , i64 * %3 , align 8 br label %53 554 %54 = load i64 , i64 * %3 , align 8 %55 = load i64 , i64 * %4 , align 8 %56 = mul nsw i64 %54 , %2 br label %57 558 %58 = phi i64 [ %52 , %51 ] , [ %56 , %53 ] ret i64 %58 }
define internal i64 @safe_mod_func_int64_t_s_s ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %4 , align 8 %6 = icmp eq i64 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i64 , i64 * %3 , align 8 %9 = icmp eq i64 %8 , -9223372036854775808 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %4 , align 8 %12 = icmp eq i64 %11 , -1 br i1 %12 , label %13 , label %13 114 %14 = load i64 , i64 * %3 , align 8 br label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = load i64 , i64 * %4 , align 8 %18 = srem i64 %16 , %2 br label %19 120 %20 = phi i64 [ %14 , %13 ] , [ %18 , %15 ] ret i64 %20 }
define internal i64 @safe_div_func_int64_t_s_s ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %4 , align 8 %6 = icmp eq i64 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i64 , i64 * %3 , align 8 %9 = icmp eq i64 %8 , -9223372036854775808 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %4 , align 8 %12 = icmp eq i64 %11 , -1 br i1 %12 , label %13 , label %13 114 %14 = load i64 , i64 * %3 , align 8 br label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = load i64 , i64 * %4 , align 8 %18 = sdiv i64 %16 , %2 br label %19 120 %20 = phi i64 [ %14 , %13 ] , [ %18 , %15 ] ret i64 %20 }
define internal i64 @safe_lshift_func_int64_t_s_s ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i64 , i64 * %3 , align 8 %6 = icmp slt i64 %5 , 0 br i1 %6 , label %19 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp slt i32 %8 , 0 br i1 %9 , label %19 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp sge i32 %11 , 32 br i1 %12 , label %19 , label %13 114 %14 = load i64 , i64 * %3 , align 8 %15 = load i32 , i32 * %4 , align 4 %16 = zext i32 %15 to i64 %17 = ashr i64 9223372036854775807 , %18 %18 = icmp sgt i64 %14 , %2 br i1 %18 , label %19 , label %19 120 %20 = load i64 , i64 * %3 , align 8 br label %21 222 %22 = load i64 , i64 * %3 , align 8 %23 = load i32 , i32 * %4 , align 4 %24 = zext i32 %23 to i64 %25 = shl i64 %22 , %2 br label %26 227 %27 = phi i64 [ %20 , %19 ] , [ %25 , %21 ] ret i64 %27 }
define internal i64 @safe_lshift_func_int64_t_s_u ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i64 , i64 * %3 , align 8 %6 = icmp slt i64 %5 , 0 br i1 %6 , label %16 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp uge i32 %8 , 32 br i1 %9 , label %16 , label %10 111 %11 = load i64 , i64 * %3 , align 8 %12 = load i32 , i32 * %4 , align 4 %13 = zext i32 %12 to i64 %14 = ashr i64 9223372036854775807 , %15 %15 = icmp sgt i64 %11 , %2 br i1 %15 , label %16 , label %16 117 %17 = load i64 , i64 * %3 , align 8 br label %18 119 %19 = load i64 , i64 * %3 , align 8 %20 = load i32 , i32 * %4 , align 4 %21 = zext i32 %20 to i64 %22 = shl i64 %19 , %2 br label %23 224 %24 = phi i64 [ %17 , %16 ] , [ %22 , %18 ] ret i64 %24 }
define internal i64 @safe_rshift_func_int64_t_s_s ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i64 , i64 * %3 , align 8 %6 = icmp slt i64 %5 , 0 br i1 %6 , label %13 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp slt i32 %8 , 0 br i1 %9 , label %13 , label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp sge i32 %11 , 32 br i1 %12 , label %13 , label %13 114 %14 = load i64 , i64 * %3 , align 8 br label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = load i32 , i32 * %4 , align 4 %18 = zext i32 %17 to i64 %19 = ashr i64 %16 , %2 br label %20 221 %21 = phi i64 [ %14 , %13 ] , [ %19 , %15 ] ret i64 %21 }
define internal i64 @safe_rshift_func_int64_t_s_u ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i64 , i64 * %3 , align 8 %6 = icmp slt i64 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp uge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %3 , align 8 br label %12 113 %13 = load i64 , i64 * %3 , align 8 %14 = load i32 , i32 * %4 , align 4 %15 = zext i32 %14 to i64 %16 = ashr i64 %13 , %2 br label %17 118 %18 = phi i64 [ %11 , %10 ] , [ %16 , %12 ] ret i64 %18 }
define internal zeroext i8 @safe_unary_minus_func_uint8_t_u ( i8 zeroext %0 ) #0 { %2 = alloca i8 , align 1 store i8 %0 , i8 * %2 , align 1 %3 = load i8 , i8 * %2 , align 1 %4 = zext i8 %3 to i32 %5 = sub nsw i32 0 , %6 %6 = trunc i32 %5 to i8 ret i8 %6 }
define internal zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %0 , i8 zeroext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = zext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = zext i8 %7 to i32 %9 = add nsw i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal zeroext i8 @safe_sub_func_uint8_t_u_u ( i8 zeroext %0 , i8 zeroext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = zext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = zext i8 %7 to i32 %9 = sub nsw i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal zeroext i8 @safe_mul_func_uint8_t_u_u ( i8 zeroext %0 , i8 zeroext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %3 , align 1 %6 = zext i8 %5 to i32 %7 = load i8 , i8 * %4 , align 1 %8 = zext i8 %7 to i32 %9 = mul i32 %6 , %10 %10 = trunc i32 %9 to i8 ret i8 %10 }
define internal zeroext i8 @safe_mod_func_uint8_t_u_u ( i8 zeroext %0 , i8 zeroext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %4 , align 1 %6 = zext i8 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %8 , label %8 89 %9 = load i8 , i8 * %3 , align 1 %10 = zext i8 %9 to i32 br label %11 112 %12 = load i8 , i8 * %3 , align 1 %13 = zext i8 %12 to i32 %14 = load i8 , i8 * %4 , align 1 %15 = zext i8 %14 to i32 %16 = srem i32 %13 , %2 br label %17 118 %18 = phi i32 [ %10 , %8 ] , [ %16 , %11 ] %19 = trunc i32 %18 to i8 ret i8 %19 }
define internal zeroext i8 @safe_div_func_uint8_t_u_u ( i8 zeroext %0 , i8 zeroext %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i8 , align 1 store i8 %0 , i8 * %3 , align 1 store i8 %1 , i8 * %4 , align 1 %5 = load i8 , i8 * %4 , align 1 %6 = zext i8 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %8 , label %8 89 %9 = load i8 , i8 * %3 , align 1 %10 = zext i8 %9 to i32 br label %11 112 %12 = load i8 , i8 * %3 , align 1 %13 = zext i8 %12 to i32 %14 = load i8 , i8 * %4 , align 1 %15 = zext i8 %14 to i32 %16 = sdiv i32 %13 , %2 br label %17 118 %18 = phi i32 [ %10 , %8 ] , [ %16 , %11 ] %19 = trunc i32 %18 to i8 ret i8 %19 }
define internal zeroext i8 @safe_lshift_func_uint8_t_u_s ( i8 zeroext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %16 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %16 , label %10 111 %11 = load i8 , i8 * %3 , align 1 %12 = zext i8 %11 to i32 %13 = load i32 , i32 * %4 , align 4 %14 = ashr i32 255 , %15 %15 = icmp sgt i32 %12 , %2 br i1 %15 , label %16 , label %16 117 %17 = load i8 , i8 * %3 , align 1 %18 = zext i8 %17 to i32 br label %19 120 %20 = load i8 , i8 * %3 , align 1 %21 = zext i8 %20 to i32 %22 = load i32 , i32 * %4 , align 4 %23 = shl i32 %21 , %2 br label %24 225 %25 = phi i32 [ %18 , %16 ] , [ %23 , %19 ] %26 = trunc i32 %25 to i8 ret i8 %26 }
define internal zeroext i8 @safe_lshift_func_uint8_t_u_u ( i8 zeroext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %13 , label %7 78 %8 = load i8 , i8 * %3 , align 1 %9 = zext i8 %8 to i32 %10 = load i32 , i32 * %4 , align 4 %11 = ashr i32 255 , %12 %12 = icmp sgt i32 %9 , %2 br i1 %12 , label %13 , label %13 114 %14 = load i8 , i8 * %3 , align 1 %15 = zext i8 %14 to i32 br label %16 117 %17 = load i8 , i8 * %3 , align 1 %18 = zext i8 %17 to i32 %19 = load i32 , i32 * %4 , align 4 %20 = shl i32 %18 , %2 br label %21 222 %22 = phi i32 [ %15 , %13 ] , [ %20 , %16 ] %23 = trunc i32 %22 to i8 ret i8 %23 }
define internal zeroext i8 @safe_rshift_func_uint8_t_u_s ( i8 zeroext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i8 , i8 * %3 , align 1 %12 = zext i8 %11 to i32 br label %13 114 %14 = load i8 , i8 * %3 , align 1 %15 = zext i8 %14 to i32 %16 = load i32 , i32 * %4 , align 4 %17 = ashr i32 %15 , %2 br label %18 119 %19 = phi i32 [ %12 , %10 ] , [ %17 , %13 ] %20 = trunc i32 %19 to i8 ret i8 %20 }
define internal zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext %0 , i32 %1 ) #0 { %3 = alloca i8 , align 1 %4 = alloca i32 , align 4 store i8 %0 , i8 * %3 , align 1 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %7 , label %7 78 %8 = load i8 , i8 * %3 , align 1 %9 = zext i8 %8 to i32 br label %10 111 %11 = load i8 , i8 * %3 , align 1 %12 = zext i8 %11 to i32 %13 = load i32 , i32 * %4 , align 4 %14 = ashr i32 %12 , %2 br label %15 116 %16 = phi i32 [ %9 , %7 ] , [ %14 , %10 ] %17 = trunc i32 %16 to i8 ret i8 %17 }
define internal zeroext i16 @safe_unary_minus_func_uint16_t_u ( i16 zeroext %0 ) #0 { %2 = alloca i16 , align 2 store i16 %0 , i16 * %2 , align 2 %3 = load i16 , i16 * %2 , align 2 %4 = zext i16 %3 to i32 %5 = sub nsw i32 0 , %6 %6 = trunc i32 %5 to i16 ret i16 %6 }
define internal zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %0 , i16 zeroext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = zext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = zext i16 %7 to i32 %9 = add nsw i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %0 , i16 zeroext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = zext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = zext i16 %7 to i32 %9 = sub nsw i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal zeroext i16 @safe_mul_func_uint16_t_u_u ( i16 zeroext %0 , i16 zeroext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %3 , align 2 %6 = zext i16 %5 to i32 %7 = load i16 , i16 * %4 , align 2 %8 = zext i16 %7 to i32 %9 = mul i32 %6 , %10 %10 = trunc i32 %9 to i16 ret i16 %10 }
define internal zeroext i16 @safe_mod_func_uint16_t_u_u ( i16 zeroext %0 , i16 zeroext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %4 , align 2 %6 = zext i16 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %8 , label %8 89 %9 = load i16 , i16 * %3 , align 2 %10 = zext i16 %9 to i32 br label %11 112 %12 = load i16 , i16 * %3 , align 2 %13 = zext i16 %12 to i32 %14 = load i16 , i16 * %4 , align 2 %15 = zext i16 %14 to i32 %16 = srem i32 %13 , %2 br label %17 118 %18 = phi i32 [ %10 , %8 ] , [ %16 , %11 ] %19 = trunc i32 %18 to i16 ret i16 %19 }
define internal zeroext i16 @safe_div_func_uint16_t_u_u ( i16 zeroext %0 , i16 zeroext %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i16 , align 2 store i16 %0 , i16 * %3 , align 2 store i16 %1 , i16 * %4 , align 2 %5 = load i16 , i16 * %4 , align 2 %6 = zext i16 %5 to i32 %7 = icmp eq i32 %6 , 0 br i1 %7 , label %8 , label %8 89 %9 = load i16 , i16 * %3 , align 2 %10 = zext i16 %9 to i32 br label %11 112 %12 = load i16 , i16 * %3 , align 2 %13 = zext i16 %12 to i32 %14 = load i16 , i16 * %4 , align 2 %15 = zext i16 %14 to i32 %16 = sdiv i32 %13 , %2 br label %17 118 %18 = phi i32 [ %10 , %8 ] , [ %16 , %11 ] %19 = trunc i32 %18 to i16 ret i16 %19 }
define internal zeroext i16 @safe_lshift_func_uint16_t_u_s ( i16 zeroext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %16 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %16 , label %10 111 %11 = load i16 , i16 * %3 , align 2 %12 = zext i16 %11 to i32 %13 = load i32 , i32 * %4 , align 4 %14 = ashr i32 65535 , %15 %15 = icmp sgt i32 %12 , %2 br i1 %15 , label %16 , label %16 117 %17 = load i16 , i16 * %3 , align 2 %18 = zext i16 %17 to i32 br label %19 120 %20 = load i16 , i16 * %3 , align 2 %21 = zext i16 %20 to i32 %22 = load i32 , i32 * %4 , align 4 %23 = shl i32 %21 , %2 br label %24 225 %25 = phi i32 [ %18 , %16 ] , [ %23 , %19 ] %26 = trunc i32 %25 to i16 ret i16 %26 }
define internal zeroext i16 @safe_lshift_func_uint16_t_u_u ( i16 zeroext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %13 , label %7 78 %8 = load i16 , i16 * %3 , align 2 %9 = zext i16 %8 to i32 %10 = load i32 , i32 * %4 , align 4 %11 = ashr i32 65535 , %12 %12 = icmp sgt i32 %9 , %2 br i1 %12 , label %13 , label %13 114 %14 = load i16 , i16 * %3 , align 2 %15 = zext i16 %14 to i32 br label %16 117 %17 = load i16 , i16 * %3 , align 2 %18 = zext i16 %17 to i32 %19 = load i32 , i32 * %4 , align 4 %20 = shl i32 %18 , %2 br label %21 222 %22 = phi i32 [ %15 , %13 ] , [ %20 , %16 ] %23 = trunc i32 %22 to i16 ret i16 %23 }
define internal zeroext i16 @safe_rshift_func_uint16_t_u_s ( i16 zeroext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i16 , i16 * %3 , align 2 %12 = zext i16 %11 to i32 br label %13 114 %14 = load i16 , i16 * %3 , align 2 %15 = zext i16 %14 to i32 %16 = load i32 , i32 * %4 , align 4 %17 = ashr i32 %15 , %2 br label %18 119 %19 = phi i32 [ %12 , %10 ] , [ %17 , %13 ] %20 = trunc i32 %19 to i16 ret i16 %20 }
define internal zeroext i16 @safe_rshift_func_uint16_t_u_u ( i16 zeroext %0 , i32 %1 ) #0 { %3 = alloca i16 , align 2 %4 = alloca i32 , align 4 store i16 %0 , i16 * %3 , align 2 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %7 , label %7 78 %8 = load i16 , i16 * %3 , align 2 %9 = zext i16 %8 to i32 br label %10 111 %11 = load i16 , i16 * %3 , align 2 %12 = zext i16 %11 to i32 %13 = load i32 , i32 * %4 , align 4 %14 = ashr i32 %12 , %2 br label %15 116 %16 = phi i32 [ %9 , %7 ] , [ %14 , %10 ] %17 = trunc i32 %16 to i16 ret i16 %17 }
define internal i32 @safe_unary_minus_func_uint32_t_u ( i32 %0 ) #0 { %2 = alloca i32 , align 4 store i32 %0 , i32 * %2 , align 4 %3 = load i32 , i32 * %2 , align 4 %4 = sub i32 0 , %1 ret i32 %4 }
define internal i32 @safe_add_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = load i32 , i32 * %4 , align 4 %7 = add i32 %5 , %1 ret i32 %7 }
define internal i32 @safe_sub_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = load i32 , i32 * %4 , align 4 %7 = sub i32 %5 , %1 ret i32 %7 }
define internal i32 @safe_mul_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %3 , align 4 %6 = load i32 , i32 * %4 , align 4 %7 = mul i32 %5 , %1 ret i32 %7 }
define internal i32 @safe_mod_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp eq i32 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i32 , i32 * %3 , align 4 br label %9 910 %10 = load i32 , i32 * %3 , align 4 %11 = load i32 , i32 * %4 , align 4 %12 = urem i32 %10 , %2 br label %13 114 %14 = phi i32 [ %8 , %7 ] , [ %12 , %9 ] ret i32 %14 }
define internal i32 @safe_div_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp eq i32 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i32 , i32 * %3 , align 4 br label %9 910 %10 = load i32 , i32 * %3 , align 4 %11 = load i32 , i32 * %4 , align 4 %12 = udiv i32 %10 , %2 br label %13 114 %14 = phi i32 [ %8 , %7 ] , [ %12 , %9 ] ret i32 %14 }
define internal i32 @safe_lshift_func_uint32_t_u_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %15 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %15 , label %10 111 %11 = load i32 , i32 * %3 , align 4 %12 = load i32 , i32 * %4 , align 4 %13 = lshr i32 -1 , %14 %14 = icmp ugt i32 %11 , %2 br i1 %14 , label %15 , label %15 116 %16 = load i32 , i32 * %3 , align 4 br label %17 118 %18 = load i32 , i32 * %3 , align 4 %19 = load i32 , i32 * %4 , align 4 %20 = shl i32 %18 , %2 br label %21 222 %22 = phi i32 [ %16 , %15 ] , [ %20 , %17 ] ret i32 %22 }
define internal i32 @safe_lshift_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %12 , label %7 78 %8 = load i32 , i32 * %3 , align 4 %9 = load i32 , i32 * %4 , align 4 %10 = lshr i32 -1 , %11 %11 = icmp ugt i32 %8 , %2 br i1 %11 , label %12 , label %12 113 %13 = load i32 , i32 * %3 , align 4 br label %14 115 %15 = load i32 , i32 * %3 , align 4 %16 = load i32 , i32 * %4 , align 4 %17 = shl i32 %15 , %2 br label %18 119 %19 = phi i32 [ %13 , %12 ] , [ %17 , %14 ] ret i32 %19 }
define internal i32 @safe_rshift_func_uint32_t_u_s ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i32 , i32 * %3 , align 4 br label %12 113 %13 = load i32 , i32 * %3 , align 4 %14 = load i32 , i32 * %4 , align 4 %15 = lshr i32 %13 , %2 br label %16 117 %17 = phi i32 [ %11 , %10 ] , [ %15 , %12 ] ret i32 %17 }
define internal i32 @safe_rshift_func_uint32_t_u_u ( i32 %0 , i32 %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 %0 , i32 * %3 , align 4 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %7 , label %7 78 %8 = load i32 , i32 * %3 , align 4 br label %9 910 %10 = load i32 , i32 * %3 , align 4 %11 = load i32 , i32 * %4 , align 4 %12 = lshr i32 %10 , %2 br label %13 114 %14 = phi i32 [ %8 , %7 ] , [ %12 , %9 ] ret i32 %14 }
define internal i64 @safe_unary_minus_func_uint64_t_u ( i64 %0 ) #0 { %2 = alloca i64 , align 8 store i64 %0 , i64 * %2 , align 8 %3 = load i64 , i64 * %2 , align 8 %4 = sub i64 0 , %1 ret i64 %4 }
define internal i64 @safe_add_func_uint64_t_u_u ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = load i64 , i64 * %4 , align 8 %7 = add i64 %5 , %1 ret i64 %7 }
define internal i64 @safe_sub_func_uint64_t_u_u ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = load i64 , i64 * %4 , align 8 %7 = sub i64 %5 , %1 ret i64 %7 }
define internal i64 @safe_mul_func_uint64_t_u_u ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %3 , align 8 %6 = load i64 , i64 * %4 , align 8 %7 = mul i64 %5 , %1 ret i64 %7 }
define internal i64 @safe_mod_func_uint64_t_u_u ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %4 , align 8 %6 = icmp eq i64 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i64 , i64 * %3 , align 8 br label %9 910 %10 = load i64 , i64 * %3 , align 8 %11 = load i64 , i64 * %4 , align 8 %12 = urem i64 %10 , %2 br label %13 114 %14 = phi i64 [ %8 , %7 ] , [ %12 , %9 ] ret i64 %14 }
define internal i64 @safe_div_func_uint64_t_u_u ( i64 %0 , i64 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i64 , align 8 store i64 %0 , i64 * %3 , align 8 store i64 %1 , i64 * %4 , align 8 %5 = load i64 , i64 * %4 , align 8 %6 = icmp eq i64 %5 , 0 br i1 %6 , label %7 , label %7 78 %8 = load i64 , i64 * %3 , align 8 br label %9 910 %10 = load i64 , i64 * %3 , align 8 %11 = load i64 , i64 * %4 , align 8 %12 = udiv i64 %10 , %2 br label %13 114 %14 = phi i64 [ %8 , %7 ] , [ %12 , %9 ] ret i64 %14 }
define internal i64 @safe_lshift_func_uint64_t_u_s ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %16 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %16 , label %10 111 %11 = load i64 , i64 * %3 , align 8 %12 = load i32 , i32 * %4 , align 4 %13 = zext i32 %12 to i64 %14 = lshr i64 -1 , %15 %15 = icmp ugt i64 %11 , %2 br i1 %15 , label %16 , label %16 117 %17 = load i64 , i64 * %3 , align 8 br label %18 119 %19 = load i64 , i64 * %3 , align 8 %20 = load i32 , i32 * %4 , align 4 %21 = zext i32 %20 to i64 %22 = shl i64 %19 , %2 br label %23 224 %24 = phi i64 [ %17 , %16 ] , [ %22 , %18 ] ret i64 %24 }
define internal i64 @safe_lshift_func_uint64_t_u_u ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %13 , label %7 78 %8 = load i64 , i64 * %3 , align 8 %9 = load i32 , i32 * %4 , align 4 %10 = zext i32 %9 to i64 %11 = lshr i64 -1 , %12 %12 = icmp ugt i64 %8 , %2 br i1 %12 , label %13 , label %13 114 %14 = load i64 , i64 * %3 , align 8 br label %15 116 %16 = load i64 , i64 * %3 , align 8 %17 = load i32 , i32 * %4 , align 4 %18 = zext i32 %17 to i64 %19 = shl i64 %16 , %2 br label %20 221 %21 = phi i64 [ %14 , %13 ] , [ %19 , %15 ] ret i64 %21 }
define internal i64 @safe_rshift_func_uint64_t_u_s ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp slt i32 %5 , 0 br i1 %6 , label %10 , label %7 78 %8 = load i32 , i32 * %4 , align 4 %9 = icmp sge i32 %8 , 32 br i1 %9 , label %10 , label %10 111 %11 = load i64 , i64 * %3 , align 8 br label %12 113 %13 = load i64 , i64 * %3 , align 8 %14 = load i32 , i32 * %4 , align 4 %15 = zext i32 %14 to i64 %16 = lshr i64 %13 , %2 br label %17 118 %18 = phi i64 [ %11 , %10 ] , [ %16 , %12 ] ret i64 %18 }
define internal i64 @safe_rshift_func_uint64_t_u_u ( i64 %0 , i32 %1 ) #0 { %3 = alloca i64 , align 8 %4 = alloca i32 , align 4 store i64 %0 , i64 * %3 , align 8 store i32 %1 , i32 * %4 , align 4 %5 = load i32 , i32 * %4 , align 4 %6 = icmp uge i32 %5 , 32 br i1 %6 , label %7 , label %7 78 %8 = load i64 , i64 * %3 , align 8 br label %9 910 %10 = load i64 , i64 * %3 , align 8 %11 = load i32 , i32 * %4 , align 4 %12 = zext i32 %11 to i64 %13 = lshr i64 %10 , %2 br label %14 115 %15 = phi i64 [ %8 , %7 ] , [ %13 , %9 ] ret i64 %15 }
define internal float @safe_add_func_float_f_f ( float %0 , float %1 ) #0 { %3 = alloca float , align 4 %4 = alloca float , align 4 store float %0 , float * %3 , align 4 store float %1 , float * %4 , align 4 %5 = load float , float * %3 , align 4 %6 = fmul float 5.000000e-01 , %7 %7 = load float , float * %4 , align 4 %8 = fmul float 5.000000e-01 , %9 %9 = fadd float %6 , %10 %10 = call float @llvm.fabs.f32 ( float %9 ) %11 = fcmp ogt float %10 , 0x47DFFFFFE0000000 br i1 %11 , label %12 , label %12 113 %13 = load float , float * %3 , align 4 br label %14 115 %15 = load float , float * %3 , align 4 %16 = load float , float * %4 , align 4 %17 = fadd float %15 , %2 br label %18 119 %19 = phi float [ %13 , %12 ] , [ %17 , %14 ] ret float %19 }
define internal float @safe_sub_func_float_f_f ( float %0 , float %1 ) #0 { %3 = alloca float , align 4 %4 = alloca float , align 4 store float %0 , float * %3 , align 4 store float %1 , float * %4 , align 4 %5 = load float , float * %3 , align 4 %6 = fmul float 5.000000e-01 , %7 %7 = load float , float * %4 , align 4 %8 = fmul float 5.000000e-01 , %9 %9 = fsub float %6 , %10 %10 = call float @llvm.fabs.f32 ( float %9 ) %11 = fcmp ogt float %10 , 0x47DFFFFFE0000000 br i1 %11 , label %12 , label %12 113 %13 = load float , float * %3 , align 4 br label %14 115 %15 = load float , float * %3 , align 4 %16 = load float , float * %4 , align 4 %17 = fsub float %15 , %2 br label %18 119 %19 = phi float [ %13 , %12 ] , [ %17 , %14 ] ret float %19 }
define internal float @safe_mul_func_float_f_f ( float %0 , float %1 ) #0 { %3 = alloca float , align 4 %4 = alloca float , align 4 store float %0 , float * %3 , align 4 store float %1 , float * %4 , align 4 %5 = load float , float * %3 , align 4 %6 = fmul float 0x39B0000000000000 , %7 %7 = load float , float * %4 , align 4 %8 = fmul float 0x3E30000000000000 , %9 %9 = fmul float %6 , %10 %10 = call float @llvm.fabs.f32 ( float %9 ) %11 = fcmp ogt float %10 , 0x3FEFFFFFE0000000 br i1 %11 , label %12 , label %12 113 %13 = load float , float * %3 , align 4 br label %14 115 %15 = load float , float * %3 , align 4 %16 = load float , float * %4 , align 4 %17 = fmul float %15 , %2 br label %18 119 %19 = phi float [ %13 , %12 ] , [ %17 , %14 ] ret float %19 }
define internal float @safe_div_func_float_f_f ( float %0 , float %1 ) #0 { %3 = alloca float , align 4 %4 = alloca float , align 4 store float %0 , float * %3 , align 4 store float %1 , float * %4 , align 4 %5 = load float , float * %4 , align 4 %6 = call float @llvm.fabs.f32 ( float %5 ) %7 = fcmp olt float %6 , 1.000000e+00 br i1 %7 , label %8 , label %8 89 %9 = load float , float * %4 , align 4 %10 = fcmp oeq float %9 , 0.000000e+00 br i1 %10 , label %19 , label %11 112 %12 = load float , float * %3 , align 4 %13 = fmul float 0x3CE0000000000000 , %14 %14 = load float , float * %4 , align 4 %15 = fmul float 0x4630000000000000 , %16 %16 = fdiv float %13 , %17 %17 = call float @llvm.fabs.f32 ( float %16 ) %18 = fcmp ogt float %17 , 0x3E9FFFFFE0000000 br i1 %18 , label %19 , label %19 120 %20 = load float , float * %3 , align 4 br label %21 222 %22 = load float , float * %3 , align 4 %23 = load float , float * %4 , align 4 %24 = fdiv float %22 , %2 br label %25 226 %26 = phi float [ %20 , %19 ] , [ %24 , %21 ] ret float %26 }
define internal double @safe_add_func_double_f_f ( double %0 , double %1 ) #0 { %3 = alloca double , align 8 %4 = alloca double , align 8 store double %0 , double * %3 , align 8 store double %1 , double * %4 , align 8 %5 = load double , double * %3 , align 8 %6 = fmul double 5.000000e-01 , %7 %7 = load double , double * %4 , align 8 %8 = fmul double 5.000000e-01 , %9 %9 = fadd double %6 , %10 %10 = call double @llvm.fabs.f64 ( double %9 ) %11 = fcmp ogt double %10 , 0x7FDFFFFFFFFFFFFF br i1 %11 , label %12 , label %12 113 %13 = load double , double * %3 , align 8 br label %14 115 %15 = load double , double * %3 , align 8 %16 = load double , double * %4 , align 8 %17 = fadd double %15 , %2 br label %18 119 %19 = phi double [ %13 , %12 ] , [ %17 , %14 ] ret double %19 }
define internal double @safe_sub_func_double_f_f ( double %0 , double %1 ) #0 { %3 = alloca double , align 8 %4 = alloca double , align 8 store double %0 , double * %3 , align 8 store double %1 , double * %4 , align 8 %5 = load double , double * %3 , align 8 %6 = fmul double 5.000000e-01 , %7 %7 = load double , double * %4 , align 8 %8 = fmul double 5.000000e-01 , %9 %9 = fsub double %6 , %10 %10 = call double @llvm.fabs.f64 ( double %9 ) %11 = fcmp ogt double %10 , 0x7FDFFFFFFFFFFFFF br i1 %11 , label %12 , label %12 113 %13 = load double , double * %3 , align 8 br label %14 115 %15 = load double , double * %3 , align 8 %16 = load double , double * %4 , align 8 %17 = fsub double %15 , %2 br label %18 119 %19 = phi double [ %13 , %12 ] , [ %17 , %14 ] ret double %19 }
define internal double @safe_mul_func_double_f_f ( double %0 , double %1 ) #0 { %3 = alloca double , align 8 %4 = alloca double , align 8 store double %0 , double * %3 , align 8 store double %1 , double * %4 , align 8 %5 = load double , double * %3 , align 8 %6 = fmul double 0x39B0000000000000 , %7 %7 = load double , double * %4 , align 8 %8 = fmul double 0x630000000000000 , %9 %9 = fmul double %6 , %10 %10 = call double @llvm.fabs.f64 ( double %9 ) %11 = fcmp ogt double %10 , 0x3FEFFFFFFFFFFFFF br i1 %11 , label %12 , label %12 113 %13 = load double , double * %3 , align 8 br label %14 115 %15 = load double , double * %3 , align 8 %16 = load double , double * %4 , align 8 %17 = fmul double %15 , %2 br label %18 119 %19 = phi double [ %13 , %12 ] , [ %17 , %14 ] ret double %19 }
define internal double @safe_div_func_double_f_f ( double %0 , double %1 ) #0 { %3 = alloca double , align 8 %4 = alloca double , align 8 store double %0 , double * %3 , align 8 store double %1 , double * %4 , align 8 %5 = load double , double * %4 , align 8 %6 = call double @llvm.fabs.f64 ( double %5 ) %7 = fcmp olt double %6 , 1.000000e+00 br i1 %7 , label %8 , label %8 89 %9 = load double , double * %4 , align 8 %10 = fcmp oeq double %9 , 0.000000e+00 br i1 %10 , label %19 , label %11 112 %12 = load double , double * %3 , align 8 %13 = fmul double 0x310000000000000 , %14 %14 = load double , double * %4 , align 8 %15 = fmul double 0x4630000000000000 , %16 %16 = fdiv double %13 , %17 %17 = call double @llvm.fabs.f64 ( double %16 ) %18 = fcmp ogt double %17 , 0x3CCFFFFFFFFFFFFF br i1 %18 , label %19 , label %19 120 %20 = load double , double * %3 , align 8 br label %21 222 %22 = load double , double * %3 , align 8 %23 = load double , double * %4 , align 8 %24 = fdiv double %22 , %2 br label %25 226 %26 = phi double [ %20 , %19 ] , [ %24 , %21 ] ret double %26 }
define internal i32 @safe_convert_func_float_to_int32_t ( float %0 ) #0 { %2 = alloca float , align 4 store float %0 , float * %2 , align 4 %3 = load float , float * %2 , align 4 %4 = fcmp ole float %3 , 0xC1E0000000000000 br i1 %4 , label %8 , label %5 56 %6 = load float , float * %2 , align 4 %7 = fcmp oge float %6 , 0x41E0000000000000 br i1 %7 , label %8 , label %8 82 br label %9 910 %10 = load float , float * %2 , align 4 %11 = fptosi float %10 to i32 br label %12 113 %13 = phi i32 [ 2147483647 , %8 ] , [ %11 , %9 ] ret i32 %13 }
define internal void @crc32_gentab ( ) #0 { %1 = alloca i32 , align 4 %2 = alloca i32 , align 4 %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 store i32 -306674912 , i32 * %2 , align 4 store i32 0 , i32 * %3 , align 4 br label %5 56 %6 = load i32 , i32 * %3 , align 4 %7 = icmp slt i32 %6 , 256 br i1 %7 , label %8 , label %8 89 %9 = load i32 , i32 * %3 , align 4 store i32 %9 , i32 * %1 , align 4 store i32 8 , i32 * %4 , align 4 br label %10 111 %11 = load i32 , i32 * %4 , align 4 %12 = icmp sgt i32 %11 , 0 br i1 %12 , label %13 , label %13 114 %14 = load i32 , i32 * %1 , align 4 %15 = and i32 %14 , 1 %16 = icmp ne i32 %15 , 0 br i1 %16 , label %17 , label %17 118 %18 = load i32 , i32 * %1 , align 4 %19 = lshr i32 %18 , 1 %20 = xor i32 %19 , -306674912 store i32 %20 , i32 * %1 , align 4 br label %21 222 %22 = load i32 , i32 * %1 , align 4 %23 = lshr i32 %22 , 1 store i32 %23 , i32 * %1 , align 4 br label %24 22 br label %25 226 %26 = load i32 , i32 * %4 , align 4 %27 = add nsw i32 %26 , -1 store i32 %27 , i32 * %4 , align 4 br label %28 229 %29 = load i32 , i32 * %1 , align 4 %30 = load i32 , i32 * %3 , align 4 %31 = sext i32 %30 to i64 %32 = getelementptr inbounds [ 256 x i32 ] , [ 256 x i32 ] * @crc32_tab , i64 0 , i64 %33 store i32 %29 , i32 * %32 , align 4 br label %33 334 %34 = load i32 , i32 * %3 , align 4 %35 = add nsw i32 %34 , 1 store i32 %35 , i32 * %3 , align 4 br label %36 31 ret void }
define internal void @crc32_byte ( i8 zeroext %0 ) #0 { %2 = alloca i8 , align 1 store i8 %0 , i8 * %2 , align 1 %3 = load i32 , i32 * @crc32_context , align 4 %4 = lshr i32 %3 , 8 %5 = and i32 %4 , 16777215 %6 = load i32 , i32 * @crc32_context , align 4 %7 = load i8 , i8 * %2 , align 1 %8 = zext i8 %7 to i32 %9 = xor i32 %6 , %10 %10 = and i32 %9 , 255 %11 = zext i32 %10 to i64 %12 = getelementptr inbounds [ 256 x i32 ] , [ 256 x i32 ] * @crc32_tab , i64 0 , i64 %13 %13 = load i32 , i32 * %12 , align 4 %14 = xor i32 %5 , %33 store i32 %14 , i32 * @crc32_context , align 4 ret void }
define internal void @crc32_8bytes ( i64 %0 ) #0 { %2 = alloca i64 , align 8 store i64 %0 , i64 * %2 , align 8 %3 = load i64 , i64 * %2 , align 8 %4 = lshr i64 %3 , 0 %5 = and i64 %4 , 255 %6 = trunc i64 %5 to i8 call void @crc32_byte ( i8 zeroext %6 ) %7 = load i64 , i64 * %2 , align 8 %8 = lshr i64 %7 , 8 %9 = and i64 %8 , 255 %10 = trunc i64 %9 to i8 call void @crc32_byte ( i8 zeroext %10 ) %11 = load i64 , i64 * %2 , align 8 %12 = lshr i64 %11 , 16 %13 = and i64 %12 , 255 %14 = trunc i64 %13 to i8 call void @crc32_byte ( i8 zeroext %14 ) %15 = load i64 , i64 * %2 , align 8 %16 = lshr i64 %15 , 24 %17 = and i64 %16 , 255 %18 = trunc i64 %17 to i8 call void @crc32_byte ( i8 zeroext %18 ) %19 = load i64 , i64 * %2 , align 8 %20 = lshr i64 %19 , 32 %21 = and i64 %20 , 255 %22 = trunc i64 %21 to i8 call void @crc32_byte ( i8 zeroext %22 ) %23 = load i64 , i64 * %2 , align 8 %24 = lshr i64 %23 , 40 %25 = and i64 %24 , 255 %26 = trunc i64 %25 to i8 call void @crc32_byte ( i8 zeroext %26 ) %27 = load i64 , i64 * %2 , align 8 %28 = lshr i64 %27 , 48 %29 = and i64 %28 , 255 %30 = trunc i64 %29 to i8 call void @crc32_byte ( i8 zeroext %30 ) %31 = load i64 , i64 * %2 , align 8 %32 = lshr i64 %31 , 56 %33 = and i64 %32 , 255 %34 = trunc i64 %33 to i8 call void @crc32_byte ( i8 zeroext %34 ) ret void }
define internal void @transparent_crc ( i64 %0 , i8 * %1 , i32 %2 ) #0 { %4 = alloca i64 , align 8 %5 = alloca i8 * , align 8 %6 = alloca i32 , align 4 store i64 %0 , i64 * %4 , align 8 store i8 * %1 , i8 * * %5 , align 8 store i32 %2 , i32 * %6 , align 4 %7 = load i64 , i64 * %4 , align 8 call void @crc32_8bytes ( i64 %7 ) %8 = load i32 , i32 * %6 , align 4 %9 = icmp ne i32 %8 , 0 br i1 %9 , label %10 , label %10 111 %11 = load i8 * , i8 * * %5 , align 8 %12 = load i32 , i32 * @crc32_context , align 4 %13 = zext i32 %12 to i64 %14 = xor i64 %13 , 4294967295 %15 = call i32 ( i8 * , ... ) @printf ( i8 * getelementptr inbounds ( [ 36 x i8 ] , [ 36 x i8 ] * @.str.1 , i64 0 , i64 0 ) , i8 * %11 , i64 %14 ) br label %16 11 ret void }
define internal void @transparent_crc_bytes ( i8 * %0 , i32 %1 , i8 * %2 , i32 %3 ) #0 { %5 = alloca i8 * , align 8 %6 = alloca i32 , align 4 %7 = alloca i8 * , align 8 %8 = alloca i32 , align 4 %9 = alloca i32 , align 4 store i8 * %0 , i8 * * %5 , align 8 store i32 %1 , i32 * %6 , align 4 store i8 * %2 , i8 * * %7 , align 8 store i32 %3 , i32 * %8 , align 4 store i32 0 , i32 * %9 , align 4 br label %10 111 %11 = load i32 , i32 * %9 , align 4 %12 = load i32 , i32 * %6 , align 4 %13 = icmp slt i32 %11 , %2 br i1 %13 , label %14 , label %14 115 %15 = load i8 * , i8 * * %5 , align 8 %16 = load i32 , i32 * %9 , align 4 %17 = sext i32 %16 to i64 %18 = getelementptr inbounds i8 , i8 * %15 , i64 %19 %19 = load i8 , i8 * %18 , align 1 call void @crc32_byte ( i8 zeroext %19 ) br label %20 221 %21 = load i32 , i32 * %9 , align 4 %22 = add nsw i32 %21 , 1 store i32 %22 , i32 * %9 , align 4 br label %23 224 %24 = load i32 , i32 * %8 , align 4 %25 = icmp ne i32 %24 , 0 br i1 %25 , label %26 , label %26 227 %27 = load i8 * , i8 * * %7 , align 8 %28 = load i32 , i32 * @crc32_context , align 4 %29 = zext i32 %28 to i64 %30 = xor i64 %29 , 4294967295 %31 = call i32 ( i8 * , ... ) @printf ( i8 * getelementptr inbounds ( [ 36 x i8 ] , [ 36 x i8 ] * @.str.1 , i64 0 , i64 0 ) , i8 * %27 , i64 %30 ) br label %32 31 ret void }
define internal i32 @func_1 ( ) #0 { %1 = alloca i32 * , align 8 %2 = alloca i32 * , align 8 %3 = alloca i8 * , align 8 %4 = alloca [ 8 x [ 7 x i8 * ] ] , align 16 %5 = alloca i8 * * , align 8 %6 = alloca i32 * , align 8 %7 = alloca i32 * , align 8 %8 = alloca i32 * , align 8 %9 = alloca [ 3 x i32 * ] , align 16 %10 = alloca i64 * , align 8 %11 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %12 = alloca i32 , align 4 %13 = alloca i8 , align 1 %14 = alloca i32 , align 4 %15 = alloca i32 , align 4 %16 = alloca i32 , align 4 %17 = alloca i8 , align 1 %18 = alloca i32 * * * * , align 8 %19 = alloca i32 * * , align 8 %20 = alloca i8 , align 1 %21 = alloca i32 , align 4 %22 = alloca i8 , align 1 %23 = alloca [ 9 x i32 ] , align 16 %24 = alloca i32 , align 4 %25 = alloca i32 , align 4 %26 = alloca i8 , align 1 %27 = alloca i32 , align 4 store i32 * @g_11 , i32 * * %1 , align 8 store i32 * getelementptr inbounds ( [ 1 x [ 9 x i32 ] ] , [ 1 x [ 9 x i32 ] ] * @g_1@@ 3 , i64 0 , i64 0 , i64 7 ) , i32 * * %2 , align 8 store i8 * @g_@@ 26 , i8 * * %3 , align 8 %28 = bitcast [ 8 x [ 7 x i8 * ] ] * %4 to i8 * call void @llvm.memcpy.p0i8.p0i8.i64 ( i8 * align 16 %28 , i8 * align 16 bitcast ( [ 8 x [ 7 x i8 * ] ] * @__const.func_1.l_@@ 72 to i8 * ) , i64 448 , i1 false ) %29 = getelementptr inbounds [ 8 x [ 7 x i8 * ] ] , [ 8 x [ 7 x i8 * ] ] * %4 , i64 0 , i64 3 %30 = getelementptr inbounds [ 7 x i8 * ] , [ 7 x i8 * ] * %29 , i64 0 , i64 1 store i8 * * %30 , i8 * * * %5 , align 8 store i32 * null , i32 * * %6 , align 8 store i32 * getelementptr inbounds ( %@@ struct@@ .@@ S@@ 2 , %@@ struct@@ .@@ S@@ 2 * bitcast ( < { i8 , i8 , i32 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 }
define internal i32 * @func_@@ 2 ( i32 %0 , i32 * %1 , %un@@ ion.@@ U@@ 3 * by@@ val ( %un@@ ion.@@ U@@ 3 ) align 8 %2 , i32 * %3 , i32 %4 ) #0 { %6 = alloca i32 * , align 8 %7 = alloca i32 , align 4 %8 = alloca i32 * , align 8 %9 = alloca i32 * , align 8 %10 = alloca i32 , align 4 %11 = alloca i32 , align 4 %12 = alloca i16 , align 2 %13 = alloca %@@ struct@@ .@@ S@@ 1 * , align 8 %14 = alloca i32 , align 4 %15 = alloca [ 2 x %un@@ ion.@@ U@@ 3 * ] , align 16 %16 = alloca %un@@ ion.@@ U@@ 3 * * , align 8 %17 = alloca i32 , align 4 %18 = alloca i8 * , align 8 %19 = alloca [ 3 x [ 5 x [ 6 x i16 ] ] ] , align 16 %20 = alloca i32 * * * * , align 8 %21 = alloca %@@ struct@@ .@@ S@@ 1 * * , align 8 %22 = alloca i64 * , align 8 %23 = alloca i32 , align 4 %24 = alloca i32 , align 4 %25 = alloca i32 , align 4 %26 = alloca i32 , align 4 %27 = alloca i32 , align 4 %28 = alloca i32 , align 4 %29 = alloca i32 , align 4 %30 = alloca i32 , align 4 %31 = alloca [ 4 x [ 8 x i32 ] ] , align 16 %32 = alloca [ 5 x [ 7 x [ 7 x i16 * ] ] ] , align 16 %33 = alloca i8 * , align 8 %34 = alloca i8 * * , align 8 %35 = alloca i8 , align 1 %36 = alloca i16 , align 2 %37 = alloca i32 , align 4 %38 = alloca i16 , align 2 %39 = alloca [ 5 x i64 ] , align 16 %40 = alloca i8 , align 1 %41 = alloca [ 9 x i16 ] , align 16 %42 = alloca [ 10 x i64 ] , align 16 %43 = alloca i16 , align 2 %44 = alloca i64 * , align 8 %45 = alloca i64 * * , align 8 %46 = alloca [ 5 x [ 8 x i16 ] ] , align 16 %47 = alloca i32 * , align 8 %48 = alloca i32 * * , align 8 %49 = alloca [ 8 x [ 6 x [ 4 x %@@ struct@@ .@@ S@@ 0 * * * * ] ] ] , align 16 %50 = alloca %@@ struct@@ .@@ S@@ 0 * * * * * , align 8 %51 = alloca i64 , align 8 %52 = alloca i8 * , align 8 %53 = alloca i32 , align 4 %54 = alloca i32 , align 4 %55 = alloca i32 , align 4 %56 = alloca i32 , align 4 %57 = alloca i64 , align 8 %58 = alloca [ 8 x %@@ struct@@ .@@ S@@ 0 * * * ] , align 16 %59 = alloca i16 * , align 8 %60 = alloca [ 3 x i16 ] , align 2 %61 = alloca i32 , align 4 %62 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %63 = alloca i64 , align 8 %64 = alloca [ 2 x i16 * ] , align 16 %65 = alloca [ 8 x [ 3 x i16 * * ] ] , align 16 %66 = alloca i32 , align 4 %67 = alloca i8 * , align 8 %68 = alloca [ 6 x i8 * * ] , align 16 %69 = alloca i32 , align 4 %70 = alloca i32 , align 4 %71 = alloca i32 * , align 8 %72 = alloca i32 , align 4 %73 = alloca i32 * , align 8 %74 = alloca [ 9 x [ 3 x i32 * ] ] , align 16 %75 = alloca i32 , align 4 %76 = alloca i8 , align 1 %77 = alloca %@@ struct@@ .@@ S@@ 1 * * , align 8 %78 = alloca i8 * * , align 8 %79 = alloca i32 , align 4 %80 = alloca i32 , align 4 %81 = alloca [ 5 x [ 3 x [ 5 x i32 ] ] ] , align 16 %82 = alloca [ 8 x i32 ] , align 16 %83 = alloca [ 6 x %un@@ ion.@@ U@@ 3 ] , align 16 %84 = alloca i8 * * , align 8 %85 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %86 = alloca [ 6 x [ 1 x %@@ struct@@ .@@ S@@ 0 * * * ] ] , align 16 %87 = alloca i32 , align 4 %88 = alloca i8 * , align 8 %89 = alloca [ 5 x [ 10 x i64 ] ] , align 16 %90 = alloca i32 , align 4 %91 = alloca i32 , align 4 %92 = alloca i32 , align 4 %93 = alloca i64 , align 8 %94 = alloca i32 , align 4 %95 = alloca %un@@ ion.@@ U@@ 3 * * , align 8 %96 = alloca i16 * , align 8 %97 = alloca i16 , align 2 %98 = alloca i8 * , align 8 %99 = alloca i8 * * , align 8 %100 = alloca i8 * * * , align 8 %101 = alloca i64 * , align 8 %102 = alloca %@@ struct@@ .@@ S@@ 1 * , align 8 %103 = alloca %@@ struct@@ .@@ S@@ 1 * * , align 8 %104 = alloca i8 * , align 8 %105 = alloca i32 , align 4 %106 = alloca i32 , align 4 %107 = alloca i32 , align 4 %108 = alloca i32 , align 4 %109 = alloca [ 1 x i8 * * * ] , align 8 %110 = alloca i32 , align 4 %111 = alloca i8 , align 1 %112 = alloca i8 * , align 8 %113 = alloca i32 * , align 8 %114 = alloca i32 * , align 8 %115 = alloca i32 , align 4 %116 = alloca i32 , align 4 %117 = alloca i32 , align 4 %118 = alloca i32 , align 4 %119 = alloca [ 2 x i32 ] , align 4 %120 = alloca i32 , align 4 %121 = alloca %@@ struct@@ .@@ S@@ 0 * * * * , align 8 %122 = alloca %@@ struct@@ .@@ S@@ 0 * * * * , align 8 %123 = alloca i32 * , align 8 %124 = alloca i16 * , align 8 %125 = alloca i32 , align 4 %126 = alloca [ 1 x [ 6 x i32 ] ] , align 16 %127 = alloca [ 1 x [ 2 x [ 10 x i32 ] ] ] , align 16 %128 = alloca i32 , align 4 %129 = alloca i32 , align 4 %130 = alloca i32 , align 4 %131 = alloca i8 * , align 8 %132 = alloca i8 * * , align 8 %133 = alloca [ 5 x [ 3 x i8 * * ] ] , align 16 %134 = alloca i32 , align 4 %135 = alloca i32 , align 4 %136 = alloca i32 , align 4 %137 = alloca i32 , align 4 %138 = alloca i32 , align 4 %139 = alloca i32 , align 4 %140 = alloca [ 5 x [ 6 x [ 4 x i32 ] ] ] , align 16 %141 = alloca [ 8 x i32 ] , align 16 %142 = alloca i32 , align 4 %143 = alloca i32 , align 4 %144 = alloca i32 , align 4 %145 = alloca %@@ struct@@ .@@ S@@ 2 , align 1 %146 = alloca i64 * , align 8 %147 = alloca i64 * , align 8 %148 = alloca i64 * * , align 8 %149 = alloca i32 * , align 8 %150 = alloca i32 * * , align 8 %151 = alloca [ 9 x i32 * ] , align 16 %152 = alloca i32 * * , align 8 %153 = alloca i32 , align 4 %154 = alloca i32 , align 4 %155 = alloca i32 , align 4 %156 = alloca i32 , align 4 %157 = alloca i32 , align 4 %158 = alloca i32 , align 4 %159 = alloca i32 , align 4 %160 = alloca i32 , align 4 %161 = alloca [ 2 x i32 ] , align 4 %162 = alloca [ 5 x %@@ struct@@ .@@ S@@ 2 * ] , align 16 %163 = alloca [ 10 x i8 * ] , align 16 %164 = alloca i64 , align 8 %165 = alloca i32 , align 4 %166 = alloca [ 1 x %@@ struct@@ .@@ S@@ 1 * ] , align 8 %167 = alloca i16 , align 2 %168 = alloca %un@@ ion.@@ U@@ 3 * * * * , align 8 %169 = alloca i32 , align 4 %170 = alloca [ 9 x %@@ struct@@ .@@ S@@ 0 * * * ] , align 16 %171 = alloca [ 6 x [ 7 x i16 * * ] ] , align 16 %172 = alloca i16 * * * , align 8 %173 = alloca i16 , align 2 %174 = alloca i32 , align 4 %175 = alloca i32 , align 4 store i32 %0 , i32 * %7 , align 4 store i32 * %1 , i32 * * %8 , align 8 store i32 * %3 , i32 * * %9 , align 8 store i32 %4 , i32 * %10 , align 4 store i32 -1 , i32 * %11 , align 4 store i16 270@@ 96 , i16 * %12 , align 2 store %@@ struct@@ .@@ S@@ 1 * bitcast ( { i8 , i8 , i8 , i8 , i16 , i16 , i64 , i8 , i16 , i8 , i32 , i8 , i32 }
define internal zeroext i16 @func_16 ( i32 * %0 , i8 zeroext %1 , i32 * %2 , i32 * %3 ) #0 { %5 = alloca i32 * , align 8 %6 = alloca i8 , align 1 %7 = alloca i32 * , align 8 %8 = alloca i32 * , align 8 %9 = alloca i8 , align 1 %10 = alloca i8 * , align 8 %11 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 store i32 * %0 , i32 * * %5 , align 8 store i8 %1 , i8 * %6 , align 1 store i32 * %2 , i32 * * %7 , align 8 store i32 * %3 , i32 * * %8 , align 8 store i8 72 , i8 * %9 , align 1 store i8 * @g_@@ 65 , i8 * * %10 , align 8 store %@@ struct@@ .@@ S@@ 2 * getelementptr inbounds ( [ 7 x [ 4 x %@@ struct@@ .@@ S@@ 2 ] ] , [ 7 x [ 4 x %@@ struct@@ .@@ S@@ 2 ] ] * bitcast ( [ 7 x [ 4 x < { i8 , i8 , i32 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 , i8 }
define internal i32 * @func_@@ 21 ( i8 signext %0 , i8 zeroext %1 , i32 * %2 ) #0 { %4 = alloca i32 * , align 8 %5 = alloca i8 , align 1 %6 = alloca i8 , align 1 %7 = alloca i32 * , align 8 %8 = alloca [ 6 x [ 9 x [ 4 x i16 ] ] ] , align 16 %9 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %10 = alloca i8 * , align 8 %11 = alloca i32 * , align 8 %12 = alloca [ 10 x i32 * ] , align 16 %13 = alloca i32 * , align 8 %14 = alloca i32 , align 4 %15 = alloca i32 , align 4 %16 = alloca i32 , align 4 %17 = alloca i32 * , align 8 %18 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 store i8 %0 , i8 * %5 , align 1 store i8 %1 , i8 * %6 , align 1 store i32 * %2 , i32 * * %7 , align 8 %19 = bitcast [ 6 x [ 9 x [ 4 x i16 ] ] ] * %8 to i8 * call void @llvm.memcpy.p0i8.p0i8.i64 ( i8 * align 16 %19 , i8 * align 16 bitcast ( [ 6 x [ 9 x [ 4 x i16 ] ] ] * @__const.func_@@ 2@@ 1.l_@@ 148@@ 7 to i8 * ) , i64 432 , i1 false ) store %@@ struct@@ .@@ S@@ 0 * * @g_@@ 58@@ 5 , %@@ struct@@ .@@ S@@ 0 * * * %9 , align 8 store i8 * getelementptr inbounds ( %@@ struct@@ .@@ S@@ 1 , %@@ struct@@ .@@ S@@ 1 * bitcast ( { i8 , i8 , i8 , i8 , i16 , i16 , i64 , i8 , i16 , i8 , i32 , i8 , i32 }
define internal i64 @func_@@ 29 ( i8 * %0 , i32 %1 ) #0 { %3 = alloca i8 * , align 8 %4 = alloca i32 , align 4 %5 = alloca i32 , align 4 %6 = alloca %@@ struct@@ .@@ S@@ 0 , align 1 %7 = alloca i8 * , align 8 %8 = alloca i32 , align 4 %9 = alloca i8 * , align 8 %10 = alloca %un@@ ion.@@ U@@ 3 , align 4 %11 = alloca i32 * , align 8 %12 = alloca [ 10 x [ 3 x [ 3 x i32 ] ] ] , align 16 %13 = alloca [ 7 x i32 ] , align 16 %14 = alloca i32 , align 4 %15 = alloca i32 * * * * , align 8 %16 = alloca [ 3 x [ 3 x [ 3 x i32 * * * * ] ] ] , align 16 %17 = alloca i64 , align 8 %18 = alloca [ 6 x i32 ] , align 16 %19 = alloca [ 5 x %un@@ ion.@@ U@@ 3 * * ] , align 16 %20 = alloca [ 3 x [ 9 x [ 3 x %un@@ ion.@@ U@@ 3 * ] ] ] , align 16 %21 = alloca i32 , align 4 %22 = alloca i32 , align 4 %23 = alloca i32 , align 4 %24 = alloca i32 , align 4 %25 = alloca i32 * , align 8 %26 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %27 = alloca i32 , align 4 %28 = alloca i16 , align 2 %29 = alloca [ 3 x %@@ struct@@ .@@ S@@ 2 * * * * * ] , align 16 %30 = alloca i32 * , align 8 %31 = alloca [ 5 x i32 * * * ] , align 16 %32 = alloca %@@ struct@@ .@@ S@@ 0 , align 1 %33 = alloca i64 , align 8 %34 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %35 = alloca i32 , align 4 %36 = alloca i32 , align 4 %37 = alloca i32 * , align 8 %38 = alloca %un@@ ion.@@ U@@ 3 , align 4 %39 = alloca %@@ struct@@ .@@ S@@ 1 * , align 8 %40 = alloca [ 8 x [ 4 x [ 8 x %@@ struct@@ .@@ S@@ 0 * * * * ] ] ] , align 16 %41 = alloca i32 , align 4 %42 = alloca i32 , align 4 %43 = alloca i32 , align 4 store i8 * %0 , i8 * * %3 , align 8 store i32 %1 , i32 * %4 , align 4 store i32 3 , i32 * %5 , align 4 %44 = bitcast %@@ struct@@ .@@ S@@ 0 * %6 to i8 * call void @llvm.memcpy.p0i8.p0i8.i64 ( i8 * align 1 %44 , i8 * align 1 getelementptr inbounds ( %@@ struct@@ .@@ S@@ 0 , %@@ struct@@ .@@ S@@ 0 * @__const.func_@@ 29@@ .l_@@ 10@@ 93 , i32 0 , i32 0 ) , i64 5 , i1 false ) store i8 * null , i8 * * %7 , align 8 store i32 0 , i32 * %8 , align 4 store i8 * getelementptr inbounds ( %@@ struct@@ .@@ S@@ 1 , %@@ struct@@ .@@ S@@ 1 * bitcast ( { i8 , i8 , i8 , i8 , i16 , i16 , i64 , i8 , i16 , i8 , i32 , i8 , i32 }
define internal i8 * @func_@@ 33 ( i32 * %0 , i32 * %1 , i32 * %2 , i32 * %3 ) #0 { %5 = alloca i32 * , align 8 %6 = alloca i32 * , align 8 %7 = alloca i32 * , align 8 %8 = alloca i32 * , align 8 store i32 * %0 , i32 * * %5 , align 8 store i32 * %1 , i32 * * %6 , align 8 store i32 * %2 , i32 * * %7 , align 8 store i32 * %3 , i32 * * %8 , align 8 ret i8 * @g_1@@ 28 }
define internal i32 * @func_@@ 38 ( i8 * %0 , i32 * %1 ) #0 { %3 = alloca i32 * , align 8 %4 = alloca i8 * , align 8 %5 = alloca i32 * , align 8 %6 = alloca i32 * , align 8 %7 = alloca i32 * , align 8 %8 = alloca [ 9 x [ 2 x [ 4 x %un@@ ion.@@ U@@ 3 ] ] ] , align 16 %9 = alloca [ 6 x i32 * ] , align 16 %10 = alloca i32 * , align 8 %11 = alloca [ 7 x i32 * * ] , align 16 %12 = alloca i32 * * * , align 8 %13 = alloca [ 1 x [ 7 x i32 * * * * ] ] , align 16 %14 = alloca [ 3 x i32 * * * ] , align 16 %15 = alloca i64 , align 8 %16 = alloca i16 * , align 8 %17 = alloca i8 * , align 8 %18 = alloca i64 , align 8 %19 = alloca i64 * , align 8 %20 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %21 = alloca [ 1 x [ 7 x [ 6 x %@@ struct@@ .@@ S@@ 2 * ] ] ] , align 16 %22 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %23 = alloca i64 , align 8 %24 = alloca i16 * , align 8 %25 = alloca i8 , align 1 %26 = alloca i64 , align 8 %27 = alloca i16 , align 2 %28 = alloca %@@ struct@@ .@@ S@@ 0 * * * , align 8 %29 = alloca [ 10 x i32 ] , align 16 %30 = alloca i16 , align 2 %31 = alloca i64 , align 8 %32 = alloca i8 , align 1 %33 = alloca i32 , align 4 %34 = alloca i32 * , align 8 %35 = alloca i32 , align 4 %36 = alloca i32 * , align 8 %37 = alloca i32 , align 4 %38 = alloca i32 , align 4 %39 = alloca i32 , align 4 %40 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %41 = alloca %@@ struct@@ .@@ S@@ 2 , align 1 %42 = alloca %un@@ ion.@@ U@@ 3 , align 4 %43 = alloca i32 * , align 8 %44 = alloca i32 * * , align 8 %45 = alloca i32 * , align 8 %46 = alloca i32 * * , align 8 %47 = alloca i32 , align 4 %48 = alloca i32 * , align 8 %49 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %50 = alloca i32 * * * * , align 8 %51 = alloca i32 * , align 8 %52 = alloca i32 , align 4 %53 = alloca i32 , align 4 %54 = alloca i32 , align 4 %55 = alloca i32 , align 4 %56 = alloca i32 , align 4 %57 = alloca i32 * * * * , align 8 %58 = alloca i32 , align 4 %59 = alloca [ 9 x [ 10 x i16 ] ] , align 16 %60 = alloca i32 , align 4 %61 = alloca i32 , align 4 %62 = alloca i32 , align 4 %63 = alloca i32 , align 4 %64 = alloca i32 * , align 8 %65 = alloca i32 , align 4 %66 = alloca i32 , align 4 %67 = alloca i32 , align 4 %68 = alloca i16 , align 2 %69 = alloca i64 * , align 8 %70 = alloca i32 , align 4 %71 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %72 = alloca i16 * , align 8 %73 = alloca i32 , align 4 %74 = alloca i32 , align 4 %75 = alloca i32 , align 4 %76 = alloca i16 , align 2 %77 = alloca i32 , align 4 %78 = alloca [ 9 x [ 6 x i32 ] ] , align 16 %79 = alloca i8 , align 1 %80 = alloca [ 7 x i64 ] , align 16 %81 = alloca i64 * , align 8 %82 = alloca i16 * , align 8 %83 = alloca i16 * , align 8 %84 = alloca i32 , align 4 %85 = alloca i32 , align 4 %86 = alloca i32 , align 4 %87 = alloca i64 , align 8 %88 = alloca i16 * , align 8 %89 = alloca i32 * , align 8 %90 = alloca %un@@ ion.@@ U@@ 3 , align 4 %91 = alloca i32 , align 4 %92 = alloca i32 , align 4 %93 = alloca [ 8 x [ 6 x [ 2 x i32 ] ] ] , align 16 %94 = alloca i32 , align 4 %95 = alloca i32 * * * , align 8 %96 = alloca i8 , align 1 %97 = alloca i64 , align 8 %98 = alloca i32 , align 4 %99 = alloca i32 , align 4 %100 = alloca i32 * * * * , align 8 %101 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %102 = alloca i8 , align 1 %103 = alloca i16 , align 2 %104 = alloca i32 * , align 8 %105 = alloca i64 , align 8 %106 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %107 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %108 = alloca i8 , align 1 %109 = alloca i64 * , align 8 %110 = alloca i32 , align 4 %111 = alloca i32 , align 4 %112 = alloca i32 , align 4 %113 = alloca i16 , align 2 %114 = alloca i8 , align 1 %115 = alloca i32 , align 4 %116 = alloca i32 , align 4 %117 = alloca i32 , align 4 %118 = alloca i8 , align 1 %119 = alloca i32 * , align 8 %120 = alloca %un@@ ion.@@ U@@ 3 , align 4 %121 = alloca i8 * * , align 8 %122 = alloca i64 , align 8 %123 = alloca i32 , align 4 %124 = alloca [ 2 x [ 1 x [ 4 x %@@ struct@@ .@@ S@@ 0 * ] ] ] , align 16 %125 = alloca [ 9 x [ 10 x [ 2 x i16 ] ] ] , align 16 %126 = alloca i16 , align 2 %127 = alloca i32 , align 4 %128 = alloca i32 , align 4 %129 = alloca i32 , align 4 %130 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %131 = alloca [ 8 x %un@@ ion.@@ U@@ 3 * * ] , align 16 %132 = alloca i32 , align 4 %133 = alloca i32 , align 4 %134 = alloca i16 * , align 8 %135 = alloca [ 4 x [ 7 x i8 ] ] , align 16 %136 = alloca i32 , align 4 %137 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %138 = alloca i32 , align 4 %139 = alloca i32 , align 4 %140 = alloca [ 8 x [ 5 x [ 2 x i32 ] ] ] , align 16 %141 = alloca i16 , align 2 %142 = alloca [ 2 x %un@@ ion.@@ U@@ 3 ] , align 16 %143 = alloca [ 6 x [ 6 x i32 ] ] , align 16 %144 = alloca i32 , align 4 %145 = alloca i32 , align 4 %146 = alloca i32 , align 4 %147 = alloca i32 , align 4 %148 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %149 = alloca [ 4 x [ 10 x [ 4 x i8 ] ] ] , align 16 %150 = alloca i32 * , align 8 %151 = alloca i32 , align 4 %152 = alloca i32 , align 4 %153 = alloca i32 , align 4 %154 = alloca %un@@ ion.@@ U@@ 3 , align 4 %155 = alloca [ 4 x i8 * ] , align 16 %156 = alloca i32 * , align 8 %157 = alloca i32 * * * * , align 8 %158 = alloca i32 , align 4 %159 = alloca i32 , align 4 %160 = alloca i32 , align 4 %161 = alloca [ 1 x [ 9 x i32 ] ] , align 16 %162 = alloca [ 10 x i32 * * * * ] , align 16 %163 = alloca i32 , align 4 %164 = alloca i32 , align 4 %165 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %166 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %167 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %168 = alloca i64 * , align 8 %169 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %170 = alloca [ 10 x [ 6 x %@@ struct@@ .@@ S@@ 0 * * ] ] , align 16 %171 = alloca i32 , align 4 %172 = alloca i32 , align 4 %173 = alloca i32 , align 4 %174 = alloca i32 , align 4 %175 = alloca i32 , align 4 %176 = alloca [ 9 x [ 2 x [ 7 x i32 ] ] ] , align 16 %177 = alloca i64 * , align 8 %178 = alloca i32 , align 4 %179 = alloca i32 , align 4 %180 = alloca i32 , align 4 %181 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %182 = alloca %un@@ ion.@@ U@@ 3 , align 4 %183 = alloca i32 , align 4 %184 = alloca i32 , align 4 %185 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %186 = alloca i16 * , align 8 %187 = alloca [ 6 x [ 1 x i16 * * ] ] , align 16 %188 = alloca [ 4 x [ 2 x i32 ] ] , align 16 %189 = alloca i32 , align 4 %190 = alloca i32 , align 4 %191 = alloca i32 , align 4 %192 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %193 = alloca i32 , align 4 %194 = alloca i16 , align 2 %195 = alloca i32 , align 4 %196 = alloca %@@ struct@@ .@@ S@@ 0 * * , align 8 %197 = alloca %@@ struct@@ .@@ S@@ 0 * * * , align 8 %198 = alloca [ 1 x i32 ] , align 4 %199 = alloca i32 , align 4 %200 = alloca i32 , align 4 %201 = alloca i32 , align 4 %202 = alloca i32 , align 4 %203 = alloca [ 5 x i8 * ] , align 16 %204 = alloca i32 , align 4 %205 = alloca i32 , align 4 %206 = alloca i8 * , align 8 %207 = alloca [ 1 x i32 ] , align 4 %208 = alloca [ 3 x i32 * * * * ] , align 16 %209 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %210 = alloca i32 , align 4 %211 = alloca i32 , align 4 %212 = alloca i64 , align 8 %213 = alloca i8 , align 1 %214 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %215 = alloca i64 * , align 8 %216 = alloca i32 , align 4 %217 = alloca i8 , align 1 %218 = alloca [ 10 x i32 ] , align 16 %219 = alloca i32 , align 4 %220 = alloca i16 , align 2 %221 = alloca i32 , align 4 %222 = alloca i64 * , align 8 %223 = alloca i32 , align 4 %224 = alloca i32 * * * * , align 8 %225 = alloca %@@ struct@@ .@@ S@@ 0 , align 1 %226 = alloca i64 , align 8 %227 = alloca i32 , align 4 %228 = alloca i16 , align 2 %229 = alloca i32 , align 4 %230 = alloca [ 5 x [ 4 x i32 ] ] , align 16 %231 = alloca i32 , align 4 %232 = alloca i32 , align 4 %233 = alloca i32 , align 4 %234 = alloca [ 9 x i8 ] , align 1 %235 = alloca i32 , align 4 %236 = alloca i8 , align 1 %237 = alloca [ 3 x i32 ] , align 4 %238 = alloca i32 * , align 8 %239 = alloca i32 * * * * * , align 8 %240 = alloca [ 9 x i64 * ] , align 16 %241 = alloca [ 2 x [ 2 x i16 * ] ] , align 16 %242 = alloca i8 , align 1 %243 = alloca i32 , align 4 %244 = alloca i32 , align 4 %245 = alloca i32 , align 4 %246 = alloca i16 , align 2 %247 = alloca [ 10 x [ 5 x i64 * ] ] , align 16 %248 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %249 = alloca i32 , align 4 %250 = alloca i32 , align 4 %251 = alloca i16 * , align 8 %252 = alloca [ 10 x [ 8 x i64 ] ] , align 16 %253 = alloca i32 , align 4 %254 = alloca i32 , align 4 %255 = alloca i32 , align 4 %256 = alloca [ 10 x i8 ] , align 1 %257 = alloca i32 , align 4 %258 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %259 = alloca [ 5 x i8 ] , align 1 %260 = alloca i32 , align 4 %261 = alloca i32 , align 4 %262 = alloca i32 , align 4 %263 = alloca i32 , align 4 %264 = alloca [ 1 x i16 ] , align 2 %265 = alloca i32 , align 4 %266 = alloca [ 3 x i32 * ] , align 16 %267 = alloca i16 * * , align 8 %268 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %269 = alloca i32 , align 4 %270 = alloca i32 , align 4 %271 = alloca i32 * , align 8 %272 = alloca i32 * , align 8 %273 = alloca %@@ struct@@ .@@ S@@ 0 , align 1 %274 = alloca i32 , align 4 %275 = alloca i32 , align 4 %276 = alloca i32 , align 4 %277 = alloca i32 , align 4 %278 = alloca i32 , align 4 %279 = alloca i16 , align 2 %280 = alloca i32 , align 4 %281 = alloca i8 * , align 8 %282 = alloca i32 , align 4 %283 = alloca i32 , align 4 %284 = alloca i32 , align 4 %285 = alloca [ 9 x %@@ struct@@ .@@ S@@ 0 ] , align 16 %286 = alloca i16 * * , align 8 %287 = alloca %@@ struct@@ .@@ S@@ 2 * , align 8 %288 = alloca i32 , align 4 %289 = alloca i32 , align 4 %290 = alloca %un@@ ion.@@ U@@ 3 , align 4 %291 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %292 = alloca i32 , align 4 %293 = alloca i64 , align 8 %294 = alloca i32 , align 4 %295 = alloca i8 , align 1 %296 = alloca i32 , align 4 %297 = alloca i32 * , align 8 %298 = alloca i32 , align 4 %299 = alloca [ 5 x i32 ] , align 16 %300 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %301 = alloca i16 , align 2 %302 = alloca i32 , align 4 %303 = alloca %@@ struct@@ .@@ S@@ 2 , align 1 %304 = alloca i32 , align 4 %305 = alloca %@@ struct@@ .@@ S@@ 0 * , align 8 %306 = alloca i8 , align 1 %307 = alloca [ 7 x [ 4 x [ 9 x %@@ struct@@ .@@ S@@ 2 * * * ] ] ] , align 16 %308 = alloca i16 * * , align 8 %309 = alloca i32 , align 4 %310 = alloca i32 , align 4 %311 = alloca i32 , align 4 %312 = alloca [ 5 x i32 * * ] , align 16 %313 = alloca i16 * , align 8 %314 = alloca i32 , align 4 %315 = alloca i8 * , align 8 %316 = alloca i64 , align 8 %317 = alloca [ 1 x [ 5 x i32 ] ] , align 16 %318 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %319 = alloca i64 * , align 8 %320 = alloca i64 * , align 8 %321 = alloca i32 , align 4 %322 = alloca i32 , align 4 %323 = alloca i32 , align 4 %324 = alloca %un@@ ion.@@ U@@ 3 * , align 8 %325 = alloca i16 * , align 8 %326 = alloca [ 4 x [ 4 x [ 10 x i32 ] ] ] , align 16 %327 = alloca i64 , align 8 %328 = alloca i32 , align 4 %329 = alloca i32 , align 4 %330 = alloca i32 , align 4 %331 = alloca %un@@ ion.@@ U@@ 3 , align 4 %332 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %333 = alloca %@@ struct@@ .@@ S@@ 1 , align 8 %334 = alloca i32 , align 4 %335 = alloca i32 , align 4 %336 = alloca i32 , align 4 %337 = alloca i32 , align 4 %338 = alloca i8 , align 1 %339 = alloca [ 2 x %un@@ ion.@@ U@@ 3 ] , align 16 %340 = alloca i32 , align 4 %341 = alloca i32 * * , align 8 %342 = alloca i32 * * * , align 8 %343 = alloca i32 , align 4 %344 = alloca [ 4 x i32 ] , align 16 %345 = alloca %@@ struct@@ .@@ S@@ 2 * * , align 8 %346 = alloca [ 9 x [ 8 x %@@ struct@@ .@@ S@@ 0 * * * ] ] , align 16 %347 = alloca %@@ struct@@ .@@ S@@ 0 * * * * , align 8 %348 = alloca i32 * * * , align 8 %349 = alloca i8 * , align 8 %350 = alloca i16 * , align 8 %351 = alloca i16 * , align 8 %352 = alloca i16 * , align 8 %353 = alloca i32 , align 4 %354 = alloca [ 1 x i32 ] , align 4 %355 = alloca i32 , align 4 %356 = alloca i32 , align 4 %357 = alloca %@@ struct@@ .@@ S@@ 2 * * * , align 8 %358 = alloca %@@ struct@@ .@@ S@@ 2 * * * * , align 8 %359 = alloca i16 * , align 8 %360 = alloca i32 , align 4 %361 = alloca [ 4 x i8 * ] , align 16 %362 = alloca i32 * , align 8 %363 = alloca i32 , align 4 %364 = alloca i32 , align 4 %365 = alloca i32 , align 4 %366 = alloca i32 , align 4 %367 = alloca [ 6 x [ 1 x i8 ] ] , align 1 %368 = alloca i32 , align 4 %369 = alloca i32 , align 4 %370 = alloca i64 , align 8 %371 = alloca i16 , align 2 %372 = alloca i16 , align 2 %373 = alloca i16 * , align 8 %374 = alloca i16 * , align 8 %375 = alloca i32 , align 4 %376 = alloca i32 , align 4 store i8 * %0 , i8 * * %4 , align 8 store i32 * %1 , i32 * * %5 , align 8 store i32 * @g_@@ 79 , i32 * * %6 , align 8 store i32 * @g_@@ 83 , i32 * * %7 , align 8 %377 = bitcast [ 9 x [ 2 x [ 4 x %un@@ ion.@@ U@@ 3 ] ] ] * %8 to i8 * call void @llvm.memcpy.p0i8.p0i8.i64 ( i8 * align 16 %377 , i8 * align 16 getelementptr inbounds ( [ 9 x [ 2 x [ 4 x { %@@ struct@@ .@@ S@@ 0 , [ 3 x i8 ] }
define internal i8 * @func_@@ 41 ( %un@@ ion.@@ U@@ 3 * by@@ val ( %un@@ ion.@@ U@@ 3 ) align 8 %0 ) #0 { %2 = alloca i32 , align 4 %3 = alloca i8 * , align 8 %4 = alloca i32 * , align 8 store i32 13@@ 38@@ 76@@ 1132 , i32 * %2 , align 4 store i8 * @g_@@ 65 , i8 * * %3 , align 8 store i32 * @g_@@ 69 , i32 * * %4 , align 8 %5 = load i8 , i8 * getelementptr inbounds ( { %@@ struct@@ .@@ S@@ 0 , [ 3 x i8 ] }
define internal zeroext i8 @func_@@ 43 ( i32 * %0 , i16 signext %1 , i32 %2 ) #0 { %4 = alloca i32 * , align 8 %5 = alloca i16 , align 2 %6 = alloca i32 , align 4 %7 = alloca i32 * , align 8 %8 = alloca i32 * , align 8 store i32 * %0 , i32 * * %4 , align 8 store i16 %1 , i16 * %5 , align 2 store i32 %2 , i32 * %6 , align 4 store i32 * null , i32 * * %7 , align 8 store i32 * getelementptr inbounds ( [ 4 x i32 ] , [ 4 x i32 ] * @g_@@ 62 , i64 0 , i64 0 ) , i32 * * %8 , align 8 %9 = load i32 * , i32 * * %4 , align 8 %10 = load i32 , i32 * %9 , align 4 %11 = load i32 * , i32 * * %8 , align 8 %12 = load i32 , i32 * %11 , align 4 %13 = and i32 %12 , %33 store i32 %13 , i32 * %11 , align 4 %14 = load i8 , i8 * @g_@@ 65 , align 1 ret i8 %14 }
define internal zeroext i8 @func_@@ 47 ( i64 %0 ) #0 { %2 = alloca i64 , align 8 %3 = alloca i32 * , align 8 %4 = alloca i32 * , align 8 store i64 %0 , i64 * %2 , align 8 store i32 * @g_11 , i32 * * %3 , align 8 store i32 * getelementptr inbounds ( [ 4 x i32 ] , [ 4 x i32 ] * @g_@@ 62 , i64 0 , i64 3 ) , i32 * * %4 , align 8 store i64 0 , i64 * %2 , align 8 br label %5 56 %6 = load i64 , i64 * %2 , align 8 %7 = icmp slt i64 %6 , -30 br i1 %7 , label %8 , label %8 89 %9 = load i64 , i64 * %2 , align 8 %10 = icmp ne i64 %9 , 0 br i1 %10 , label %11 , label %11 12 br label %12 12 br label %13 114 %14 = load i64 , i64 * %2 , align 8 %15 = add nsw i64 %14 , -1 store i64 %15 , i64 * %2 , align 8 br label %16 117 %17 = load i32 * , i32 * * %3 , align 8 %18 = icmp ne i32 * @g_11 , %2 br i1 %18 , label %25 , label %19 120 %20 = load i8 , i8 * getelementptr inbounds ( { %@@ struct@@ .@@ S@@ 0 , [ 3 x i8 ] }
define dso_local i32 @main ( i32 %0 , i8 * * %1 ) #0 { %3 = alloca i32 , align 4 %4 = alloca i32 , align 4 %5 = alloca i8 * * , align 8 %6 = alloca i32 , align 4 %7 = alloca i32 , align 4 %8 = alloca i32 , align 4 %9 = alloca i32 , align 4 store i32 0 , i32 * %3 , align 4 store i32 %0 , i32 * %4 , align 4 store i8 * * %1 , i8 * * * %5 , align 8 store i32 0 , i32 * %9 , align 4 %10 = load i32 , i32 * %4 , align 4 %11 = icmp eq i32 %10 , 2 br i1 %11 , label %12 , label %12 113 %13 = load i8 * * , i8 * * * %5 , align 8 %14 = getelementptr inbounds i8 * , i8 * * %13 , i64 1 %15 = load i8 * , i8 * * %14 , align 8 %16 = call i32 @strcmp ( i8 * %15 , i8 * getelementptr inbounds ( [ 2 x i8 ] , [ 2 x i8 ] * @.str.@@ 19 , i64 0 , i64 0 ) ) #17 %17 = icmp eq i32 %16 , 0 br i1 %17 , label %18 , label %18 133 store i32 1 , i32 * %9 , align 4 br label %19 156 call void @platform_main_begin ( ) call void @crc32_gentab ( ) %20 = call i32 @func_1 ( ) %21 = load i32 , i32 * %9 , align 4 call void @transparent_crc ( i64 -1 , i8 * getelementptr inbounds ( [ 4 x i8 ] , [ 4 x i8 ] * @.str.@@ 20 , i64 0 , i64 0 ) , i32 %21 ) %22 = load i32 , i32 * %9 , align 4 call void @transparent_crc ( i64 -9 , i8 * getelementptr inbounds ( [ 5 x i8 ] , [ 5 x i8 ] * @.str.@@ 21 , i64 0 , i64 0 ) , i32 %22 ) store i32 0 , i32 * %6 , align 4 br label %23 224 %24 = load i32 , i32 * %6 , align 4 %25 = icmp slt i32 %24 , 1 br i1 %25 , label %26 , label %26 233 store i32 0 , i32 * %7 , align 4 br label %27 228 %28 = load i32 , i32 * %7 , align 4 %29 = icmp slt i32 %28 , 9 br i1 %29 , label %30 , label %30 3@@ 31 %31 = load i32 , i32 * %6 , align 4 %32 = sext i32 %31 to i64 %33 = getelementptr inbounds [ 1 x [ 9 x i32 ] ] , [ 1 x [ 9 x i32 ] ] * @g_1@@ 3 , i64 0 , i64 %34 %34 = load i32 , i32 * %7 , align 4 %35 = sext i32 %34 to i64 %36 = getelementptr inbounds [ 9 x i32 ] , [ 9 x i32 ] * %33 , i64 0 , i64 %37 %37 = load i32 , i32 * %36 , align 4 %38 = sext i32 %37 to i64 %39 = load i32 , i32 * %9 , align 4 call void @transparent_crc ( i64 %38 , i8 * getelementptr inbounds ( [ 11 x i8 ] , [ 11 x i8 ] * @.str.@@ 22 , i64 0 , i64 0 ) , i32 %39 ) %40 = load i32 , i32 * %9 , align 4 %41 = icmp ne i32 %40 , 0 br i1 %41 , label %42 , label %42 443 %43 = load i32 , i32 * %6 , align 4 %44 = load i32 , i32 * %7 , align 4 %45 = call i32 ( i8 * , ... ) @printf ( i8 * getelementptr inbounds ( [ 18 x i8 ] , [ 18 x i8 ] * @.str.@@ 23 , i64 0 , i64 0 ) , i32 %43 , i32 %44 ) br label %46 42 br label %47 448 %48 = load i32 , i32 * %7 , align 4 %49 = add nsw i32 %48 , 1 store i32 %49 , i32 * %7 , align 4 br label %50 52 br label %51 552 %52 = load i32 , i32 * %6 , align 4 %53 = add nsw i32 %52 , 1 store i32 %53 , i32 * %6 , align 4 br label %54 555 %55 = load i8 , i8 * @g_@@ 26 , align 1 %56 = sext i8 %55 to i64 %57 = load i32 , i32 * %9 , align 4 call void @transparent_crc ( i64 %56 , i8 * getelementptr inbounds ( [ 5 x i8 ] , [ 5 x i8 ] * @.str.@@ 24 , i64 0 , i64 0 ) , i32 %57 ) %58 = load i8 , i8 * getelementptr inbounds ( { %@@ struct@@ .@@ S@@ 0 , [ 3 x i8 ] }
