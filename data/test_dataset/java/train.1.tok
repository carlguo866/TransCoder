<DOCUMENT_ID="mayonghui2112/helloWorld/tree/master/sourceCode/OnJava8-Examples-master/patterns/trash/Paper.java"> package patterns . trash ; public class Paper extends Trash { private static double val = 0.10f ; public Paper ( double wt ) { super ( wt ) ; } @ Override public double value ( ) { return val ; } public static void value ( double newVal ) { val = newVal ; } } </DOCUMENT>
<DOCUMENT_ID="signed/intellij-community/tree/master/java/java-tests/testData/psi/parser-full/declarationParsing/class/NoType.java"> class ClassName { new X ( ) ; } </DOCUMENT>
<DOCUMENT_ID="poiru/uni-spiffer/tree/master/spiffer/src/test/java/com/mohanathas/spiffer/algorithm/NodeTest.java"> package com . mohanathas . spiffer . algorithm ; import com . mohanathas . spiffer . util . Point ; import org . junit . Test ; import static org . junit . Assert . * ; public class NodeTest { public NodeTest ( ) { } @ Test public void testConstructor ( ) { final Node node = new Node ( 1 , 2 ) ; assertEquals ( 1 , node . getX ( ) ) ; assertEquals ( 2 , node . getY ( ) ) ; assertEquals ( new Point ( 1 , 2 ) , node . getPoint ( ) ) ; assertEquals ( Float . MAX_VALUE , node . getStartDistance ( ) , 0.001f ) ; assertEquals ( 0.0f , node . getGoalDistance ( ) , 0.001f ) ; } @ Test public void testCompareTo ( ) { final Node node1 = new Node ( 0 , 0 ) ; final Node node2 = new Node ( 0 , 0 ) ; node1 . setStartDistance ( 1.0f ) ; node1 . setGoalDistance ( 2.0f ) ; node2 . setStartDistance ( 2.0f ) ; node2 . setGoalDistance ( 1.0f ) ; assertEquals ( 0 , node1 . compareTo ( node2 ) ) ; node2 . setGoalDistance ( 3.0f ) ; assertEquals ( - 1 , node1 . compareTo ( node2 ) ) ; } @ Test public void testToString ( ) { final Node node = new Node ( 1 , 2 ) ; assertEquals ( " ( 1 , ▁ 2 ) " , node . toString ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="fengyouchao/sockslib/tree/master/src/main/java/sockslib/client/CommandReplyMessage.java"> package sockslib . client ; import sockslib . common . AddressType ; import sockslib . utils . SocksUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . net . UnknownHostException ; public class CommandReplyMessage implements SocksMessage { protected Logger logger = LoggerFactory . getLogger ( CommandReplyMessage . class ) ; private byte [ ] replyBytes ; public CommandReplyMessage ( byte [ ] replyBytes ) { this . replyBytes = replyBytes ; } public boolean isSuccess ( ) { if ( replyBytes . length < 10 ) { return false ; } return replyBytes [ 1 ] == 0 ; } public InetAddress getIp ( ) throws UnknownHostException { byte [ ] addressBytes = null ; if ( replyBytes [ 3 ] == AddressType . IPV4 ) { addressBytes = new byte [ 4 ] ; } else if ( replyBytes [ 3 ] == AddressType . IPV6 ) { addressBytes = new byte [ 16 ] ; } System . arraycopy ( replyBytes , 4 , addressBytes , 0 , addressBytes . length ) ; return InetAddress . getByAddress ( addressBytes ) ; } public int getPort ( ) { return SocksUtil . bytesToInt ( replyBytes [ replyBytes . length - 2 ] , replyBytes [ replyBytes . length - 1 ] ) ; } public byte [ ] getReplyBytes ( ) { return replyBytes ; } public void setReplyBytes ( byte [ ] replyBytes ) { this . replyBytes = replyBytes ; } public SocketAddress getSocketAddress ( ) { try { return new InetSocketAddress ( getIp ( ) , getPort ( ) ) ; } catch ( UnknownHostException e ) { logger . error ( e . getMessage ( ) , e ) ; } return null ; } } </DOCUMENT>
<DOCUMENT_ID="dotunolafunmiloye/hadoop-common/tree/master/src/test/core/org/apache/hadoop/io/file/tfile/Timer.java"> package org . apache . hadoop . io . file . tfile ; import java . io . IOException ; import java . text . DateFormat ; import java . text . SimpleDateFormat ; public class Timer { long startTimeEpoch ; long finishTimeEpoch ; private DateFormat formatter = new SimpleDateFormat ( " yyyy - MM - dd ▁ HH : mm : ss " ) ; public void startTime ( ) throws IOException { startTimeEpoch = System . currentTimeMillis ( ) ; } public void stopTime ( ) throws IOException { finishTimeEpoch = System . currentTimeMillis ( ) ; } public long getIntervalMillis ( ) throws IOException { return finishTimeEpoch - startTimeEpoch ; } public void printlnWithTimestamp ( String message ) throws IOException { System . out . println ( formatCurrentTime ( ) + " ▁ ▁ " + message ) ; } public String formatTime ( long millis ) { return formatter . format ( millis ) ; } public String getIntervalString ( ) throws IOException { long time = getIntervalMillis ( ) ; return formatTime ( time ) ; } public String formatCurrentTime ( ) { return formatTime ( System . currentTimeMillis ( ) ) ; } } </DOCUMENT>
<DOCUMENT_ID="iweiss/activemq-artemis/tree/master/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/spring/SpringConsumer.java"> package org . apache . activemq . spring ; import javax . jms . Connection ; import javax . jms . ConnectionFactory ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . MessageConsumer ; import javax . jms . MessageListener ; import javax . jms . Session ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . jms . core . JmsTemplate ; public class SpringConsumer extends ConsumerBean implements MessageListener { private static final Logger LOG = LoggerFactory . getLogger ( SpringConsumer . class ) ; private JmsTemplate template ; private String myId = " foo " ; private Destination destination ; private Connection connection ; private Session session ; private MessageConsumer consumer ; public void start ( ) throws JMSException { String selector = " next ▁ = ▁ ' " + myId + " ' " ; try { ConnectionFactory factory = template . getConnectionFactory ( ) ; final Connection c = connection = factory . createConnection ( ) ; synchronized ( c ) { if ( c . getClientID ( ) == null ) { c . setClientID ( myId ) ; } } connection . start ( ) ; session = connection . createSession ( true , Session . CLIENT_ACKNOWLEDGE ) ; consumer = session . createConsumer ( destination , selector , false ) ; consumer . setMessageListener ( this ) ; } catch ( JMSException ex ) { LOG . error ( " " , ex ) ; throw ex ; } } public void stop ( ) throws JMSException { if ( consumer != null ) { consumer . close ( ) ; } if ( session != null ) { session . close ( ) ; } if ( connection != null ) { connection . close ( ) ; } } @ Override public void onMessage ( Message message ) { super . onMessage ( message ) ; try { message . acknowledge ( ) ; } catch ( JMSException e ) { LOG . error ( " Failed ▁ to ▁ acknowledge : ▁ " + e , e ) ; } } public Destination getDestination ( ) { return destination ; } public void setDestination ( Destination destination ) { this . destination = destination ; } public String getMyId ( ) { return myId ; } public void setMyId ( String myId ) { this . myId = myId ; } public JmsTemplate getTemplate ( ) { return template ; } public void setTemplate ( JmsTemplate template ) { this . template = template ; } } </DOCUMENT>
<DOCUMENT_ID="apixandru/intellij-community/tree/master/java/java-tests/testData/psi/parser-full/declarationParsing/class/NoType.java"> class ClassName { new X ( ) ; } </DOCUMENT>
<DOCUMENT_ID="davidzchen/bazel/tree/master/third_party/java/proguard/proguard5.3.3/src/proguard/optimize/info/InstanceofClassMarker.java"> package proguard . optimize . info ; import proguard . classfile . * ; import proguard . classfile . attribute . CodeAttribute ; import proguard . classfile . constant . ClassConstant ; import proguard . classfile . constant . visitor . ConstantVisitor ; import proguard . classfile . instruction . * ; import proguard . classfile . instruction . visitor . InstructionVisitor ; import proguard . classfile . util . SimplifiedVisitor ; import proguard . classfile . visitor . ClassVisitor ; public class InstanceofClassMarker extends SimplifiedVisitor implements InstructionVisitor , ConstantVisitor , ClassVisitor { public void visitAnyInstruction ( Clazz clazz , Method method , CodeAttribute codeAttribute , int offset , Instruction instruction ) { } public void visitConstantInstruction ( Clazz clazz , Method method , CodeAttribute codeAttribute , int offset , ConstantInstruction constantInstruction ) { if ( constantInstruction . opcode == InstructionConstants . OP_INSTANCEOF ) { clazz . constantPoolEntryAccept ( constantInstruction . constantIndex , this ) ; } } public void visitClassConstant ( Clazz clazz , ClassConstant classConstant ) { classConstant . referencedClassAccept ( this ) ; } public void visitLibraryClass ( LibraryClass libraryClass ) { } public void visitProgramClass ( ProgramClass programClass ) { setInstanceofed ( programClass ) ; } private static void setInstanceofed ( Clazz clazz ) { ClassOptimizationInfo info = ClassOptimizationInfo . getClassOptimizationInfo ( clazz ) ; if ( info != null ) { info . setInstanceofed ( ) ; } } public static boolean isInstanceofed ( Clazz clazz ) { ClassOptimizationInfo info = ClassOptimizationInfo . getClassOptimizationInfo ( clazz ) ; return info == null || info . isInstanceofed ( ) ; } } </DOCUMENT>
<DOCUMENT_ID="elastic-grid/Elastic-Grid/tree/master/modules/replicated-storage/src/main/java/com/elasticgrid/storage/replicated/ReplicatedContainer.java"> package com . elasticgrid . storage . replicated ; import com . elasticgrid . storage . Container ; import com . elasticgrid . storage . Storable ; import com . elasticgrid . storage . StorageException ; import com . elasticgrid . storage . StorableNotFoundException ; import java . util . Arrays ; import java . util . List ; import java . util . logging . Logger ; import java . io . File ; import java . io . InputStream ; public class ReplicatedContainer implements Container { private final Container preferred ; private final List < Container > otherContainers ; private static final Logger logger = Logger . getLogger ( ReplicatedContainer . class . getName ( ) ) ; public ReplicatedContainer ( Container preferred , List < Container > otherContainers ) { this . preferred = preferred ; this . otherContainers = otherContainers ; } public String getName ( ) { return null ; } public List < Storable > listStorables ( ) throws StorageException { return null ; } public Storable findStorableByName ( String name ) throws StorableNotFoundException , StorageException { return null ; } public Storable uploadStorable ( File file ) throws StorageException { return null ; } public Storable uploadStorable ( String name , File file ) throws StorageException { return null ; } public Storable uploadStorable ( String name , InputStream stream , String mimeType ) throws StorageException { return null ; } public void deleteStorable ( String name ) throws StorageException { } } </DOCUMENT>
