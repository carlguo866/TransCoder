private void run ( ) throws Exception { Drinker peter = new Drinker ( " Peter " , 15. ) , paul = new Drinker ( " Paul " , 20. ) , harry = new Drinker ( " Harry " , 30. ) ; Barmaid elke = new Barmaid ( " Elke " , 2. ) ; CustomerQueue drinking = new CustomerQueue ( " . " ) ; CustomerQueue thursty = new CustomerQueue ( " ? " ) ; thursty . enqueue ( peter , paul , harry ) ; ServerQueue tapping = new ServerQueue ( " X " ) ; ServerQueue free = new ServerQueue ( " . " ) ; free . enqueue ( elke ) ; SimpleServerCustomerSimulator sim = new SimpleServerCustomerSimulator ( free , tapping , thursty , drinking ) ; sim . setConsoleDump ( false ) ; double M = 120. ; sim . execute ( M ) ; }
protected Drinker ( String name , double drinkingTime ) { super ( name ) ; this . dt = drinkingTime ; }
public double getDuration ( ) { double var = RandomValueGenerator . number ( - 2. , + 2. , 0. , 1. ) ; return dt + var ; }
protected Barmaid ( String name , double serviceTime ) { super ( name ) ; this . dt = serviceTime ; }
public double getDuration ( ) { return dt + RandomValueGenerator . number ( - 1. , + 1. , 0. , 1. ) ; }
public boolean isApple ( String body ) { return " apple " . equalsIgnoreCase ( body ) ; }
public boolean isOrange ( String body ) { return " orange " . equalsIgnoreCase ( body ) ; }
public CmsResourceHistoryTable ( CmsHistoryResourceCollection data , I_CmsHistoryActionHandler handler ) { super ( Integer . MAX_VALUE , ( CellTable . Resources ) GWT . create ( I_CmsCellTableResources . class ) , new ProvidesKey < CmsHistoryResourceBean > ( ) { public Object getKey ( CmsHistoryResourceBean item ) { return item . getStructureId ( ) + " _ " + item . getVersion ( ) ; } } ) ; m_handler = handler ; setWidth ( "100 % " , true ) ; setTableLayoutFixed ( true ) ; addVersionColumn ( ) ; addPreviewColumn ( ) ; addRevertColumn ( ) ; addPathColumn ( ) ; addSizeColumn ( ) ; addModificationDateColumn ( ) ; addUserLastModifiedColumn ( ) ; addPublishDateColumn ( ) ; ListDataProvider < CmsHistoryResourceBean > dataProvider = new ListDataProvider < CmsHistoryResourceBean > ( ) ; dataProvider . addDataDisplay ( this ) ; dataProvider . setList ( data . getResources ( ) ) ; }
private void addColumn ( String label , int width , Column < CmsHistoryResourceBean , ? > col ) { addColumn ( col , label ) ; setColumnWidth ( col , width , Unit . PX ) ; }
private void addModificationDateColumn ( ) { addColumn ( CmsHistoryMessages . columnModificationDate ( ) , 190 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getModificationDate ( ) . getDateText ( ) ; } } ) ; }
private void addPathColumn ( ) { Column < CmsHistoryResourceBean , ? > col = new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { String path = historyRes . getRootPath ( ) ; String siteRoot = CmsCoreProvider . get ( ) . getSiteRoot ( ) ; if ( path . startsWith ( siteRoot ) ) { path = path . substring ( siteRoot . length ( ) ) ; if ( ! path . startsWith ( " / " ) ) { path = " / " + path ; } } return path ; } } ; addColumn ( col , CmsHistoryMessages . columnPath ( ) ) ; setColumnWidth ( col , 100 , Unit . PCT ) ; }
private void addPreviewColumn ( ) { CmsButtonCell < CmsHistoryResourceBean > previewCell = new CmsButtonCell < CmsHistoryResourceBean > ( CmsHistoryMessages . titlePreview ( ) , I_CmsImageBundle . INSTANCE . style ( ) . tablePreviewIcon ( ) , new ActionCell . Delegate < CmsHistoryResourceBean > ( ) { @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . showPreview ( historyRes ) ; } } , new Predicate < CmsHistoryResourceBean > ( ) { public boolean apply ( CmsHistoryResourceBean bean ) { return true ; } } ) ; addColumn ( CmsHistoryMessages . columnPreview ( ) , 30 , new IdentityColumn < CmsHistoryResourceBean > ( previewCell ) ) ; }
private void addPublishDateColumn ( ) { addColumn ( CmsHistoryMessages . columnPublishDate ( ) , 190 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { if ( historyRes . getPublishDate ( ) != null ) { return historyRes . getPublishDate ( ) . getDateText ( ) ; } return " - " ; } } ) ; }
private void addRevertColumn ( ) { CmsButtonCell < CmsHistoryResourceBean > replaceCell = new CmsButtonCell < CmsHistoryResourceBean > ( CmsHistoryMessages . titleRevert ( ) , I_CmsImageBundle . INSTANCE . style ( ) . tableReplaceIcon ( ) , new ActionCell . Delegate < CmsHistoryResourceBean > ( ) { @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . revert ( historyRes ) ; } } , new Predicate < CmsHistoryResourceBean > ( ) { public boolean apply ( CmsHistoryResourceBean bean ) { return bean . getVersion ( ) . getVersionNumber ( ) != null ; } } ) ; addColumn ( CmsHistoryMessages . columnReplace ( ) , 30 , new IdentityColumn < CmsHistoryResourceBean > ( replaceCell ) ) ; }
private void addSizeColumn ( ) { Column < CmsHistoryResourceBean , ? > col = new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return " " + historyRes . getSize ( ) ; } } ; addColumn ( col , CmsHistoryMessages . columnSize ( ) ) ; setColumnWidth ( col , 100 , Unit . PX ) ; }
private void addUserLastModifiedColumn ( ) { addColumn ( CmsHistoryMessages . columnUserLastModified ( ) , 120 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getUserLastModified ( ) ; } } ) ; }
private void addVersionColumn ( ) { AbstractCell < CmsHistoryResourceBean > cell = new CmsVersionCell ( ) ; addColumn ( CmsHistoryMessages . columnVersion ( ) , 40 , new IdentityColumn < CmsHistoryResourceBean > ( cell ) ) ; }
public HeadersFragment ( ) { setPresenterSelector ( sHeaderPresenter ) ; }
public void setOnHeaderClickedListener ( OnHeaderClickedListener listener ) { mOnHeaderClickedListener = listener ; }
public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelectedListener = listener ; }
protected VerticalGridView findGridViewFromRoot ( View view ) { return ( VerticalGridView ) view . findViewById ( R . id . browse_headers ) ; }
protected void onRowSelected ( ViewGroup parent , View view , int position , long id ) { if ( mOnItemSelectedListener != null ) { if ( position >= 0 ) { Row row = ( Row ) getAdapter ( ) . get ( position ) ; mOnItemSelectedListener . onItemSelected ( null , row ) ; } else { mOnItemSelectedListener . onItemSelected ( null , null ) ; } } }
private final ItemBridgeAdapter . AdapterListener mAdapterListener = new ItemBridgeAdapter . AdapterListener ( ) { @ Override public void onCreate ( ItemBridgeAdapter . ViewHolder viewHolder ) { View headerView = viewHolder . getViewHolder ( ) . view ; headerView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( mOnHeaderClickedListener != null ) { mOnHeaderClickedListener . onHeaderClicked ( ) ; } } } ) ; headerView . setFocusable ( true ) ; headerView . setFocusableInTouchMode ( true ) ; if ( mWrapper != null ) { viewHolder . itemView . addOnLayoutChangeListener ( sLayoutChangeListener ) ; } else { headerView . addOnLayoutChangeListener ( sLayoutChangeListener ) ; } } }
protected int getLayoutResourceId ( ) { return R . layout . lb_headers_fragment ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; final VerticalGridView listView = getVerticalGridView ( ) ; if ( listView == null ) { return ; } if ( getBridgeAdapter ( ) != null ) { FocusHighlightHelper . setupHeaderItemFocusHighlight ( listView ) ; } view . setBackgroundColor ( getBackgroundColor ( ) ) ; updateFadingEdgeToBrandColor ( getBackgroundColor ( ) ) ; updateListViewVisibility ( ) ; }
private void updateListViewVisibility ( ) { final VerticalGridView listView = getVerticalGridView ( ) ; if ( listView != null ) { getView ( ) . setVisibility ( mHeadersGone ? View . GONE : View . VISIBLE ) ; if ( ! mHeadersGone ) { if ( mHeadersEnabled ) { listView . setChildrenVisibility ( View . VISIBLE ) ; } else { listView . setChildrenVisibility ( View . INVISIBLE ) ; } } } }
void setHeadersEnabled ( boolean enabled ) { mHeadersEnabled = enabled ; updateListViewVisibility ( ) ; }
void setHeadersGone ( boolean gone ) { mHeadersGone = gone ; updateListViewVisibility ( ) ; }
public NoOverlappingFrameLayout ( Context context ) { super ( context ) ; }
public boolean hasOverlappingRendering ( ) { return false ; }
private final ItemBridgeAdapter . Wrapper mWrapper = new ItemBridgeAdapter . Wrapper ( ) { @ Override public void wrap ( View wrapper , View wrapped ) { ( ( FrameLayout ) wrapper ) . addView ( wrapped ) ; } @ Override public View createWrapper ( View root ) { return new NoOverlappingFrameLayout ( root . getContext ( ) ) ; } }
protected void updateAdapter ( ) { super . updateAdapter ( ) ; ItemBridgeAdapter adapter = getBridgeAdapter ( ) ; if ( adapter != null ) { adapter . setAdapterListener ( mAdapterListener ) ; adapter . setWrapper ( mWrapper ) ; } if ( adapter != null && getVerticalGridView ( ) != null ) { FocusHighlightHelper . setupHeaderItemFocusHighlight ( getVerticalGridView ( ) ) ; } }
void setBackgroundColor ( int color ) { mBackgroundColor = color ; mBackgroundColorSet = true ; if ( getView ( ) != null ) { getView ( ) . setBackgroundColor ( mBackgroundColor ) ; updateFadingEdgeToBrandColor ( mBackgroundColor ) ; } }
private void updateFadingEdgeToBrandColor ( int backgroundColor ) { View fadingView = getView ( ) . findViewById ( R . id . fade_out_edge ) ; Drawable background = fadingView . getBackground ( ) ; if ( background instanceof GradientDrawable ) { background . mutate ( ) ; ( ( GradientDrawable ) background ) . setColors ( new int [ ] { Color . TRANSPARENT , backgroundColor } ) ; } }
int getBackgroundColor ( ) { if ( getActivity ( ) == null ) { throw new IllegalStateException ( " Activity ▁ must ▁ be ▁ attached " ) ; } if ( mBackgroundColorSet ) { return mBackgroundColor ; } TypedValue outValue = new TypedValue ( ) ; getActivity ( ) . getTheme ( ) . resolveAttribute ( R . attr . defaultBrandColor , outValue , true ) ; return getResources ( ) . getColor ( outValue . resourceId ) ; }
void onTransitionStart ( ) { super . onTransitionStart ( ) ; if ( ! mHeadersEnabled ) { final VerticalGridView listView = getVerticalGridView ( ) ; if ( listView != null ) { listView . setDescendantFocusability ( ViewGroup . FOCUS_BEFORE_DESCENDANTS ) ; if ( listView . hasFocus ( ) ) { listView . requestFocus ( ) ; } } } }
void onTransitionEnd ( ) { if ( mHeadersEnabled ) { final VerticalGridView listView = getVerticalGridView ( ) ; if ( listView != null ) { listView . setDescendantFocusability ( ViewGroup . FOCUS_AFTER_DESCENDANTS ) ; if ( listView . hasFocus ( ) ) { listView . requestFocus ( ) ; } } } super . onTransitionEnd ( ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ toString ▁ of ▁ hydrated ▁ value " , method = " toString ( ) " ) public void toString_shouldReturnToStringOfHydratedValue ( ) throws Exception { PersonAttributeType type = Context . getPersonService ( ) . getPersonAttributeType ( 8 ) ; PersonAttribute attr = new PersonAttribute ( type , "6" ) ; Assert . assertEquals ( " MARRIED " , attr . toString ( ) ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ is ▁ voided " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeIsVoided ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setVoided ( true ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ has ▁ earlier ▁ date ▁ created " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeHasEarlierDateCreated ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setDateCreated ( new Date ( ) ) ; PersonAttribute other = new PersonAttribute ( ) ; pa . setDateCreated ( new Date ( pa . getDateCreated ( ) . getTime ( ) - 1000 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ this ▁ attribute ▁ has ▁ lower ▁ attribute ▁ type ▁ than ▁ argument " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfThisAttributeHasLowerAttributeTypeThanArgument ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setAttributeType ( new PersonAttributeType ( 2 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
@ Test @ Verifies ( value = " should ▁ not ▁ throw ▁ exception ▁ if ▁ attribute ▁ type ▁ is ▁ null " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldNotThrowExceptionIfAttributeTypeIdIsNull ( ) throws Exception { Assert . assertTrue ( new PersonAttribute ( 1 ) . compareTo ( new PersonAttribute ( 1 ) ) == 0 ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ has ▁ lower ▁ value " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeHasLowerValue ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "2" ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setAttributeType ( new PersonAttributeType ( 1 ) ) ; other . setValue ( "1" ) ; Assert . assertTrue ( pa . compareTo ( other ) > 0 ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ this ▁ attribute ▁ has ▁ lower ▁ attribute ▁ id ▁ than ▁ argument " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfThisAttributeHasLowerAttributeIdThanArgument ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 1 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( 2 ) ; other . setAttributeType ( new PersonAttributeType ( 1 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
@ Test @ Verifies ( value = " should ▁ return ▁ true ▁ if ▁ attributeType ▁ value ▁ and ▁ void ▁ status ▁ are ▁ the ▁ same " , method = " equalsContent ( PersonAttribute ) " ) public void equalsContent_shouldReturnTrueIfAttributeTypeValueAndVoidStatusAreTheSame ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "1" ) ; pa . setVoided ( false ) ; PersonAttribute other = new PersonAttribute ( 1 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "1" ) ; pa . setVoided ( false ) ; Assert . assertTrue ( pa . equalsContent ( other ) ) ; }
@ Test @ Verifies ( value = " should ▁ load ▁ class ▁ in ▁ format ▁ property " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldLoadClassInFormatProperty ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " org . openmrs . Concept " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( "5089" ) ; Concept concept = ( Concept ) pa . getHydratedObject ( ) ; Assert . assertEquals ( 5089 , concept . getConceptId ( ) . intValue ( ) ) ; }
@ Test @ Verifies ( value = " should ▁ load ▁ user ▁ class ▁ in ▁ format ▁ property " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldLoadUserClassInFormatProperty ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " org . openmrs . User " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( "1" ) ; Object value = pa . getHydratedObject ( ) ; Assert . assertTrue ( " should ▁ load ▁ user ▁ class ▁ in ▁ format ▁ property " , ( value instanceof User ) ) ; }
@ Test @ Verifies ( value = " should ▁ still ▁ load ▁ class ▁ in ▁ format ▁ property ▁ if ▁ not ▁ Attributable " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldStillLoadClassInFormatPropertyIfNotAttributable ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " java . lang . String " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( " lalapalooza " ) ; String value = ( String ) pa . getHydratedObject ( ) ; Assert . assertEquals ( " lalapalooza " , value ) ; }
@ Test @ Verifies ( value = " should ▁ set ▁ voided ▁ bit ▁ to ▁ true " , method = " voidAttribute ( String ) " ) public void voidAttribute_shouldSetVoidedBitToTrue ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setVoided ( false ) ; pa . voidAttribute ( " Because " ) ; Assert . assertTrue ( pa . isVoided ( ) ) ; }
public ActivityGroupPage ( ) { }
public ActivityGroupPage ( java . lang . Integer totalResultSetSize , java . lang . Integer startIndex , com . google . api . ads . dfp . axis . v201308 . ActivityGroup [ ] results ) { this . totalResultSetSize = totalResultSetSize ; this . startIndex = startIndex ; this . results = results ; }
public java . lang . Integer getTotalResultSetSize ( ) { return totalResultSetSize ; }
public void setTotalResultSetSize ( java . lang . Integer totalResultSetSize ) { this . totalResultSetSize = totalResultSetSize ; }
public java . lang . Integer getStartIndex ( ) { return startIndex ; }
public void setStartIndex ( java . lang . Integer startIndex ) { this . startIndex = startIndex ; }
public com . google . api . ads . dfp . axis . v201308 . ActivityGroup [ ] getResults ( ) { return results ; }
public void setResults ( com . google . api . ads . dfp . axis . v201308 . ActivityGroup [ ] results ) { this . results = results ; }
public com . google . api . ads . dfp . axis . v201308 . ActivityGroup getResults ( int i ) { return this . results [ i ] ; }
public void setResults ( int i , com . google . api . ads . dfp . axis . v201308 . ActivityGroup _value ) { this . results [ i ] = _value ; }
public synchronized boolean equals ( java . lang . Object obj ) { if ( ! ( obj instanceof ActivityGroupPage ) ) return false ; ActivityGroupPage other = ( ActivityGroupPage ) obj ; if ( obj == null ) return false ; if ( this == obj ) return true ; if ( __equalsCalc != null ) { return ( __equalsCalc == obj ) ; } __equalsCalc = obj ; boolean _equals ; _equals = true && ( ( this . totalResultSetSize == null && other . getTotalResultSetSize ( ) == null ) || ( this . totalResultSetSize != null && this . totalResultSetSize . equals ( other . getTotalResultSetSize ( ) ) ) ) && ( ( this . startIndex == null && other . getStartIndex ( ) == null ) || ( this . startIndex != null && this . startIndex . equals ( other . getStartIndex ( ) ) ) ) && ( ( this . results == null && other . getResults ( ) == null ) || ( this . results != null && java . util . Arrays . equals ( this . results , other . getResults ( ) ) ) ) ; __equalsCalc = null ; return _equals ; }
public synchronized int hashCode ( ) { if ( __hashCodeCalc ) { return 0 ; } __hashCodeCalc = true ; int _hashCode = 1 ; if ( getTotalResultSetSize ( ) != null ) { _hashCode += getTotalResultSetSize ( ) . hashCode ( ) ; } if ( getStartIndex ( ) != null ) { _hashCode += getStartIndex ( ) . hashCode ( ) ; } if ( getResults ( ) != null ) { for ( int i = 0 ; i < java . lang . reflect . Array . getLength ( getResults ( ) ) ; i ++ ) { java . lang . Object obj = java . lang . reflect . Array . get ( getResults ( ) , i ) ; if ( obj != null && ! obj . getClass ( ) . isArray ( ) ) { _hashCode += obj . hashCode ( ) ; } } } __hashCodeCalc = false ; return _hashCode ; }
