MAXIMUM_@@ NUMBER_@@ CHARAC@@ TER@@ S_@@ TWO_@@ CHARACTER_@@ STRING | int maximum@@ Chars ( string & str ) { int n = str . length ( ) ; int res = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res , abs ( j - i - 1 ) ) ; return res ; }
FIND_@@ MIRR@@ OR_@@ IMAGE_@@ POINT_@@ 2_@@ D_@@ PLAN@@ E | pair < double , double > mirror@@ Image ( double a , double b , double c , double x1 , double y1 ) { double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ; double x = temp * a + x1 ; double y = temp * b + y1 ; return make_pair ( x , y ) ; }
EF@@ FI@@ CI@@ EN@@ TL@@ Y_@@ COMP@@ UTE_@@ SUM@@ S_@@ OF_@@ DIAG@@ ON@@ AL@@ S_@@ OF_@@ A_@@ MATRIX | void print@@ Diag@@ onal@@ Sum@@ s ( int mat [ ] [ MAX ] , int n ) { int principal = 0 , secondary = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) principal += mat [ i ] [ j ] ; if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ] ; } } cout << " Principal ▁ Diagonal : " << principal << endl ; cout << " Secondary ▁ Diagonal : " << secondary << endl ; }
COUN@@ TS_@@ PATH@@ S_@@ POINT_@@ REACH_@@ ORIGIN | int count@@ Paths ( int n , int m ) { if ( n == 0 || m == 0 ) return 1 ; return ( count@@ Paths ( n - 1 , m ) + count@@ Paths ( n , m - 1 ) ) ; }
FIND_@@ A_@@ TR@@ IP@@ LET_@@ TH@@ AT_@@ S@@ UM_@@ TO_@@ A_@@ GI@@ V@@ EN_@@ VALUE_@@ 1 | bool find@@ 3@@ Numbers ( int A [ ] , int arr_@@ size , int sum ) { int l , r ; sort ( A , A + arr_@@ size ) ; for ( int i = 0 ; i < arr_@@ size - 2 ; i ++ ) { l = i + 1 ; r = arr_@@ size - 1 ; while ( l < r ) { if ( A [ i ] + A [ l ] + A [ r ] == sum ) { printf ( " Trip@@ let ▁ is ▁ % d , ▁ % d , ▁ % d " , A [ i ] , A [ l ] , A [ r ] ) ; return true ; } else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++ ; else r -- ; } } return false ; }
CHECK_@@ GI@@ V@@ EN_@@ MATRIX_@@ IS_@@ MAG@@ IC@@ _S@@ QU@@ ARE_@@ OR_@@ NOT | bool is@@ Magic@@ Square ( int mat [ ] [ N ] ) { int sum = 0 , sum@@ 2 = 0 ; for ( int i = 0 ; i < N ; i ++ ) sum = sum + mat [ i ] [ i ] ; for ( int i = 0 ; i < N ; i ++ ) sum@@ 2 = sum@@ 2 + mat [ i ] [ N - 1 - i ] ; if ( sum != sum@@ 2 ) return false ; for ( int i = 0 ; i < N ; i ++ ) { int row@@ Sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) row@@ Sum += mat [ i ] [ j ] ; if ( row@@ Sum != sum ) return false ; } for ( int i = 0 ; i < N ; i ++ ) { int col@@ Sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) col@@ Sum += mat [ j ] [ i ] ; if ( sum != col@@ Sum ) return false ; } return true ; }
SEQU@@ EN@@ CES_@@ GI@@ V@@ EN_@@ LENGTH_@@ EVER@@ Y_@@ ELEMENT_@@ EQUAL_@@ TWI@@ CE_@@ PREVI@@ OUS_@@ 1 | int getTotal@@ NumberOf@@ Sequences ( int m , int n ) { int T [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m + 1 ; i ++ ) { for ( int j = 0 ; j < n + 1 ; j ++ ) { if ( i == 0 || j == 0 ) T [ i ] [ j ] = 0 ; else if ( i < j ) T [ i ] [ j ] = 0 ; else if ( j == 1 ) T [ i ] [ j ] = i ; else T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [ j - 1 ] ; } } return T [ m ] [ n ] ; }
FIND_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN@@ _S@@ UM@@ S_@@ OF_@@ TWO_@@ DIAG@@ ON@@ AL@@ S_@@ 1 | int difference ( int arr [ ] [ MAX ] , int n ) { int d1 = 0 , d2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d1 += arr [ i ] [ i ] ; d2 += arr [ i ] [ n - i - 1 ] ; } return abs ( d1 - d2 ) ; }
MINIMUM_@@ NUMBER@@ _SUB@@ SE@@ TS_@@ DISTIN@@ CT_@@ ELEMENTS | int subset ( int ar [ ] , int n ) { int res = 0 ; sort ( ar , ar + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ; for ( ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; } res = max ( res , count ) ; } return res ; }
DECIMAL_@@ BINARY_@@ CON@@ VERSION_@@ WITH@@ OUT_@@ USING_@@ ARI@@ TH@@ ME@@ TIC_@@ OPER@@ ATORS | string dec@@ To@@ Bin ( int n ) { if ( n == 0 ) return "0" ; string bin = " " ; while ( n > 0 ) { bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ; n >>= 1 ; } return bin ; }
FIND_@@ N@@ TH_@@ TER@@ M_@@ DRAG@@ ON_@@ CUR@@ VE_@@ SEQUENCE | string Drag@@ on_@@ Cur@@ ve_@@ Sequence ( int n ) { string s = "1" ; for ( int i = 2 ; i <= n ; i ++ ) { string temp = "1" ; char prev = '1' , zero = '0' , one = '1' ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { temp += s [ j ] ; if ( prev == '0' ) { temp += one ; prev = one ; } else { temp += zero ; prev = zero ; } } s = temp ; } return s ; }
STACK@@ _SET_@@ 3_@@ REVERSE_@@ STRING_@@ USING_@@ STACK | void reverse ( char str [ ] ) { int n = strlen ( str ) , i ; for ( i = 0 ; i < n / 2 ; i ++ ) swap ( & str [ i ] , & str [ n - i - 1 ] ) ; }
SORT_@@ EV@@ EN_@@ PL@@ AC@@ ED_@@ ELEMEN@@ TS_@@ INCRE@@ AS@@ ING_@@ OD@@ D_@@ PL@@ AC@@ ED_@@ DECRE@@ AS@@ ING_@@ ORDER_@@ 1 | void bit@@ on@@ ic@@ Generator ( int arr [ ] , int n ) { int i = 1 ; int j = n - 1 ; if ( j % 2 != 0 ) j -- ; while ( i < j ) { swap ( arr [ i ] , arr [ j ] ) ; i += 2 ; j -= 2 ; } sort ( arr , arr + ( n + 1 ) / 2 ) ; sort ( arr + ( n + 1 ) / 2 , arr + n , greater < int > ( ) ) ; }
GI@@ V@@ EN_@@ TWO_@@ NUMB@@ ERS_@@ B_@@ FIND_@@ X_@@ X_@@ B | void mod@@ ular@@ Equation ( int a , int b ) { if ( a < b ) { cout << " No ▁ solution ▁ possible ▁ " << endl ; return ; } if ( a == b ) { cout << " In@@ finite ▁ Solution ▁ possible ▁ " << endl ; return ; } int count = 0 ; int n = a - b ; int y = sqrt ( a - b ) ; for ( int i = 1 ; i <= y ; ++ i ) { if ( n % i == 0 ) { if ( n / i > b ) count ++ ; if ( i > b ) count ++ ; } } if ( y * y == n && y > b ) count -- ; cout << count << endl ; }
CHECK_@@ CHARAC@@ TER@@ S_@@ GI@@ V@@ EN_@@ STRING_@@ CAN_@@ RE@@ AR@@ RANGE@@ D_@@ FORM_@@ PA@@ LIN@@ DRO@@ ME | bool can@@ Form@@ Pal@@ ind@@ ro@@ me ( string str ) { int count [ NO_@@ OF_@@ CHARS ] = { 0 } ; for ( int i = 0 ; str [ i ] ; i ++ ) count [ str [ i ] ] ++ ; int odd = 0 ; for ( int i = 0 ; i < NO_@@ OF_@@ CHARS ; i ++ ) { if ( count [ i ] & 1 ) odd ++ ; if ( odd > 1 ) return false ; } return true ; }
MAXIMUM_@@ TR@@ IP@@ LET_@@ S@@ UM_@@ ARRAY_@@ 1 | int max@@ Trip@@ let@@ Sum ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ; }
FIND_@@ MEDI@@ AN_@@ ROW_@@ WI@@ SE_@@ SOR@@ TED_@@ MATRIX | int binary@@ Medi@@ an ( int m [ ] [ MAX ] , int r , int c ) { int min = INT_MAX , max = INT_@@ MIN ; for ( int i = 0 ; i < r ; i ++ ) { if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ; if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ; } int desired = ( r * c + 1 ) / 2 ; while ( min < max ) { int mid = min + ( max - min ) / 2 ; int place = 0 ; for ( int i = 0 ; i < r ; ++ i ) place += upper_bound ( m [ i ] , m [ i ] + c , mid ) - m [ i ] ; if ( place < desired ) min = mid + 1 ; else max = mid ; } return min ; }
HEIGHT_@@ N_@@ ARY_@@ TREE_@@ PARENT_@@ ARRAY_@@ GI@@ VEN | int find@@ Height ( int * parent , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = i , current = 1 ; while ( parent [ p ] != - 1 ) { current ++ ; p = parent [ p ] ; } res = max ( res , current ) ; } return res ; }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 20 | bool di@@ visible@@ By@@ 20 ( string num ) { int last@@ Two@@ Digits = sto@@ i ( num . substr ( num . length ( ) - 2 , num . length ( ) - 1 ) ) ; return ( ( last@@ Two@@ Digits % 5 == 0 ) && ( last@@ Two@@ Digits % 4 == 0 ) ) ; }
MAXIMUM_@@ VALUE_@@ CHO@@ ICE_@@ EI@@ THER_@@ DIV@@ ID@@ ING_@@ CON@@ SI@@ DER@@ ING | int max@@ DP ( int n ) { int res [ n + 1 ] ; res [ 0 ] = 0 ; res [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res [ i ] = max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ; return res [ n ] ; }
QUER@@ I@@ ES_@@ ON_@@ ARRAY_@@ WITH_@@ DIS@@ AP@@ PE@@ AR@@ ING_@@ AND_@@ RE@@ AP@@ PE@@ AR@@ ING_@@ ELEMENTS | void Perform@@ Queries ( vector < int > & a , vector < pair < long long , int > > & vec ) { vector < int > ans ; int n = ( int ) a . size ( ) - 1 ; int q = ( int ) vec . size ( ) ; for ( int i = 0 ; i < q ; ++ i ) { long long t = vec [ i ] . first ; int m = vec [ i ] . second ; if ( m > n ) { ans . push_back ( - 1 ) ; continue ; } int turn = t / n ; int rem = t % n ; if ( rem == 0 and turn % 2 == 1 ) { ans . push_back ( - 1 ) ; continue ; } if ( rem == 0 and turn % 2 == 0 ) { ans . push_back ( a [ m ] ) ; continue ; } if ( turn % 2 == 0 ) { int cur@@ size = n - rem ; if ( cur@@ size < m ) { ans . push_back ( - 1 ) ; continue ; } ans . push_back ( a [ m + rem ] ) ; } else { int cur@@ size = rem ; if ( cur@@ size < m ) { ans . push_back ( - 1 ) ; continue ; } ans . push_back ( a [ m ] ) ; } } for ( int i : ans ) cout << i << " \n " ; }
FIND_@@ THE_@@ MINIMUM_@@ DISTAN@@ CE_@@ BETWE@@ EN_@@ TWO_@@ NUMB@@ ERS_@@ 1 | int min@@ Dist ( int arr [ ] , int n , int x , int y ) { int i = 0 ; int min_@@ dist = INT_MAX ; int prev ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x || arr [ i ] == y ) { prev = i ; break ; } } for ( ; i < n ; i ++ ) { if ( arr [ i ] == x || arr [ i ] == y ) { if ( arr [ prev ] != arr [ i ] && ( i - prev ) < min_@@ dist ) { min_@@ dist = i - prev ; prev = i ; } else prev = i ; } } return min_@@ dist ; }
UNI@@ ON_@@ AND_@@ INTER@@ SECTION_@@ OF_@@ TW@@ O@@ _S@@ OR@@ TED_@@ ARRAY@@ S_@@ 2 | int print@@ Union ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int m , int n ) { int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( ar@@ r1 [ i ] < ar@@ r2 [ j ] ) cout << ar@@ r1 [ i ++ ] << " ▁ " ; else if ( ar@@ r2 [ j ] < ar@@ r1 [ i ] ) cout << ar@@ r2 [ j ++ ] << " ▁ " ; else { cout << ar@@ r2 [ j ++ ] << " ▁ " ; i ++ ; } } while ( i < m ) cout << ar@@ r1 [ i ++ ] << " ▁ " ; while ( j < n ) cout << ar@@ r2 [ j ++ ] << " ▁ " ; }
WORD_@@ WRAP_@@ PRO@@ BLE@@ M@@ _SPACE_@@ OPTIMIZ@@ ED@@ _S@@ OL@@ U@@ TION | void solve@@ Word@@ Wrap ( int arr [ ] , int n , int k ) { int i , j ; int curr@@ len ; int cost ; int dp [ n ] ; int ans [ n ] ; dp [ n - 1 ] = 0 ; ans [ n - 1 ] = n - 1 ; for ( i = n - 2 ; i >= 0 ; i -- ) { curr@@ len = - 1 ; dp [ i ] = INT_MAX ; for ( j = i ; j < n ; j ++ ) { curr@@ len += ( arr [ j ] + 1 ) ; if ( curr@@ len > k ) break ; if ( j == n - 1 ) cost = 0 ; else cost = ( k - curr@@ len ) * ( k - curr@@ len ) + dp [ j + 1 ] ; if ( cost < dp [ i ] ) { dp [ i ] = cost ; ans [ i ] = j ; } } } i = 0 ; while ( i < n ) { cout << i + 1 << " ▁ " << ans [ i ] + 1 << " ▁ " ; i = ans [ i ] + 1 ; } }
COUNT_@@ DISTIN@@ CT_@@ SUB@@ SEQU@@ EN@@ CES | int count@@ Sub ( string str ) { vector < int > last ( MAX_@@ CHAR , - 1 ) ; int n = str . length ( ) ; int dp [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = 2 * dp [ i - 1 ] ; if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str [ i - 1 ] ] ] ; last [ str [ i - 1 ] ] = ( i - 1 ) ; } return dp [ n ] ; }
LON@@ GE@@ ST_@@ EV@@ EN_@@ LENGTH@@ _SUB@@ STRING@@ _S@@ UM_@@ FIR@@ ST@@ _SECON@@ D_@@ HALF_@@ 3 | int find@@ Length ( string str , int n ) { int ans = 0 ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { int l = i , r = i + 1 ; int l@@ sum = 0 , r@@ sum = 0 ; while ( r < n && l >= 0 ) { l@@ sum += str [ l ] - '0' ; r@@ sum += str [ r ] - '0' ; if ( l@@ sum == r@@ sum ) ans = max ( ans , r - l + 1 ) ; l -- ; r ++ ; } } return ans ; }
MAXIMUM_@@ PATH@@ _S@@ UM_@@ MATRIX | int find@@ Max@@ Path ( int mat [ ] [ M ] ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ; else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ; else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ; } } int res = 0 ; for ( int j = 0 ; j < M ; j ++ ) res = max ( mat [ N - 1 ] [ j ] , res ) ; return res ; }
MAXIMUM_@@ CON@@ SEC@@ UTI@@ VE_@@ REPE@@ ATING_@@ CHARACTER_@@ STRING | char max@@ Repe@@ ating ( string str ) { int len = str . length ( ) ; int count = 0 ; char res = str [ 0 ] ; for ( int i = 0 ; i < len ; i ++ ) { int cur_@@ count = 1 ; for ( int j = i + 1 ; j < len ; j ++ ) { if ( str [ i ] != str [ j ] ) break ; cur_@@ count ++ ; } if ( cur_@@ count > count ) { count = cur_@@ count ; res = str [ i ] ; } } return res ; }
MAXIMUM_@@ LENGTH@@ _SUB@@ SEQU@@ ENCE_@@ DIFF@@ ER@@ ENCE_@@ AD@@ J@@ AC@@ ENT_@@ ELEMEN@@ TS_@@ EI@@ THER_@@ 0_@@ 1 | int max@@ Len@@ Sub ( int arr [ ] , int n ) { int m@@ ls [ n ] , max = 0 ; for ( int i = 0 ; i < n ; i ++ ) m@@ ls [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && m@@ ls [ i ] < m@@ ls [ j ] + 1 ) m@@ ls [ i ] = m@@ ls [ j ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( max < m@@ ls [ i ] ) max = m@@ ls [ i ] ; return max ; }
BREA@@ KING_@@ NUMBER_@@ FIRST_@@ PART_@@ INTEGR@@ AL_@@ DI@@ VISI@@ ON@@ _SECON@@ D_@@ POWER_@@ 10 | int calculate ( string N ) { int len = N . length ( ) ; int l = ( len ) / 2 ; int count = 0 ; for ( int i = 1 ; i <= l ; i ++ ) { string s = N . substr ( 0 , i ) ; int l1 = s . length ( ) ; string t = N . substr ( i , l1 ) ; if ( s [ 0 ] == '0' || t [ 0 ] == '0' ) continue ; if ( s . compare ( t ) == 0 ) count ++ ; } return count ; }
PROGRAM_@@ BINARY_@@ DECIMAL_@@ CONVERSION | int binary@@ To@@ Decimal ( int n ) { int num = n ; int dec_@@ value = 0 ; int base = 1 ; int temp = num ; while ( temp ) { int last_@@ digit = temp % 10 ; temp = temp / 10 ; dec_@@ value += last_@@ digit * base ; base = base * 2 ; } return dec_@@ value ; }
HO@@ W_@@ CAN_@@ W@@ E_@@ S@@ UM_@@ THE_@@ DIG@@ IT@@ S_@@ OF_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ IN@@ _SIN@@ GLE_@@ STATEMENT | public : int getS@@ um ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; }
FIND_@@ N_@@ TH_@@ ELEMENT_@@ FROM_@@ STER@@ NS_@@ DI@@ ATOMI@@ C@@ _SERI@@ ES | int find@@ SD@@ S@@ Func ( int n ) { int DP [ n + 1 ] ; DP [ 0 ] = 0 ; DP [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ; else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ] ; } return DP [ n ] ; }
NUMBER@@ _SIN@@ K_@@ NODE@@ S_@@ GRAP@@ H | int count@@ Sink ( int n , int m , int edge@@ From [ ] , int edge@@ To [ ] ) { int mark [ n ] ; memset ( mark , 0 , sizeof mark ) ; for ( int i = 0 ; i < m ; i ++ ) mark [ edge@@ From [ i ] ] = 1 ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! mark [ i ] ) count ++ ; return count ; }
BREAK_@@ NUMBER_@@ THRE@@ E_@@ PAR@@ TS | ll count_@@ of_@@ ways ( ll n ) { ll count = 0 ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) for ( int k = 0 ; k <= n ; k ++ ) if ( i + j + k == n ) count ++ ; return count ; }
PRINT_@@ DISTIN@@ CT_@@ ELEMEN@@ TS_@@ GI@@ V@@ EN_@@ INTEGER_@@ ARRAY | void print@@ Distin@@ ct ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] == arr [ j ] ) break ; if ( i == j ) cout << arr [ i ] << " ▁ " ; } }
MAXIMUM_@@ NUMBER@@ _SEG@@ MEN@@ TS_@@ LENGTH@@ S_@@ B_@@ C | int maximum@@ Segments ( int n , int a , int b , int c ) { int dp [ n + 1 ] ; memset ( dp , - 1 , sizeof ( dp ) ) ; dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] != - 1 ) { if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] ) ; if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] ) ; if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] ) ; } } return dp [ n ] ; }
CHECK_@@ VALI@@ D@@ _SEQU@@ ENCE_@@ DI@@ VISI@@ BLE_@@ M | bool is@@ Possible ( int n , int index , int sum , int M , int arr [ ] , int dp [ ] [ MAX ] ) { if ( index == n ) { if ( ( sum % M ) == 0 ) return true ; return false ; } if ( dp [ index ] [ sum ] != - 1 ) return dp [ index ] [ sum ] ; bool place@@ Add = is@@ Possible ( n , index + 1 , sum + arr [ index ] , M , arr , dp ) ; bool place@@ Minus = is@@ Possible ( n , index + 1 , sum - arr [ index ] , M , arr , dp ) ; bool res = ( place@@ Add || place@@ Minus ) ; dp [ index ] [ sum ] = res ; return res ; }
FIND_@@ PA@@ IR_@@ WITH_@@ GREA@@ TEST_@@ PRODUCT_@@ IN_@@ ARRAY | int find@@ Gre@@ atest ( int arr [ ] , int n ) { int result = - 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n - 1 ; j ++ ) for ( int k = j + 1 ; k < n ; k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result , arr [ i ] ) ; return result ; }
MAX@@ IM@@ UM@@ _SUB@@ ARRA@@ Y_S@@ UM_@@ ARRAY_@@ CRE@@ ATED_@@ REPE@@ ATED_@@ CON@@ CAT@@ EN@@ ATION | int max@@ Sub@@ Array@@ Sum@@ Repe@@ ated ( int a [ ] , int n , int k ) { int max_@@ so@@ _f@@ ar = INT_@@ MIN , max_@@ ending_@@ here = 0 ; for ( int i = 0 ; i < n * k ; i ++ ) { max_@@ ending_@@ here = max_@@ ending_@@ here + a [ i % n ] ; if ( max_@@ so@@ _f@@ ar < max_@@ ending_@@ here ) max_@@ so@@ _f@@ ar = max_@@ ending_@@ here ; if ( max_@@ ending_@@ here < 0 ) max_@@ ending_@@ here = 0 ; } return max_@@ so@@ _f@@ ar ; }
LE@@ ON@@ AR@@ DO_@@ NUMBER_@@ 1 | int le@@ on@@ ar@@ do ( int n ) { int dp [ n + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ; return dp [ n ] ; }
S@@ UM_@@ OF_@@ ALL@@ _SUB@@ STRING@@ S_@@ OF_@@ A_@@ STRING_@@ RE@@ PRESEN@@ TING_@@ A_@@ NUMBER | int sum@@ Of@@ Sub@@ strings ( string num ) { int n = num . length ( ) ; int su@@ mo@@ f@@ digit [ n ] ; su@@ mo@@ f@@ digit [ 0 ] = to@@ Digit ( num [ 0 ] ) ; int res = su@@ mo@@ f@@ digit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int num@@ i = to@@ Digit ( num [ i ] ) ; su@@ mo@@ f@@ digit [ i ] = ( i + 1 ) * num@@ i + 10 * su@@ mo@@ f@@ digit [ i - 1 ] ; res += su@@ mo@@ f@@ digit [ i ] ; } return res ; }
PR@@ U@@ F@@ ER_@@ CODE_@@ TREE_@@ CRE@@ ATION | void print@@ Tree@@ Edges ( int pr@@ u@@ fer [ ] , int m ) { int vertices = m + 2 ; int vertex@@ _set [ vertices ] ; for ( int i = 0 ; i < vertices ; i ++ ) vertex@@ _set [ i ] = 0 ; for ( int i = 0 ; i < vertices - 2 ; i ++ ) vertex@@ _set [ pr@@ u@@ fer [ i ] - 1 ] += 1 ; cout << " \n The ▁ edge ▁ set ▁ E ( G ) ▁ is ▁ : \n " ; int j = 0 ; for ( int i = 0 ; i < vertices - 2 ; i ++ ) { for ( j = 0 ; j < vertices ; j ++ ) { if ( vertex@@ _set [ j ] == 0 ) { vertex@@ _set [ j ] = - 1 ; cout << " ( " << ( j + 1 ) << " , ▁ " << pr@@ u@@ fer [ i ] << " ) ▁ ▁ " ; vertex@@ _set [ pr@@ u@@ fer [ i ] - 1 ] -- ; break ; } } } j = 0 ; for ( int i = 0 ; i < vertices ; i ++ ) { if ( vertex@@ _set [ i ] == 0 && j == 0 ) { cout << " ( " << ( i + 1 ) << " , ▁ " ; j ++ ; } else if ( vertex@@ _set [ i ] == 0 && j == 1 ) cout << ( i + 1 ) << " ) \n " ; } }
PROGRAM_@@ FIN@@ D_S@@ MAL@@ LE@@ ST_@@ DIFF@@ ER@@ ENCE_@@ ANG@@ LES_@@ TWO_@@ PAR@@ TS_@@ GI@@ V@@ EN_@@ CIRC@@ LE | int find@@ Minimum@@ Angle ( int arr [ ] , int n ) { int l = 0 , sum = 0 , ans = 360 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; while ( sum >= 180 ) { ans = min ( ans , 2 * abs ( 180 - sum ) ) ; sum -= arr [ l ] ; l ++ ; } ans = min ( ans , 2 * abs ( 180 - sum ) ) ; } return ans ; }
FIND_@@ MAXIMUM_@@ AVER@@ AGE_@@ SUB@@ ARRAY_@@ OF_@@ K_@@ LENGTH | int find@@ Max@@ Average ( int arr [ ] , int n , int k ) { if ( k > n ) return - 1 ; int * c@@ sum = new int [ n ] ; c@@ sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) c@@ sum [ i ] = c@@ sum [ i - 1 ] + arr [ i ] ; int max_@@ sum = c@@ sum [ k - 1 ] , max_@@ end = k - 1 ; for ( int i = k ; i < n ; i ++ ) { int curr_@@ sum = c@@ sum [ i ] - c@@ sum [ i - k ] ; if ( curr_@@ sum > max_@@ sum ) { max_@@ sum = curr_@@ sum ; max_@@ end = i ; } } delete [ ] c@@ sum ; return max_@@ end - k + 1 ; }
SQU@@ ARE_@@ PY@@ RAM@@ ID@@ AL_@@ NUMBER@@ _S@@ UM@@ _S@@ QUAR@@ ES | int find@@ S ( int s ) { int sum = 0 ; for ( int n = 1 ; sum < s ; n ++ ) { sum += n * n ; if ( sum == s ) return n ; } return - 1 ; }
PROGRAM_@@ TO_@@ CAL@@ CUL@@ ATE_@@ AREA_@@ OF_@@ AN_@@ CI@@ R@@ CLE_@@ IN@@ SCRI@@ BED_@@ IN_@@ A@@ _S@@ QU@@ ARE | float area@@ Of@@ In@@ scri@@ bed@@ Circle ( float a ) { return ( PI / 4 ) * a * a ; }
MINIMUM_@@ NUMBER_@@ CHARAC@@ TER@@ S_@@ REMO@@ VED_@@ MAKE_@@ BINARY_@@ STRING_@@ ALTER@@ N@@ ATE | void count@@ To@@ Make@@ 0@@ l@@ tern@@ ate ( const string & s ) { int result = 0 ; for ( int i = 0 ; i < ( s . length ( ) - 1 ) ; i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++ ; return result ; }
FIND_@@ ELEMEN@@ TS_@@ PRES@@ ENT_@@ FIRST_@@ ARRAY_@@ NOT_@@ SECOND | void find@@ Missing ( int a [ ] , int b [ ] , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < m ; j ++ ) if ( a [ i ] == b [ j ] ) break ; if ( j == m ) cout << a [ i ] << " ▁ " ; } }
RE@@ AR@@ RANGE_@@ ARRAY_@@ MAXIMUM_@@ MINIMUM_@@ FORM | void re@@ arrange ( int arr [ ] , int n ) { int temp [ n ] ; int small = 0 , large = n - 1 ; int flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( flag ) temp [ i ] = arr [ large -- ] ; else temp [ i ] = arr [ small ++ ] ; flag = ! flag ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = temp [ i ] ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 15_@@ LON@@ GE@@ ST_@@ BIT@@ ON@@ IC@@ _SUB@@ SEQUENCE | int l@@ bs ( int arr [ ] , int n ) { int i , j ; int * lis = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) lis [ i ] = 1 ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; int * lds = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) lds [ i ] = 1 ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = n - 1 ; j > i ; j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1 ; int max = lis [ 0 ] + lds [ 0 ] - 1 ; for ( i = 1 ; i < n ; i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1 ; return max ; }
COUNT_@@ PAIR@@ S_@@ WHO@@ SE_@@ PRODUC@@ TS_@@ EXI@@ ST_@@ IN_@@ ARRAY | int count@@ Pairs ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int product = arr [ i ] * arr [ j ] ; for ( int k = 0 ; k < n ; k ++ ) { if ( arr [ k ] == product ) { result ++ ; break ; } } } } return result ; }
COUNT_@@ SINGLE_@@ NODE_@@ ISO@@ LA@@ TED@@ _SUB_@@ GRAP@@ H@@ S_@@ DIS@@ CONNEC@@ TED_@@ GRAP@@ H | int compute ( vector < int > graph [ ] , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++ ; return count ; }
HARD@@ Y_@@ RAM@@ AN@@ U@@ J@@ AN_@@ THE@@ O@@ RE@@ M | int exact@@ Prime@@ Factor@@ Count ( int n ) { int count = 0 ; if ( n % 2 == 0 ) { count ++ ; while ( n % 2 == 0 ) n = n / 2 ; } for ( int i = 3 ; i <= sqrt ( n ) ; i = i + 2 ) { if ( n % i == 0 ) { count ++ ; while ( n % i == 0 ) n = n / i ; } } if ( n > 2 ) count ++ ; return count ; }
SHOR@@ TEST_@@ COMM@@ ON@@ _SUP@@ ER@@ SEQU@@ ENCE_@@ 1 | int super@@ Seq ( char * X , char * Y , int m , int n ) { int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( ! i ) dp [ i ] [ j ] = j ; else if ( ! j ) dp [ i ] [ j ] = i ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } return dp [ m ] [ n ] ; }
POWER@@ _SET | public : void print@@ Power@@ Set ( char * set , int set_size ) { unsigned int pow_@@ set_size = pow ( 2 , set_size ) ; int counter , j ; for ( counter = 0 ; counter < pow_@@ set_size ; counter ++ ) { for ( j = 0 ; j < set_size ; j ++ ) { if ( counter & ( 1 << j ) ) cout << set [ j ] ; } cout << endl ; } }
CHECK_@@ ARRAY_@@ MAJ@@ ORI@@ TY_@@ ELEMENT | bool is@@ Maj@@ ority ( int a [ ] , int n ) { unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ a [ i ] ] ++ ; for ( auto x : mp ) if ( x . second >= n / 2 ) return true ; return false ; }
PRINT_@@ GI@@ V@@ EN_@@ MATRIX_@@ COUNTER_@@ CLOCK_@@ WI@@ SE_@@ SPIR@@ AL_@@ FORM | void counter@@ Clock@@ spir@@ al@@ Print ( int m , int n , int arr [ R ] [ C ] ) { int i , k = 0 , l = 0 ; int cnt = 0 ; int total = m * n ; while ( k < m && l < n ) { if ( cnt == total ) break ; for ( i = k ; i < m ; ++ i ) { cout << arr [ i ] [ l ] << " ▁ " ; cnt ++ ; } l ++ ; if ( cnt == total ) break ; for ( i = l ; i < n ; ++ i ) { cout << arr [ m - 1 ] [ i ] << " ▁ " ; cnt ++ ; } m -- ; if ( cnt == total ) break ; if ( k < m ) { for ( i = m - 1 ; i >= k ; -- i ) { cout << arr [ i ] [ n - 1 ] << " ▁ " ; cnt ++ ; } n -- ; } if ( cnt == total ) break ; if ( l < n ) { for ( i = n - 1 ; i >= l ; -- i ) { cout << arr [ k ] [ i ] << " ▁ " ; cnt ++ ; } k ++ ; } } }
PRI@@ MALI@@ TY_@@ TEST@@ _SET_@@ 1_@@ INTRO@@ DUC@@ TION_@@ AND@@ _S@@ CHOOL_@@ METHOD | bool is@@ Prime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }
FIND_@@ CHARACTER_@@ FIRST_@@ STRING_@@ PRES@@ ENT_@@ MINIMUM_@@ INDEX@@ _SECON@@ D_@@ STRING | void print@@ Min@@ Index@@ Char ( string str , string pat@@ t ) { int min@@ Index = INT_MAX ; int m = str . size ( ) ; int n = pat@@ t . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( pat@@ t [ i ] == str [ j ] && j < min@@ Index ) { min@@ Index = j ; break ; } } } if ( min@@ Index != INT_MAX ) cout << " Minimum ▁ Index ▁ Character ▁ = ▁ " << str [ min@@ Index ] ; else cout << " No ▁ character ▁ present " ; }
PROGRAM_@@ TO_@@ FIND_@@ TRANSP@@ OS@@ E_@@ OF_@@ A_@@ MATRIX_@@ 1 | void transpose ( int A [ ] [ N ] , int B [ ] [ M ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < M ; j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ; }
COUNT_@@ N@@ ATUR@@ AL_@@ NUMB@@ ERS_@@ WHO@@ SE_@@ PER@@ MU@@ TATION_@@ GREATER_@@ NUMBER | int count@@ Number ( int n ) { int result = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) { stack < int > s ; if ( i <= n ) { s . push ( i ) ; result ++ ; } while ( ! s . empty ( ) ) { int tp = s . top ( ) ; s . pop ( ) ; for ( int j = tp % 10 ; j <= 9 ; j ++ ) { int x = tp * 10 + j ; if ( x <= n ) { s . push ( x ) ; result ++ ; } } } } return result ; }
FIND_@@ FIRST_@@ N@@ ATUR@@ AL_@@ NUMBER_@@ WHO@@ SE_@@ FAC@@ TOR@@ I@@ AL_@@ DI@@ VISI@@ BLE_@@ X | int first@@ Fac@@ tori@@ al@@ Di@@ visible@@ Number ( int x ) { int i = 1 ; int fact = 1 ; for ( i = 1 ; i < x ; i ++ ) { fact = fact * i ; if ( fact % x == 0 ) break ; } return i ; }
PRINT_@@ EQUAL@@ _S@@ UM@@ _SE@@ TS_@@ ARRAY_@@ PARTITION_@@ PRO@@ BLE@@ M@@ _SET_@@ 2 | void print@@ Equal@@ Sum@@ Sets ( int arr [ ] , int n ) { int i , curr@@ Sum ; int sum = accumulate ( arr , arr + n , 0 ) ; if ( sum & 1 ) { cout << " - 1" ; return ; } int k = sum >> 1 ; bool dp [ n + 1 ] [ k + 1 ] ; for ( i = 1 ; i <= k ; i ++ ) dp [ 0 ] [ i ] = false ; for ( i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = true ; for ( i = 1 ; i <= n ; i ++ ) { for ( curr@@ Sum = 1 ; curr@@ Sum <= k ; curr@@ Sum ++ ) { dp [ i ] [ curr@@ Sum ] = dp [ i - 1 ] [ curr@@ Sum ] ; if ( arr [ i - 1 ] <= curr@@ Sum ) dp [ i ] [ curr@@ Sum ] = dp [ i ] [ curr@@ Sum ] | dp [ i - 1 ] [ curr@@ Sum - arr [ i - 1 ] ] ; } } vector < int > set1 , set2 ; if ( ! dp [ n ] [ k ] ) { cout << " - 1 \n " ; return ; } i = n ; curr@@ Sum = k ; while ( i > 0 && curr@@ Sum >= 0 ) { if ( dp [ i - 1 ] [ curr@@ Sum ] ) { i -- ; set2 . push_back ( arr [ i ] ) ; } else if ( dp [ i - 1 ] [ curr@@ Sum - arr [ i - 1 ] ] ) { i -- ; curr@@ Sum -= arr [ i ] ; set1 . push_back ( arr [ i ] ) ; } } cout << " Set ▁ 1 ▁ elements : ▁ " ; for ( i = 0 ; i < set1 . size ( ) ; i ++ ) cout << set1 [ i ] << " ▁ " ; cout << " \n Set ▁ 2 ▁ elements : ▁ " ; for ( i = 0 ; i < set2 . size ( ) ; i ++ ) cout << set2 [ i ] << " ▁ " ; }
COUN@@ TING_@@ PAIR@@ S_@@ PERS@@ ON_@@ CAN_@@ FORM_@@ PA@@ IR_@@ ONE@@ _1 | int numberOf@@ W@@ ays ( int x ) { int dp [ x + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= x ; i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; return dp [ x ] ; }
COUNT_@@ NEGATIVE_@@ NUMB@@ ERS_@@ IN_@@ A_@@ COLUMN_@@ WI@@ SE_@@ ROW_@@ WI@@ SE_@@ SOR@@ TED_@@ MATRIX | int count@@ Negative ( int M [ ] [ 4 ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( M [ i ] [ j ] < 0 ) count += 1 ; else break ; } } return count ; }
COUNT_@@ SET_@@ BITS_@@ IN_@@ AN_@@ INTEGER | unsigned int count@@ Set@@ Bits ( unsigned int n ) { unsigned int count = 0 ; while ( n ) { count += n & 1 ; n >>= 1 ; } return count ; }
MODUL@@ US_@@ TWO_@@ FLOAT_@@ DOUBLE_@@ NUMB@@ ERS | double find@@ Mod ( double a , double b ) { double mod ; if ( a < 0 ) mod = - a ; else mod = a ; if ( b < 0 ) b = - b ; while ( mod >= b ) mod = mod - b ; if ( a < 0 ) return - mod ; return mod ; }
FIND_@@ A@@ _SPECI@@ FIC_@@ PA@@ IR_@@ IN_@@ MATRIX_@@ 1 | int find@@ Max@@ Value ( int mat [ ] [ N ] ) { int maxValue = INT_@@ MIN ; int max@@ Arr [ N ] [ N ] ; max@@ Arr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ; int max@@ v = mat [ N - 1 ] [ N - 1 ] ; for ( int j = N - 2 ; j >= 0 ; j -- ) { if ( mat [ N - 1 ] [ j ] > max@@ v ) max@@ v = mat [ N - 1 ] [ j ] ; max@@ Arr [ N - 1 ] [ j ] = max@@ v ; } max@@ v = mat [ N - 1 ] [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { if ( mat [ i ] [ N - 1 ] > max@@ v ) max@@ v = mat [ i ] [ N - 1 ] ; max@@ Arr [ i ] [ N - 1 ] = max@@ v ; } for ( int i = N - 2 ; i >= 0 ; i -- ) { for ( int j = N - 2 ; j >= 0 ; j -- ) { if ( max@@ Arr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = max@@ Arr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ; max@@ Arr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( max@@ Arr [ i ] [ j + 1 ] , max@@ Arr [ i + 1 ] [ j ] ) ) ; } } return maxValue ; }
MIN@@ IM@@ UM@@ _S@@ UM_@@ TWO_@@ NUMB@@ ERS_@@ FOR@@ MED_@@ DIG@@ IT@@ S_@@ ARRAY | int solve ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i & 1 ) a = a * 10 + arr [ i ] ; else b = b * 10 + arr [ i ] ; } return a + b ; }
COUNT_@@ DISTIN@@ CT_@@ NON_@@ NEGATIVE_@@ PAIR@@ S_@@ X_@@ Y_S@@ ATI@@ SF@@ Y_@@ IN@@ EQU@@ ALI@@ TY_@@ X@@ X_@@ YY_@@ N_@@ 2_1 | int count@@ Solutions ( int n ) { int x = 0 , y@@ Count , res = 0 ; for ( y@@ Count = 0 ; y@@ Count * y@@ Count < n ; y@@ Count ++ ) ; while ( y@@ Count != 0 ) { res += y@@ Count ; x ++ ; while ( y@@ Count != 0 && ( x * x + ( y@@ Count - 1 ) * ( y@@ Count - 1 ) >= n ) ) y@@ Count -- ; } return res ; }
FIND_@@ INDEX_@@ GI@@ V@@ EN_@@ FI@@ BON@@ ACC@@ I_@@ NUMBER_@@ CONSTANT_@@ TIME | int find@@ Index ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; }
PROGRAM_@@ OC@@ TAL_@@ DECIMAL_@@ CONVERSION | int oct@@ al@@ To@@ Decimal ( int n ) { int num = n ; int dec_@@ value = 0 ; int base = 1 ; int temp = num ; while ( temp ) { int last_@@ digit = temp % 10 ; temp = temp / 10 ; dec_@@ value += last_@@ digit * base ; base = base * 8 ; } return dec_@@ value ; }
FIND_@@ PER@@ MU@@ TED_@@ RO@@ WS_@@ GI@@ V@@ EN_@@ ROW_@@ MATRIX | void per@@ mut@@ ated@@ Rows ( int mat [ ] [ MAX ] , int m , int n , int r ) { unordered_@@ set < int > s ; for ( int j = 0 ; j < n ; j ++ ) s . insert ( mat [ r ] [ j ] ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( i == r ) continue ; int j ; for ( j = 0 ; j < n ; j ++ ) if ( s . find ( mat [ i ] [ j ] ) == s . end ( ) ) break ; if ( j != n ) continue ; cout << i << " , ▁ " ; } }
PRINT_@@ A_@@ CLO@@ SE@@ ST_@@ STRING_@@ TH@@ AT_@@ DO@@ ES_@@ NOT_@@ CONTA@@ IN_@@ AD@@ J@@ AC@@ ENT_@@ DUPLIC@@ A@@ TES | string no@@ Adjac@@ ent@@ D@@ up ( string s ) { int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = ' a ' ; while ( s [ i ] == s [ i - 1 ] || ( i + 1 < n && s [ i ] == s [ i + 1 ] ) ) s [ i ] ++ ; i ++ ; } } return s ; }
S@@ UM_@@ MAN@@ H@@ ATTA@@ N_@@ DISTAN@@ CES_@@ PAIR@@ S_@@ POINTS | int distance@@ sum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) ) ; return sum ; }
PROGRAM_@@ FIND_@@ STRING_@@ START_@@ END_@@ GE@@ E@@ KS | bool is@@ Corner@@ Present ( string str , string corner ) { int n = str . length ( ) ; int cl = corner . length ( ) ; if ( n < cl ) return false ; return ( str . substr ( 0 , cl ) . compare ( corner ) == 0 && str . substr ( n - cl , cl ) . compare ( corner ) == 0 ) ; }
LON@@ GE@@ ST@@ _SUB@@ ARRAY_@@ COUNT_@@ 1@@ S_@@ ONE_@@ COUNT_@@ 0@@ S | int len@@ Of@@ Long@@ Sub@@ arr ( int arr [ ] , int n ) { unordered_map < int , int > um ; int sum = 0 , maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] == 0 ? - 1 : 1 ; if ( sum == 1 ) maxLen = i + 1 ; else if ( um . find ( sum ) == um . end ( ) ) um [ sum ] = i ; if ( um . find ( sum - 1 ) != um . end ( ) ) { if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ] ; } } return maxLen ; }
DI@@ VI@@ DE_@@ CON@@ QUER@@ _SET_@@ 6@@ _SEARCH_@@ ROW_@@ WI@@ SE_@@ COLUMN_@@ WI@@ SE_@@ SOR@@ TED_@@ 2D_@@ ARRAY | void search ( int mat [ ROW ] [ COL ] , int from@@ Row , int to@@ Row , int from@@ Col , int to@@ Col , int key ) { int i = from@@ Row + ( to@@ Row - from@@ Row ) / 2 ; int j = from@@ Col + ( to@@ Col - from@@ Col ) / 2 ; if ( mat [ i ] [ j ] == key ) cout << " Found ▁ " << key << " ▁ at ▁ " << i << " ▁ " << j << endl ; else { if ( i != to@@ Row || j != from@@ Col ) search ( mat , from@@ Row , i , j , to@@ Col , key ) ; if ( from@@ Row == to@@ Row && from@@ Col + 1 == to@@ Col ) if ( mat [ from@@ Row ] [ to@@ Col ] == key ) cout << " Found ▁ " << key << " ▁ at ▁ " << from@@ Row << " ▁ " << to@@ Col << endl ; if ( mat [ i ] [ j ] < key ) { if ( i + 1 <= to@@ Row ) search ( mat , i + 1 , to@@ Row , from@@ Col , to@@ Col , key ) ; } else { if ( j - 1 >= from@@ Col ) search ( mat , from@@ Row , to@@ Row , from@@ Col , j - 1 , key ) ; } } }
SHOR@@ TEST_@@ COMM@@ ON@@ _SUP@@ ER@@ SEQUENCE | int super@@ Seq ( char * X , char * Y , int m , int n ) { if ( ! m ) return n ; if ( ! n ) return m ; if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + super@@ Seq ( X , Y , m - 1 , n - 1 ) ; return 1 + min ( super@@ Seq ( X , Y , m - 1 , n ) , super@@ Seq ( X , Y , m , n - 1 ) ) ; }
UR@@ LI@@ FY_@@ GI@@ V@@ EN_@@ STRING_@@ REPL@@ ACE_@@ SPAC@@ ES | int replace@@ Spaces ( char str [ ] ) { int space_@@ count = 0 , i ; for ( i = 0 ; str [ i ] ; i ++ ) if ( str [ i ] == ' ▁ ' ) space_@@ count ++ ; while ( str [ i - 1 ] == ' ▁ ' ) { space_@@ count -- ; i -- ; } int new_@@ length = i + space_@@ count * 2 + 1 ; if ( new_@@ length > MAX ) return - 1 ; int index = new_@@ length - 1 ; str [ index -- ] = ' \0' ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( str [ j ] == ' ▁ ' ) { str [ index ] = '0' ; str [ index - 1 ] = '2' ; str [ index - 2 ] = ' % ' ; index = index - 3 ; } else { str [ index ] = str [ j ] ; index -- ; } } return new_@@ length ; }
MAXIMUM_@@ PATH@@ _S@@ UM_@@ START@@ ING_@@ CELL_@@ 0_@@ TH_@@ ROW_@@ END@@ ING_@@ CELL_@@ N_@@ 1_@@ TH_@@ ROW | int Maximum@@ Path ( int Mat [ ] [ N ] ) { int result = 0 ; int dp [ N ] [ N + 2 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < N ; i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ] ; for ( int i = 1 ; i < N ; i ++ ) for ( int j = 1 ; j <= N ; j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] , max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) result = max ( result , dp [ N - 1 ] [ i ] ) ; return result ; }
COMP@@ UTE_@@ THE_@@ INTEGER_@@ ABSOL@@ UTE_@@ VALUE_@@ AB@@ S_@@ WITH@@ OUT_@@ BRAN@@ CH@@ ING | unsigned int get@@ Abs ( int n ) { int const mask = n >> ( sizeof ( int ) * CHAR@@ BIT - 1 ) ; return ( ( n + mask ) ^ mask ) ; }
COUNT_@@ PA@@ LIN@@ DRO@@ MI@@ C@@ _SUB@@ SEQU@@ ENCE_@@ GI@@ V@@ EN_@@ STRING_@@ 1 | int count@@ PS ( int i , int j ) { if ( i >= n || j < 0 ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; if ( abs ( i - j ) == 1 ) { if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] = 3 ; else return dp [ i ] [ j ] = 2 ; } if ( i == j ) return dp [ 1 ] [ j ] = 1 ; else if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] = count@@ PS ( i + 1 , j ) + count@@ PS ( i , j - 1 ) + 1 ; else return dp [ i ] [ j ] = count@@ PS ( i + 1 , j ) + count@@ PS ( i , j - 1 ) - count@@ PS ( i + 1 , j - 1 ) ; }
LAR@@ GE@@ ST@@ _S@@ UM_@@ CON@@ TI@@ GU@@ OU@@ S@@ _SUB@@ ARRAY_@@ 2 | int max@@ Sub@@ Array@@ Sum ( int a [ ] , int size ) { int max_@@ so@@ _f@@ ar = a [ 0 ] ; int curr_@@ max = a [ 0 ] ; for ( int i = 1 ; i < size ; i ++ ) { curr_@@ max = max ( a [ i ] , curr_@@ max + a [ i ] ) ; max_@@ so@@ _f@@ ar = max ( max_@@ so@@ _f@@ ar , curr_@@ max ) ; } return max_@@ so@@ _f@@ ar ; }
COUNT_@@ MINIMUM_@@ STE@@ PS_@@ GET_@@ GI@@ V@@ EN_@@ DE@@ SI@@ RED_@@ ARRAY | int count@@ Min@@ Operations ( unsigned int target [ ] , int n ) { int result = 0 ; while ( 1 ) { int zero_@@ count = 0 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( target [ i ] & 1 ) break ; else if ( target [ i ] == 0 ) zero_@@ count ++ ; } if ( zero_@@ count == n ) return result ; if ( i == n ) { for ( int j = 0 ; j < n ; j ++ ) target [ j ] = target [ j ] / 2 ; result ++ ; } for ( int j = i ; j < n ; j ++ ) { if ( target [ j ] & 1 ) { target [ j ] -- ; result ++ ; } } } }
PRINT_@@ FI@@ BON@@ AC@@ CI@@ _SEQU@@ ENCE_@@ USING_@@ 2_@@ VARIAB@@ LES_@@ 1 | void fi@@ b ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) cout << a << " ▁ " ; if ( n >= 1 ) cout << b << " ▁ " ; for ( int i = 2 ; i <= n ; i ++ ) { cout << a + b << " ▁ " ; b = a + b ; a = b - a ; } }
PROGRAM_@@ CHECK_@@ INPUT_@@ INTEGER_@@ STRING | bool is@@ Number ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ; return true ; }
MINIMUM_@@ HEIGHT_@@ TRIANGLE_@@ GI@@ V@@ EN_@@ BASE_@@ AREA | int min@@ Height ( int base , int area ) { return ceil ( ( float ) ( 2 * area ) / base ) ; }
FIND_@@ POSITION_@@ GI@@ V@@ EN_@@ NUMBER_@@ AM@@ ONG_@@ NUMB@@ ERS_@@ MA@@ DE_@@ 4_@@ 7 | int find@@ pos ( string n ) { int i = 0 , pos = 0 ; while ( n [ i ] != ' \0' ) { switch ( n [ i ] ) { case '4' : pos = pos * 2 + 1 ; break ; case '7' : pos = pos * 2 + 2 ; break ; } i ++ ; } return pos ; }
MINIMUM_@@ OPER@@ ATION@@ S_@@ REQUI@@ RED@@ _SET_@@ ELEMEN@@ TS_@@ BINARY_@@ MATRIX | int min@@ Operation ( bool arr [ N ] [ M ] ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 0 ) { ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { for ( int h = 0 ; h <= j ; h ++ ) { if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0 ; else arr [ k ] [ h ] = 1 ; } } } } } return ans ; }
LON@@ GE@@ ST_@@ EV@@ EN_@@ LENGTH@@ _SUB@@ STRING@@ _S@@ UM_@@ FIR@@ ST@@ _SECON@@ D_@@ HALF_@@ 2 | int find@@ Length ( string str , int n ) { int sum [ n + 1 ] ; sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' ) ; int ans = 0 ; for ( int len = 2 ; len <= n ; len += 2 ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = max ( ans , len ) ; } } return ans ; }
MULTI@@ PLY_@@ LARGE_@@ NUMB@@ ERS_@@ RE@@ PRESEN@@ TED_@@ AS_@@ STRINGS | string multiply ( string num1 , string num2 ) { int len1 = num1 . size ( ) ; int len2 = num2 . size ( ) ; if ( len1 == 0 || len2 == 0 ) return "0" ; vector < int > result ( len1 + len2 , 0 ) ; int i_@@ n1 = 0 ; int i_@@ n2 = 0 ; for ( int i = len1 - 1 ; i >= 0 ; i -- ) { int carry = 0 ; int n1 = num1 [ i ] - '0' ; i_@@ n2 = 0 ; for ( int j = len2 - 1 ; j >= 0 ; j -- ) { int n2 = num2 [ j ] - '0' ; int sum = n1 * n2 + result [ i_@@ n1 + i_@@ n2 ] + carry ; carry = sum / 10 ; result [ i_@@ n1 + i_@@ n2 ] = sum % 10 ; i_@@ n2 ++ ; } if ( carry > 0 ) result [ i_@@ n1 + i_@@ n2 ] += carry ; i_@@ n1 ++ ; } int i = result . size ( ) - 1 ; while ( i >= 0 && result [ i ] == 0 ) i -- ; if ( i == - 1 ) return "0" ; string s = " " ; while ( i >= 0 ) s += std :: to_string ( result [ i -- ] ) ; return s ; }
PARTITION_@@ NUMBER_@@ TWO_@@ DI@@ VI@@ S@@ BLE_@@ PAR@@ TS | void find@@ Division ( string & str , int a , int b ) { int len = str . length ( ) ; vector < int > lr ( len + 1 , 0 ) ; lr [ 0 ] = ( str [ 0 ] - '0' ) % a ; for ( int i = 1 ; i < len ; i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] - '0' ) ) % a ; vector < int > rl ( len + 1 , 0 ) ; rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b ; int power@@ 10 = 10 ; for ( int i = len - 2 ; i >= 0 ; i -- ) { rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power@@ 10 ) % b ; power@@ 10 = ( power@@ 10 * 10 ) % b ; } for ( int i = 0 ; i < len - 1 ; i ++ ) { if ( lr [ i ] != 0 ) continue ; if ( rl [ i + 1 ] == 0 ) { cout << " YES \n " ; for ( int k = 0 ; k <= i ; k ++ ) cout << str [ k ] ; cout << " , ▁ " ; for ( int k = i + 1 ; k < len ; k ++ ) cout << str [ k ] ; return ; } } cout << " NO \n " ; }
PROGRAM_@@ BE@@ ST_@@ FI@@ T_@@ ALGORITH@@ M_@@ MEMORY_@@ MAN@@ A@@ GEMENT | void best@@ Fit ( int blockSize [ ] , int m , int process@@ Size [ ] , int n ) { int allocation [ n ] ; memset ( allocation , - 1 , sizeof ( allocation ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int best@@ Idx = - 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= process@@ Size [ i ] ) { if ( best@@ Idx == - 1 ) best@@ Idx = j ; else if ( blockSize [ best@@ Idx ] > blockSize [ j ] ) best@@ Idx = j ; } } if ( best@@ Idx != - 1 ) { allocation [ i ] = best@@ Idx ; blockSize [ best@@ Idx ] -= process@@ Size [ i ] ; } } cout << " \n Process ▁ No . \t@@ Process ▁ Size@@ \t@@ Block ▁ no . \n " ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ ▁ ▁ " << i + 1 << " \t\t " << process@@ Size [ i ] << " \t\t " ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; cout << endl ; } }
FIN@@ DING_@@ THE_@@ MAX@@ IM@@ UM@@ _S@@ QU@@ ARE_@@ SUB_@@ MATRIX_@@ WITH_@@ ALL_@@ EQUAL_@@ ELEMENTS | int lar@@ gest@@ K@@ Sub@@ matrix ( int a [ ] [ Col ] ) { int dp [ Row ] [ Col ] ; memset ( dp , sizeof ( dp ) , 0 ) ; int result = 0 ; for ( int i = 0 ; i < Row ; i ++ ) { for ( int j = 0 ; j < Col ; j ++ ) { if ( i == 0 || j == 0 ) dp [ i ] [ j ] = 1 ; else { if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [ j ] == a [ i ] [ j - 1 ] && a [ i ] [ j ] == a [ i - 1 ] [ j - 1 ] ) dp [ i ] [ j ] = min ( min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) , dp [ i - 1 ] [ j - 1 ] ) + 1 ; else dp [ i ] [ j ] = 1 ; } result = max ( result , dp [ i ] [ j ] ) ; } } return result ; }
FRI@@ END@@ S_@@ PAIR@@ ING_@@ PRO@@ BLE@@ M_@@ 1 | int count@@ Fri@@ ends@@ Pair@@ ings ( int n ) { if ( dp [ n ] != - 1 ) return dp [ n ] ; if ( n > 2 ) return dp [ n ] = count@@ Fri@@ ends@@ Pair@@ ings ( n - 1 ) + ( n - 1 ) * count@@ Fri@@ ends@@ Pair@@ ings ( n - 2 ) ; else return dp [ n ] = n ; }
FIRST_@@ ELEMENT_@@ OC@@ CURR@@ ING_@@ K_@@ TIME@@ S_@@ ARRAY | int first@@ Element ( int arr [ ] , int n , int k ) { unordered_map < int , int > count_@@ map ; for ( int i = 0 ; i < n ; i ++ ) count_@@ map [ arr [ i ] ] ++ ; for ( int i = 0 ; i < n ; i ++ ) if ( count_@@ map [ arr [ i ] ] == k ) return arr [ i ] ; return - 1 ; }
SUM@@ _SERI@@ ES_@@ 0_@@ 6_@@ 0_@@ 06_@@ 0_@@ 00@@ 6_@@ 0_@@ 00@@ 06_@@ N_@@ TER@@ MS | float sum@@ Of@@ Series ( int n ) { return ( 0.@@ 666 ) * ( 1 - 1 / pow ( 10 , n ) ) ; }
COUNT_@@ WOR@@ DS_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ STRING | unsigned count@@ Words ( char * str ) { int state = OUT ; unsigned wc = 0 ; while ( * str ) { if ( * str == ' ▁ ' || * str == ' \n ' || * str == ' \t ' ) state = OUT ; else if ( state == OUT ) { state = IN ; ++ wc ; } ++ str ; } return wc ; }
PARTITION_@@ IN@@ TO_@@ TW@@ O@@ _SUB@@ ARRAY@@ S_@@ OF_@@ LENGTH@@ S_@@ K_@@ AND_@@ N_@@ K@@ _SU@@ CH_@@ TH@@ AT_@@ THE_@@ DIFF@@ ER@@ ENCE_@@ OF@@ _S@@ UM@@ S_@@ IS_@@ MAX@@ IMUM | int max@@ Difference ( int arr [ ] , int N , int k ) { int M , S = 0 , S1 = 0 , max_@@ difference = 0 ; for ( int i = 0 ; i < N ; i ++ ) S += arr [ i ] ; sort ( arr , arr + N , greater < int > ( ) ) ; M = max ( k , N - k ) ; for ( int i = 0 ; i < M ; i ++ ) S1 += arr [ i ] ; max_@@ difference = S1 - ( S - S1 ) ; return max_@@ difference ; }
HO@@ W_@@ WI@@ LL_@@ Y@@ OU@@ _@@ PRINT_@@ NUMB@@ ERS_@@ FROM_@@ 1_@@ TO_@@ 200@@ _@@ WITH@@ OUT_@@ USING_@@ LOOP | public : void print@@ No@@ s ( unsigned int n ) { if ( n > 0 ) { print@@ No@@ s ( n - 1 ) ; cout << n << " ▁ " ; } return ; }
GI@@ V@@ EN_@@ A@@ _S@@ OR@@ TED_@@ AND_@@ ROTA@@ TED_@@ ARRAY_@@ FIND_@@ IF_@@ THER@@ E_@@ IS_@@ A_@@ PA@@ IR_@@ WITH_@@ A_@@ GI@@ VEN@@ _S@@ UM@@ _1 | int pair@@ sIn@@ Sorted@@ Rot@@ ated ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ; int l = ( i + 1 ) % n ; int r = i ; int cnt = 0 ; while ( l != r ) { if ( arr [ l ] + arr [ r ] == x ) { cnt ++ ; if ( l == ( r - 1 + n ) % n ) { return cnt ; } l = ( l + 1 ) % n ; r = ( r - 1 + n ) % n ; } else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; else r = ( n + r - 1 ) % n ; } return cnt ; }
FIND_@@ THE_@@ ELEMENT_@@ TH@@ AT_@@ AP@@ PE@@ AR@@ S_@@ ONCE | int get@@ Single ( int arr [ ] , int n ) { int ones = 0 , tw@@ os = 0 ; int common_@@ bit@@ _mask ; for ( int i = 0 ; i < n ; i ++ ) { tw@@ os = tw@@ os | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_@@ bit@@ _mask = ~ ( ones & tw@@ os ) ; ones &= common_@@ bit@@ _mask ; tw@@ os &= common_@@ bit@@ _mask ; } return ones ; }
CAS@@ SIN@@ IS_@@ IDENTITY | int c@@ ass@@ ini ( int n ) { return ( n & 1 ) ? - 1 : 1 ; }
DISTRIBU@@ TING_@@ ALL_@@ BAL@@ LS_@@ WITH@@ OUT_@@ REPE@@ TI@@ TION | bool distribu@@ ting@@ Bal@@ ls ( int k , int n , string str ) { int a [ MAX_@@ CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { a [ str [ i ] - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) if ( a [ i ] > k ) return false ; return true ; }
DISTRIBU@@ TING_@@ ITE@@ MS_@@ PERS@@ ON_@@ CANNOT_@@ TA@@ KE_@@ TWO_@@ ITE@@ MS_@@ TYPE | bool check@@ Count ( int arr [ ] , int n , int k ) { int count ; for ( int i = 0 ; i < n ; i ++ ) { count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == arr [ i ] ) count ++ ; if ( count > 2 * k ) return false ; } } return true ; }
MAXI@@ MI@@ ZE_@@ ARR@@ J_@@ AR@@ RI@@ _@@ ARR@@ L_@@ ARR@@ K@@ _SU@@ CH_@@ TH@@ AT_@@ I_@@ J_@@ K_@@ L | - 1@@ 00000000 int find@@ Max@@ Value ( int arr [ ] , int n ) { if ( n < 4 ) { printf ( " The ▁ array ▁ should ▁ have ▁ at@@ le@@ st ▁ 4 ▁ elements \n " ) ; return MIN ; } int table1 [ n + 1 ] , table@@ 2 [ n ] , table@@ 3 [ n - 1 ] , table@@ 4 [ n - 2 ] ; for ( int i = 0 ; i <= n ; i ++ ) table1 [ i ] = table@@ 2 [ i ] = table@@ 3 [ i ] = table@@ 4 [ i ] = MIN ; for ( int i = n - 1 ; i >= 0 ; i -- ) table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) table@@ 2 [ i ] = max ( table@@ 2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; for ( int i = n - 3 ; i >= 0 ; i -- ) table@@ 3 [ i ] = max ( table@@ 3 [ i + 1 ] , table@@ 2 [ i + 1 ] + arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table@@ 4 [ i ] = max ( table@@ 4 [ i + 1 ] , table@@ 3 [ i + 1 ] - arr [ i ] ) ; return table@@ 4 [ 0 ] ; }
COUNT_@@ NEGATIVE_@@ NUMB@@ ERS_@@ IN_@@ A_@@ COLUMN_@@ WI@@ SE_@@ ROW_@@ WI@@ SE_@@ SOR@@ TED_@@ MATRIX_@@ 1 | int count@@ Negative ( int M [ ] [ 4 ] , int n , int m ) { int count = 0 ; int i = 0 ; int j = m - 1 ; while ( j >= 0 && i < n ) { if ( M [ i ] [ j ] < 0 ) { count += j + 1 ; i += 1 ; } else j -= 1 ; } return count ; }
SORT_@@ AN_@@ ARRAY_@@ OF_@@ 0@@ S_@@ 1@@ S_@@ AND_@@ 2@@ S | void sort@@ 012 ( int a [ ] , int arr_@@ size ) { int lo = 0 ; int hi = arr_@@ size - 1 ; int mid = 0 ; while ( mid <= hi ) { switch ( a [ mid ] ) { case 0 : swap ( a [ lo ++ ] , a [ mid ++ ] ) ; break ; case 1 : mid ++ ; break ; case 2 : swap ( a [ mid ] , a [ hi -- ] ) ; break ; } } }
N@@ TH_@@ EV@@ EN_@@ FI@@ BON@@ ACC@@ I_@@ NUMBER | long int even@@ Fi@@ b ( int n ) { if ( n < 1 ) return n ; if ( n == 1 ) return 2 ; return ( ( 4 * even@@ Fi@@ b ( n - 1 ) ) + even@@ Fi@@ b ( n - 2 ) ) ; }
NEXT_@@ GREATER_@@ ELEMENT | void print@@ N@@ GE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << " ▁ - - ▁ " << next << endl ; } }
CHECK_@@ WHE@@ THER_@@ GI@@ V@@ EN_@@ CI@@ R@@ CLE_@@ RE@@ SIDE_@@ BOUN@@ DARY_@@ MAIN@@ TA@@ IN@@ ED_@@ OU@@ TER_@@ CI@@ R@@ CLE_@@ IN@@ NER_@@ CIRC@@ LE | void fit@@ Or@@ Not@@ Fit ( int R , int r , int x , int y , int rad ) { double val = sqrt ( pow ( x , 2 ) + pow ( y , 2 ) ) ; if ( val + rad <= R && val - rad >= R - r ) cout << " F@@ its \n " ; else cout << " Doesn ' t ▁ Fit \n " ; }
BASIC_@@ AND_@@ EXTENDED_@@ EUC@@ LI@@ DE@@ AN_@@ ALGORITH@@ MS_@@ 1 | int g@@ cd@@ Extended ( int a , int b , int * x , int * y ) { if ( a == 0 ) { * x = 0 ; * y = 1 ; return b ; } int x1 , y1 ; int gcd = g@@ cd@@ Extended ( b % a , a , & x1 , & y1 ) ; * x = y1 - ( b / a ) * x1 ; * y = x1 ; return gcd ; }
FIN@@ D_S@@ MAL@@ LE@@ ST_@@ RANGE_@@ CONTAIN@@ ING_@@ ELEMEN@@ TS_@@ FROM_@@ K_@@ LI@@ STS | void find@@ S@@ malle@@ st@@ Range ( int arr [ ] [ N ] , int n , int k ) { int i , min@@ val , maxval , min@@ range , min@@ el , max@@ el , flag , min@@ ind ; for ( i = 0 ; i <= k ; i ++ ) ptr [ i ] = 0 ; min@@ range = INT_MAX ; while ( 1 ) { min@@ ind = - 1 ; min@@ val = INT_MAX ; maxval = INT_@@ MIN ; flag = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( ptr [ i ] == n ) { flag = 1 ; break ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < min@@ val ) { min@@ ind = i ; min@@ val = arr [ i ] [ ptr [ i ] ] ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } } if ( flag ) break ; ptr [ min@@ ind ] ++ ; if ( ( maxval - min@@ val ) < min@@ range ) { min@@ el = min@@ val ; max@@ el = maxval ; min@@ range = max@@ el - min@@ el ; } } printf ( " The ▁ smallest ▁ range ▁ is ▁ [ % d ▁ , ▁ % d ] \n " , min@@ el , max@@ el ) ; }
FIND_@@ THE_@@ MINIMUM_@@ CO@@ ST_@@ TO_@@ REACH_@@ A_@@ DESTIN@@ ATION_@@ W@@ HER@@ E_@@ EVER@@ Y_@@ ST@@ ATION_@@ IS_@@ CONNEC@@ TED_@@ IN_@@ ONE_@@ DIRECTION | INT_MAX int min@@ Cost ( int cost [ ] [ N ] ) { int dist [ N ] ; for ( int i = 0 ; i < N ; i ++ ) dist [ i ] = INF ; dist [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = i + 1 ; j < N ; j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ; return dist [ N - 1 ] ; }
MIDD@@ LE_@@ OF_@@ THRE@@ E_@@ USING_@@ MINIMUM_@@ COMP@@ ARIS@@ ONS_@@ 1 | int middle@@ Of@@ Three ( int a , int b , int c ) { if ( a > b ) { if ( b > c ) return b ; else if ( a > c ) return c ; else return a ; } else { if ( a > c ) return a ; else if ( b > c ) return c ; else return b ; } }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 11_@@ NOT | int check ( string str ) { int n = str . length ( ) ; int odd@@ Dig@@ Sum = 0 , even@@ Dig@@ Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) odd@@ Dig@@ Sum += ( str [ i ] - '0' ) ; else even@@ Dig@@ Sum += ( str [ i ] - '0' ) ; } return ( ( odd@@ Dig@@ Sum - even@@ Dig@@ Sum ) % 11 == 0 ) ; }
COMP@@ UTE_@@ MODUL@@ US_@@ DI@@ VISI@@ ON_@@ BY_@@ A_@@ POWER_@@ OF_@@ 2_@@ NUMBER | unsigned int get@@ Modul@@ o ( unsigned int n , unsigned int d ) { return ( n & ( d - 1 ) ) ; }
COUNT_@@ BINARY_@@ STRING@@ S_@@ K_@@ TIME@@ S_@@ AP@@ PE@@ AR@@ ING_@@ AD@@ J@@ AC@@ ENT_@@ TW@@ O@@ _SET_@@ BITS | int count@@ Strings ( int n , int k ) { int dp [ n + 1 ] [ k + 1 ] [ 2 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 1 ] [ 0 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ; dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ; if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ; } } return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ; }
FIN@@ DING_@@ K_@@ MODUL@@ US_@@ ARRAY_@@ ELEMENT | void print@@ Equal@@ Mod@@ Numbers ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int d = arr [ n - 1 ] - arr [ 0 ] ; vector < int > v ; for ( int i = 1 ; i * i <= d ; i ++ ) { if ( d % i == 0 ) { v . push_back ( i ) ; if ( i != d / i ) v . push_back ( d / i ) ; } } for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int temp = arr [ 0 ] % v [ i ] ; int j ; for ( j = 1 ; j < n ; j ++ ) if ( arr [ j ] % v [ i ] != temp ) break ; if ( j == n ) cout << v [ i ] << " ▁ " ; } }
CIRC@@ ULAR_@@ MATRIX_@@ CONSTRUC@@ T_@@ A_@@ MATRIX_@@ WITH_@@ NUMB@@ ERS_@@ 1_@@ TO_@@ M@@ N_@@ IN@@ _SP@@ IR@@ AL_@@ WAY | void spir@@ al@@ Fill ( int m , int n , int a [ ] [ MAX ] ) { int val = 1 ; int k = 0 , l = 0 ; while ( k < m && l < n ) { for ( int i = l ; i < n ; ++ i ) a [ k ] [ i ] = val ++ ; k ++ ; for ( int i = k ; i < m ; ++ i ) a [ i ] [ n - 1 ] = val ++ ; n -- ; if ( k < m ) { for ( int i = n - 1 ; i >= l ; -- i ) a [ m - 1 ] [ i ] = val ++ ; m -- ; } if ( l < n ) { for ( int i = m - 1 ; i >= k ; -- i ) a [ i ] [ l ] = val ++ ; l ++ ; } } }
FIND_@@ THE_@@ TWO_@@ REPE@@ ATING_@@ ELEMEN@@ TS_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 2 | void print@@ Repe@@ ating ( int arr [ ] , int size ) { int Xor = arr [ 0 ] ; int set_@@ bit_@@ no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) Xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) Xor ^= i ; set_@@ bit_@@ no = Xor & ~ ( Xor - 1 ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_@@ bit_@@ no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { if ( i & set_@@ bit_@@ no ) x = x ^ i ; else y = y ^ i ; } cout << " The ▁ two ▁ repe@@ ating ▁ elements ▁ are ▁ " << y << " ▁ " << x ; }
COUNT_@@ POSSI@@ BLE_@@ WAY@@ S_TO_@@ CONSTRUC@@ T_@@ BUILD@@ INGS | int count@@ W@@ ays ( int N ) { if ( N == 1 ) return 4 ; int count@@ B = 1 , count@@ S = 1 , prev_@@ count@@ B , prev_@@ count@@ S ; for ( int i = 2 ; i <= N ; i ++ ) { prev_@@ count@@ B = count@@ B ; prev_@@ count@@ S = count@@ S ; count@@ S = prev_@@ count@@ B + prev_@@ count@@ S ; count@@ B = prev_@@ count@@ S ; } int result = count@@ S + count@@ B ; return ( result * result ) ; }
ONE_@@ LINE_@@ FUNCTION_@@ FOR_@@ FAC@@ TOR@@ I@@ AL_@@ OF_@@ A_@@ NUMBER | int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; }
CHECK_@@ GI@@ V@@ EN_@@ MATRI@@ X@@ _S@@ PARSE_@@ NOT | bool is@@ Sparse ( int array [ ] [ MAX ] , int m , int n ) { int counter = 0 ; for ( int i = 0 ; i < m ; ++ i ) for ( int j = 0 ; j < n ; ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ; return ( counter > ( ( m * n ) / 2 ) ) ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 10_@@ 0_@@ 1_@@ KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M | int kn@@ ap@@ S@@ ack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 || W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return kn@@ ap@@ S@@ ack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + kn@@ ap@@ S@@ ack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , kn@@ ap@@ S@@ ack ( W , wt , val , n - 1 ) ) ; }
FIN@@ D@@ _SUB@@ ARRAY_@@ LEA@@ ST_@@ AVER@@ AGE | void find@@ Min@@ Avg@@ Sub@@ array ( int arr [ ] , int n , int k ) { if ( n < k ) return ; int res_@@ index = 0 ; int curr_@@ sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_@@ sum += arr [ i ] ; int min_@@ sum = curr_@@ sum ; for ( int i = k ; i < n ; i ++ ) { curr_@@ sum += arr [ i ] - arr [ i - k ] ; if ( curr_@@ sum < min_@@ sum ) { min_@@ sum = curr_@@ sum ; res_@@ index = ( i - k + 1 ) ; } } cout << " Sub@@ array ▁ between ▁ [ " << res_@@ index << " , ▁ " << res_@@ index + k - 1 << " ] ▁ has ▁ minimum ▁ average " ; }
QUER@@ I@@ ES_@@ FOR_@@ CHARAC@@ TER@@ S_IN_@@ A_@@ REPE@@ ATED_@@ STRING | void query ( char s [ ] , int i , int j ) { int n = strlen ( s ) ; i %= n ; j %= n ; ( s [ i ] == s [ j ] ) ? ( cout << " Yes " << endl ) : ( cout << " No " << endl ) ; }
A_@@ PRODUCT_@@ ARRAY_@@ PU@@ ZZ@@ LE_@@ 1 | void product@@ Array ( int arr [ ] , int n ) { if ( n == 1 ) { cout << 0 ; return ; } int i , temp = 1 ; int * prod = new int [ ( sizeof ( int ) * n ) ] ; memset ( prod , 1 , n ) ; for ( i = 0 ; i < n ; i ++ ) { prod [ i ] = temp ; temp *= arr [ i ] ; } temp = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) cout << prod [ i ] << " ▁ " ; return ; }
FIND_@@ PAIR@@ S_@@ GI@@ VEN@@ _S@@ UM_@@ ELEMEN@@ TS_@@ PA@@ IR_@@ DIFF@@ ER@@ ENT_@@ ROWS | void pair@@ Sum ( int mat [ ] [ MAX ] , int n , int sum ) { for ( int i = 0 ; i < n ; i ++ ) sort ( mat [ i ] , mat [ i ] + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int left = 0 , right = n - 1 ; while ( left < n && right >= 0 ) { if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) { cout << " ( " << mat [ i ] [ left ] << " , ▁ " << mat [ j ] [ right ] << " ) , ▁ " ; left ++ ; right -- ; } else { if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ; else right -- ; } } } } }
CHECK_@@ STRING_@@ CAN_@@ OB@@ TA@@ IN@@ ED_@@ ROTA@@ TING_@@ AN@@ OTHER_@@ STRING_@@ 2_@@ PL@@ AC@@ ES | bool is@@ Rot@@ ated ( string str1 , string str2 ) { if ( str1 . length ( ) != str2 . length ( ) ) return false ; string clock_@@ rot = " " ; string an@@ tic@@ lock_@@ rot = " " ; int len = str2 . length ( ) ; an@@ tic@@ lock_@@ rot = an@@ tic@@ lock_@@ rot + str2 . substr ( len - 2 , 2 ) + str2 . substr ( 0 , len - 2 ) ; clock_@@ rot = clock_@@ rot + str2 . substr ( 2 ) + str2 . substr ( 0 , 2 ) ; return ( str1 . compare ( clock_@@ rot ) == 0 || str1 . compare ( an@@ tic@@ lock_@@ rot ) == 0 ) ; }
N_@@ TH_@@ NUMBER_@@ WHO@@ SE_@@ S@@ UM_@@ OF_@@ DIG@@ IT@@ S_@@ IS_@@ TEN | int find@@ N@@ th ( int n ) { int count = 0 ; for ( int curr = 1 ; ; curr ++ ) { int sum = 0 ; for ( int x = curr ; x > 0 ; x = x / 10 ) sum = sum + x % 10 ; if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } return - 1 ; }
PROGRAM_@@ FIN@@ D_S@@ LO@@ PE_@@ LINE | float slope ( float x1 , float y1 , float x2 , float y2 ) { return ( y2 - y1 ) / ( x2 - x1 ) ; }
GC@@ D_@@ ELEMEN@@ TS_@@ GI@@ V@@ EN_@@ RANGE | int range@@ GC@@ D ( int n , int m ) { return ( n == m ) ? n : 1 ; }
LON@@ GE@@ ST_@@ ALTER@@ N@@ AT@@ ING@@ _SUB_@@ ARRAY_@@ START@@ ING_@@ EVER@@ Y_@@ INDEX_@@ BINARY_@@ ARRAY_@@ 1 | void alternate@@ Sub@@ array ( bool arr [ ] , int n ) { int count = 1 ; int prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; ++ i ) { if ( ( arr [ i ] ^ prev ) == 0 ) { while ( count ) cout << count -- << " ▁ " ; } ++ count ; prev = arr [ i ] ; } while ( count ) cout << count -- << " ▁ " ; }
FIND_@@ UNIT_@@ DIG@@ IT_@@ X_@@ RAI@@ SED_@@ POWER_@@ Y | int unit@@ Digit@@ X@@ Rai@@ sed@@ Y ( int x , int y ) { int res = 1 ; for ( int i = 0 ; i < y ; i ++ ) res = ( res * x ) % 10 ; return res ; }
MULTI@@ PLY_@@ LARGE_@@ INTEG@@ ERS_@@ UN@@ DER_@@ LARGE_@@ MODUL@@ O | long long modu@@ lo@@ Multiplic@@ ation ( long long a , long long b , long long mod ) { long long res = 0 ; a %= mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; }
FIN@@ D_S@@ MAL@@ LE@@ ST_@@ NUMBER_@@ WITH_@@ GI@@ V@@ EN_@@ NUMBER_OF_@@ DIG@@ IT@@ S_@@ AND_@@ DIG@@ IT_@@ SUM | void find@@ S@@ malle@@ st ( int m , int s ) { if ( s == 0 ) { ( m == 1 ) ? cout << " S@@ malle@@ st ▁ number ▁ is ▁ " << 0 : cout << " Not ▁ possible " ; return ; } if ( s > 9 * m ) { cout << " Not ▁ possible " ; return ; } int res [ m ] ; s -= 1 ; for ( int i = m - 1 ; i > 0 ; i -- ) { if ( s > 9 ) { res [ i ] = 9 ; s -= 9 ; } else { res [ i ] = s ; s = 0 ; } } res [ 0 ] = s + 1 ; cout << " S@@ malle@@ st ▁ number ▁ is ▁ " ; for ( int i = 0 ; i < m ; i ++ ) cout << res [ i ] ; }
C_@@ PROGRAM_@@ FIND_@@ LAR@@ GE@@ ST_@@ ELEMENT_@@ ARRAY | int largest ( int arr [ ] , int n ) { int i ; int max = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ; return max ; }
COUNT_@@ NUMB@@ ERS_@@ CAN_@@ CONSTRUC@@ TED_@@ USING_@@ TWO_@@ NUMB@@ ERS | int count@@ Num@@ s ( int n , int x , int y ) { vector < bool > arr ( n + 1 , false ) ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = min ( x , y ) ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; result ++ ; } } return result ; }
BU@@ BB@@ LE_@@ SORT_@@ 1 | void bu@@ bble@@ Sort ( int arr [ ] , int n ) { int i , j ; bool swapped ; for ( i = 0 ; i < n - 1 ; i ++ ) { swapped = false ; for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { swap ( & arr [ j ] , & arr [ j + 1 ] ) ; swapped = true ; } } if ( swapped == false ) break ; } }
MAX@@ IM@@ UM@@ _S@@ UM_@@ 2_@@ X_@@ N_@@ GRID_@@ NO_@@ TWO_@@ ELEMEN@@ TS_@@ AD@@ J@@ AC@@ ENT | int max@@ Sum ( int grid [ 2 ] [ MAX ] , int n ) { int in@@ cl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ; int ex@@ cl = 0 , ex@@ cl_@@ new ; for ( int i = 1 ; i < n ; i ++ ) { ex@@ cl_@@ new = max ( ex@@ cl , in@@ cl ) ; in@@ cl = ex@@ cl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ; ex@@ cl = ex@@ cl_@@ new ; } return max ( ex@@ cl , in@@ cl ) ; }
GC@@ D_@@ FAC@@ TOR@@ I@@ AL@@ S_@@ TWO_@@ NUMB@@ ERS | int g@@ cd@@ Of@@ Fac@@ tori@@ al ( int m , int n ) { return factorial ( min ( m , n ) ) ; }
AREA_@@ OF_@@ A@@ _SEC@@ TOR | void Sector@@ Area ( double radius , double angle ) { if ( angle >= 360 ) cout << " Angle ▁ not ▁ possible " ; else { double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 ) ; cout << sector ; } }
COUNT_@@ EV@@ EN_@@ LENGTH_@@ BIN@@ AR@@ Y@@ _SEQU@@ EN@@ CES_@@ WITH@@ _S@@ AME_@@ S@@ UM_@@ OF_@@ FIRST_@@ AND@@ _SECON@@ D_@@ HALF_@@ BITS_@@ 1 | int count@@ Seq ( int n ) { int n@@ Cr = 1 , res = 1 ; for ( int r = 1 ; r <= n ; r ++ ) { n@@ Cr = ( n@@ Cr * ( n + 1 - r ) ) / r ; res += n@@ Cr * n@@ Cr ; } return res ; }
LON@@ GE@@ ST_@@ EV@@ EN_@@ LENGTH@@ _SUB@@ STRING@@ _S@@ UM_@@ FIR@@ ST@@ _SECON@@ D_@@ HALF_@@ 1 | int find@@ Length ( char * str ) { int n = strlen ( str ) ; int maxlen = 0 ; int sum [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] [ i ] = str [ i ] - '0' ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int i = 0 ; i < n - len + 1 ; i ++ ) { int j = i + len - 1 ; int k = len / 2 ; sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ; if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ; } } return maxlen ; }
SW@@ AP_@@ ALL_@@ OD@@ D_@@ AND_@@ EV@@ EN_@@ BITS | unsigned int swap@@ Bits ( unsigned int x ) { unsigned int even@@ _bits = x & 0x@@ AAAA@@ AAAA ; unsigned int od@@ d_@@ bits = x & 0x5@@ 5555@@ 555 ; even@@ _bits >>= 1 ; od@@ d_@@ bits <<= 1 ; return ( even@@ _bits | od@@ d_@@ bits ) ; }
SORT_@@ ARRAY_@@ WAVE_@@ FORM_@@ 2 | void sort@@ In@@ Wave ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i += 2 ) swap ( & arr [ i ] , & arr [ i + 1 ] ) ; }
FIND_@@ HAR@@ MON@@ IC_@@ ME@@ AN_@@ USING_@@ ARI@@ TH@@ ME@@ TIC_@@ ME@@ AN_@@ GEO@@ METRIC_@@ MEAN | double compute ( int a , int b ) { double AM , GM , H@@ M ; AM = ( a + b ) / 2 ; GM = sqrt ( a * b ) ; H@@ M = ( GM * GM ) / AM ; return H@@ M ; }
COUNT_@@ BAL@@ AN@@ CED_@@ BINARY_@@ TRE@@ ES_@@ HEIGHT_@@ H | long long int count@@ BT ( int h ) { long long int dp [ h + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= h ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod + dp [ i - 1 ] ) % mod ) % mod ; } return dp [ h ] ; }
MINIMUM_@@ INSER@@ TIONS_@@ TO_@@ FORM_@@ A_@@ PA@@ LIN@@ DRO@@ ME_@@ WITH_@@ PER@@ MU@@ TA@@ TIONS_@@ ALLOWED | int min@@ Insertion ( string str ) { int n = str . length ( ) ; int res = 0 ; int count [ 26 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) if ( count [ i ] % 2 == 1 ) res ++ ; return ( res == 0 ) ? 0 : res - 1 ; }
SHUFF@@ LE_@@ A_@@ GI@@ V@@ EN_@@ ARRAY | void randomize ( int arr [ ] , int n ) { srand ( time ( NULL ) ) ; for ( int i = n - 1 ; i > 0 ; i -- ) { int j = rand ( ) % ( i + 1 ) ; swap ( & arr [ i ] , & arr [ j ] ) ; } }
U@@ GL@@ Y_@@ NUMB@@ ERS | unsigned getN@@ th@@ U@@ gl@@ y@@ No ( unsigned n ) { unsigned ugly [ n ] ; unsigned i2 = 0 , i3 = 0 , i@@ 5 = 0 ; unsigned next_@@ multiple_@@ of_@@ 2 = 2 ; unsigned next_@@ multiple_@@ of_@@ 3 = 3 ; unsigned next_@@ multiple_@@ of_@@ 5 = 5 ; unsigned next_@@ u@@ gl@@ y_@@ no = 1 ; ugly [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { next_@@ u@@ gl@@ y_@@ no = min ( next_@@ multiple_@@ of_@@ 2 , min ( next_@@ multiple_@@ of_@@ 3 , next_@@ multiple_@@ of_@@ 5 ) ) ; ugly [ i ] = next_@@ u@@ gl@@ y_@@ no ; if ( next_@@ u@@ gl@@ y_@@ no == next_@@ multiple_@@ of_@@ 2 ) { i2 = i2 + 1 ; next_@@ multiple_@@ of_@@ 2 = ugly [ i2 ] * 2 ; } if ( next_@@ u@@ gl@@ y_@@ no == next_@@ multiple_@@ of_@@ 3 ) { i3 = i3 + 1 ; next_@@ multiple_@@ of_@@ 3 = ugly [ i3 ] * 3 ; } if ( next_@@ u@@ gl@@ y_@@ no == next_@@ multiple_@@ of_@@ 5 ) { i@@ 5 = i@@ 5 + 1 ; next_@@ multiple_@@ of_@@ 5 = ugly [ i@@ 5 ] * 5 ; } } return next_@@ u@@ gl@@ y_@@ no ; }
MINIMUM_@@ CO@@ ST_@@ CU@@ T_@@ BO@@ AR@@ D_S@@ QUAR@@ ES | int minimum@@ Cost@@ Of@@ Brea@@ king ( int X [ ] , int Y [ ] , int m , int n ) { int res = 0 ; sort ( X , X + m , greater < int > ( ) ) ; sort ( Y , Y + n , greater < int > ( ) ) ; int h@@ z@@ n@@ tl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ; h@@ z@@ n@@ tl ++ ; i ++ ; } else { res += Y [ j ] * h@@ z@@ n@@ tl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) total += X [ i ++ ] ; res += total * vert ; total = 0 ; while ( j < n ) total += Y [ j ++ ] ; res += total * h@@ z@@ n@@ tl ; return res ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 10_@@ 0_@@ 1_@@ KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M_@@ 1 | int kn@@ ap@@ S@@ ack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; }
STACK_@@ PER@@ MU@@ TA@@ TIONS_@@ CHECK_@@ IF_@@ AN_@@ ARRAY_@@ IS_@@ STACK_@@ PER@@ MU@@ TATION_@@ OF_@@ OTHER | bool check@@ Stack@@ Permutation ( int ip [ ] , int op [ ] , int n ) { queue < int > input ; for ( int i = 0 ; i < n ; i ++ ) input . push ( ip [ i ] ) ; queue < int > output ; for ( int i = 0 ; i < n ; i ++ ) output . push ( op [ i ] ) ; stack < int > temp@@ Stack ; while ( ! input . empty ( ) ) { int ele = input . front ( ) ; input . pop ( ) ; if ( ele == output . front ( ) ) { output . pop ( ) ; while ( ! temp@@ Stack . empty ( ) ) { if ( temp@@ Stack . top ( ) == output . front ( ) ) { temp@@ Stack . pop ( ) ; output . pop ( ) ; } else break ; } } else temp@@ Stack . push ( ele ) ; } return ( input . empty ( ) && temp@@ Stack . empty ( ) ) ; }
PRO@@ B@@ AB@@ ILITY_@@ THRE@@ E_@@ RAN@@ DOM@@ LY_@@ CH@@ OS@@ EN_@@ NUMB@@ ERS_@@ AP | double pro@@ cal ( int n ) { return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ; }
REMOVE_@@ BRAC@@ KE@@ TS_@@ AL@@ GE@@ BRA@@ IC_@@ STRING_@@ CONTAIN@@ ING_@@ OPER@@ ATORS | char * simplify ( string str ) { int len = str . length ( ) ; char * res = new char ( len ) ; int index = 0 , i = 0 ; stack < int > s ; s . push ( 0 ) ; while ( i < len ) { if ( str [ i ] == ' + ' ) { if ( s . top ( ) == 1 ) res [ index ++ ] = ' - ' ; if ( s . top ( ) == 0 ) res [ index ++ ] = ' + ' ; } else if ( str [ i ] == ' - ' ) { if ( s . top ( ) == 1 ) res [ index ++ ] = ' + ' ; else if ( s . top ( ) == 0 ) res [ index ++ ] = ' - ' ; } else if ( str [ i ] == ' ( ' && i > 0 ) { if ( str [ i - 1 ] == ' - ' ) { int x = ( s . top ( ) == 1 ) ? 0 : 1 ; s . push ( x ) ; } else if ( str [ i - 1 ] == ' + ' ) s . push ( s . top ( ) ) ; } else if ( str [ i ] == ' ) ' ) s . pop ( ) ; else res [ index ++ ] = str [ i ] ; i ++ ; } return res ; }
FIND_@@ NUMBER_@@ PER@@ F@@ ECT_@@ SQU@@ AR@@ ES_@@ TWO_@@ GI@@ V@@ EN_@@ NUMB@@ ERS | int count@@ Squ@@ ares ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) for ( int j = 1 ; j * j <= i ; j ++ ) if ( j * j == i ) cnt ++ ; return cnt ; }
K_@@ NUMB@@ ERS_@@ DIFF@@ ER@@ ENCE_@@ MAXIMUM_@@ MINIMUM_@@ K_@@ NUMBER_@@ MINI@@ MIZ@@ ED | int min@@ Diff ( int arr [ ] , int n , int k ) { int result = INT_MAX ; sort ( arr , arr + n ) ; for ( int i = 0 ; i <= n - k ; i ++ ) result = min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; return result ; }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 13_@@ NOT | bool check@@ Di@@ visibility ( string num ) { int length = num . size ( ) ; if ( length == 1 && num [ 0 ] == '0' ) return true ; if ( length % 3 == 1 ) { num += "@@ 00" ; length += 2 ; } else if ( length % 3 == 2 ) { num += "0" ; length += 1 ; } int sum = 0 , p = 1 ; for ( int i = length - 1 ; i >= 0 ; i -- ) { int group = 0 ; group += num [ i -- ] - '0' ; group += ( num [ i -- ] - '0' ) * 10 ; group += ( num [ i ] - '0' ) * 100 ; sum = sum + group * p ; p *= ( - 1 ) ; } sum = abs ( sum ) ; return ( sum % 13 == 0 ) ; }
GI@@ V@@ EN_@@ N_@@ X_@@ N_S@@ QU@@ ARE_@@ MATRIX_@@ FIN@@ D_S@@ UM@@ _SUB@@ _S@@ QUAR@@ ES@@ _SIZE_@@ K_@@ X_@@ K | void print@@ Sum@@ Simple ( int mat [ ] [ n ] , int k ) { if ( k > n ) return ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { for ( int j = 0 ; j < n - k + 1 ; j ++ ) { int sum = 0 ; for ( int p = i ; p < k + i ; p ++ ) for ( int q = j ; q < k + j ; q ++ ) sum += mat [ p ] [ q ] ; cout << sum << " ▁ ▁ " ; } cout << endl ; } }
FIND_@@ THE_@@ POINT_@@ W@@ HER@@ E_@@ MAXIMUM_@@ INTER@@ VAL@@ S_@@ OVER@@ L@@ AP_@@ 1 | void max@@ Overlap ( vector < int > & start , vector < int > & end ) { int n = start . size ( ) ; int max@@ a = * max_@@ element ( start . begin ( ) , start . end ( ) ) ; int max@@ b = * max_@@ element ( end . begin ( ) , end . end ( ) ) ; int max@@ c = max ( max@@ a , max@@ b ) ; int x [ max@@ c + 2 ] ; memset ( x , 0 , sizeof x ) ; int cur = 0 , idx ; for ( int i = 0 ; i < n ; i ++ ) { ++ x [ start [ i ] ] ; -- x [ end [ i ] + 1 ] ; } int maxy = INT_@@ MIN ; for ( int i = 0 ; i <= max@@ c ; i ++ ) { cur += x [ i ] ; if ( maxy < cur ) { maxy = cur ; idx = i ; } } cout << " Maximum ▁ value ▁ is ▁ " << maxy << " ▁ at ▁ position ▁ " << idx << endl ; }
MAX@@ IM@@ UM@@ _SUB@@ SEQU@@ ENCE_@@ SUM@@ _SU@@ CH_@@ TH@@ AT_@@ NO_@@ THRE@@ E_@@ ARE_@@ CON@@ SEC@@ UTI@@ VE_@@ 1 | int max@@ Sum@@ WO@@ 3@@ Con@@ sec ( int n ) { if ( sum [ n ] != - 1 ) return sum [ n ] ; if ( n == 0 ) return sum [ n ] = 0 ; if ( n == 1 ) return sum [ n ] = arr [ 0 ] ; if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ; return sum [ n ] = max ( max ( max@@ Sum@@ WO@@ 3@@ Con@@ sec ( n - 1 ) , max@@ Sum@@ WO@@ 3@@ Con@@ sec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + max@@ Sum@@ WO@@ 3@@ Con@@ sec ( n - 3 ) ) ; }
C_@@ PROGRAM_@@ ADDI@@ TION_@@ TWO_@@ MATRI@@ CES | void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < N ; j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ; }
FIND_@@ MAXIMUM_@@ AVER@@ AGE_@@ SUB@@ ARRAY_@@ OF_@@ K_@@ LENGTH_@@ 1 | int find@@ Max@@ Average ( int arr [ ] , int n , int k ) { if ( k > n ) return - 1 ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; int max_@@ sum = sum , max_@@ end = k - 1 ; for ( int i = k ; i < n ; i ++ ) { int sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_@@ sum ) { max_@@ sum = sum ; max_@@ end = i ; } } return max_@@ end - k + 1 ; }
FIND_@@ CENTER_@@ CI@@ R@@ CLE_@@ USING_@@ END@@ POINT@@ S_@@ DI@@ AME@@ TER | void center ( int x1 , int x2 , int y1 , int y2 ) { cout << ( float ) ( x1 + x2 ) / 2 << " , ▁ " << ( float ) ( y1 + y2 ) / 2 ; }
TOTAL_@@ NUMBER_OF_@@ NON_@@ DECRE@@ AS@@ ING_@@ NUMB@@ ERS_@@ WITH_@@ N_@@ DIGITS | long long int count@@ Non@@ Decre@@ asing ( int n ) { long long int dp [ 10 ] [ n + 1 ] ; memset ( dp , 0 , sizeof dp ) ; for ( int i = 0 ; i < 10 ; i ++ ) dp [ i ] [ 1 ] = 1 ; for ( int digit = 0 ; digit <= 9 ; digit ++ ) { for ( int len = 2 ; len <= n ; len ++ ) { for ( int x = 0 ; x <= digit ; x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ; } } long long int count = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) count += dp [ i ] [ n ] ; return count ; }
PRINT_@@ REVERSE_@@ STRING_@@ REMO@@ V@@ ING_@@ VO@@ WEL@@ S | void replace@@ Original ( string s , int n ) { string r ( n , ' ▁ ' ) ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = s [ n - 1 - i ] ; if ( s [ i ] != ' a ' && s [ i ] != ' e ' && s [ i ] != ' i ' && s [ i ] != ' o ' && s [ i ] != ' u ' ) { cout << r [ i ] ; } } cout << endl ; }
FIND_@@ ELEMEN@@ TS_@@ PRES@@ ENT_@@ FIRST_@@ ARRAY_@@ NOT_@@ SECON@@ D_@@ 1 | void find@@ Missing ( int a [ ] , int b [ ] , int n , int m ) { unordered_@@ set < int > s ; for ( int i = 0 ; i < m ; i ++ ) s . insert ( b [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a [ i ] << " ▁ " ; }
COUNT_@@ STRING@@ S_@@ CAN_@@ FOR@@ MED_@@ USING_@@ B_@@ C_@@ GI@@ V@@ EN_@@ CONSTRA@@ INTS | int count@@ Str ( int n , int b@@ Count , int c@@ Count ) { if ( b@@ Count < 0 || c@@ Count < 0 ) return 0 ; if ( n == 0 ) return 1 ; if ( b@@ Count == 0 && c@@ Count == 0 ) return 1 ; int res = count@@ Str ( n - 1 , b@@ Count , c@@ Count ) ; res += count@@ Str ( n - 1 , b@@ Count - 1 , c@@ Count ) ; res += count@@ Str ( n - 1 , b@@ Count , c@@ Count - 1 ) ; return res ; }
GO@@ LD_@@ MINE_@@ PRO@@ BLE@@ M | int getMax@@ G@@ old ( int gold [ ] [ MAX ] , int m , int n ) { int gold@@ Table [ m ] [ n ] ; memset ( gold@@ Table , 0 , sizeof ( gold@@ Table ) ) ; for ( int col = n - 1 ; col >= 0 ; col -- ) { for ( int row = 0 ; row < m ; row ++ ) { int right = ( col == n - 1 ) ? 0 : gold@@ Table [ row ] [ col + 1 ] ; int right_@@ up = ( row == 0 || col == n - 1 ) ? 0 : gold@@ Table [ row - 1 ] [ col + 1 ] ; int right_@@ down = ( row == m - 1 || col == n - 1 ) ? 0 : gold@@ Table [ row + 1 ] [ col + 1 ] ; gold@@ Table [ row ] [ col ] = gold [ row ] [ col ] + max ( right , max ( right_@@ up , right_@@ down ) ) ; } } int res = gold@@ Table [ 0 ] [ 0 ] ; for ( int i = 1 ; i < m ; i ++ ) res = max ( res , gold@@ Table [ i ] [ 0 ] ) ; return res ; }
COUNT_@@ WAY@@ S_@@ BUILD_@@ STRE@@ ET_@@ GI@@ V@@ EN_@@ CONSTRA@@ INTS | long count@@ W@@ ays ( int n ) { long dp [ 2 ] [ n + 1 ] ; dp [ 0 ] [ 1 ] = 1 ; dp [ 1 ] [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ; dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ; } return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ; }
RETURN_@@ A_@@ PA@@ IR_@@ WITH_@@ MAXIMUM_@@ PRODUCT_@@ IN_@@ ARRAY_@@ OF_@@ INTEG@@ ERS_@@ 1 | void max@@ Product ( int arr [ ] , int n ) { if ( n < 2 ) { cout << " No ▁ pairs ▁ exists \n " ; return ; } if ( n == 2 ) { cout << arr [ 0 ] << " ▁ " << arr [ 1 ] << endl ; return ; } int pos@@ a = INT_@@ MIN , pos@@ b = INT_@@ MIN ; int neg@@ a = INT_@@ MIN , neg@@ b = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > pos@@ a ) { pos@@ b = pos@@ a ; pos@@ a = arr [ i ] ; } else if ( arr [ i ] > pos@@ b ) pos@@ b = arr [ i ] ; if ( arr [ i ] < 0 && abs ( arr [ i ] ) > abs ( neg@@ a ) ) { neg@@ b = neg@@ a ; neg@@ a = arr [ i ] ; } else if ( arr [ i ] < 0 && abs ( arr [ i ] ) > abs ( neg@@ b ) ) neg@@ b = arr [ i ] ; } if ( neg@@ a * neg@@ b > pos@@ a * pos@@ b ) cout << " Max ▁ product ▁ pair ▁ is ▁ { " << neg@@ a << " , ▁ " << neg@@ b << " } " ; else cout << " Max ▁ product ▁ pair ▁ is ▁ { " << pos@@ a << " , ▁ " << pos@@ b << " } " ; }
POSITION_@@ OF_@@ RIGHT@@ MO@@ ST@@ _SET_@@ BIT | public : unsigned int getFirst@@ Set@@ Bit@@ Pos ( int n ) { return log2 ( n & - n ) + 1 ; }
LON@@ GE@@ ST@@ _SUB@@ SEQU@@ ENCE_@@ W@@ HER@@ E_@@ EVER@@ Y_@@ CHARACTER_@@ AP@@ PE@@ AR@@ S_@@ AT_@@ LEA@@ ST_@@ K_@@ TIMES | void lon@@ gest@@ Sub@@ seq@@ With@@ K ( string str , int k ) { int n = str . size ( ) ; int freq [ MAX_@@ CHARS ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) if ( freq [ str [ i ] - ' a ' ] >= k ) cout << str [ i ] ; }
POSSI@@ BLE_@@ TO_@@ MAKE_@@ A_@@ DI@@ VISI@@ BLE_@@ BY_@@ 3_@@ NUMBER_@@ USING_@@ ALL_@@ DIG@@ IT@@ S_IN_@@ AN_@@ ARRAY | bool is@@ Possible@@ To@@ Make@@ Di@@ visible ( int arr [ ] , int n ) { int remainder = 0 ; for ( int i = 0 ; i < n ; i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ; return ( remainder == 0 ) ; }
ARE@@ A@@ _S@@ QU@@ ARE_@@ CIRCUM@@ SCRI@@ BED_@@ CIRC@@ LE | int find_@@ Area ( int r ) { return ( 2 * r * r ) ; }
FIND_@@ MAXIMUM_@@ DOT_@@ PRODUCT_@@ TWO_@@ ARRAY@@ S_@@ INSER@@ TION_@@ 0@@ S | long long int Max@@ DotProduct ( int A [ ] , int B [ ] , int m , int n ) { long long int dp [ n + 1 ] [ m + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i ; j <= m ; j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ; return dp [ n ] [ m ] ; }
FIND_@@ DISTIN@@ CT_@@ SUB@@ SET_@@ SUB@@ SEQU@@ ENCE_@@ SUM@@ S_@@ ARRAY | void print@@ Dist@@ Sum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; bool dp [ n + 1 ] [ sum + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = true ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ arr [ i - 1 ] ] = true ; for ( int j = 1 ; j <= sum ; j ++ ) { if ( dp [ i - 1 ] [ j ] == true ) { dp [ i ] [ j ] = true ; dp [ i ] [ j + arr [ i - 1 ] ] = true ; } } } for ( int j = 0 ; j <= sum ; j ++ ) if ( dp [ n ] [ j ] == true ) cout << j << " ▁ " ; }
SP@@ LIT_@@ NUMERIC_@@ ALPH@@ AB@@ E@@ TIC_@@ AND@@ _SPECI@@ AL_@@ SYMBO@@ LS_@@ FROM_@@ A_@@ STRING | void split@@ String ( string str ) { string alpha , num , special ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isdigit ( str [ i ] ) ) num . push_back ( str [ i ] ) ; else if ( ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) || ( str [ i ] >= ' a ' && str [ i ] <= ' z ' ) ) alpha . push_back ( str [ i ] ) ; else special . push_back ( str [ i ] ) ; } cout << alpha << endl ; cout << num << endl ; cout << special << endl ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ ALTER@@ N@@ AT@@ ING@@ _SUB@@ SEQU@@ ENCE_@@ SUM | int max@@ Alternate@@ Sum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ n ] ; memset ( dec , 0 , sizeof ( dec ) ) ; int inc [ n ] ; memset ( inc , 0 , sizeof ( inc ) ) ; dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) ; flag = 1 ; } else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] ) ; } } int result = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( result < inc [ i ] ) result = inc [ i ] ; if ( result < dec [ i ] ) result = dec [ i ] ; } return result ; }
FIND_@@ PA@@ IR_@@ MAXIMUM_@@ GC@@ D_@@ ARRAY | int find@@ Max@@ GC@@ D ( int arr [ ] , int n ) { int high = 0 ; for ( int i = 0 ; i < n ; i ++ ) high = max ( high , arr [ i ] ) ; int di@@ visors [ high + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % j == 0 ) { di@@ visors [ j ] ++ ; if ( j != arr [ i ] / j ) di@@ visors [ arr [ i ] / j ] ++ ; } } } for ( int i = high ; i >= 1 ; i -- ) if ( di@@ visors [ i ] > 1 ) return i ; }
FIND_@@ MINIMUM_@@ NUMBER_OF_@@ CO@@ INS_@@ TH@@ AT_@@ MAKE_@@ A_@@ CHANGE_@@ 1 | int min@@ Coins ( int coins [ ] , int m , int V ) { int table [ V + 1 ] ; table [ 0 ] = 0 ; for ( int i = 1 ; i <= V ; i ++ ) table [ i ] = INT_MAX ; for ( int i = 1 ; i <= V ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( coins [ j ] <= i ) { int sub_@@ res = table [ i - coins [ j ] ] ; if ( sub_@@ res != INT_MAX && sub_@@ res + 1 < table [ i ] ) table [ i ] = sub_@@ res + 1 ; } } return table [ V ] ; }
S@@ UM_@@ NODE@@ S_@@ K_@@ TH_@@ LEVEL_@@ TREE_@@ RE@@ PRESEN@@ TED_@@ STRING | int sum@@ At@@ K@@ th@@ Level ( string tree , int k ) { int level = - 1 ; int sum = 0 ; int n = tree . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ( ' ) level ++ ; else if ( tree [ i ] == ' ) ' ) level -- ; else { if ( level == k ) sum += ( tree [ i ] - '0' ) ; } } return sum ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 4_@@ LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQUENCE | int l@@ cs ( char * X , char * Y , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + l@@ cs ( X , Y , m - 1 , n - 1 ) ; else return max ( l@@ cs ( X , Y , m , n - 1 ) , l@@ cs ( X , Y , m - 1 , n ) ) ; }
CHECK_@@ GI@@ VEN@@ _S@@ ENT@@ ENCE_@@ GI@@ VEN@@ _SET_@@ SIMPLE_@@ GR@@ AM@@ M@@ ER_@@ RULES | bool check@@ Sentence ( char str [ ] ) { int len = strlen ( str ) ; if ( str [ 0 ] < ' A ' || str [ 0 ] > ' Z ' ) return false ; if ( str [ len - 1 ] != ' . ' ) return false ; int prev_state = 0 , curr_@@ state = 0 ; int index = 1 ; while ( str [ index ] ) { if ( str [ index ] >= ' A ' && str [ index ] <= ' Z ' ) curr_@@ state = 0 ; else if ( str [ index ] == ' ▁ ' ) curr_@@ state = 1 ; else if ( str [ index ] >= ' a ' && str [ index ] <= ' z ' ) curr_@@ state = 2 ; else if ( str [ index ] == ' . ' ) curr_@@ state = 3 ; if ( prev_state == curr_@@ state && curr_@@ state != 2 ) return false ; if ( prev_state == 2 && curr_@@ state == 0 ) return false ; if ( curr_@@ state == 3 && prev_state != 1 ) return ( str [ index + 1 ] == ' \0' ) ; index ++ ; prev_state = curr_@@ state ; } return false ; }
CHECK_@@ DI@@ VISIBILITY_@@ LARGE_@@ NUMBER_@@ 999 | bool is@@ Di@@ visible@@ 999 ( string num ) { int n = num . length ( ) ; if ( n == 0 && num [ 0 ] == '0' ) return true ; if ( n % 3 == 1 ) num = "@@ 00" + num ; if ( n % 3 == 2 ) num = "0" + num ; int g@@ Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int group = 0 ; group += ( num [ i ++ ] - '0' ) * 100 ; group += ( num [ i ++ ] - '0' ) * 10 ; group += num [ i ] - '0' ; g@@ Sum += group ; } if ( g@@ Sum > 1000 ) { num = to_string ( g@@ Sum ) ; n = num . length ( ) ; g@@ Sum = is@@ Di@@ visible@@ 999 ( num ) ; } return ( g@@ Sum == 999 ) ; }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 9_@@ NOT | int check ( string str ) { int n = str . length ( ) ; int digit@@ Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) digit@@ Sum += ( str [ i ] - '0' ) ; return ( digit@@ Sum % 9 == 0 ) ; }
NUMBER_OF_@@ BINARY_@@ TRE@@ ES_@@ FOR_@@ GI@@ V@@ EN_@@ PRE@@ ORDER@@ _SEQU@@ ENCE_@@ LENGTH | int count@@ Trees ( int n ) { int BT [ n + 1 ] ; memset ( BT , 0 , sizeof ( BT ) ) ; BT [ 0 ] = BT [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) for ( int j = 0 ; j < i ; j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ] ; return BT [ n ] ; }
PROGR@@ AM@@ _SW@@ AP_@@ UPPER_@@ DIAG@@ ON@@ AL_@@ ELEMEN@@ TS_@@ LOWER_@@ DIAG@@ ON@@ AL_@@ ELEMEN@@ TS_@@ MATRIX | void swap@@ Upper@@ ToLower ( int arr [ n ] [ n ] ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int temp = arr [ i ] [ j ] ; arr [ i ] [ j ] = arr [ j ] [ i ] ; arr [ j ] [ i ] = temp ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << arr [ i ] [ j ] << " ▁ " ; cout << endl ; } }
FIN@@ D_S@@ UM_@@ MODUL@@ O_@@ K_@@ FIRST_@@ N_@@ N@@ ATUR@@ AL_@@ NUMBER_@@ 1 | int find@@ Sum ( int N , int K ) { int ans = 0 ; int y = N / K ; int x = N % K ; ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ; return ans ; }
WAY@@ S_@@ REMOVE_@@ ONE_@@ ELEMENT_@@ BINARY_@@ STRING_@@ X@@ OR_@@ BE@@ CO@@ ME@@ S_@@ ZERO | int xor@@ Zero ( string str ) { int one_@@ count = 0 , zero_@@ count = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( str [ i ] == '1' ) one_@@ count ++ ; else zero_@@ count ++ ; if ( one_@@ count % 2 == 0 ) return zero_@@ count ; return one_@@ count ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 7_@@ CO@@ IN_@@ CHANGE | int count ( int S [ ] , int m , int n ) { if ( n == 0 ) return 1 ; if ( n < 0 ) return 0 ; if ( m <= 0 && n >= 1 ) return 0 ; return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }
MIN@@ IM@@ UM@@ _S@@ UM@@ _SUB@@ SEQU@@ ENCE_@@ LEA@@ ST_@@ ONE_@@ EVER@@ Y_@@ FOUR_@@ CON@@ SEC@@ UTI@@ VE_@@ ELEMEN@@ TS_@@ PIC@@ KED | int min@@ Sum ( int arr [ ] , int n ) { int dp [ n ] ; if ( n == 1 ) return arr [ 0 ] ; if ( n == 2 ) return min ( arr [ 0 ] , arr [ 1 ] ) ; if ( n == 3 ) return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) ) ; if ( n == 4 ) return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) ) ; dp [ 0 ] = arr [ 0 ] ; dp [ 1 ] = arr [ 1 ] ; dp [ 2 ] = arr [ 2 ] ; dp [ 3 ] = arr [ 3 ] ; for ( int i = 4 ; i < n ; i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ; return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ; }
MAXIMUM_@@ PATH@@ _S@@ UM_@@ TRI@@ ANGLE | int max@@ Path@@ Sum ( int tri [ ] [ N ] , int m , int n ) { for ( int i = m - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } return tri [ 0 ] [ 0 ] ; }
FIND_@@ THRE@@ E_@@ ELEMENT_@@ FROM_@@ DIFF@@ ER@@ ENT_@@ THRE@@ E_@@ ARRAY@@ S@@ _SU@@ CH_@@ TH@@ AT_@@ TH@@ AT_@@ A_@@ B_@@ C_@@ K | bool find@@ Trip@@ let ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) { for ( int i = 0 ; i < n1 ; i ++ ) for ( int j = 0 ; j < n2 ; j ++ ) for ( int k = 0 ; k < n3 ; k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true ; return false ; }
TA@@ IL_@@ RECUR@@ SION_@@ FI@@ BON@@ AC@@ CI | int fi@@ b ( int n , int a = 0 , int b = 1 ) { if ( n == 0 ) return a ; if ( n == 1 ) return b ; return fi@@ b ( n - 1 , b , a + b ) ; }
PROGRAM_@@ TO_@@ CHECK_@@ IF_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ IS_@@ L@@ UC@@ K@@ Y_@@ ALL_@@ DIG@@ IT@@ S_@@ ARE_@@ DIFF@@ ER@@ ENT | bool is@@ Lu@@ ck@@ y ( int n ) { bool arr [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = false ; while ( n > 0 ) { int digit = n % 10 ; if ( arr [ digit ] ) return false ; arr [ digit ] = true ; n = n / 10 ; } return true ; }
GI@@ V@@ EN_@@ N_@@ X_@@ N_S@@ QU@@ ARE_@@ MATRIX_@@ FIN@@ D_S@@ UM@@ _SUB@@ _S@@ QUAR@@ ES@@ _SIZE_@@ K_@@ X_@@ K_@@ 1 | void print@@ Sum@@ Tri@@ ck@@ y ( int mat [ ] [ n ] , int k ) { if ( k > n ) return ; int strip@@ Sum [ n ] [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += mat [ i ] [ j ] ; strip@@ Sum [ 0 ] [ j ] = sum ; for ( int i = 1 ; i < n - k + 1 ; i ++ ) { sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ; strip@@ Sum [ i ] [ j ] = sum ; } } for ( int i = 0 ; i < n - k + 1 ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) sum += strip@@ Sum [ i ] [ j ] ; cout << sum << " ▁ ▁ " ; for ( int j = 1 ; j < n - k + 1 ; j ++ ) { sum += ( strip@@ Sum [ i ] [ j + k - 1 ] - strip@@ Sum [ i ] [ j - 1 ] ) ; cout << sum << " ▁ ▁ " ; } cout << endl ; } }
SCHEDUL@@ E_@@ ELE@@ V@@ ATOR_@@ TO_@@ RED@@ UCE_@@ THE_@@ TOTAL_@@ TIME_@@ TA@@ KEN | int min@@ Time ( int n , int k , int a [ ] ) { sort ( a , a + n , greater < int > ( ) ) ; int min@@ Time = 0 ; for ( int i = 0 ; i < n ; i += k ) min@@ Time += ( 2 * a [ i ] ) ; return min@@ Time ; }
OD@@ D_@@ EV@@ EN@@ _S@@ ORT_@@ B@@ RICK@@ _S@@ ORT | void odd@@ Even@@ Sort ( int arr [ ] , int n ) { bool is@@ Sorted = false ; while ( ! is@@ Sorted ) { is@@ Sorted = true ; for ( int i = 1 ; i <= n - 2 ; i = i + 2 ) { if ( arr [ i ] > arr [ i + 1 ] ) { swap ( arr [ i ] , arr [ i + 1 ] ) ; is@@ Sorted = false ; } } for ( int i = 0 ; i <= n - 2 ; i = i + 2 ) { if ( arr [ i ] > arr [ i + 1 ] ) { swap ( arr [ i ] , arr [ i + 1 ] ) ; is@@ Sorted = false ; } } } return ; }
RETURN_@@ MAXIMUM_@@ OC@@ CURR@@ ING_@@ CHARACTER_@@ IN_@@ THE_@@ INPUT_@@ STRING | char getMax@@ Occur@@ ing@@ Char ( char * str ) { int count [ ASCII@@ _SIZE ] = { 0 } ; int len = strlen ( str ) ; int max = 0 ; char result ; for ( int i = 0 ; i < len ; i ++ ) { count [ str [ i ] ] ++ ; if ( max < count [ str [ i ] ] ) { max = count [ str [ i ] ] ; result = str [ i ] ; } } return result ; }
COUNT_@@ NUMBER_@@ PAIR@@ S_@@ N_@@ B_@@ N_@@ GC@@ D_@@ B_@@ B | int Count@@ Pairs ( int n ) { int k = n ; int im@@ in = 1 ; int ans = 0 ; while ( im@@ in <= n ) { int imax = n / k ; ans += k * ( imax - im@@ in + 1 ) ; im@@ in = imax + 1 ; k = n / im@@ in ; } return ans ; }
K_@@ TH_@@ DISTIN@@ CT_@@ OR_@@ NON_@@ REPE@@ ATING_@@ ELEMENT_@@ IN_@@ AN_@@ ARRAY_@@ 1 | int print@@ K@@ Distin@@ ct ( int arr [ ] , int n , int k ) { unordered_map < int , int > h ; for ( int i = 0 ; i < n ; i ++ ) h [ arr [ i ] ] ++ ; if ( h . size ( ) < k ) return - 1 ; int dist@@ _count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( h [ arr [ i ] ] == 1 ) dist@@ _count ++ ; if ( dist@@ _count == k ) return arr [ i ] ; } return - 1 ; }
GENERATE_@@ BINARY_@@ PER@@ MU@@ TA@@ TIONS_@@ 1@@ S_@@ 0@@ S_@@ EVER@@ Y_@@ POINT_@@ PER@@ MU@@ TA@@ TIONS | void generate ( int ones , int zeroes , string str , int len ) { if ( len == str . length ( ) ) { cout << str << " ▁ ▁ " ; return ; } generate ( ones + 1 , zeroes , str + "1" , len ) ; if ( ones > zeroes ) generate ( ones , zeroes + 1 , str + "0" , len ) ; }
SEARCH_@@ INSERT_@@ AND_@@ DELETE_@@ IN_@@ AN_@@ UN@@ SOR@@ TED_@@ ARRAY | int findElement ( int arr [ ] , int n , int key ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return - 1 ; }
LC@@ S_@@ LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQU@@ ENCE_@@ THRE@@ E_@@ STRINGS | int l@@ cs@@ Of@@ 3 ( string X , string Y , string Z , int m , int n , int o ) { int L [ m + 1 ] [ n + 1 ] [ o + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] == Z [ k - 1 ] ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = max ( max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) ; } } } return L [ m ] [ n ] [ o ] ; }
MAX@@ IM@@ UM@@ _S@@ UM@@ _SUB@@ ARRAY_@@ REMO@@ V@@ ING_@@ ONE_@@ ELEMENT | int max@@ Sum@@ Sub@@ array@@ Remo@@ ving@@ One@@ E@@ le ( int arr [ ] , int n ) { int fw [ n ] , bw [ n ] ; int cur_@@ max = arr [ 0 ] , max_@@ so@@ _f@@ ar = arr [ 0 ] ; fw [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { cur_@@ max = max ( arr [ i ] , cur_@@ max + arr [ i ] ) ; max_@@ so@@ _f@@ ar = max ( max_@@ so@@ _f@@ ar , cur_@@ max ) ; fw [ i ] = cur_@@ max ; } cur_@@ max = max_@@ so@@ _f@@ ar = bw [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { cur_@@ max = max ( arr [ i ] , cur_@@ max + arr [ i ] ) ; max_@@ so@@ _f@@ ar = max ( max_@@ so@@ _f@@ ar , cur_@@ max ) ; bw [ i ] = cur_@@ max ; } int f@@ ans = max_@@ so@@ _f@@ ar ; for ( int i = 1 ; i < n - 1 ; i ++ ) f@@ ans = max ( f@@ ans , fw [ i - 1 ] + bw [ i + 1 ] ) ; return f@@ ans ; }
COUNT_@@ NUMBER_@@ WAY@@ S_@@ TILE_@@ FLO@@ OR@@ _SIZE_@@ N_@@ X_@@ M_@@ USING_@@ 1_@@ X_@@ M@@ _SIZE_@@ TI@@ LES | int count@@ W@@ ays ( int n , int m ) { int count [ n + 1 ] ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ; else if ( i < m ) count [ i ] = 1 ; else count [ i ] = 2 ; } return count [ n ] ; }
MIDD@@ LE_@@ OF_@@ THRE@@ E_@@ USING_@@ MINIMUM_@@ COMP@@ ARIS@@ ONS | int middle@@ Of@@ Three ( int a , int b , int c ) { if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ; else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return a ; else return c ; }
LON@@ GE@@ ST_@@ COMMON_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQU@@ ENCE_@@ LC@@ S_@@ LI@@ S | int LC@@ IS ( int ar@@ r1 [ ] , int n , int ar@@ r2 [ ] , int m ) { int table [ m ] ; for ( int j = 0 ; j < m ; j ++ ) table [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ar@@ r1 [ i ] == ar@@ r2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ; if ( ar@@ r1 [ i ] > ar@@ r2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ; } } int result = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( table [ i ] > result ) result = table [ i ] ; return result ; }
MAX@@ IM@@ UM@@ _SUB@@ SEQU@@ ENCE_@@ SUM@@ _SU@@ CH_@@ TH@@ AT_@@ NO_@@ THRE@@ E_@@ ARE_@@ CON@@ SEC@@ UTI@@ VE | int max@@ Sum@@ WO@@ 3@@ Con@@ sec ( int arr [ ] , int n ) { int sum [ n ] ; if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ; if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ; if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ; for ( int i = 3 ; i < n ; i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ; return sum [ n - 1 ] ; }
E@@ UL@@ ERI@@ AN_@@ NUMBER_@@ 1 | int e@@ ul@@ eri@@ an ( int n , int m ) { int dp [ n + 1 ] [ m + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( i > j ) { if ( j == 0 ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) ; } } } return dp [ n ] [ m ] ; }
DOUBLE_@@ FAC@@ TOR@@ I@@ AL | unsigned int double@@ factorial ( unsigned int n ) { if ( n == 0 || n == 1 ) return 1 ; return n * double@@ factorial ( n - 2 ) ; }
RE@@ AR@@ RANGE_@@ POSITIVE_@@ AND_@@ NEGATIVE_@@ NUMB@@ ERS_@@ PUBLI@@ SH | void GF@@ G :: re@@ arrange ( int arr [ ] , int n ) { int i = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < 0 ) { i ++ ; swap ( & arr [ i ] , & arr [ j ] ) ; } } int pos = i + 1 , neg = 0 ; while ( pos < n && neg < pos && arr [ neg ] < 0 ) { swap ( & arr [ neg ] , & arr [ pos ] ) ; pos ++ ; neg += 2 ; } }
MAXI@@ MI@@ ZE_@@ ARRA@@ Y_S@@ UN_@@ AFTER_@@ K_@@ NEG@@ ATION_@@ OPER@@ ATIONS | int maximum@@ Sum ( int arr [ ] , int n , int k ) { for ( int i = 1 ; i <= k ; i ++ ) { int min = INT_MAX ; int index = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < min ) { min = arr [ j ] ; index = j ; } } if ( min == 0 ) break ; arr [ index ] = - arr [ index ] ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQU@@ ENCE_@@ FROM_@@ A_@@ PREFIX_@@ AND_@@ A_@@ GI@@ V@@ EN_@@ ELEMENT_@@ AFTER_@@ PREFIX_@@ IS_@@ MUST | ll pre_@@ compute ( ll a [ ] , ll n , ll index , ll k ) { ll dp [ n ] [ n ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ 0 ] ) dp [ 0 ] [ i ] = a [ i ] + a [ 0 ] ; else dp [ 0 ] [ i ] = a [ i ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] && j > i ) { if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ i ] + a [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } return dp [ index ] [ k ] ; }
FUNCTION_@@ COPY_@@ STRING_@@ ITER@@ ATI@@ VE_@@ RECUR@@ SIVE | void my@@ Copy ( char s1 [ ] , char s2 [ ] ) { int i = 0 ; for ( i = 0 ; s1 [ i ] != ' \0' ; i ++ ) s2 [ i ] = s1 [ i ] ; s2 [ i ] = ' \0' ; }
GI@@ V@@ EN_@@ TWO_@@ STRING@@ S_@@ FIND_@@ FIRST_@@ STRING@@ _SUB@@ SEQU@@ ENCE_@@ SECON@@ D_@@ 1 | bool isSub@@ Sequence ( char str1 [ ] , char str2 [ ] , int m , int n ) { int j = 0 ; for ( int i = 0 ; i < n && j < m ; i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++ ; return ( j == m ) ; }
FIND_@@ UNIT_@@ DIG@@ IT_@@ X_@@ RAI@@ SED_@@ POWER_@@ Y_@@ 1 | int unit@@ number ( int x , int y ) { x = x % 10 ; if ( y != 0 ) y = y % 4 + 4 ; return ( ( ( int ) ( pow ( x , y ) ) ) % 10 ) ; }
PROGRAM_@@ NEXT_@@ FI@@ T_@@ ALGORITH@@ M_@@ MEMORY_@@ MAN@@ A@@ GEMENT | void Next@@ Fit ( int blockSize [ ] , int m , int process@@ Size [ ] , int n ) { int allocation [ n ] , j = 0 ; memset ( allocation , - 1 , sizeof ( allocation ) ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( blockSize [ j ] >= process@@ Size [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= process@@ Size [ i ] ; break ; } j = ( j + 1 ) % m ; } } cout << " \n Process ▁ No . \t@@ Process ▁ Size@@ \t@@ Block ▁ no . \n " ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ " << i + 1 << " \t\t " << process@@ Size [ i ] << " \t\t " ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; cout << endl ; } }
NO@@ BLE_@@ INTEG@@ ERS_@@ IN_@@ AN_@@ ARRAY_@@ COUNT_@@ OF_@@ GREATER_@@ ELEMEN@@ TS_@@ IS_@@ EQUAL_@@ TO_@@ VALUE | int no@@ ble@@ Integer ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < size ; j ++ ) if ( arr [ i ] < arr [ j ] ) count ++ ; if ( count == arr [ i ] ) return arr [ i ] ; } return - 1 ; }
MINIMUM_@@ FLI@@ P_@@ REQUIRED_@@ MAKE_@@ BINARY_@@ MATRIX_@@ SYM@@ METRIC | int minimum@@ flip ( int mat [ ] [ N ] , int n ) { int transpose [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ] ; int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++ ; return flip / 2 ; }
SEG@@ REG@@ ATE_@@ EV@@ EN_@@ OD@@ D_@@ NUMBER@@ S@@ _SET_@@ 3 | void array@@ Even@@ And@@ Odd ( int arr [ ] , int n ) { int i = - 1 , j = 0 ; int t ; while ( j != n ) { if ( arr [ j ] % 2 == 0 ) { i ++ ; swap ( arr [ i ] , arr [ j ] ) ; } j ++ ; } for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << " ▁ " ; }
DFS_@@ N_@@ ARY_@@ TREE_@@ AC@@ Y@@ CLI@@ C_@@ GRAPH_@@ RE@@ PRESEN@@ TED_@@ AD@@ J@@ AC@@ ENCY_@@ LIST | void dfs ( vector < int > list [ ] , int node , int arri@@ val ) { cout << node << ' \n ' ; for ( int i = 0 ; i < list [ node ] . size ( ) ; i ++ ) { if ( list [ node ] [ i ] != arri@@ val ) dfs ( list , list [ node ] [ i ] , node ) ; } }
HO@@ W_@@ TO_@@ TURN_@@ OFF_@@ A_@@ PARTIC@@ ULAR_@@ BIT_@@ IN_@@ A_@@ NUMBER | int turn@@ Off@@ K ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; }
NUMBER@@ _SUB@@ STRING@@ S_@@ DI@@ VISI@@ BLE_@@ 8_@@ NOT_@@ 3 | int count ( char s [ ] , int len ) { int cur = 0 , dig = 0 ; int sum [ MAX ] , dp [ MAX ] [ 3 ] ; memset ( sum , 0 , sizeof ( sum ) ) ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= len ; i ++ ) { dig = int ( s [ i - 1 ] ) - 48 ; cur += dig ; cur %= 3 ; sum [ i ] = cur ; dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ] ; dp [ i ] [ sum [ i ] ] ++ ; } int ans = 0 , d@@ prev = 0 , value = 0 , d@@ pre@@ v2 = 0 ; for ( int i = 1 ; i <= len ; i ++ ) { dig = int ( s [ i - 1 ] ) - 48 ; if ( dig == 8 ) ans ++ ; if ( i - 2 >= 0 ) { d@@ prev = int ( s [ i - 2 ] ) - 48 ; value = d@@ prev * 10 + dig ; if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++ ; } if ( i - 3 >= 0 ) { d@@ pre@@ v2 = int ( s [ i - 3 ] ) - 48 ; d@@ prev = int ( s [ i - 2 ] ) - 48 ; value = d@@ pre@@ v2 * 100 + d@@ prev * 10 + dig ; if ( value % 8 != 0 ) continue ; ans += ( i - 2 ) ; ans -= ( dp [ i - 3 ] [ sum [ i ] ] ) ; } } return ans ; }
ADD_@@ 1_@@ TO_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ 1 | int add@@ One ( int x ) { return ( - ( ~ x ) ) ; }
CHECK_@@ STRING_@@ FOL@@ LO@@ WS_@@ AN@@ BN_@@ PATTERN_@@ NOT | bool is@@ An@@ B@@ n ( string str ) { int n = str . length ( ) ; int i ; for ( i = 0 ; i < n ; i ++ ) if ( str [ i ] != ' a ' ) break ; if ( i * 2 != n ) return false ; int j ; for ( j = i ; j < n ; j ++ ) if ( str [ j ] != ' b ' ) return false ; return true ; }
FIND_@@ FIRST_@@ REPE@@ ATING_@@ ELEMENT_@@ ARRAY_@@ INTEG@@ ERS | void print@@ First@@ Repe@@ ating ( int arr [ ] , int n ) { int min = - 1 ; set < int > my@@ set ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( my@@ set . find ( arr [ i ] ) != my@@ set . end ( ) ) min = i ; else my@@ set . insert ( arr [ i ] ) ; } if ( min != - 1 ) cout << " The ▁ first ▁ repe@@ ating ▁ element ▁ is ▁ " << arr [ min ] ; else cout << " There ▁ are ▁ no ▁ repe@@ ating ▁ elements " ; }
CO@@ ST_@@ BAL@@ ANCE_@@ PAR@@ AN@@ THE@@ SES | int cost@@ To@@ Balance ( string s ) { if ( s . length ( ) == 0 ) cout << 0 << endl ; int ans = 0 ; int o = 0 , c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == ' ( ' ) o ++ ; if ( s [ i ] == ' ) ' ) c ++ ; } if ( o != c ) return - 1 ; int a [ s . size ( ) ] ; if ( s [ 0 ] == ' ( ' ) a [ 0 ] = 1 ; else a [ 0 ] = - 1 ; if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == ' ( ' ) a [ i ] = a [ i - 1 ] + 1 ; else a [ i ] = a [ i - 1 ] - 1 ; if ( a [ i ] < 0 ) ans += abs ( a [ i ] ) ; } return ans ; }
CO@@ IN_@@ GAME_@@ WIN@@ NER_@@ EVER@@ Y_@@ PLAYER_@@ THRE@@ E_@@ CHOICES | bool find@@ Win@@ ner ( int x , int y , int n ) { int dp [ n + 1 ] ; dp [ 0 ] = false ; dp [ 1 ] = true ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i - 1 >= 0 and ! dp [ i - 1 ] ) dp [ i ] = true ; else if ( i - x >= 0 and ! dp [ i - x ] ) dp [ i ] = true ; else if ( i - y >= 0 and ! dp [ i - y ] ) dp [ i ] = true ; else dp [ i ] = false ; } return dp [ n ] ; }
SEQU@@ EN@@ CES_@@ GI@@ V@@ EN_@@ LENGTH_@@ EVER@@ Y_@@ ELEMENT_@@ EQUAL_@@ TWI@@ CE_@@ PREVI@@ OUS | int getTotal@@ NumberOf@@ Sequences ( int m , int n ) { if ( m < n ) return 0 ; if ( n == 0 ) return 1 ; return getTotal@@ NumberOf@@ Sequences ( m - 1 , n ) + getTotal@@ NumberOf@@ Sequences ( m / 2 , n - 1 ) ; }
FIND_@@ DUPLIC@@ ATE@@ S_@@ GI@@ V@@ EN_@@ ARRAY_@@ ELEMEN@@ TS_@@ NOT_@@ LIMITED_@@ RANGE | void print@@ Duplicates ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; bool dup = false ; unordered_map < int , int > :: iterator itr ; for ( itr = freq . begin ( ) ; itr != freq . end ( ) ; itr ++ ) { if ( itr -> second > 1 ) { cout << itr -> first << " ▁ " ; dup = true ; } } if ( dup == false ) cout << " - 1" ; }
LON@@ GE@@ ST_@@ REPE@@ AT@@ ING@@ _SUB@@ SEQU@@ ENCE_@@ 1 | int find@@ Lon@@ gest@@ Repe@@ ating@@ Sub@@ Seq ( string X , int m , int n ) { if ( dp [ m ] [ n ] != - 1 ) return dp [ m ] [ n ] ; if ( m == 0 || n == 0 ) return dp [ m ] [ n ] = 0 ; if ( X [ m - 1 ] == X [ n - 1 ] && m != n ) return dp [ m ] [ n ] = find@@ Lon@@ gest@@ Repe@@ ating@@ Sub@@ Seq ( X , m - 1 , n - 1 ) + 1 ; return dp [ m ] [ n ] = max ( find@@ Lon@@ gest@@ Repe@@ ating@@ Sub@@ Seq ( X , m , n - 1 ) , find@@ Lon@@ gest@@ Repe@@ ating@@ Sub@@ Seq ( X , m - 1 , n ) ) ; }
COUNT_@@ OF_@@ N_@@ DIG@@ IT_@@ NUMB@@ ERS_@@ WHO@@ SE_@@ S@@ UM_@@ OF_@@ DIG@@ IT@@ S_@@ EQUAL@@ S_TO_@@ GI@@ VEN@@ _S@@ UM | void find@@ Count ( int n , int sum ) { int start = pow ( 10 , n - 1 ) ; int end = pow ( 10 , n ) - 1 ; int count = 0 ; int i = start ; while ( i <= end ) { int cur = 0 ; int temp = i ; while ( temp != 0 ) { cur += temp % 10 ; temp = temp / 10 ; } if ( cur == sum ) { count ++ ; i += 9 ; } else i ++ ; } cout << count ; }
MINIMUM_@@ CO@@ ST_@@ CONNECT_@@ WE@@ I@@ GH@@ TED_@@ NODE@@ S_@@ RE@@ PRESEN@@ TED_@@ ARRAY | int minimum_@@ cost ( int a [ ] , int n ) { int mn = INT_MAX ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mn = min ( a [ i ] , mn ) ; sum += a [ i ] ; } return mn * ( sum - mn ) ; }
FIND_@@ ALL_@@ DI@@ VI@@ SOR@@ S_@@ OF_@@ A_@@ N@@ ATUR@@ AL_@@ NUMBER@@ _SET_@@ 2 | void print@@ Di@@ visors ( int n ) { vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) printf ( " % d ▁ " , i ) ; else { printf ( " % d ▁ " , i ) ; v . push_back ( n / i ) ; } } } for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) printf ( " % d ▁ " , v [ i ] ) ; }
SQU@@ AR@@ ES_@@ OF_@@ MATRIX_@@ DIAG@@ ON@@ AL_@@ ELEMEN@@ TS_@@ 1 | void diag@@ onal@@ square ( int mat [ ] [ MAX ] , int row , int column ) { cout << " ▁ \n Diagonal ▁ one ▁ : ▁ " ; for ( int i = 0 ; i < row ; i ++ ) { cout << mat [ i ] [ i ] * mat [ i ] [ i ] << " ▁ " ; } cout << " ▁ \n \n Diagonal ▁ two ▁ : ▁ " ; for ( int i = 0 ; i < row ; i ++ ) { cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] << " ▁ " ; } }
C_@@ PROGRAM_@@ FIND_@@ AREA_@@ TRIANGLE_@@ 1 | double polygon@@ Area ( double X [ ] , double Y [ ] , int n ) { double area = 0.0 ; int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ; j = i ; } return abs ( area / 2.0 ) ; }
RANGE_@@ QUER@@ I@@ ES_@@ FOR_@@ FREQU@@ ENCI@@ ES_@@ OF_@@ ARRAY_@@ ELEMENTS | int find@@ Frequency ( int arr [ ] , int n , int left , int right , int element ) { int count = 0 ; for ( int i = left - 1 ; i <= right ; ++ i ) if ( arr [ i ] == element ) ++ count ; return count ; }
SERI@@ ES_@@ LAR@@ GE@@ ST_@@ G@@ CD@@ _S@@ UM_@@ EQUAL@@ S_@@ N | void print_@@ sequence ( int n , int k ) { int b = n / ( k * ( k + 1 ) / 2 ) ; if ( b == 0 ) { cout << - 1 << endl ; } else { int r = 1 ; for ( int x = 1 ; x * x <= n ; x ++ ) { if ( n % x != 0 ) continue ; if ( x <= b && x > r ) r = x ; if ( n / x <= b && n / x > r ) r = n / x ; } for ( int i = 1 ; i < k ; i ++ ) cout << r * i << " ▁ " ; int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ; cout << res << endl ; } }
FIND_@@ THRE@@ E_@@ ELEMENT_@@ FROM_@@ DIFF@@ ER@@ ENT_@@ THRE@@ E_@@ ARRAY@@ S@@ _SU@@ CH_@@ TH@@ AT_@@ TH@@ AT_@@ A_@@ B_@@ C_@@ K_@@ 1 | bool find@@ Trip@@ let ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) { unordered_@@ set < int > s ; for ( int i = 0 ; i < n1 ; i ++ ) s . insert ( a1 [ i ] ) ; for ( int i = 0 ; i < n2 ; i ++ ) { for ( int j = 0 ; j < n3 ; j ++ ) { if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end ( ) ) return true ; } } return false ; }
FIND_@@ THE_@@ MAXIMUM_@@ ELEMENT_@@ IN_@@ AN_@@ ARRAY_@@ WHI@@ CH_@@ IS_@@ FIRST_@@ INCRE@@ AS@@ ING_@@ AND_@@ TH@@ EN_@@ DECRE@@ AS@@ ING_@@ 1 | int find@@ Maximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return find@@ Maximum ( arr , low , mid - 1 ) ; else return find@@ Maximum ( arr , mid + 1 , high ) ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 1 | int fi@@ b ( int n ) { if ( lookup [ n ] == NIL ) { if ( n <= 1 ) lookup [ n ] = n ; else lookup [ n ] = fi@@ b ( n - 1 ) + fi@@ b ( n - 2 ) ; } return lookup [ n ] ; }
MODUL@@ AR_@@ EXPO@@ NE@@ N@@ TI@@ ATION_@@ POWER_@@ IN_@@ MODUL@@ AR_@@ ARI@@ TH@@ ME@@ TIC | int power ( int x , unsigned int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; }
WRITE_@@ ONE_@@ LINE_@@ C_@@ FUNCTION_@@ TO_@@ FIND_@@ WHE@@ THER_@@ A_@@ NO_@@ IS_@@ POWER_@@ OF_@@ TWO_@@ 1 | int bool is@@ PowerOf@@ Two ( int x ) { return x && ( ! ( x & ( x - 1 ) ) ) ; }
LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQU@@ ENCE_@@ WITH_@@ PER@@ MU@@ TA@@ TIONS_@@ ALLOWED | void lon@@ gest@@ String ( string str1 , string str2 ) { int count@@ 1 [ 26 ] = { 0 } , count2 [ 26 ] = { 0 } ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count@@ 1 [ str1 [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) count2 [ str2 [ i ] - ' a ' ] ++ ; string result ; for ( int i = 0 ; i < 26 ; i ++ ) for ( int j = 1 ; j <= min ( count@@ 1 [ i ] , count2 [ i ] ) ; j ++ ) result . push_back ( ' a ' + i ) ; cout << result ; }
DIFF@@ ER@@ ENCE_@@ MAX@@ IM@@ UM@@ _S@@ UM_@@ MIN@@ IM@@ UM@@ _S@@ UM_@@ N_@@ M_@@ ELEMEN@@ TS@@ IN_@@ RE@@ VIEW | int find_@@ difference ( int arr [ ] , int n , int m ) { int max = 0 , min = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 , j = n - 1 ; i < m ; i ++ , j -- ) { min += arr [ i ] ; max += arr [ j ] ; } return ( max - min ) ; }
PRINT_@@ NUMBER_@@ ASC@@ END@@ ING_@@ ORDER_@@ CONTAIN@@ S_@@ 1_2_@@ 3_@@ DIGITS | string print@@ Numbers ( int numbers [ ] , int n ) { vector < int > one@@ Two@@ Three ; for ( int i = 0 ; i < n ; i ++ ) { if ( find@@ Contains@@ One@@ Two@@ Three ( numbers [ i ] ) ) one@@ Two@@ Three . push_back ( numbers [ i ] ) ; } sort ( one@@ Two@@ Three . begin ( ) , one@@ Two@@ Three . end ( ) ) ; string result = " " ; for ( auto number : one@@ Two@@ Three ) { int value = number ; if ( result . length ( ) > 0 ) result += " , ▁ " ; result += to_string ( value ) ; } return ( result . length ( ) > 0 ) ? result : " - 1" ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 3_@@ LON@@ GE@@ ST_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQUENCE | int lis ( int arr [ ] , int n ) { int max = 1 ; _@@ lis ( arr , n , & max ) ; return max ; }
MINIMUM_@@ RE@@ VO@@ LU@@ TIONS_@@ MOVE_@@ CENTER_@@ CI@@ R@@ CLE_@@ TARGET | int min@@ Re@@ volu@@ tions ( double r , int x1 , int y1 , int x2 , int y2 ) { double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ; return ceil ( d / ( 2 * r ) ) ; }
CHECK_@@ TWO_@@ GI@@ VEN@@ _SE@@ TS_@@ DIS@@ JOINT | bool are@@ Dis@@ joint ( int set1 [ ] , int set2 [ ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false ; return true ; }
FIND_@@ MIN@@ IM@@ UM@@ _S@@ UM_@@ FAC@@ TOR@@ S_@@ NUMBER | int find@@ Min@@ Sum ( int num ) { int sum = 0 ; for ( int i = 2 ; i * i <= num ; i ++ ) { while ( num % i == 0 ) { sum += i ; num /= i ; } } sum += num ; return sum ; }
FREQU@@ ENT_@@ ELEMENT_@@ ARRAY | int most@@ Frequ@@ ent ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int max_@@ count = 1 , res = arr [ 0 ] , curr_@@ count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) curr_@@ count ++ ; else { if ( curr_@@ count > max_@@ count ) { max_@@ count = curr_@@ count ; res = arr [ i - 1 ] ; } curr_@@ count = 1 ; } } if ( curr_@@ count > max_@@ count ) { max_@@ count = curr_@@ count ; res = arr [ n - 1 ] ; } return res ; }
MINIMUM_@@ X@@ OR_@@ VALUE_@@ PA@@ IR_@@ 1 | int min@@ XOR ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int min@@ Xor = INT_MAX ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; min@@ Xor = min ( min@@ Xor , val ) ; } return min@@ Xor ; }
MIN@@ IM@@ UM@@ _S@@ UM_@@ PRODUCT_@@ TWO_@@ ARRAY@@ S | int min@@ product ( int a [ ] , int b [ ] , int n , int k ) { int diff = 0 , res = 0 ; int temp ; for ( int i = 0 ; i < n ; i ++ ) { int pro = a [ i ] * b [ i ] ; res = res + pro ; if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ; else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ; else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ; else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ; int d = abs ( pro - temp ) ; if ( d > diff ) diff = d ; } return res - diff ; }
FAST_@@ MULTIP@@ LIC@@ ATION_@@ METHOD_@@ WITH@@ OUT_@@ USING_@@ MULTIP@@ LIC@@ ATION_@@ OPERATOR_@@ R@@ US@@ SI@@ AN_@@ PE@@ AS@@ AN@@ TS_@@ ALGORITH@@ M | unsigned int rus@@ sian@@ Pe@@ as@@ ant ( unsigned int a , unsigned int b ) { int res = 0 ; while ( b > 0 ) { if ( b & 1 ) res = res + a ; a = a << 1 ; b = b >> 1 ; } return res ; }
DI@@ VISIBILITY_@@ 9_@@ USING_@@ BIT@@ WI@@ SE_@@ OPER@@ ATORS | bool is@@ Div@@ By@@ 9 ( int n ) { if ( n == 0 || n == 9 ) return true ; if ( n < 9 ) return false ; return is@@ Div@@ By@@ 9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) ) ; }
CHECK_@@ ARRAY_@@ RE@@ PRESEN@@ TS_@@ IN@@ ORDER_@@ BIN@@ AR@@ Y@@ _SEARCH_@@ TREE_@@ NOT | bool isIn@@ order ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; }
GI@@ V@@ EN_@@ TWO_@@ UN@@ SOR@@ TED_@@ ARRAY@@ S_@@ FIND_@@ PAIR@@ S_@@ WHO@@ SE_@@ S@@ UM_@@ X | void find@@ Pairs ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int n , int m , int x ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( ar@@ r1 [ i ] + ar@@ r2 [ j ] == x ) cout << ar@@ r1 [ i ] << " ▁ " << ar@@ r2 [ j ] << endl ; }
BINARY_@@ RE@@ PRESEN@@ TATION_@@ OF_@@ NEXT_@@ NUMBER | string next@@ Greater ( string num ) { int l = num . size ( ) ; for ( int i = l - 1 ; i >= 0 ; i -- ) { if ( num . at ( i ) == '0' ) { num . at ( i ) = '1' ; break ; } else num . at ( i ) = '0' ; } if ( i < 0 ) num = "1" + num ; return num ; }
LAR@@ GE@@ ST@@ _SUB@@ ARRAY_@@ WITH_@@ EQUAL_@@ NUMBER_OF_@@ 0@@ S_@@ AND_@@ 1@@ S | int find@@ Sub@@ Array ( int arr [ ] , int n ) { int sum = 0 ; int maxsize = - 1 , start@@ index ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum = ( arr [ i ] == 0 ) ? - 1 : 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 ) ; if ( sum == 0 && maxsize < j - i + 1 ) { maxsize = j - i + 1 ; start@@ index = i ; } } } if ( maxsize == - 1 ) cout << " No ▁ such ▁ sub@@ array " ; else cout << start@@ index << " ▁ to ▁ " << start@@ index + maxsize - 1 ; return maxsize ; }
COUNT_@@ PAIR@@ S_@@ WHO@@ SE_@@ PRODUC@@ TS_@@ EXI@@ ST_@@ IN_@@ ARRAY_@@ 1 | int count@@ Pairs ( int arr [ ] , int n ) { int result = 0 ; set < int > Hash ; for ( int i = 0 ; i < n ; i ++ ) Hash . insert ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int product = arr [ i ] * arr [ j ] ; if ( Hash . find ( product ) != Hash . end ( ) ) result ++ ; } } return result ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 12_@@ LON@@ GE@@ ST_@@ PA@@ LIN@@ DRO@@ MI@@ C@@ _SUB@@ SEQUENCE | int l@@ ps ( char * str ) { int n = strlen ( str ) ; int i , j , cl ; int L [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) L [ i ] [ i ] = 1 ; for ( cl = 2 ; cl <= n ; cl ++ ) { for ( i = 0 ; i < n - cl + 1 ; i ++ ) { j = i + cl - 1 ; if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2 ; else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ; } } return L [ 0 ] [ n - 1 ] ; }
COUNT_@@ IN@@ VERSION@@ S_@@ OF@@ _SIZE_@@ THRE@@ E_@@ IN_@@ A_@@ GI@@ VE_@@ ARRAY_@@ 1 | int getIn@@ v@@ Count ( int arr [ ] , int n ) { int inv@@ count = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int small = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ; int great = 0 ; for ( int j = i - 1 ; j >= 0 ; j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ; inv@@ count += great * small ; } return inv@@ count ; }
DECIMAL_@@ RE@@ PRESEN@@ TATION_@@ GI@@ V@@ EN_@@ BINARY_@@ STRING_@@ DI@@ VISI@@ BLE_@@ 10_@@ NOT | bool is@@ Di@@ visible@@ By@@ 10 ( string bin ) { int n = bin . size ( ) ; if ( bin [ n - 1 ] == '1' ) return false ; int sum = 0 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( bin [ i ] == '1' ) { int pos@@ From@@ Right = n - i - 1 ; if ( pos@@ From@@ Right % 4 == 1 ) sum = sum + 2 ; else if ( pos@@ From@@ Right % 4 == 2 ) sum = sum + 4 ; else if ( pos@@ From@@ Right % 4 == 3 ) sum = sum + 8 ; else if ( pos@@ From@@ Right % 4 == 0 ) sum = sum + 6 ; } } if ( sum % 10 == 0 ) return true ; return false ; }
FIND_@@ WHE@@ THER_@@ AN_@@ ARRAY_@@ IS@@ _SUB@@ SET_@@ OF_@@ AN@@ OTHER_@@ ARRAY@@ _SET_@@ 1_1 | bool is@@ Subset ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int m , int n ) { int i = 0 , j = 0 ; if ( m < n ) return 0 ; sort ( ar@@ r1 , ar@@ r1 + m ) ; sort ( ar@@ r2 , ar@@ r2 + n ) ; while ( i < n && j < m ) { if ( ar@@ r1 [ j ] < ar@@ r2 [ i ] ) j ++ ; else if ( ar@@ r1 [ j ] == ar@@ r2 [ i ] ) { j ++ ; i ++ ; } else if ( ar@@ r1 [ j ] > ar@@ r2 [ i ] ) return 0 ; } return ( i < n ) ? false : true ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SUB@@ SET_@@ S@@ UM_@@ PRO@@ BLE@@ M_@@ 1 | bool isSub@@ set@@ Sum ( int set [ ] , int n , int sum ) { bool subset [ n + 1 ] [ sum + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) subset [ i ] [ 0 ] = true ; for ( int i = 1 ; i <= sum ; i ++ ) subset [ 0 ] [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= sum ; j ++ ) { if ( j < set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; if ( j >= set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] || subset [ i - 1 ] [ j - set [ i - 1 ] ] ; } } return subset [ n ] [ sum ] ; }
S@@ UM_@@ K_@@ TH_@@ GROUP_@@ OD@@ D_@@ POSITIVE_@@ NUMB@@ ERS_@@ 1 | int k@@ th@@ group@@ sum ( int k ) { return k * k * k ; }
THIR@@ D_@@ LAR@@ GE@@ ST_@@ ELEMENT_@@ ARRAY_@@ DISTIN@@ CT_@@ ELEMENTS | void third@@ Lar@@ gest ( int arr [ ] , int arr_@@ size ) { if ( arr_@@ size < 3 ) { printf ( " ▁ Invalid ▁ Input ▁ " ) ; return ; } int first = arr [ 0 ] ; for ( int i = 1 ; i < arr_@@ size ; i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ; int second = INT_@@ MIN ; for ( int i = 0 ; i < arr_@@ size ; i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ; int third = INT_@@ MIN ; for ( int i = 0 ; i < arr_@@ size ; i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ; printf ( " The ▁ third ▁ Lar@@ gest ▁ element ▁ is ▁ % d \n " , third ) ; }
FIN@@ D_S@@ UM_@@ NODE@@ S_@@ GI@@ V@@ EN_@@ PER@@ F@@ ECT_@@ BINARY_@@ TREE_@@ 1 | int sum@@ Nodes ( int l ) { int leaf@@ Node@@ Count = pow ( 2 , l - 1 ) ; int sum@@ Last@@ Level = 0 ; sum@@ Last@@ Level = ( leaf@@ Node@@ Count * ( leaf@@ Node@@ Count + 1 ) ) / 2 ; int sum = sum@@ Last@@ Level * l ; return sum ; }
MIDD@@ LE_@@ OF_@@ THRE@@ E_@@ USING_@@ MINIMUM_@@ COMP@@ ARIS@@ ONS_@@ 2 | int middle@@ Of@@ Three ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return c ; else return a ; }
MAXIMUM_@@ TR@@ IP@@ LET_@@ S@@ UM_@@ ARRAY_@@ 2 | int max@@ Trip@@ let@@ Sum ( int arr [ ] , int n ) { int max@@ A = INT_@@ MIN , max@@ B = INT_@@ MIN , max@@ C = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max@@ A ) { max@@ C = max@@ B ; max@@ B = max@@ A ; max@@ A = arr [ i ] ; } else if ( arr [ i ] > max@@ B ) { max@@ C = max@@ B ; max@@ B = arr [ i ] ; } else if ( arr [ i ] > max@@ C ) max@@ C = arr [ i ] ; } return ( max@@ A + max@@ B + max@@ C ) ; }
COUNT_@@ PAIR@@ S_@@ TW@@ O@@ _S@@ OR@@ TED_@@ ARRAY@@ S_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL_@@ GI@@ V@@ EN_@@ VALUE_@@ X_@@ 1 | int count@@ Pairs ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int m , int n , int x ) { int count = 0 ; unordered_@@ set < int > us ; for ( int i = 0 ; i < m ; i ++ ) us . insert ( ar@@ r1 [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) if ( us . find ( x - ar@@ r2 [ j ] ) != us . end ( ) ) count ++ ; return count ; }
MINIMUM_@@ STE@@ PS_@@ REACH_@@ END_@@ ARRAY_@@ CONSTRA@@ INTS | int getMin@@ Step@@ To@@ Reach@@ End ( int arr [ ] , int N ) { bool visit [ N ] ; int distance [ N ] ; vector < int > digit [ 10 ] ; memset ( visit , false , sizeof ( visit ) ) ; for ( int i = 1 ; i < N ; i ++ ) digit [ arr [ i ] ] . push_back ( i ) ; distance [ 0 ] = 0 ; visit [ 0 ] = true ; queue < int > q ; q . push ( 0 ) ; while ( ! q . empty ( ) ) { int idx = q . front ( ) ; q . pop ( ) ; if ( idx == N - 1 ) break ; int d = arr [ idx ] ; for ( int i = 0 ; i < digit [ d ] . size ( ) ; i ++ ) { int nex@@ ti@@ dx = digit [ d ] [ i ] ; if ( ! visit [ nex@@ ti@@ dx ] ) { visit [ nex@@ ti@@ dx ] = true ; q . push ( nex@@ ti@@ dx ) ; distance [ nex@@ ti@@ dx ] = distance [ idx ] + 1 ; } } digit [ d ] . clear ( ) ; if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) { visit [ idx - 1 ] = true ; q . push ( idx - 1 ) ; distance [ idx - 1 ] = distance [ idx ] + 1 ; } if ( idx + 1 < N && ! visit [ idx + 1 ] ) { visit [ idx + 1 ] = true ; q . push ( idx + 1 ) ; distance [ idx + 1 ] = distance [ idx ] + 1 ; } } return distance [ N - 1 ] ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL@@ LY@@ _S@@ MAL@@ LE@@ ST_@@ ARRAY_@@ K_@@ CON@@ SEC@@ UTI@@ VE_@@ SWAP@@ S | void minim@@ ize@@ With@@ K@@ Sw@@ aps ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - 1 && k > 0 ; ++ i ) { int pos = i ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( j - i > k ) break ; if ( arr [ j ] < arr [ pos ] ) pos = j ; } for ( int j = pos ; j > i ; -- j ) swap ( arr [ j ] , arr [ j - 1 ] ) ; k -= pos - i ; } }
CONVERT_@@ SEN@@ T@@ ENCE_@@ EQU@@ I@@ VAL@@ ENT_@@ MOBI@@ LE_@@ NUMERIC_@@ KEY@@ PAD@@ _SEQU@@ ENCE | string print@@ Sequence ( string arr [ ] , string input ) { string output = " " ; int n = input . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( input [ i ] == ' ▁ ' ) output = output + "0" ; else { int position = input [ i ] - ' A ' ; output = output + arr [ position ] ; } } return output ; }
PROGRAM_@@ CHECK_@@ ARRA@@ Y_S@@ OR@@ TED_@@ NOT_@@ ITER@@ ATI@@ VE_@@ RECUR@@ SIVE | int array@@ Sorted@@ Or@@ Not ( int arr [ ] , int n ) { if ( n == 1 || n == 0 ) return 1 ; if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ; return array@@ Sorted@@ Or@@ Not ( arr , n - 1 ) ; }
CHECK_@@ TWO_@@ GI@@ V@@ EN_@@ CIRC@@ LES_@@ TOUCH_@@ INTER@@ S@@ ECT | int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dist@@ Sq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; int rad@@ Sum@@ Sq = ( r1 + r2 ) * ( r1 + r2 ) ; if ( dist@@ Sq == rad@@ Sum@@ Sq ) return 1 ; else if ( dist@@ Sq > rad@@ Sum@@ Sq ) return - 1 ; else return 0 ; }
SM@@ ALLE@@ ST_@@ POWER_@@ OF_@@ 2_@@ GREATER_@@ TH@@ AN_@@ OR_@@ EQUAL_@@ TO_@@ N_@@ 2 | unsigned int next@@ PowerOf@@ 2 ( unsigned int n ) { n -- ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n ++ ; return n ; }
PAD@@ OV@@ AN@@ _SEQU@@ ENCE | int pad ( int n ) { int p@@ Prev@@ Prev = 1 , p@@ Prev = 1 , pCur@@ r = 1 , pNext = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { pNext = p@@ Prev@@ Prev + p@@ Prev ; p@@ Prev@@ Prev = p@@ Prev ; p@@ Prev = pCur@@ r ; pCur@@ r = pNext ; } return pNext ; }
CHECK_@@ GI@@ V@@ EN_@@ STRING_@@ CAN@@ _SP@@ LIT_@@ FOUR_@@ DISTIN@@ CT_@@ STRINGS | bool check ( string s ) { if ( s . size ( ) >= 10 ) return true ; for ( int i = 1 ; i < s . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < s . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < s . size ( ) ; k ++ ) { string s1 = s . substr ( 0 , i ) ; string s2 = s . substr ( i , j - i ) ; string s3 = s . substr ( j , k - j ) ; string s4 = s . substr ( k , s . size ( ) - k ) ; if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 && s2 != s4 && s3 != s4 ) return true ; } } } return false ; }
PER@@ M@@ UTE_@@ TWO_@@ ARRAY@@ S_S@@ UM_@@ EVER@@ Y_@@ PA@@ IR_@@ GREATER_@@ EQUAL_@@ K | bool is@@ Possible ( int a [ ] , int b [ ] , int n , int k ) { sort ( a , a + n ) ; sort ( b , b + n , greater < int > ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] + b [ i ] < k ) return false ; return true ; }
ARRAY_@@ ELEMENT_@@ MOVE@@ D_@@ K_@@ US@@ ING@@ _SIN@@ GLE_@@ MOV@@ ES | int winner ( int a [ ] , int n , int k ) { if ( k >= n - 1 ) return n ; int best = 0 , times = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > best ) { best = a [ i ] ; if ( i ) times = 1 ; } else times += 1 ; if ( times >= k ) return best ; } return best ; }
DIRECTION_@@ LAST@@ _S@@ QU@@ ARE_@@ BLOCK | void direction ( ll R , ll C ) { if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) { cout << " Left " << endl ; return ; } if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) { cout << " Up " << endl ; return ; } if ( R == C && R % 2 != 0 && C % 2 != 0 ) { cout << " Right " << endl ; return ; } if ( R == C && R % 2 == 0 && C % 2 == 0 ) { cout << " Left " << endl ; return ; } if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) { cout << " Right " << endl ; return ; } if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) { cout << " Down " << endl ; return ; } if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) { cout << " Left " << endl ; return ; } if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) { cout << " Up " << endl ; return ; } if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) { cout << " Down " << endl ; return ; } if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) { cout << " Right " << endl ; return ; } }
NUMBER_@@ NON_@@ NEGATIVE_@@ INTEGR@@ AL_S@@ OL@@ U@@ TIONS_@@ B_@@ C_@@ N | int count@@ Integr@@ al@@ Solutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n - i ; j ++ ) for ( int k = 0 ; k <= ( n - i - j ) ; k ++ ) if ( i + j + k == n ) result ++ ; return result ; }
SW@@ AP_@@ MAJ@@ OR_@@ MIN@@ OR_@@ DIAG@@ ON@@ AL@@ S_S@@ QU@@ ARE_@@ MATRIX | void swap@@ Diagonal ( int matrix [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] ) ; }
MINIMUM_@@ OPER@@ ATION@@ S_@@ MAKE_@@ GC@@ D_@@ ARRAY_@@ MULTIPLE_@@ K | int Min@@ Operation ( int a [ ] , int n , int k ) { int result = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( a [ i ] != 1 && a [ i ] > k ) { result = result + min ( a [ i ] % k , k - a [ i ] % k ) ; } else { result = result + k - a [ i ] ; } } return result ; }
MAXIMUM_@@ DECIMAL_@@ VALUE_@@ PATH_@@ IN_@@ A_@@ BINARY_@@ MATRIX | long long int max@@ Decimal@@ Value ( int mat [ ] [ N ] , int i , int j , int p ) { if ( i >= N || j >= N ) return 0 ; int result = max ( max@@ Decimal@@ Value ( mat , i , j + 1 , p + 1 ) , max@@ Decimal@@ Value ( mat , i + 1 , j , p + 1 ) ) ; if ( mat [ i ] [ j ] == 1 ) return pow ( 2 , p ) + result ; else return result ; }
SQU@@ ARE_@@ ROOT_@@ OF_@@ A_@@ PER@@ F@@ ECT_@@ SQU@@ ARE_@@ 1 | public : float square@@ Root ( float n ) { float x = n ; float y = 1 ; float e = 0.000001 ; while ( x - y > e ) { x = ( x + y ) / 2 ; y = n / x ; } return x ; }
FIND_@@ MIN@@ IM@@ UM@@ _SH@@ IFT_@@ LON@@ GE@@ ST_@@ COMMON_@@ PREFIX | void K@@ MP ( int m , int n , string str2 , string str1 ) { int pos = 0 , len = 0 ; int p [ m + 1 ] ; int k = 0 ; p [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k ] ; if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k ; p [ i ] = k ; } for ( int j = 0 , i = 0 ; i < m ; i ++ ) { while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ] ; if ( str1 [ j ] == str2 [ i ] ) j ++ ; if ( j > len ) { len = j ; pos = i - j + 1 ; } } cout << " Shift ▁ = ▁ " << pos << endl ; cout << " Prefix ▁ = ▁ " << str1 . substr ( 0 , len ) ; }
SOR@@ TED_@@ ORDER_@@ PRINT@@ ING_@@ OF_@@ AN_@@ ARRAY_@@ TH@@ AT_@@ RE@@ PRESEN@@ TS_@@ A_@@ B@@ ST | void print@@ Sorted ( int arr [ ] , int start , int end ) { if ( start > end ) return ; print@@ Sorted ( arr , start * 2 + 1 , end ) ; cout << arr [ start ] << " ▁ " ; print@@ Sorted ( arr , start * 2 + 2 , end ) ; }
CHECK_@@ WHE@@ THER_@@ GI@@ V@@ EN_@@ DEGRE@@ ES_@@ VER@@ TIC@@ ES_@@ RE@@ PRES@@ ENT_@@ GRAPH_@@ TREE | bool check ( int degree [ ] , int n ) { int de@@ g_@@ sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) de@@ g_@@ sum += degree [ i ] ; return ( 2 * ( n - 1 ) == de@@ g_@@ sum ) ; }
MOVE_@@ ZER@@ O@@ ES_@@ END_@@ ARRAY | void push@@ Zer@@ os@@ To@@ End ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; }
COUNT_@@ ELEMEN@@ TS_@@ WHI@@ CH_@@ DI@@ VI@@ DE_@@ ALL_@@ NUMB@@ ERS_@@ IN_@@ RANGE_@@ L_@@ R | int answer@@ Query ( int a [ ] , int n , int l , int r ) { int count = 0 ; l = l - 1 ; for ( int i = l ; i < r ; i ++ ) { int element = a [ i ] ; int di@@ visors = 0 ; for ( int j = l ; j < r ; j ++ ) { if ( a [ j ] % a [ i ] == 0 ) di@@ visors ++ ; else break ; } if ( di@@ visors == ( r - l ) ) count ++ ; } return count ; }
S@@ UM_@@ LAR@@ GE@@ ST_@@ PRI@@ ME_@@ FAC@@ TOR_@@ NUMBER_@@ LESS_@@ EQUAL_@@ N | int sum@@ Of@@ Large@@ Prime@@ Factor ( int n ) { int prime [ n + 1 ] , sum = 0 ; memset ( prime , 0 , sizeof ( prime ) ) ; int max = n / 2 ; for ( int p = 2 ; p <= max ; p ++ ) { if ( prime [ p ] == 0 ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = p ; } } for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) sum += prime [ p ] ; else sum += p ; } return sum ; }
RE@@ AR@@ RANGE_@@ A_@@ STRING_@@ IN@@ _S@@ OR@@ TED_@@ ORDER_@@ FOL@@ LO@@ WED_@@ BY_@@ THE_@@ INTEG@@ ER@@ _S@@ UM | string arrange@@ String ( string str ) { int char@@ _count [ MAX_@@ CHAR ] = { 0 } ; int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) char@@ _count [ str [ i ] - ' A ' ] ++ ; else sum = sum + ( str [ i ] - '0' ) ; } string res = " " ; for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) { char ch = ( char ) ( ' A ' + i ) ; while ( char@@ _count [ i ] -- ) res = res + ch ; } if ( sum > 0 ) res = res + to_string ( sum ) ; return res ; }
COUNT_@@ POSSI@@ BLE_@@ PATH@@ S_@@ TOP_@@ LEFT_@@ BOTTOM_@@ RIGHT_@@ NX@@ M_@@ MATRIX_@@ 1 | int numberOf@@ Paths ( int m , int n ) { int count [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) count [ i ] [ 0 ] = 1 ; for ( int j = 0 ; j < n ; j ++ ) count [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; } return count [ m - 1 ] [ n - 1 ] ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 5_@@ EDIT_@@ DISTAN@@ CE_@@ 1 | int edit@@ Dist@@ DP ( string str1 , string str2 , int m , int n ) { int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 ) dp [ i ] [ j ] = j ; else if ( j == 0 ) dp [ i ] [ j ] = i ; else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } return dp [ m ] [ n ] ; }
FIND_@@ NUMBER_@@ OF@@ _S@@ OL@@ U@@ TIONS_@@ OF_@@ A_@@ LINEAR_@@ EQU@@ ATION_@@ OF_@@ N_@@ VARIABLES | int count@@ So@@ l ( int coeff [ ] , int start , int end , int rhs ) { if ( rhs == 0 ) return 1 ; int result = 0 ; for ( int i = start ; i <= end ; i ++ ) if ( coeff [ i ] <= rhs ) result += count@@ So@@ l ( coeff , i , end , rhs - coeff [ i ] ) ; return result ; }
S@@ UM_@@ ELEMEN@@ TS_@@ K@@ 1@@ TH_@@ K@@ 2@@ TH@@ _S@@ MAL@@ LE@@ ST_@@ ELEMEN@@ TS_@@ 1 | void min@@ heap@@ ify ( int a [ ] , int index ) { int small = index ; int l = 2 * index + 1 ; int r = 2 * index + 2 ; if ( l < n && a [ l ] < a [ small ] ) small = l ; if ( r < n && a [ r ] < a [ small ] ) small = r ; if ( small != index ) { swap ( a [ small ] , a [ index ] ) ; min@@ heap@@ ify ( a , small ) ; } }
SE@@ ARCH@@ ING_@@ FOR_@@ PATTER@@ NS@@ _SET_@@ 2_@@ K@@ MP_@@ ALGORITH@@ M | void compute@@ LP@@ S@@ Array ( char * pat , int M , int * l@@ ps ) { int len = 0 ; l@@ ps [ 0 ] = 0 ; int i = 1 ; while ( i < M ) { if ( pat [ i ] == pat [ len ] ) { len ++ ; l@@ ps [ i ] = len ; i ++ ; } else { if ( len != 0 ) { len = l@@ ps [ len - 1 ] ; } else { l@@ ps [ i ] = 0 ; i ++ ; } } } }
FIND_@@ MINIMUM_@@ DIFF@@ ER@@ ENCE_@@ PAIR | int find@@ Min@@ Diff ( int arr [ ] , int n ) { int diff = INT_MAX ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] ) ; return diff ; }
PRINT_@@ FIRST_@@ K_@@ DIG@@ IT@@ S_@@ 1@@ N_@@ N_@@ POSITIVE_@@ INTEGER | void print ( int n , int k ) { int rem = 1 ; for ( int i = 0 ; i < k ; i ++ ) { cout << ( 10 * rem ) / n ; rem = ( 10 * rem ) % n ; } }
GROUP_@@ MULTIPLE_@@ OC@@ CURR@@ ENCE_@@ OF_@@ ARRAY_@@ ELEMEN@@ TS_@@ ORDE@@ RED_@@ BY_@@ FIRST_@@ OC@@ CURR@@ ENCE | void group@@ Elements ( int arr [ ] , int n ) { bool * visited = new bool [ n ] ; for ( int i = 0 ; i < n ; i ++ ) visited [ i ] = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! visited [ i ] ) { cout << arr [ i ] << " ▁ " ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { cout << arr [ i ] << " ▁ " ; visited [ j ] = true ; } } } } delete [ ] visited ; }
CHECK_@@ WHE@@ THER_@@ ARI@@ TH@@ ME@@ TIC_@@ PROG@@ RES@@ SION_@@ CAN_@@ FOR@@ MED_@@ GI@@ V@@ EN_@@ ARRAY | bool check@@ Is@@ AP ( int arr [ ] , int n ) { if ( n == 1 ) return true ; sort ( arr , arr + n ) ; int d = arr [ 1 ] - arr [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; return true ; }
N@@ TH_@@ MULTIPLE_@@ NUMBER_@@ FI@@ BON@@ AC@@ CI@@ _SERI@@ ES | int find@@ Position ( int k , int n ) { unsigned long long int f1 = 0 , f2 = 1 , f3 ; for ( int i = 2 ; i <= MAX ; i ++ ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; } }
COUNT_@@ PAIR@@ S_@@ DIFF@@ ER@@ ENCE_@@ EQUAL_@@ K_@@ 1 | int count@@ Pai@@ rs@@ With@@ Diff@@ K ( int arr [ ] , int n , int k ) { int count = 0 ; sort ( arr , arr + n ) ; int l = 0 ; int r = 0 ; while ( r < n ) { if ( arr [ r ] - arr [ l ] == k ) { count ++ ; l ++ ; r ++ ; } else if ( arr [ r ] - arr [ l ] > k ) l ++ ; else r ++ ; } return count ; }
ELEMEN@@ TS_@@ TO_@@ BE_@@ AD@@ DE@@ D_S@@ O_@@ TH@@ AT_@@ ALL_@@ ELEMEN@@ TS_@@ OF_@@ A_@@ RANGE_@@ ARE_@@ PRES@@ ENT_@@ IN_@@ ARRAY | int count@@ Num ( int arr [ ] , int n ) { int count = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ; return count ; }
MAKE_@@ LAR@@ GE@@ ST_@@ PA@@ LIN@@ DRO@@ ME_@@ CHAN@@ G@@ ING_@@ K_@@ DIGITS | string maximum@@ Pal@@ in@@ Using@@ K@@ Changes ( string str , int k ) { string pal@@ in = str ; int l = 0 ; int r = str . length ( ) - 1 ; while ( l < r ) { if ( str [ l ] != str [ r ] ) { pal@@ in [ l ] = pal@@ in [ r ] = max ( str [ l ] , str [ r ] ) ; k -- ; } l ++ ; r -- ; } if ( k < 0 ) return " Not ▁ possible " ; l = 0 ; r = str . length ( ) - 1 ; while ( l <= r ) { if ( l == r ) { if ( k > 0 ) pal@@ in [ l ] = '9' ; } if ( pal@@ in [ l ] < '9' ) { if ( k >= 2 && pal@@ in [ l ] == str [ l ] && pal@@ in [ r ] == str [ r ] ) { k -= 2 ; pal@@ in [ l ] = pal@@ in [ r ] = '9' ; } else if ( k >= 1 && ( pal@@ in [ l ] != str [ l ] || pal@@ in [ r ] != str [ r ] ) ) { k -- ; pal@@ in [ l ] = pal@@ in [ r ] = '9' ; } } l ++ ; r -- ; } return pal@@ in ; }
SUB@@ ARRAY@@ SUB@@ STRING_@@ VS@@ _SUB@@ SEQU@@ ENCE_@@ AND_@@ PROGR@@ AM@@ S_TO_@@ GENERATE_@@ THE@@ M | void sub@@ Array ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) cout << arr [ k ] << " ▁ " ; cout << endl ; } } }
MAX@@ IM@@ UM@@ _S@@ UM_@@ INCRE@@ AS@@ ING_@@ ORDER_@@ ELEMEN@@ TS_@@ N_@@ ARRAY@@ S | int maximum@@ Sum ( int a [ ] [ M ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) sort ( a [ i ] , a [ i ] + M ) ; int sum = a [ n - 1 ] [ M - 1 ] ; int prev = a [ n - 1 ] [ M - 1 ] ; int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = M - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] < prev ) { prev = a [ i ] [ j ] ; sum += prev ; break ; } } if ( j == - 1 ) return 0 ; } return sum ; }
C_@@ PROGRAM_@@ FAC@@ TOR@@ I@@ AL_@@ NUMBER | unsigned int factorial ( unsigned int n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; }
PRINT_@@ SQU@@ AR@@ ES_@@ FIRST_@@ N_@@ N@@ ATUR@@ AL_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ USING | void print@@ Squ@@ ares ( int n ) { int square = 0 , prev_@@ x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { square = ( square + x + prev_@@ x ) ; cout << square << " ▁ " ; prev_@@ x = x ; } }
RO@@ PE@@ S_@@ DATA_@@ STRUC@@ TURE_@@ FAST_@@ STRING_@@ CON@@ CAT@@ EN@@ ATION | void concatenate ( char a [ ] , char b [ ] , char c [ ] , int n1 , int n2 ) { int i ; for ( i = 0 ; i < n1 ; i ++ ) c [ i ] = a [ i ] ; for ( int j = 0 ; j < n2 ; j ++ ) c [ i ++ ] = b [ j ] ; c [ i ] = ' \0' ; }
GI@@ V@@ EN_@@ TW@@ O@@ _S@@ OR@@ TED_@@ ARRAY@@ S_@@ NUMBER_@@ X_@@ FIND_@@ PA@@ IR_@@ WHO@@ SE_@@ S@@ UM_@@ CLO@@ SE@@ ST_@@ X | void print@@ Close@@ st ( int ar@@ 1 [ ] , int ar@@ 2 [ ] , int m , int n , int x ) { int diff = INT_MAX ; int res_@@ l , res_@@ r ; int l = 0 , r = n - 1 ; while ( l < m && r >= 0 ) { if ( abs ( ar@@ 1 [ l ] + ar@@ 2 [ r ] - x ) < diff ) { res_@@ l = l ; res_@@ r = r ; diff = abs ( ar@@ 1 [ l ] + ar@@ 2 [ r ] - x ) ; } if ( ar@@ 1 [ l ] + ar@@ 2 [ r ] > x ) r -- ; else l ++ ; } cout << " The ▁ closest ▁ pair ▁ is ▁ [ " << ar@@ 1 [ res_@@ l ] << " , ▁ " << ar@@ 2 [ res_@@ r ] << " ] ▁ \n " ; }
CONVERT_@@ STRIC@@ TL@@ Y_@@ INCRE@@ AS@@ ING_@@ ARRAY_@@ MINIMUM_@@ CHAN@@ GES | int min@@ Remove ( int arr [ ] , int n ) { int LI@@ S [ n ] , len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LI@@ S [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) { LI@@ S [ i ] = max ( LI@@ S [ i ] , LI@@ S [ j ] + 1 ) ; } } len = max ( len , LI@@ S [ i ] ) ; } return n - len ; }
TA@@ IL_@@ RECUR@@ SION | unsigned int fact ( unsigned int n ) { if ( n == 0 ) return 1 ; return n * fact ( n - 1 ) ; }
RECUR@@ SIVE_@@ FUNCTIONS | void tower ( int n , char source@@ Po@@ le , char destination@@ Po@@ le , char auxili@@ ary@@ Po@@ le ) { if ( 0 == n ) return ; tower ( n - 1 , source@@ Po@@ le , auxili@@ ary@@ Po@@ le , destination@@ Po@@ le ) ; cout << " Move ▁ the ▁ disk ▁ " << n << " ▁ from ▁ " << source@@ Po@@ le << " ▁ to ▁ " << destination@@ Po@@ le << endl ; tower ( n - 1 , auxili@@ ary@@ Po@@ le , destination@@ Po@@ le , source@@ Po@@ le ) ; }
FIND_@@ X_@@ Y_S@@ ATI@@ SF@@ Y@@ ING_@@ A@@ X_@@ N | void solution ( int a , int b , int n ) { for ( int i = 0 ; i * a <= n ; i ++ ) { if ( ( n - ( i * a ) ) % b == 0 ) { cout << " x ▁ = ▁ " << i << " , ▁ y ▁ = ▁ " << ( n - ( i * a ) ) / b ; return ; } } cout << " No ▁ solution " ; }
EXPO@@ NE@@ N@@ TI@@ AL_S@@ QUAR@@ ING_@@ FAST_@@ MODUL@@ O_@@ MULTIP@@ LIC@@ ATION_@@ 1 | long expon@@ enti@@ ation ( long base , long exp ) { long t = 1L ; while ( exp > 0 ) { if ( exp % 2 != 0 ) t = ( t * base ) % N ; base = ( base * base ) % N ; exp /= 2 ; } return t % N ; }
CHECK_@@ OC@@ CURR@@ EN@@ CES_@@ CHARACTER_@@ AP@@ PE@@ AR_@@ TO@@ GE@@ THER | bool check@@ If@@ All@@ To@@ gether ( string s , char c ) { bool one@@ Seen = false ; int i = 0 , n = s . length ( ) ; while ( i < n ) { if ( s [ i ] == c ) { if ( one@@ Seen == true ) return false ; while ( i < n && s [ i ] == c ) i ++ ; one@@ Seen = true ; } else i ++ ; } return true ; }
MAXIMUM_@@ AREA_@@ REC@@ TAN@@ GLE_@@ PIC@@ KING_@@ FOUR@@ _SI@@ DES_@@ ARRAY | int find@@ Area ( int arr [ ] , int n ) { sort ( arr , arr + n , greater < int > ( ) ) ; int dimension [ 2 ] = { 0 , 0 } ; for ( int i = 0 , j = 0 ; i < n - 1 && j < 2 ; i ++ ) if ( arr [ i ] == arr [ i + 1 ] ) dimension [ j ++ ] = arr [ i ++ ] ; return ( dimension [ 0 ] * dimension [ 1 ] ) ; }
PYTHON_@@ PROGRAM_@@ FIND_@@ PER@@ I@@ ME@@ TER_@@ CIRCUM@@ FER@@ ENCE_@@ SQU@@ ARE_@@ REC@@ TA@@ NG@@ LE | int Cir@@ cum@@ ference ( int a ) { return 4 * a ; }
CY@@ CLE_@@ S@@ ORT | void cycle@@ Sort ( int arr [ ] , int n ) { int writes = 0 ; for ( int cycle@@ _start = 0 ; cycle@@ _start <= n - 2 ; cycle@@ _start ++ ) { int item = arr [ cycle@@ _start ] ; int pos = cycle@@ _start ; for ( int i = cycle@@ _start + 1 ; i < n ; i ++ ) if ( arr [ i ] < item ) pos ++ ; if ( pos == cycle@@ _start ) continue ; while ( item == arr [ pos ] ) pos += 1 ; if ( pos != cycle@@ _start ) { swap ( item , arr [ pos ] ) ; writes ++ ; } while ( pos != cycle@@ _start ) { pos = cycle@@ _start ; for ( int i = cycle@@ _start + 1 ; i < n ; i ++ ) if ( arr [ i ] < item ) pos += 1 ; while ( item == arr [ pos ] ) pos += 1 ; if ( item != arr [ pos ] ) { swap ( item , arr [ pos ] ) ; writes ++ ; } } } }
SELECT_@@ A_@@ RANDOM_@@ NUMBER_@@ FROM_@@ STREAM_@@ WITH_@@ O@@ 1@@ _SPACE | int select@@ Random ( int x ) { static int res ; static int count = 0 ; count ++ ; if ( count == 1 ) res = x ; else { int i = rand ( ) % count ; if ( i == count - 1 ) res = x ; } return res ; }
HO@@ SO@@ Y@@ AS_@@ TRI@@ ANGLE | void print@@ Ho@@ so@@ ya ( int n ) { int dp [ N ] [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) cout << dp [ i ] [ j ] << " ▁ " ; cout << endl ; } }
DISTRIBU@@ TING_@@ M_@@ ITE@@ MS_@@ CI@@ R@@ CLE_@@ SIZE_@@ N_@@ START@@ ING_@@ K_@@ TH_@@ POSITION | int last@@ Position ( int n , int m , int k ) { if ( m <= n - k + 1 ) return m + k - 1 ; m = m - ( n - k + 1 ) ; return ( m % n == 0 ) ? n : ( m % n ) ; }
PRINT@@ ING_@@ LON@@ GE@@ ST_@@ INCRE@@ AS@@ ING_@@ CON@@ SEC@@ UTI@@ VE_@@ SUB@@ SEQUENCE | void lon@@ gest@@ Sub@@ sequence ( int a [ ] , int n ) { unordered_map < int , int > mp ; int dp [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; int maximum = INT_@@ MIN ; int index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . find ( a [ i ] - 1 ) != mp . end ( ) ) { int lastIndex = mp [ a [ i ] - 1 ] - 1 ; dp [ i ] = 1 + dp [ lastIndex ] ; } else dp [ i ] = 1 ; mp [ a [ i ] ] = i + 1 ; if ( maximum < dp [ i ] ) { maximum = dp [ i ] ; index = i ; } } for ( int curr = a [ index ] - maximum + 1 ; curr <= a [ index ] ; curr ++ ) cout << curr << " ▁ " ; }
NUMBER_OF_@@ TRIANG@@ LES_@@ IN_@@ DIREC@@ TED_@@ AND_@@ UN@@ DIREC@@ TED_@@ GRAP@@ HS | int count@@ Triangle ( int graph [ V ] [ V ] , bool is@@ Direc@@ ted ) { int count_@@ Triangle = 0 ; for ( int i = 0 ; i < V ; i ++ ) { for ( int j = 0 ; j < V ; j ++ ) { for ( int k = 0 ; k < V ; k ++ ) { if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph [ k ] [ i ] ) count_@@ Triangle ++ ; } } } is@@ Direc@@ ted ? count_@@ Triangle /= 3 : count_@@ Triangle /= 6 ; return count_@@ Triangle ; }
CHECK_@@ GI@@ V@@ EN_@@ ARRAY_@@ CONTAIN@@ S_@@ DUPLIC@@ ATE_@@ ELEMEN@@ TS_@@ WITH@@ IN_@@ K_@@ DISTANCE | bool check@@ Duplicate@@ sWith@@ in@@ K ( int arr [ ] , int n , int k ) { unordered_@@ set < int > my@@ set ; for ( int i = 0 ; i < n ; i ++ ) { if ( my@@ set . find ( arr [ i ] ) != my@@ set . end ( ) ) return true ; my@@ set . insert ( arr [ i ] ) ; if ( i >= k ) my@@ set . erase ( arr [ i - k ] ) ; } return false ; }
MINIMUM_@@ INSER@@ TION@@ S_S@@ ORT_@@ ARRAY | int min@@ Insertion@@ Step@@ To@@ Sort@@ Array ( int arr [ ] , int N ) { int lis [ N ] ; for ( int i = 0 ; i < N ; i ++ ) lis [ i ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; int max = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ; return ( N - max ) ; }
GENERATE_@@ TWO_@@ OUTPUT_@@ STRING@@ S_@@ DEPEND@@ ING_@@ UP@@ ON_@@ OC@@ CURR@@ ENCE_@@ CHARACTER_@@ INPUT_@@ STRING | void print@@ Du@@ o ( string & str ) { int count@@ Char [ MAX_@@ CHAR ] = { 0 } ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) count@@ Char [ str [ i ] - ' a ' ] ++ ; string str1 = " " , str2 = " " ; for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) { if ( count@@ Char [ i ] > 1 ) str2 = str2 + ( char ) ( i + ' a ' ) ; else if ( count@@ Char [ i ] == 1 ) str1 = str1 + ( char ) ( i + ' a ' ) ; } cout << " String ▁ with ▁ characters ▁ occur@@ ring ▁ " << " once : \n " ; cout << str1 << " \n " ; cout << " String ▁ with ▁ characters ▁ occur@@ ring ▁ " << " multiple ▁ times : \n " ; cout << str2 << " \n " ; }
NUMBER_@@ DIG@@ IT@@ S_@@ PRODUCT_@@ TWO_@@ NUMB@@ ERS_@@ 1 | int count@@ Digits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return floor ( log10 ( abs ( a ) ) + log10 ( abs ( b ) ) ) + 1 ; }
TOTAL_@@ NUMBER_OF_@@ NON_@@ DECRE@@ AS@@ ING_@@ NUMB@@ ERS_@@ WITH_@@ N_@@ DIG@@ IT@@ S_@@ 1 | long long int count@@ Non@@ Decre@@ asing ( int n ) { int N = 10 ; long long count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= ( N + i - 1 ) ; count /= i ; } return count ; }
COUNT_@@ STRING@@ S_@@ AD@@ J@@ AC@@ ENT_@@ CHARAC@@ TER@@ S_@@ DIFF@@ ER@@ ENCE_@@ ONE | int count@@ Str@@ s ( int n ) { long int dp [ n + 1 ] [ 27 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= 25 ; i ++ ) dp [ 1 ] [ i ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= 25 ; j ++ ) if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ; else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ; } long int sum = 0 ; for ( int i = 0 ; i <= 25 ; i ++ ) sum = ( sum + dp [ n ] [ i ] ) ; return sum ; }
PROGRAM_@@ TO_@@ EF@@ FI@@ CI@@ EN@@ TL@@ Y_@@ CAL@@ CUL@@ ATE_@@ EX | float exponential ( int n , float x ) { float sum = 1.0f ; for ( int i = n - 1 ; i > 0 ; -- i ) sum = 1 + x * sum / i ; return sum ; }
EF@@ FI@@ CI@@ EN@@ TL@@ Y_@@ COMP@@ UTE_@@ SUM@@ S_@@ OF_@@ DIAG@@ ON@@ AL@@ S_@@ OF_@@ A_@@ MATRIX_@@ 1 | void print@@ Diag@@ onal@@ Sum@@ s ( int mat [ ] [ MAX ] , int n ) { int principal = 0 , secondary = 0 ; for ( int i = 0 ; i < n ; i ++ ) { principal += mat [ i ] [ i ] ; secondary += mat [ i ] [ n - i - 1 ] ; } cout << " Principal ▁ Diagonal : " << principal << endl ; cout << " Secondary ▁ Diagonal : " << secondary << endl ; }
PRINT_@@ WAY@@ S_@@ BREAK_@@ STRING_@@ BRAC@@ KET_@@ FORM | void find@@ Combin@@ ations ( string str , int index , string out ) { if ( index == str . length ( ) ) cout << out << endl ; for ( int i = index ; i < str . length ( ) ; i ++ ) find@@ Combin@@ ations ( str , i + 1 , out + " ( " + str . substr ( index , i + 1 - index ) + " ) " ) ; }
LINE@@ AR@@ _SEARCH | int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
FIND_@@ THE_@@ ELEMENT_@@ TH@@ AT_@@ AP@@ PE@@ AR@@ S_@@ ON@@ CE_@@ 2 | int single@@ Number ( int a [ ] , int n ) { unordered_@@ set < int > s ( a , a + n ) ; int arr_@@ sum = accumulate ( a , a + n , 0 ) ; int set_@@ sum = accumulate ( s . begin ( ) , s . end ( ) , 0 ) ; return ( 3 * set_@@ sum - arr_@@ sum ) / 2 ; }
SEARCH_@@ AL@@ MO@@ ST@@ _S@@ OR@@ TED_@@ ARRAY | int binary@@ Search ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) ; if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) ; if ( arr [ mid ] > x ) return binary@@ Search ( arr , l , mid - 2 , x ) ; return binary@@ Search ( arr , mid + 2 , r , x ) ; } return - 1 ; }
E@@ UL@@ ERS_@@ TO@@ TI@@ ENT_@@ FUNCTION_@@ FOR_@@ ALL_@@ NUMBER@@ S_S@@ MAL@@ LER_@@ TH@@ AN_@@ OR_@@ EQUAL_@@ TO_@@ N | void compute@@ To@@ ti@@ ent ( int n ) { long long phi [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int p = 2 ; p <= n ; p ++ ) { if ( phi [ p ] == p ) { phi [ p ] = p - 1 ; for ( int i = 2 * p ; i <= n ; i += p ) { phi [ i ] = ( phi [ i ] / p ) * ( p - 1 ) ; } } } for ( int i = 1 ; i <= n ; i ++ ) cout << " To@@ ti@@ ent ▁ of ▁ " << i << " ▁ is ▁ " << phi [ i ] << endl ; }
FIND_@@ MINIMUM_@@ NUMBER_@@ DI@@ VIDE@@ D_@@ MAKE_@@ NUMBER_@@ PER@@ F@@ ECT_@@ SQUARE | int find@@ Min@@ Number ( int n ) { int count = 0 , ans = 1 ; while ( n % 2 == 0 ) { count ++ ; n /= 2 ; } if ( count % 2 ) ans *= 2 ; for ( int i = 3 ; i <= sqrt ( n ) ; i += 2 ) { count = 0 ; while ( n % i == 0 ) { count ++ ; n /= i ; } if ( count % 2 ) ans *= i ; } if ( n > 2 ) ans *= n ; return ans ; }
COUNT_@@ NUMBER_@@ WAY@@ S_@@ JUM@@ P_@@ REACH_@@ END | void count@@ Way@@ sTo@@ Jump ( int arr [ ] , int n ) { int count_@@ jump [ n ] ; memset ( count_@@ jump , 0 , sizeof ( count_@@ jump ) ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] >= n - i - 1 ) count_@@ jump [ i ] ++ ; for ( int j = i + 1 ; j < n - 1 && j <= arr [ i ] + i ; j ++ ) if ( count_@@ jump [ j ] != - 1 ) count_@@ jump [ i ] += count_@@ jump [ j ] ; if ( count_@@ jump [ i ] == 0 ) count_@@ jump [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) cout << count_@@ jump [ i ] << " ▁ " ; }
CONVERT_@@ SUB@@ STRING@@ S_@@ LENGTH_@@ K_@@ BASE_@@ B_@@ DECIMAL_@@ 1 | int sub@@ string@@ Conversions ( string str , int k , int b ) { int i = 0 , sum = 0 , counter = k - 1 ; for ( i ; i < k ; i ++ ) { sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b , counter ) ) ; counter -- ; } cout << sum << " ▁ " ; int prev = sum ; sum = 0 , counter = 0 ; for ( i ; i < str . size ( ) ; i ++ ) { sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b , k - 1 ) ) ; sum = sum * b ; sum = sum + ( str . at ( i ) - '0' ) ; cout << sum << " ▁ " ; prev = sum ; counter ++ ; } }
TWO_@@ ELEMEN@@ TS_@@ WHO@@ SE_@@ S@@ UM_@@ IS_@@ CLO@@ SE@@ ST_@@ TO_@@ ZERO | void min@@ Abs@@ Sum@@ Pair ( int arr [ ] , int arr_@@ size ) { int inv_@@ count = 0 ; int l , r , min_@@ sum , sum , min_@@ l , min_@@ r ; if ( arr_@@ size < 2 ) { cout << " Invalid ▁ Input " ; return ; } min_@@ l = 0 ; min_@@ r = 1 ; min_@@ sum = arr [ 0 ] + arr [ 1 ] ; for ( l = 0 ; l < arr_@@ size - 1 ; l ++ ) { for ( r = l + 1 ; r < arr_@@ size ; r ++ ) { sum = arr [ l ] + arr [ r ] ; if ( abs ( min_@@ sum ) > abs ( sum ) ) { min_@@ sum = sum ; min_@@ l = l ; min_@@ r = r ; } } } cout << " The ▁ two ▁ elements ▁ whose ▁ sum ▁ is ▁ minimum ▁ are ▁ " << arr [ min_@@ l ] << " ▁ and ▁ " << arr [ min_@@ r ] ; }
HO@@ W_@@ TO_@@ PRINT_@@ MAXIMUM_@@ NUMBER_OF_@@ A_@@ USING_@@ GI@@ V@@ EN_@@ FOUR_@@ KEYS | int find@@ optimal ( int N ) { if ( N <= 6 ) return N ; int screen [ N ] ; int b ; int n ; for ( n = 1 ; n <= 6 ; n ++ ) screen [ n - 1 ] = n ; for ( n = 7 ; n <= N ; n ++ ) { screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ; } return screen [ N - 1 ] ; }
PROGRAM_@@ DECIMAL_@@ BINARY_@@ CON@@ VERSION_@@ 2 | unsigned long long int int decimal@@ To@@ Binary ( int N ) { ull B_@@ Number = 0 ; int cnt = 0 ; while ( N != 0 ) { int rem = N % 2 ; ull c = pow ( 10 , cnt ) ; B_@@ Number += rem * c ; N /= 2 ; cnt ++ ; } return B_@@ Number ; }
COUN@@ TS_@@ PATH@@ S_@@ POINT_@@ REACH_@@ ORIG@@ IN_@@ 1 | int count@@ Paths ( int n , int m ) { int dp [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; return dp [ n ] [ m ] ; }
S@@ UM_@@ ELEMEN@@ TS_@@ K@@ 1@@ TH_@@ K@@ 2@@ TH@@ _S@@ MAL@@ LE@@ ST_@@ ELEMENTS | int sum@@ Between@@ Two@@ K@@ th ( int arr [ ] , int n , int k1 , int k2 ) { sort ( arr , arr + n ) ; return accumulate ( arr + k1 , arr + k2 - 1 , 0 ) ; }
SM@@ ALLE@@ ST@@ _SUB@@ ARRAY_@@ K_@@ DISTIN@@ CT_@@ NUMB@@ ERS | void min@@ Range ( int arr [ ] , int n , int k ) { int l = 0 , r = n ; for ( int i = 0 ; i < n ; i ++ ) { unordered_@@ set < int > s ; int j ; for ( j = i ; j < n ; j ++ ) { s . insert ( arr [ j ] ) ; if ( s . size ( ) == k ) { if ( ( j - i ) < ( r - l ) ) { r = j ; l = i ; } break ; } } if ( j == n ) break ; } if ( l == 0 && r == n ) cout << " Invalid ▁ k " ; else cout << l << " ▁ " << r ; }
AREA_@@ OF_@@ A_@@ HEX@@ AG@@ ON | double hex@@ ag@@ on@@ Area ( double s ) { return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 ) ; }
NEXT_@@ POWER_@@ OF_@@ 2_2 | unsigned int next@@ PowerOf@@ 2 ( unsigned int n ) { n -- ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n ++ ; return n ; }
COUNT_@@ SUB@@ STRING@@ S_@@ BINARY_@@ STRING_@@ CONTAIN@@ ING_@@ K_@@ ONE@@ S | int count@@ Of@@ Sub@@ string@@ With@@ K@@ Ones ( string s , int K ) { int N = s . length ( ) ; int res = 0 ; int count@@ Of@@ One = 0 ; int freq [ N + 1 ] = { 0 } ; freq [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { count@@ Of@@ One += ( s [ i ] - '0' ) ; if ( count@@ Of@@ One >= K ) { res += freq [ count@@ Of@@ One - K ] ; } freq [ count@@ Of@@ One ] ++ ; } return res ; }
NUMBER_@@ INDEX@@ ES_@@ EQUAL_@@ ELEMEN@@ TS_@@ GI@@ V@@ EN_@@ RANGE | int answer_@@ query ( int a [ ] , int n , int l , int r ) { int count = 0 ; for ( int i = l ; i < r ; i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ; return count ; }
CHECK_@@ WHE@@ THER_@@ NUMBER_@@ DUC@@ K_@@ NUMBER_@@ NOT | int check_@@ du@@ ck ( char * num ) { int len = strlen ( num ) ; int count_@@ zero = 0 ; char ch ; for ( int i = 1 ; i < len ; i ++ ) { ch = num [ i ] ; if ( ch == '0' ) count_@@ zero ++ ; } return count_@@ zero ; }
NUMBER_@@ NON_@@ NEGATIVE_@@ INTEGR@@ AL_S@@ OL@@ U@@ TIONS_@@ B_@@ C_@@ N_@@ 1 | int count@@ Integr@@ al@@ Solutions ( int n ) { return ( ( n + 1 ) * ( n + 2 ) ) / 2 ; }
MAXIMUM_@@ PROFI@@ T_@@ BY_@@ BU@@ Y@@ ING_@@ AND@@ _S@@ EL@@ LING_@@ A@@ _SH@@ ARE_@@ AT_@@ MO@@ ST_@@ K_@@ TIME@@ S_@@ 1 | int max@@ Pro@@ fit ( int price [ ] , int n , int k ) { int pro@@ fit [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) pro@@ fit [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) pro@@ fit [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { int prev@@ Diff = INT_@@ MIN ; for ( int j = 1 ; j < n ; j ++ ) { prev@@ Diff = max ( prev@@ Diff , pro@@ fit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ; pro@@ fit [ i ] [ j ] = max ( pro@@ fit [ i ] [ j - 1 ] , price [ j ] + prev@@ Diff ) ; } } return pro@@ fit [ k ] [ n - 1 ] ; }
COUNT_@@ CHARAC@@ TER@@ S_@@ POSITION_@@ ENGLI@@ SH_@@ ALPH@@ AB@@ E@@ TS | int find@@ Count ( string str ) { int result = 0 ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) if ( i == ( str [ i ] - ' a ' ) || i == ( str [ i ] - ' A ' ) ) result ++ ; return result ; }
COUNT_@@ GF@@ G@@ _SUB@@ SEQU@@ EN@@ CES_@@ GI@@ V@@ EN_@@ STRING | void count@@ Sub@@ sequence ( char s [ ] , int n ) { int cnt@@ G = 0 , cnt@@ F = 0 , result = 0 , C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { switch ( s [ i ] ) { case ' G ' : cnt@@ G ++ ; result += C ; break ; case ' F ' : cnt@@ F ++ ; C += cnt@@ G ; break ; default : continue ; } } cout << result << endl ; }
FIN@@ D_S@@ MAL@@ LE@@ ST_@@ VALUE_@@ RE@@ PRESEN@@ TE@@ D_S@@ UM@@ _SUB@@ SET_@@ GI@@ V@@ EN_@@ ARRAY | int find@@ S@@ malle@@ st ( int arr [ ] , int n ) { int res = 1 ; for ( int i = 0 ; i < n && arr [ i ] <= res ; i ++ ) res = res + arr [ i ] ; return res ; }
MAXIMUM_@@ POINT@@ S_@@ COLLEC@@ TED_@@ BY_@@ TWO_@@ PER@@ SON@@ S_@@ ALLOWED_@@ TO_@@ ME@@ ET_@@ ONCE | int find@@ Max@@ Points ( int A [ ] [ M ] ) { int P1@@ S [ M + 1 ] [ N + 1 ] , P@@ 1E [ M + 1 ] [ N + 1 ] ; memset ( P1@@ S , 0 , sizeof ( P1@@ S ) ) ; memset ( P@@ 1E , 0 , sizeof ( P@@ 1E ) ) ; int P2@@ S [ M + 1 ] [ N + 1 ] , P2@@ E [ M + 1 ] [ N + 1 ] ; memset ( P2@@ S , 0 , sizeof ( P2@@ S ) ) ; memset ( P2@@ E , 0 , sizeof ( P2@@ E ) ) ; for ( int i = 1 ; i <= N ; i ++ ) for ( int j = 1 ; j <= M ; j ++ ) P1@@ S [ i ] [ j ] = max ( P1@@ S [ i - 1 ] [ j ] , P1@@ S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; for ( int i = N ; i >= 1 ; i -- ) for ( int j = M ; j >= 1 ; j -- ) P@@ 1E [ i ] [ j ] = max ( P@@ 1E [ i + 1 ] [ j ] , P@@ 1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ; for ( int i = N ; i >= 1 ; i -- ) for ( int j = 1 ; j <= M ; j ++ ) P2@@ S [ i ] [ j ] = max ( P2@@ S [ i + 1 ] [ j ] , P2@@ S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) for ( int j = M ; j >= 1 ; j -- ) P2@@ E [ i ] [ j ] = max ( P2@@ E [ i - 1 ] [ j ] , P2@@ E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ; int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { for ( int j = 2 ; j < M ; j ++ ) { int op1 = P1@@ S [ i ] [ j - 1 ] + P@@ 1E [ i ] [ j + 1 ] + P2@@ S [ i + 1 ] [ j ] + P2@@ E [ i - 1 ] [ j ] ; int op2 = P1@@ S [ i - 1 ] [ j ] + P@@ 1E [ i + 1 ] [ j ] + P2@@ S [ i ] [ j - 1 ] + P2@@ E [ i ] [ j + 1 ] ; ans = max ( ans , max ( op1 , op2 ) ) ; } } return ans ; }
PROGRAM_@@ FIND_@@ CIRCUM@@ FER@@ ENCE_@@ CIRC@@ LE | double circum@@ ference ( double r ) { double ci@@ r = 2 * PI * r ; return ci@@ r ; }
QU@@ ICK@@ LY_@@ FIND_@@ MULTIPLE_@@ LEFT_@@ ROTA@@ TIONS_@@ OF_@@ AN_@@ ARRAY | void left@@ Rotate ( int arr [ ] , int n , int k ) { for ( int i = k ; i < k + n ; i ++ ) cout << arr [ i % n ] << " ▁ " ; }
MIN@@ IM@@ UM@@ _S@@ UM_@@ CHO@@ OS@@ ING_@@ MINIMUM_@@ PAIR@@ S_@@ ARRAY | int min@@ Sum ( int A [ ] , int n ) { int min_@@ val = * min_@@ element ( A , A + n ) ; return ( min_@@ val * ( n - 1 ) ) ; }
RECUR@@ SIVE_@@ PROGRAM_@@ PRI@@ ME_@@ NUMBER | bool is@@ Prime ( int n , int i = 2 ) { if ( n <= 2 ) return ( n == 2 ) ? true : false ; if ( n % i == 0 ) return false ; if ( i * i > n ) return true ; return is@@ Prime ( n , i + 1 ) ; }
SPAR@@ SE_@@ SEARCH | int sparse@@ Search ( string arr [ ] , string x , int n ) { return binary@@ Search ( arr , 0 , n - 1 , x ) ; }
FIND_@@ NUMBER_@@ TIME@@ S_@@ STRING_@@ OC@@ CUR@@ S_@@ GI@@ V@@ EN_@@ STRING | int count ( string a , string b , int m , int n ) { if ( ( m == 0 && n == 0 ) || n == 0 ) return 1 ; if ( m == 0 ) return 0 ; if ( a [ m - 1 ] == b [ n - 1 ] ) return count ( a , b , m - 1 , n - 1 ) + count ( a , b , m - 1 , n ) ; else return count ( a , b , m - 1 , n ) ; }
PROGRAM_@@ CHECK_@@ ARRA@@ Y_S@@ OR@@ TED_@@ NOT_@@ ITER@@ ATI@@ VE_@@ RECUR@@ SIVE_@@ 1 | bool array@@ Sorted@@ Or@@ Not ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; }
FIND_@@ INDEX_@@ 0_@@ REPL@@ AC@@ ED_@@ 1_@@ GET_@@ LON@@ GE@@ ST_@@ CONTINU@@ OU@@ S@@ _SEQU@@ ENCE_@@ 1@@ S_@@ BINARY_@@ ARRAY | int max@@ One@@ sIndex ( bool arr [ ] , int n ) { int max_@@ count = 0 ; int max_@@ index ; int prev_@@ zero = - 1 ; int prev_@@ prev_@@ zero = - 1 ; for ( int curr = 0 ; curr < n ; ++ curr ) { if ( arr [ curr ] == 0 ) { if ( curr - prev_@@ prev_@@ zero > max_@@ count ) { max_@@ count = curr - prev_@@ prev_@@ zero ; max_@@ index = prev_@@ zero ; } prev_@@ prev_@@ zero = prev_@@ zero ; prev_@@ zero = curr ; } } if ( n - prev_@@ prev_@@ zero > max_@@ count ) max_@@ index = prev_@@ zero ; return max_@@ index ; }
FIND_@@ MAXIMUM_@@ PRODUCT_@@ OF_@@ A_@@ TR@@ IP@@ LET_@@ IN_@@ ARRAY_@@ 1 | int max@@ Product ( int arr [ ] , int n ) { if ( n < 3 ) return - 1 ; sort ( arr , arr + n ) ; return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ; }
COORDIN@@ ATE@@ S_@@ REC@@ TAN@@ GLE_@@ GI@@ V@@ EN_@@ POINT@@ S_@@ LI@@ E_@@ INS@@ IDE | void print@@ Rect ( int X [ ] , int Y [ ] , int n ) { int X@@ max = * max_@@ element ( X , X + n ) ; int X@@ min = * min_@@ element ( X , X + n ) ; int Y@@ max = * max_@@ element ( Y , Y + n ) ; int Y@@ min = * min_@@ element ( Y , Y + n ) ; cout << " { " << X@@ min << " , ▁ " << Y@@ min << " } " << endl ; cout << " { " << X@@ min << " , ▁ " << Y@@ max << " } " << endl ; cout << " { " << X@@ max << " , ▁ " << Y@@ max << " } " << endl ; cout << " { " << X@@ max << " , ▁ " << Y@@ min << " } " << endl ; }
COUNT_@@ BINARY_@@ DIG@@ IT_@@ NUMBER@@ S_S@@ MAL@@ LER_@@ N | int count@@ Of@@ Binary@@ Number@@ LessThan@@ N ( int N ) { queue < int > q ; q . push ( 1 ) ; int cnt = 0 ; int t ; while ( ! q . empty ( ) ) { t = q . front ( ) ; q . pop ( ) ; if ( t <= N ) { cnt ++ ; q . push ( t * 10 ) ; q . push ( t * 10 + 1 ) ; } } return cnt ; }
CONVERT_@@ DECIMAL_@@ FR@@ ACTION_@@ BINARY_@@ NUMBER | string decimal@@ To@@ Binary ( double num , int k_@@ prec ) { string binary = " " ; int Integral = num ; double fractional = num - Integral ; while ( Integral ) { int rem = Integral % 2 ; binary . push_back ( rem + '0' ) ; Integral /= 2 ; } reverse ( binary . begin ( ) , binary . end ( ) ) ; binary . push_back ( ' . ' ) ; while ( k_@@ prec -- ) { fractional *= 2 ; int fr@@ act_@@ bit = fractional ; if ( fr@@ act_@@ bit == 1 ) { fractional -= fr@@ act_@@ bit ; binary . push_back ( 1 + '0' ) ; } else binary . push_back ( 0 + '0' ) ; } return binary ; }
MAXIMUM_@@ NUMBER_OF_@@ TRAI@@ LING_@@ ZER@@ OS_@@ IN_@@ THE_@@ PRODUCT_@@ OF_THE_@@ SUB@@ SE@@ TS_@@ OF@@ _SIZE_@@ K | int maximum@@ Zeros ( int * arr , int n , int k ) { int subset [ k + 1 ] [ MAX@@ 5 + 5 ] ; memset ( subset , - 1 , sizeof ( subset ) ) ; subset [ 0 ] [ 0 ] = 0 ; for ( int p = 0 ; p < n ; p ++ ) { int pw@@ 2 = 0 , pw@@ 5 = 0 ; while ( arr [ p ] % 2 == 0 ) { pw@@ 2 ++ ; arr [ p ] /= 2 ; } while ( arr [ p ] % 5 == 0 ) { pw@@ 5 ++ ; arr [ p ] /= 5 ; } for ( int i = k - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < MAX@@ 5 ; j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw@@ 5 ] = max ( subset [ i + 1 ] [ j + pw@@ 5 ] , subset [ i ] [ j ] + pw@@ 2 ) ; } int ans = 0 ; for ( int i = 0 ; i < MAX@@ 5 ; i ++ ) ans = max ( ans , min ( i , subset [ k ] [ i ] ) ) ; return ans ; }
SEARCH_@@ AN_@@ ELEMENT_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ AND_@@ PI@@ VO@@ TED_@@ ARRAY | int search ( int arr [ ] , int l , int h , int key ) { if ( l > h ) return - 1 ; int mid = ( l + h ) / 2 ; if ( arr [ mid ] == key ) return mid ; if ( arr [ l ] <= arr [ mid ] ) { if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ; return search ( arr , mid + 1 , h , key ) ; } if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ; return search ( arr , l , mid - 1 , key ) ; }
PROGRAM_@@ FIND_@@ AREA_@@ CIRC@@ UL@@ AR@@ _SEG@@ MENT | float area_@@ of_@@ segment ( float radius , float angle ) { float area_@@ of_@@ sector = pi * ( radius * radius ) * ( angle / 360 ) ; float area_@@ of_@@ triangle = ( float ) 1 / 2 * ( radius * radius ) * sin ( ( angle * pi ) / 180 ) ; return area_@@ of_@@ sector - area_@@ of_@@ triangle ; }
K@@ _S@@ MAL@@ LE@@ ST_@@ ELEMEN@@ TS_@@ ORDER_@@ USING_@@ O@@ 1_@@ EX@@ TRA@@ _SPACE | void print@@ Small ( int arr [ ] , int n , int k ) { for ( int i = k ; i < n ; ++ i ) { int max_@@ var = arr [ k - 1 ] ; int pos = k - 1 ; for ( int j = k - 2 ; j >= 0 ; j -- ) { if ( arr [ j ] > max_@@ var ) { max_@@ var = arr [ j ] ; pos = j ; } } if ( max_@@ var > arr [ i ] ) { int j = pos ; while ( j < k - 1 ) { arr [ j ] = arr [ j + 1 ] ; j ++ ; } arr [ k - 1 ] = arr [ i ] ; } } for ( int i = 0 ; i < k ; i ++ ) cout << arr [ i ] << " ▁ " ; }
N@@ TH_@@ NON_@@ FI@@ BON@@ ACC@@ I_@@ NUMBER | int non@@ Fi@@ bon@@ ac@@ ci ( int n ) { int prev@@ Prev = 1 , prev = 2 , curr = 3 ; while ( n > 0 ) { prev@@ Prev = prev ; prev = curr ; curr = prev@@ Prev + prev ; n = n - ( curr - prev - 1 ) ; } n = n + ( curr - prev - 1 ) ; return prev + n ; }
ANALY@@ SI@@ S_@@ OF_@@ ALGORITH@@ MS@@ _SET_@@ 2_@@ A@@ SYM@@ P@@ TO@@ TIC_@@ ANALY@@ SIS | int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; } return - 1 ; }
Z@@ EC@@ K@@ END@@ OR@@ FS_@@ THE@@ O@@ RE@@ M_@@ NON_@@ NEIGH@@ BO@@ UR@@ ING_@@ FI@@ BON@@ ACC@@ I_@@ RE@@ PRESEN@@ TATION | int nearest@@ Small@@ er@@ Eq@@ Fi@@ b ( int n ) { if ( n == 0 || n == 1 ) return n ; int f1 = 0 , f2 = 1 , f3 = 1 ; while ( f3 <= n ) { f1 = f2 ; f2 = f3 ; f3 = f1 + f2 ; } return f2 ; }
PRINT_@@ MAX@@ IM@@ UM@@ _SH@@ OR@@ TEST_@@ DISTANCE | int find_@@ maximum ( int a [ ] , int n , int k ) { unordered_map < int , int > b ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; int d = min ( 1 + i , n - i ) ; if ( b . find ( x ) == b . end ( ) ) b [ x ] = d ; else b [ x ] = min ( d , b [ x ] ) ; } int ans = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( x != k - x && b . find ( k - x ) != b . end ( ) ) ans = min ( max ( b [ x ] , b [ k - x ] ) , ans ) ; } return ans ; }
GENER@@ ATING_@@ DISTIN@@ CT_@@ SUB@@ SEQU@@ EN@@ CES_@@ OF_@@ A_@@ GI@@ V@@ EN_@@ STRING_@@ IN_@@ LE@@ XI@@ CO@@ GRAP@@ HI@@ C_@@ ORDER | void generate ( set < string > & st , string s ) { if ( s . size ( ) == 0 ) return ; if ( st . find ( s ) == st . end ( ) ) { st . insert ( s ) ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { string t = s ; t . erase ( i , 1 ) ; generate ( st , t ) ; } } return ; }
WRITE_@@ Y@@ OU@@ _@@ OW@@ N_@@ POWER_@@ WITH@@ OUT_@@ USING_@@ MULTIP@@ LIC@@ ATION_@@ AND_@@ DI@@ VISION | int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; }
MAXI@@ MI@@ ZE_@@ VOLUME_@@ CU@@ BO@@ ID_@@ GI@@ VEN@@ _S@@ UM@@ _SI@@ DES_@@ 1 | int max@@ volume ( int s ) { int length = s / 3 ; s -= length ; int bread@@ th = s / 2 ; int height = s - bread@@ th ; return length * bread@@ th * height ; }
HOR@@ NE@@ RS_@@ METHOD_@@ POLY@@ NO@@ MI@@ AL_@@ EVALU@@ ATION | int hor@@ ner ( int poly [ ] , int n , int x ) { int result = poly [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; }
MINIMUM_@@ TIME_@@ REQUIRED_@@ PRODUC@@ E_@@ M_@@ ITEMS | int min@@ Time ( int arr [ ] , int n , int m ) { int t = 0 ; while ( 1 ) { int items = 0 ; for ( int i = 0 ; i < n ; i ++ ) items += ( t / arr [ i ] ) ; if ( items >= m ) return t ; t ++ ; } }
FIND_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN@@ _S@@ UM@@ S_@@ OF_@@ TWO_@@ DIAG@@ ON@@ ALS | int difference ( int arr [ ] [ MAX ] , int n ) { int d1 = 0 , d2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) d1 += arr [ i ] [ j ] ; if ( i == n - j - 1 ) d2 += arr [ i ] [ j ] ; } } return abs ( d1 - d2 ) ; }
SHOR@@ TEST_@@ UN@@ COMM@@ ON@@ _SUB@@ SEQUENCE | int shor@@ test@@ Seq ( char * S , char * T ) { int m = strlen ( S ) , n = strlen ( T ) ; int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 0 ; i <= n ; i ++ ) dp [ 0 ] [ i ] = MAX ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { char ch = S [ i - 1 ] ; int k ; for ( k = j - 1 ; k >= 0 ; k -- ) if ( T [ k ] == ch ) break ; if ( k == - 1 ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 ) ; } } int ans = dp [ m ] [ n ] ; if ( ans >= MAX ) ans = - 1 ; return ans ; }
MIN_@@ FLI@@ PS_@@ OF_@@ CONTINU@@ OUS_@@ CHARAC@@ TER@@ S_TO_@@ MAKE_@@ ALL_@@ CHARAC@@ TER@@ S_S@@ AME_@@ IN_@@ A_@@ STRING | int find@@ Fli@@ ps ( char str [ ] , int n ) { char last = ' ▁ ' ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( last != str [ i ] ) res ++ ; last = str [ i ] ; } return res / 2 ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 28@@ _@@ MINIMUM_@@ INSER@@ TIONS_@@ TO_@@ FORM_@@ A_@@ PA@@ LIN@@ DRO@@ ME | int find@@ Min@@ Inser@@ tions ( char str [ ] , int l , int h ) { if ( l > h ) return INT_MAX ; if ( l == h ) return 0 ; if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 ; return ( str [ l ] == str [ h ] ) ? find@@ Min@@ Inser@@ tions ( str , l + 1 , h - 1 ) : ( min ( find@@ Min@@ Inser@@ tions ( str , l , h - 1 ) , find@@ Min@@ Inser@@ tions ( str , l + 1 , h ) ) + 1 ) ; }
COUNT_@@ CHARAC@@ TER@@ S_@@ STRING_@@ DISTAN@@ CE_@@ ENGLI@@ SH_@@ ALPH@@ AB@@ E@@ TS | int count@@ Pairs ( string str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++ ; return result ; }
MULTI@@ STAGE_@@ GRAP@@ H@@ _SH@@ OR@@ TEST_@@ PATH | INT_MAX int shor@@ test@@ Dist ( int graph [ N ] [ N ] ) { int dist [ N ] ; dist [ N - 1 ] = 0 ; for ( int i = N - 2 ; i >= 0 ; i -- ) { dist [ i ] = INF ; for ( int j = i ; j < N ; j ++ ) { if ( graph [ i ] [ j ] == INF ) continue ; dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ; } } return dist [ 0 ] ; }
MAX@@ IM@@ UM@@ _SIZE_@@ SUB_@@ MATRIX_@@ WITH_@@ ALL_@@ 1@@ S_IN_@@ A_@@ BINARY_@@ MATRIX | void print@@ Max@@ Sub@@ Square ( bool M [ R ] [ C ] ) { int i , j ; int S [ R ] [ C ] ; int max_@@ of_@@ s , max_@@ i , max_@@ j ; for ( i = 0 ; i < R ; i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ] ; for ( j = 0 ; j < C ; j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ] ; for ( i = 1 ; i < R ; i ++ ) { for ( j = 1 ; j < C ; j ++ ) { if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = min ( S [ i ] [ j - 1 ] , min ( S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) ) + 1 ; else S [ i ] [ j ] = 0 ; } } max_@@ of_@@ s = S [ 0 ] [ 0 ] ; max_@@ i = 0 ; max_@@ j = 0 ; for ( i = 0 ; i < R ; i ++ ) { for ( j = 0 ; j < C ; j ++ ) { if ( max_@@ of_@@ s < S [ i ] [ j ] ) { max_@@ of_@@ s = S [ i ] [ j ] ; max_@@ i = i ; max_@@ j = j ; } } } cout << " Maximum ▁ size ▁ sub - matrix ▁ is : ▁ \n " ; for ( i = max_@@ i ; i > max_@@ i - max_@@ of_@@ s ; i -- ) { for ( j = max_@@ j ; j > max_@@ j - max_@@ of_@@ s ; j -- ) { cout << M [ i ] [ j ] << " ▁ " ; } cout << " \n " ; } }
GI@@ VEN@@ _S@@ OR@@ TED_@@ ARRAY_@@ NUMBER_@@ X_@@ FIND_@@ PA@@ IR_@@ ARRAY_@@ WHO@@ SE_@@ S@@ UM_@@ CLO@@ SE@@ ST_@@ X | void print@@ Close@@ st ( int arr [ ] , int n , int x ) { int res_@@ l , res_@@ r ; int l = 0 , r = n - 1 , diff = INT_MAX ; while ( r > l ) { if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_@@ l = l ; res_@@ r = r ; diff = abs ( arr [ l ] + arr [ r ] - x ) ; } if ( arr [ l ] + arr [ r ] > x ) r -- ; else l ++ ; } cout << " ▁ The ▁ closest ▁ pair ▁ is ▁ " << arr [ res_@@ l ] << " ▁ and ▁ " << arr [ res_@@ r ] ; }
SORT_@@ 1_@@ N@@ _SW@@ APP@@ ING_@@ AD@@ J@@ AC@@ ENT_@@ ELEMEN@@ TS_@@ 1 | bool sorted@@ After@@ Swap ( int A [ ] , bool B [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( B [ i ] ) { if ( A [ i ] != i + 1 ) swap ( A [ i ] , A [ i + 1 ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] != i + 1 ) return false ; } return true ; }
TILE_@@ ST@@ AC@@ KING_@@ PRO@@ BLE@@ M | int possible@@ W@@ ays ( int n , int m , int k ) { int dp [ N ] [ N ] ; int pres@@ um [ N ] [ N ] ; memset ( dp , 0 , sizeof dp ) ; memset ( pres@@ um , 0 , sizeof pres@@ um ) ; for ( int i = 1 ; i < n + 1 ; i ++ ) { dp [ 0 ] [ i ] = 0 ; pres@@ um [ 0 ] [ i ] = 1 ; } for ( int i = 0 ; i < m + 1 ; i ++ ) pres@@ um [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i < m + 1 ; i ++ ) { for ( int j = 1 ; j < n + 1 ; j ++ ) { dp [ i ] [ j ] = pres@@ um [ i - 1 ] [ j ] ; if ( j > k ) { dp [ i ] [ j ] -= pres@@ um [ i - 1 ] [ j - k - 1 ] ; } } for ( int j = 1 ; j < n + 1 ; j ++ ) pres@@ um [ i ] [ j ] = dp [ i ] [ j ] + pres@@ um [ i ] [ j - 1 ] ; } return dp [ m ] [ n ] ; }
NUMBER_OF_@@ PAIR@@ S_IN_@@ AN_@@ ARRAY_@@ H@@ AV@@ ING_S@@ UM_@@ EQUAL_@@ TO_@@ PRODUCT | int sum@@ Equal@@ Product ( int a [ ] , int n ) { int zero = 0 , two = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { zero ++ ; } if ( a [ i ] == 2 ) { two ++ ; } } int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2 ; return cnt ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 17@@ _@@ PA@@ LIN@@ DRO@@ ME_@@ PARTI@@ TION@@ ING | int min@@ Pal@@ Par@@ tion ( char * str ) { int n = strlen ( str ) ; int C [ n ] [ n ] ; bool P [ n ] [ n ] ; int i , j , k , L ; for ( i = 0 ; i < n ; i ++ ) { P [ i ] [ i ] = true ; C [ i ] [ i ] = 0 ; } for ( L = 2 ; L <= n ; L ++ ) { for ( i = 0 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] ) ; else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ] ; if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ; else { C [ i ] [ j ] = INT_MAX ; for ( k = i ; k <= j - 1 ; k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ; } } } return C [ 0 ] [ n - 1 ] ; }
FIND_@@ ONE_@@ MULTIPLE_@@ REPE@@ ATING_@@ ELEMEN@@ TS_@@ READ_@@ ARRAY | int find@@ Repe@@ ating@@ Number ( const int arr [ ] , int n ) { int sq = sqrt ( n ) ; int range = ( n / sq ) + 1 ; int count [ range ] = { 0 } ; for ( int i = 0 ; i <= n ; i ++ ) { count [ ( arr [ i ] - 1 ) / sq ] ++ ; } int selected_@@ block = range - 1 ; for ( int i = 0 ; i < range - 1 ; i ++ ) { if ( count [ i ] > sq ) { selected_@@ block = i ; break ; } } unordered_map < int , int > m ; for ( int i = 0 ; i <= n ; i ++ ) { if ( ( ( selected_@@ block * sq ) < arr [ i ] ) && ( arr [ i ] <= ( ( selected_@@ block + 1 ) * sq ) ) ) { m [ arr [ i ] ] ++ ; if ( m [ arr [ i ] ] > 1 ) return arr [ i ] ; } } return - 1 ; }
MIN@@ IM@@ UM@@ _S@@ UM_@@ PATH_@@ TRI@@ ANGLE | int min@@ Sum@@ Path ( vector < vector < int > > & A ) { int memo [ A . size ( ) ] ; int n = A . size ( ) - 1 ; for ( int i = 0 ; i < A [ n ] . size ( ) ; i ++ ) memo [ i ] = A [ n ] [ i ] ; for ( int i = A . size ( ) - 2 ; i >= 0 ; i -- ) for ( int j = 0 ; j < A [ i ] . size ( ) ; j ++ ) memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , memo [ j + 1 ] ) ; return memo [ 0 ] ; }
HO@@ W_@@ CAN_@@ W@@ E_@@ S@@ UM_@@ THE_@@ DIG@@ IT@@ S_@@ OF_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ IN@@ _SIN@@ GLE_@@ STATE@@ MENT_@@ 1 | public : int getS@@ um ( int n ) { int sum ; for ( sum = 0 ; n > 0 ; sum += n % 10 , n /= 10 ) ; return sum ; }
RECUR@@ SION | void print@@ Fun ( int test ) { if ( test < 1 ) return ; else { cout << test << " ▁ " ; print@@ Fun ( test - 1 ) ; cout << test << " ▁ " ; return ; } }
MAXIMUM_@@ TR@@ IP@@ LET_@@ S@@ UM_@@ ARRAY | int max@@ Trip@@ let@@ Sum ( int arr [ ] , int n ) { int sum = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) for ( int k = j + 1 ; k < n ; k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ] ; return sum ; }
MINIMUM_@@ NUMBER_OF_@@ JUM@@ PS_@@ TO_@@ REACH_@@ END_OF_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 1 | int min@@ Jump@@ s ( int arr [ ] , int n ) { int * jumps = new int [ n ] ; int i , j ; if ( n == 0 || arr [ 0 ] == 0 ) return INT_MAX ; jumps [ 0 ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { jumps [ i ] = INT_MAX ; for ( j = 0 ; j < i ; j ++ ) { if ( i <= j + arr [ j ] && jumps [ j ] != INT_MAX ) { jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 ) ; break ; } } } return jumps [ n - 1 ] ; }
MAXI@@ MI@@ ZE_@@ ARRAY_@@ ELEMEN@@ TS_@@ UP@@ TO_@@ GI@@ V@@ EN_@@ NUMBER | int find@@ Max@@ Val ( int arr [ ] , int n , int num , int max@@ Limit ) { int ind ; int val ; int dp [ n ] [ max@@ Limit + 1 ] ; for ( ind = 0 ; ind < n ; ind ++ ) { for ( val = 0 ; val <= max@@ Limit ; val ++ ) { if ( ind == 0 ) { if ( num - arr [ ind ] == val || num + arr [ ind ] == val ) { dp [ ind ] [ val ] = 1 ; } else { dp [ ind ] [ val ] = 0 ; } } else { if ( val - arr [ ind ] >= 0 && val + arr [ ind ] <= max@@ Limit ) { dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ] || dp [ ind - 1 ] [ val + arr [ ind ] ] ; } else if ( val - arr [ ind ] >= 0 ) { dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ] ; } else if ( val + arr [ ind ] <= max@@ Limit ) { dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ] ; } else { dp [ ind ] [ val ] = 0 ; } } } } for ( val = max@@ Limit ; val >= 0 ; val -- ) { if ( dp [ n - 1 ] [ val ] ) { return val ; } } return - 1 ; }
PROGRAM_@@ FOR_@@ DEAD@@ LOCK_@@ FREE_@@ CONDITION_@@ IN_@@ OPER@@ ATING_@@ SYSTEM | int Resources ( int process , int need ) { int min@@ Resources = 0 ; min@@ Resources = process * ( need - 1 ) + 1 ; return min@@ Resources ; }
NUMBER_@@ DIG@@ IT@@ S_@@ PRODUCT_@@ TWO_@@ NUMB@@ ERS | int count@@ Digits ( int a , int b ) { int count = 0 ; int p = abs ( a * b ) ; if ( p == 0 ) return 1 ; while ( p > 0 ) { count ++ ; p = p / 10 ; } return count ; }
FLO@@ OR_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY | int floor@@ Search ( int arr [ ] , int n , int x ) { if ( x >= arr [ n - 1 ] ) return n - 1 ; if ( x < arr [ 0 ] ) return - 1 ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ; return - 1 ; }
CHECK_@@ WHE@@ THER_@@ TRIANGLE_@@ VALID_@@ NOT_@@ SI@@ DES_@@ GI@@ VEN | bool check@@ Validity ( int a , int b , int c ) { if ( a + b <= c || a + c <= b || b + c <= a ) return false ; else return true ; }
PRINT_@@ N_@@ X_@@ N@@ _SP@@ IR@@ AL_@@ MATRIX_@@ USING_@@ O@@ 1_@@ EX@@ TRA@@ _SPACE | void print@@ Sp@@ ir@@ al ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int x ; x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 - j ) ) ; if ( i <= j ) printf ( " % d@@ \t ▁ " , ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) ) ; else printf ( " % d@@ \t ▁ " , ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) ) ; } printf ( " \n " ) ; } }
POSITION_@@ ELEMENT_@@ STABLE_@@ S@@ ORT | int getIndex@@ In@@ Sorted@@ Array ( int arr [ ] , int n , int idx ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ idx ] ) result ++ ; if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ; } return result ; }
MAX@@ IM@@ UM@@ _SEG@@ MENT_@@ VALUE_@@ PUT@@ TING_@@ K_@@ BREAK@@ POINT@@ S_@@ NUMBER | int find@@ Max@@ Segment ( string & s , int k ) { int seg_@@ len = s . length ( ) - k ; int res = 0 ; for ( int i = 0 ; i < seg_@@ len ; i ++ ) res = res * 10 + ( s [ i ] - '0' ) ; int seg_@@ len_@@ pow = pow ( 10 , seg_@@ len - 1 ) ; int curr_@@ val = res ; for ( int i = 1 ; i <= ( s . length ( ) - seg_@@ len ) ; i ++ ) { curr_@@ val = curr_@@ val - ( s [ i - 1 ] - '0' ) * seg_@@ len_@@ pow ; curr_@@ val = curr_@@ val * 10 + ( s [ i + seg_@@ len - 1 ] - '0' ) ; res = max ( res , curr_@@ val ) ; } return res ; }
FIN@@ DING_@@ POWER_@@ PRI@@ ME_@@ NUMBER_@@ P_@@ N_@@ 1 | int Power@@ OFP@@ IN@@ n@@ factorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) { ans += n / temp ; temp = temp * p ; } return ans ; }
PROGRAM_@@ PR@@ IN@@ T_ID@@ ENTITY_@@ MATRIX | int Identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) cout << 1 << " ▁ " ; else cout << 0 << " ▁ " ; } cout << endl ; } return 0 ; }
S@@ UM_@@ MATRIX_@@ ELEMENT_@@ ELEMENT_@@ INTEGER_@@ DI@@ VISI@@ ON_@@ ROW_@@ COLUMN | int find@@ Sum ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans += ( i / j ) ; return ans ; }
TI@@ LING_@@ WITH_@@ DO@@ MIN@@ OES | int count@@ W@@ ays ( int n ) { int A [ n + 1 ] , B [ n + 1 ] ; A [ 0 ] = 1 , A [ 1 ] = 0 , B [ 0 ] = 0 , B [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ; B [ i ] = A [ i - 1 ] + B [ i - 2 ] ; } return A [ n ] ; }
COUNT_@@ DE@@ RANGE@@ MEN@@ TS_@@ PER@@ MU@@ TA@@ TION@@ _SU@@ CH_@@ TH@@ AT_@@ NO_@@ ELEMENT_@@ AP@@ PE@@ AR@@ S_IN_@@ IT@@ S_@@ ORIGIN@@ AL_@@ POSITION | int count@@ D@@ er ( int n ) { if ( n == 1 ) return 0 ; if ( n == 0 ) return 1 ; if ( n == 2 ) return 1 ; return ( n - 1 ) * ( count@@ D@@ er ( n - 1 ) + count@@ D@@ er ( n - 2 ) ) ; }
FREQU@@ ENCY_@@ ELEMENT_@@ UN@@ SOR@@ TED_@@ ARRAY_@@ 1 | void count@@ Freq ( int a [ ] , int n ) { unordered_map < int , int > hm ; for ( int i = 0 ; i < n ; i ++ ) hm [ a [ i ] ] ++ ; int cum@@ ul = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cum@@ ul += hm [ a [ i ] ] ; if ( hm [ a [ i ] ] ) { cout << a [ i ] << " - > " << cum@@ ul << endl ; } hm [ a [ i ] ] = 0 ; } }
MINI@@ MI@@ ZE_@@ THE_@@ S@@ UM_@@ OF_@@ DIG@@ IT@@ S_@@ OF_@@ A_@@ AND_@@ B@@ _SU@@ CH_@@ TH@@ AT_@@ A_@@ B_@@ N | int min@@ Sum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += ( n % 10 ) ; n /= 10 ; } if ( sum == 1 ) return 10 ; return sum ; }
DI@@ VI@@ DE_@@ CU@@ BO@@ ID_@@ CU@@ BE@@ S_S@@ UM_@@ VOLUM@@ ES_@@ MAX@@ IMUM | void maxim@@ iz@@ ecu@@ be ( int l , int b , int h ) { int side = __@@ gcd ( l , __@@ gcd ( b , h ) ) ; int num = l / side ; num = ( num * b / side ) ; num = ( num * h / side ) ; cout << side << " ▁ " << num << endl ; }
CHECK_@@ NUMBER_@@ POWER_@@ K_@@ USING_@@ BASE_@@ CHAN@@ G@@ ING_@@ METHOD | bool is@@ PowerOf@@ K ( unsigned int n , unsigned int k ) { bool one@@ Seen = false ; while ( n > 0 ) { int digit = n % k ; if ( digit > 1 ) return false ; if ( digit == 1 ) { if ( one@@ Seen ) return false ; one@@ Seen = true ; } n /= k ; } return true ; }
POSITION_@@ OF_@@ RIGHT@@ MO@@ ST@@ _SET_@@ BIT_@@ 1 | int Position@@ Right@@ most@@ Set@@ bit ( int n ) { int position = 1 ; int m = 1 ; while ( ! ( n & m ) ) { m = m << 1 ; position ++ ; } return position ; }
SEARCH_@@ INSERT_@@ AND_@@ DELETE_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY_@@ 1 | int insert@@ Sorted ( int arr [ ] , int n , int key , int capacity ) { if ( n >= capacity ) return n ; int i ; for ( i = n - 1 ; ( i >= 0 && arr [ i ] > key ) ; i -- ) arr [ i + 1 ] = arr [ i ] ; arr [ i + 1 ] = key ; return ( n + 1 ) ; }
FIND_@@ THE_@@ MAXIMUM_@@ OF_@@ MIN@@ IM@@ UM@@ S_@@ FOR_@@ EVER@@ Y_@@ WINDOW@@ _SIZE_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 1 | void print@@ Max@@ Of@@ Min ( int arr [ ] , int n ) { stack < int > s ; int left [ n + 1 ] ; int right [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = - 1 ; right [ i ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( ) ; if ( ! s . empty ( ) ) left [ i ] = s . top ( ) ; s . push ( i ) ; } while ( ! s . empty ( ) ) s . pop ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( ) ; if ( ! s . empty ( ) ) right [ i ] = s . top ( ) ; s . push ( i ) ; } int ans [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) ans [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len = right [ i ] - left [ i ] - 1 ; ans [ len ] = max ( ans [ len ] , arr [ i ] ) ; } for ( int i = n - 1 ; i >= 1 ; i -- ) ans [ i ] = max ( ans [ i ] , ans [ i + 1 ] ) ; for ( int i = 1 ; i <= n ; i ++ ) cout << ans [ i ] << " ▁ " ; }
MAXIMUM_@@ DECIMAL_@@ VALUE_@@ PATH_@@ IN_@@ A_@@ BINARY_@@ MATRIX_@@ 1 | long long int Maximum@@ Decimal@@ Value ( int mat [ ] [ N ] , int n ) { int dp [ n ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + pow ( 2 , i ) ; else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + pow ( 2 , i ) ; else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + pow ( 2 , i + j ) ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n - 1 ] [ n - 1 ] ; }
COUNT_@@ NUMBER_OF_@@ WAY@@ S_TO_@@ CO@@ VER_@@ A_@@ DISTANCE | int print@@ Count@@ Rec ( int dist ) { if ( dist < 0 ) return 0 ; if ( dist == 0 ) return 1 ; return print@@ Count@@ Rec ( dist - 1 ) + print@@ Count@@ Rec ( dist - 2 ) + print@@ Count@@ Rec ( dist - 3 ) ; }
MOVE_@@ VE_@@ ELEMEN@@ TS_@@ END_@@ ORDER_@@ EX@@ TRA@@ _SPACE_@@ ALLOWED | void se@@ greg@@ ate@@ Elements ( int arr [ ] , int n ) { int temp [ n ] ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] >= 0 ) temp [ j ++ ] = arr [ i ] ; if ( j == n || j == 0 ) return ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] < 0 ) temp [ j ++ ] = arr [ i ] ; memcpy ( arr , temp , sizeof ( temp ) ) ; }
MINIMUM_@@ PER@@ I@@ ME@@ TER_@@ N_@@ BLOCKS | int min@@ Per@@ imeter ( int n ) { int l = sqrt ( n ) ; int sq = l * l ; if ( sq == n ) return l * 4 ; else { long long int row = n / l ; long long int per@@ imeter = 2 * ( l + row ) ; if ( n % l != 0 ) per@@ imeter += 2 ; return per@@ imeter ; } }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 36@@ _@@ CU@@ T_@@ A_@@ RO@@ PE_@@ TO_@@ MAXI@@ MI@@ ZE_@@ PRODUCT | int max@@ Prod ( int n ) { if ( n == 0 || n == 1 ) return 0 ; int max_@@ val = 0 ; for ( int i = 1 ; i < n ; i ++ ) max_@@ val = max ( max_@@ val , i * ( n - i ) , max@@ Prod ( n - i ) * i ) ; return max_@@ val ; }
LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ STRING@@ _SPACE_@@ OPTIMIZ@@ ED_@@ D@@ P_S@@ OL@@ U@@ TION | int LC@@ Sub@@ Str ( string X , string Y ) { int m = X . length ( ) ; int n = Y . length ( ) ; int result = 0 ; int len [ 2 ] [ n ] ; int curr@@ Row = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) { len [ curr@@ Row ] [ j ] = 0 ; } else if ( X [ i - 1 ] == Y [ j - 1 ] ) { len [ curr@@ Row ] [ j ] = len [ 1 - curr@@ Row ] [ j - 1 ] + 1 ; result = max ( result , len [ curr@@ Row ] [ j ] ) ; } else { len [ curr@@ Row ] [ j ] = 0 ; } } curr@@ Row = 1 - curr@@ Row ; } return result ; }
CHECK_@@ GI@@ V@@ EN_@@ STRING_@@ ROTATION_@@ PA@@ LIN@@ DRO@@ ME | bool is@@ Pal@@ ind@@ ro@@ me ( string str ) { int l = 0 ; int h = str . length ( ) - 1 ; while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false ; return true ; }
FIND_@@ NUMBER_@@ OF@@ _S@@ OL@@ U@@ TIONS_@@ OF_@@ A_@@ LINEAR_@@ EQU@@ ATION_@@ OF_@@ N_@@ VARIAB@@ LES_@@ 1 | int count@@ So@@ l ( int coeff [ ] , int n , int rhs ) { int dp [ rhs + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = coeff [ i ] ; j <= rhs ; j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ; return dp [ rhs ] ; }
FIND_@@ THE_@@ LAR@@ GE@@ ST_@@ PAIR@@ _S@@ UM_@@ IN_@@ AN_@@ UN@@ SOR@@ TED_@@ ARRAY | int find@@ Largest@@ Sum@@ Pair ( int arr [ ] , int n ) { int first , second ; if ( arr [ 0 ] > arr [ 1 ] ) { first = arr [ 0 ] ; second = arr [ 1 ] ; } else { first = arr [ 1 ] ; second = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } return ( first + second ) ; }
FIND_@@ BIT@@ ON@@ IC_@@ POINT_@@ GI@@ V@@ EN_@@ BIT@@ ON@@ IC@@ _SEQU@@ ENCE | int binary@@ Search ( int arr [ ] , int left , int right ) { if ( left <= right ) { int mid = ( left + right ) / 2 ; if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid ; if ( arr [ mid ] < arr [ mid + 1 ] ) return binary@@ Search ( arr , mid + 1 , right ) ; else return binary@@ Search ( arr , left , mid - 1 ) ; } return - 1 ; }
PRINT_@@ ALL_@@ DISTIN@@ CT_@@ CHARAC@@ TER@@ S_@@ OF_@@ A_@@ STRING_@@ IN_@@ ORDER_@@ 3_@@ METHO@@ DS_@@ 1 | void print@@ Distin@@ ct ( string str ) { int n = str . length ( ) ; int count [ MAX_@@ CHAR ] ; int index [ MAX_@@ CHAR ] ; for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) { count [ i ] = 0 ; index [ i ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { char x = str [ i ] ; ++ count [ x ] ; if ( count [ x ] == 1 && x != ' ▁ ' ) index [ x ] = i ; if ( count [ x ] == 2 ) index [ x ] = n ; } sort ( index , index + MAX_@@ CHAR ) ; for ( int i = 0 ; i < MAX_@@ CHAR && index [ i ] != n ; i ++ ) cout << str [ index [ i ] ] ; }
FIND_@@ TW@@ O@@ _SI@@ DES_@@ RIGHT_@@ ANGLE_@@ TRI@@ ANGLE | void print@@ Other@@ Si@@ des ( int n ) { if ( n & 1 ) { if ( n == 1 ) cout << - 1 << endl ; else { int b = ( n * n - 1 ) / 2 ; int c = ( n * n + 1 ) / 2 ; cout << " b ▁ = ▁ " << b << " , ▁ c ▁ = ▁ " << c << endl ; } } else { if ( n == 2 ) cout << - 1 << endl ; else { int b = n * n / 4 - 1 ; int c = n * n / 4 + 1 ; cout << " b ▁ = ▁ " << b << " , ▁ c ▁ = ▁ " << c << endl ; } } }
COUNT_@@ NUMBER_OF_@@ STRING@@ S_@@ MA@@ DE_@@ OF_@@ R_@@ G_@@ AND_@@ B_@@ USING_@@ GI@@ V@@ EN_@@ COMBIN@@ ATION | int possible@@ Strings ( int n , int r , int b , int g ) { int fact [ n + 1 ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ; int left = n - ( r + g + b ) ; int sum = 0 ; for ( int i = 0 ; i <= left ; i ++ ) { for ( int j = 0 ; j <= left - i ; j ++ ) { int k = left - ( i + j ) ; sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ; } } return sum ; }
RE@@ AR@@ RANGE_@@ ARRAY_@@ MAXIMUM_@@ MINIMUM_@@ FORM@@ _SET_@@ 2_@@ O@@ 1_@@ EX@@ TRA@@ _SPACE_@@ 1 | void re@@ arrange ( int arr [ ] , int n ) { int max_@@ ele = arr [ n - 1 ] ; int min_@@ ele = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { arr [ i ] = max_@@ ele ; max_@@ ele -= 1 ; } else { arr [ i ] = min_@@ ele ; min_@@ ele += 1 ; } } }
EVALU@@ ATE_@@ AN_@@ ARRAY_@@ EXPRES@@ SION_@@ WITH_@@ NUMB@@ ERS_@@ AND | int calculate@@ Sum ( string arr [ ] , int n ) { if ( n == 0 ) return 0 ; string s = arr [ 0 ] ; int value = sto@@ i ( s ) ; int sum = value ; for ( int i = 2 ; i < n ; i = i + 2 ) { s = arr [ i ] ; int value = sto@@ i ( s ) ; char operation = arr [ i - 1 ] [ 0 ] ; if ( operation == ' + ' ) sum += value ; else sum -= value ; } return sum ; }
S@@ UM_@@ MATRIX_@@ ELEMENT_@@ ELEMENT_@@ INTEGER_@@ DI@@ VISI@@ ON_@@ ROW_@@ COLUMN_@@ 1 | int find@@ Sum ( int n ) { int ans = 0 , temp = 0 , num ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += ( i * num ) ; else ans += ( ( n - temp ) * num ) ; temp += i ; num ++ ; } } return ans ; }
SHUFF@@ LE_@@ A_@@ DE@@ CK_@@ OF_@@ CAR@@ DS_@@ 3 | void shuffle ( int card [ ] , int n ) { srand ( time ( 0 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int r = i + ( rand ( ) % ( 52 - i ) ) ; swap ( card [ i ] , card [ r ] ) ; } }
DO@@ O@@ LITTLE_@@ ALGORITH@@ M_@@ L@@ U_@@ DE@@ COMPOSI@@ TION | void lu@@ De@@ composition ( int mat [ ] [ MAX ] , int n ) { int lower [ n ] [ n ] , upper [ n ] [ n ] ; memset ( lower , 0 , sizeof ( lower ) ) ; memset ( upper , 0 , sizeof ( upper ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int k = i ; k < n ; k ++ ) { int sum = 0 ; for ( int j = 0 ; j < i ; j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ; upper [ i ] [ k ] = mat [ i ] [ k ] - sum ; } for ( int k = i ; k < n ; k ++ ) { if ( i == k ) lower [ i ] [ i ] = 1 ; else { int sum = 0 ; for ( int j = 0 ; j < i ; j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ; lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ; } } } cout << setw ( 6 ) << " ▁ ▁ ▁ ▁ ▁ ▁ Lower ▁ Tri@@ angular " << setw ( 32 ) << " Upper ▁ Tri@@ angular " << endl ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << " \t " ; cout << " \t " ; for ( int j = 0 ; j < n ; j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << " \t " ; cout << endl ; } }
PROGRAM_@@ N@@ TH_@@ CATA@@ LAN@@ _@@ NUMBER | unsigned long int catal@@ an ( unsigned int n ) { if ( n <= 1 ) return 1 ; unsigned long int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res += catal@@ an ( i ) * catal@@ an ( n - i - 1 ) ; return res ; }
NUMBER_@@ DIG@@ IT@@ S_@@ REMO@@ VED_@@ MAKE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 3 | int di@@ visible ( string num ) { int n = num . length ( ) ; int sum = accumulate ( begin ( num ) , end ( num ) , 0 ) - '0' * 1 ; if ( sum % 3 == 0 ) return 0 ; if ( n == 1 ) return - 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1 ; if ( n == 2 ) return - 1 ; return 2 ; }
CHECK_@@ IF_@@ A_@@ NUMBER_@@ IS_@@ POWER_@@ OF_@@ AN@@ OTHER_@@ NUMBER_@@ 1 | bool is@@ Power ( int x , int y ) { int res1 = log ( y ) / log ( x ) ; double res2 = log ( y ) / log ( x ) ; return ( res1 == res2 ) ; }
LAR@@ GE@@ ST@@ _SUB@@ SEQU@@ ENCE_@@ GC@@ D_@@ GREATER_@@ 1 | int lar@@ gest@@ G@@ CD@@ Sub@@ sequence ( int arr [ ] , int n ) { int ans = 0 ; int max@@ ele = * max_@@ element ( arr , arr + n ) ; for ( int i = 2 ; i <= max@@ ele ; ++ i ) { int count = 0 ; for ( int j = 0 ; j < n ; ++ j ) { if ( arr [ j ] % i == 0 ) ++ count ; } ans = max ( ans , count ) ; } return ans ; }
FIND_@@ COMMON_@@ ELEMENT_@@ RO@@ WS_@@ ROW_@@ WI@@ SE_@@ SOR@@ TED_@@ MATRIX | int find@@ Common ( int mat [ M ] [ N ] ) { int column [ M ] ; int min_@@ row ; int i ; for ( i = 0 ; i < M ; i ++ ) column [ i ] = N - 1 ; min_@@ row = 0 ; while ( column [ min_@@ row ] >= 0 ) { for ( i = 0 ; i < M ; i ++ ) { if ( mat [ i ] [ column [ i ] ] < mat [ min_@@ row ] [ column [ min_@@ row ] ] ) min_@@ row = i ; } int eq_@@ count = 0 ; for ( i = 0 ; i < M ; i ++ ) { if ( mat [ i ] [ column [ i ] ] > mat [ min_@@ row ] [ column [ min_@@ row ] ] ) { if ( column [ i ] == 0 ) return - 1 ; column [ i ] -= 1 ; } else eq_@@ count ++ ; } if ( eq_@@ count == M ) return mat [ min_@@ row ] [ column [ min_@@ row ] ] ; } return - 1 ; }
CHECK_@@ GI@@ V@@ EN_@@ CI@@ R@@ CLE_@@ LI@@ ES_@@ COMPLE@@ TE@@ LY_@@ IN@@ SIDE_@@ R@@ ING_@@ FOR@@ MED_@@ TWO_@@ CON@@ CEN@@ TRI@@ C_@@ CIRC@@ LES | bool check@@ circle ( int r , int R , int r1 , int x1 , int y1 ) { int dis = sqrt ( x1 * x1 + y1 * y1 ) ; return ( dis - r1 >= R && dis + r1 <= r ) ; }
COUNT_@@ TO@@ TAL@@ _SET_@@ BITS_@@ IN_@@ ALL_@@ NUMB@@ ERS_@@ FROM_@@ 1_@@ TO_@@ N | int count@@ Set@@ Bits ( int n ) { int i = 0 ; int ans = 0 ; while ( ( 1 << i ) <= n ) { bool k = 0 ; int change = 1 << i ; for ( int j = 0 ; j <= n ; j ++ ) { ans += k ; if ( change == 1 ) { k = ! k ; change = 1 << i ; } else { change -- ; } } i ++ ; } return ans ; }
LON@@ GE@@ ST_@@ REPE@@ AT@@ ING@@ _SUB@@ SEQUENCE | int find@@ Lon@@ gest@@ Repe@@ ating@@ Sub@@ Seq ( string str ) { int n = str . length ( ) ; int dp [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; }
FIND_@@ THE_@@ FIRST_@@ MISSING_@@ NUMBER | int find@@ First@@ Missing ( int array [ ] , int start , int end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; int mid = ( start + end ) / 2 ; if ( array [ mid ] == mid ) return find@@ First@@ Missing ( array , mid + 1 , end ) ; return find@@ First@@ Missing ( array , start , mid ) ; }
SORT_@@ ARRAY_@@ CONVER@@ TING_@@ ELEMEN@@ TS@@ _S@@ QUAR@@ ES_@@ 1 | void sort@@ Squ@@ ares ( int arr [ ] , int n ) { int K = 0 ; for ( K = 0 ; K < n ; K ++ ) if ( arr [ K ] >= 0 ) break ; int i = K - 1 ; int j = K ; int ind = 0 ; int temp [ n ] ; while ( i >= 0 && j < n ) { if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) { temp [ ind ] = arr [ i ] * arr [ i ] ; i -- ; } else { temp [ ind ] = arr [ j ] * arr [ j ] ; j ++ ; } ind ++ ; } while ( i >= 0 ) { temp [ ind ] = arr [ i ] * arr [ i ] ; i -- ; ind ++ ; } while ( j < n ) { temp [ ind ] = arr [ j ] * arr [ j ] ; j ++ ; ind ++ ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = temp [ i ] ; }
PROGRAM_@@ TO_@@ FIND_@@ RE@@ MA@@ INDE@@ R_@@ WITH@@ OUT_@@ USING_@@ MODUL@@ O_@@ OR_@@ OPERATOR | int getRe@@ main@@ der ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; }
MINIMUM_@@ CO@@ ST_@@ TO_@@ FILL_@@ GI@@ V@@ EN_@@ WEIGHT_@@ IN_@@ A_@@ BA@@ G | int Minimum@@ Cost ( int cost [ ] , int n , int W ) { vector < int > val , wt ; int size = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cost [ i ] != - 1 ) { val . push_back ( cost [ i ] ) ; wt . push_back ( i + 1 ) ; size ++ ; } } n = size ; int min_@@ cost [ n + 1 ] [ W + 1 ] ; for ( int i = 0 ; i <= W ; i ++ ) min_@@ cost [ 0 ] [ i ] = INF ; for ( int i = 1 ; i <= n ; i ++ ) min_@@ cost [ i ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= W ; j ++ ) { if ( wt [ i - 1 ] > j ) min_@@ cost [ i ] [ j ] = min_@@ cost [ i - 1 ] [ j ] ; else min_@@ cost [ i ] [ j ] = min ( min_@@ cost [ i - 1 ] [ j ] , min_@@ cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] ) ; } } return ( min_@@ cost [ n ] [ W ] == INF ) ? - 1 : min_@@ cost [ n ] [ W ] ; }
COUNT_@@ CHARAC@@ TER@@ S_@@ STRING_@@ DISTAN@@ CE_@@ ENGLI@@ SH_@@ ALPH@@ AB@@ E@@ TS_@@ 1 | int count@@ Pairs ( string str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 1 ; ( i + j ) < n && j <= MAX_@@ CHAR ; j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) result ++ ; return result ; }
A_@@ PRODUCT_@@ ARRAY_@@ PU@@ ZZ@@ LE | void product@@ Array ( int arr [ ] , int n ) { if ( n == 1 ) { cout << 0 ; return ; } int * left = new int [ sizeof ( int ) * n ] ; int * right = new int [ sizeof ( int ) * n ] ; int * prod = new int [ sizeof ( int ) * n ] ; int i , j ; left [ 0 ] = 1 ; right [ n - 1 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ] ; for ( j = n - 2 ; j >= 0 ; j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ] ; for ( i = 0 ; i < n ; i ++ ) prod [ i ] = left [ i ] * right [ i ] ; for ( i = 0 ; i < n ; i ++ ) cout << prod [ i ] << " ▁ " ; return ; }
FREQU@@ ENT_@@ ELEMENT_@@ ARRAY_@@ 1 | int most@@ Frequ@@ ent ( int arr [ ] , int n ) { unordered_map < int , int > hash ; for ( int i = 0 ; i < n ; i ++ ) hash [ arr [ i ] ] ++ ; int max_@@ count = 0 , res = - 1 ; for ( auto i : hash ) { if ( max_@@ count < i . second ) { res = i . first ; max_@@ count = i . second ; } } return res ; }
PRINT_@@ UNI@@ QUE_@@ ROWS | void print@@ Array ( int arr [ ] [ 5 ] , int row , int col ) { unordered_@@ set < string > u@@ set ; for ( int i = 0 ; i < row ; i ++ ) { string s = " " ; for ( int j = 0 ; j < col ; j ++ ) s += to_string ( arr [ i ] [ j ] ) ; if ( u@@ set . count ( s ) == 0 ) { u@@ set . insert ( s ) ; cout << s << endl ; } } }
COUNT_@@ 1@@ S_S@@ OR@@ TED_@@ BINARY_@@ ARRAY | int count@@ Ones ( bool arr [ ] , int low , int high ) { if ( high >= low ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ mid ] == 1 ) ) return mid + 1 ; if ( arr [ mid ] == 1 ) return count@@ Ones ( arr , ( mid + 1 ) , high ) ; return count@@ Ones ( arr , low , ( mid - 1 ) ) ; } return 0 ; }
POSSI@@ BLE_@@ MOVE@@ S_@@ KN@@ IGHT | int find@@ Possible@@ Moves ( int mat [ n ] [ m ] , int p , int q ) { int X [ 8 ] = { 2 , 1 , - 1 , - 2 , - 2 , - 1 , 1 , 2 } ; int Y [ 8 ] = { 1 , 2 , 2 , 1 , - 1 , - 2 , - 2 , - 1 } ; int count = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { int x = p + X [ i ] ; int y = q + Y [ i ] ; if ( x >= 0 && y >= 0 && x < n && y < m && mat [ x ] [ y ] == 0 ) count ++ ; } return count ; }
ROTA@@ TE_@@ MATRIX_@@ ELEMENTS | void rotate@@ matrix ( int m , int n , int mat [ R ] [ C ] ) { int row = 0 , col = 0 ; int prev , curr ; while ( row < m && col < n ) { if ( row + 1 == m || col + 1 == n ) break ; prev = mat [ row + 1 ] [ col ] ; for ( int i = col ; i < n ; i ++ ) { curr = mat [ row ] [ i ] ; mat [ row ] [ i ] = prev ; prev = curr ; } row ++ ; for ( int i = row ; i < m ; i ++ ) { curr = mat [ i ] [ n - 1 ] ; mat [ i ] [ n - 1 ] = prev ; prev = curr ; } n -- ; if ( row < m ) { for ( int i = n - 1 ; i >= col ; i -- ) { curr = mat [ m - 1 ] [ i ] ; mat [ m - 1 ] [ i ] = prev ; prev = curr ; } } m -- ; if ( col < n ) { for ( int i = m - 1 ; i >= row ; i -- ) { curr = mat [ i ] [ col ] ; mat [ i ] [ col ] = prev ; prev = curr ; } } col ++ ; } for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) cout << mat [ i ] [ j ] << " ▁ " ; cout << endl ; } }
FIND_@@ K@@ TH_@@ CHARACTER_@@ OF_@@ DE@@ CRYP@@ TED_@@ STRING | char encoded@@ Char ( string str , int k ) { string expand = " " ; string temp ; int freq = 0 ; for ( int i = 0 ; str [ i ] != ' \0' ; ) { temp = " " ; freq = 0 ; while ( str [ i ] >= ' a ' && str [ i ] <= ' z ' ) { temp . push_back ( str [ i ] ) ; i ++ ; } while ( str [ i ] >= '1' && str [ i ] <= '9' ) { freq = freq * 10 + str [ i ] - '0' ; i ++ ; } for ( int j = 1 ; j <= freq ; j ++ ) expand . append ( temp ) ; } if ( freq == 0 ) expand . append ( temp ) ; return expand [ k - 1 ] ; }
EF@@ FI@@ CI@@ ENT_@@ SEARCH_@@ IN_@@ AN_@@ ARRAY_@@ W@@ HER@@ E_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN_@@ AD@@ J@@ AC@@ ENT_@@ IS_@@ 1 | int search ( int arr [ ] , int n , int x ) { int i = 0 ; while ( i <= n - 1 ) { if ( arr [ i ] == x ) return i ; i += abs ( arr [ i ] - x ) ; } return - 1 ; }
MAXIMUM_@@ POSSI@@ BLE_@@ S@@ UM_@@ WINDOW_@@ ARRAY_@@ ELEMEN@@ TS_@@ WINDOW_@@ ARRAY_@@ UNIQUE | int return@@ Max@@ Sum ( int A [ ] , int B [ ] , int n ) { unordered_@@ set < int > mp ; int result = 0 ; int curr_@@ sum = 0 , curr_@@ begin = 0 ; for ( int i = 0 ; i < n ; ++ i ) { while ( mp . find ( A [ i ] ) != mp . end ( ) ) { mp . erase ( A [ curr_@@ begin ] ) ; curr_@@ sum -= B [ curr_@@ begin ] ; curr_@@ begin ++ ; } mp . insert ( A [ i ] ) ; curr_@@ sum += B [ i ] ; result = max ( result , curr_@@ sum ) ; } return result ; }
WRITE_@@ AN_@@ EF@@ FI@@ CI@@ ENT_@@ METHOD_@@ TO_@@ CHECK_@@ IF_@@ A_@@ NUMBER_@@ IS_@@ MULTIPLE_@@ OF_@@ 3 | int is@@ Multiple@@ Of@@ 3 ( int n ) { int od@@ d_@@ count = 0 ; int ev@@ en_@@ count = 0 ; if ( n < 0 ) n = - n ; if ( n == 0 ) return 1 ; if ( n == 1 ) return 0 ; while ( n ) { if ( n & 1 ) od@@ d_@@ count ++ ; if ( n & 2 ) ev@@ en_@@ count ++ ; n = n >> 2 ; } return is@@ Multiple@@ Of@@ 3 ( abs ( od@@ d_@@ count - ev@@ en_@@ count ) ) ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ I@@ AR@@ RI@@ _@@ AM@@ ONG_@@ ROTA@@ TIONS_@@ GI@@ V@@ EN_@@ ARRAY_@@ 1 | int max@@ Sum ( int arr [ ] , int n ) { int cum@@ _@@ sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) cum@@ _@@ sum += arr [ i ] ; int curr_@@ val = 0 ; for ( int i = 0 ; i < n ; i ++ ) curr_@@ val += i * arr [ i ] ; int res = curr_@@ val ; for ( int i = 1 ; i < n ; i ++ ) { int next_@@ val = curr_@@ val - ( cum@@ _@@ sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ; curr_@@ val = next_@@ val ; res = max ( res , next_@@ val ) ; } return res ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 34@@ _@@ ASSEMB@@ LY_@@ LINE_@@ SCH@@ ED@@ U@@ LING | int car@@ Assembly ( int a [ ] [ NUM_@@ ST@@ ATION ] , int t [ ] [ NUM_@@ ST@@ ATION ] , int * e , int * x ) { int T1 [ NUM_@@ ST@@ ATION ] , T2 [ NUM_@@ ST@@ ATION ] , i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_@@ ST@@ ATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_@@ ST@@ ATION - 1 ] + x [ 0 ] , T2 [ NUM_@@ ST@@ ATION - 1 ] + x [ 1 ] ) ; }
PRINT_@@ MATRI@@ X@@ _SP@@ IR@@ AL_@@ FORM_@@ START@@ ING_@@ POINT | void print@@ Sp@@ ir@@ al ( int mat [ ] [ MAX ] , int r , int c ) { int i , a = 0 , b = 2 ; int low_@@ row = ( 0 > a ) ? 0 : a ; int low_@@ column = ( 0 > b ) ? 0 : b - 1 ; int high_@@ row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ; int high_@@ column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ; while ( ( low_@@ row > 0 - r && low_@@ column > 0 - c ) ) { for ( i = low_@@ column + 1 ; i <= high_@@ column && i < c && low_@@ row >= 0 ; ++ i ) cout << mat [ low_@@ row ] [ i ] << " ▁ " ; low_@@ row -= 1 ; for ( i = low_@@ row + 2 ; i <= high_@@ row && i < r && high_@@ column < c ; ++ i ) cout << mat [ i ] [ high_@@ column ] << " ▁ " ; high_@@ column += 1 ; for ( i = high_@@ column - 2 ; i >= low_@@ column && i >= 0 && high_@@ row < r ; -- i ) cout << mat [ high_@@ row ] [ i ] << " ▁ " ; high_@@ row += 1 ; for ( i = high_@@ row - 2 ; i > low_@@ row && i >= 0 && low_@@ column >= 0 ; -- i ) cout << mat [ i ] [ low_@@ column ] << " ▁ " ; low_@@ column -= 1 ; } cout << endl ; }
M@@ ID_@@ POINT_@@ CI@@ R@@ CLE_@@ DRAWIN@@ G_@@ ALGORITH@@ M | void mid@@ Point@@ Circle@@ Draw ( int x_@@ centre , int y_@@ centre , int r ) { int x = r , y = 0 ; cout << " ( " << x + x_@@ centre << " , ▁ " << y + y_@@ centre << " ) ▁ " ; if ( r > 0 ) { cout << " ( " << x + x_@@ centre << " , ▁ " << - y + y_@@ centre << " ) ▁ " ; cout << " ( " << y + x_@@ centre << " , ▁ " << x + y_@@ centre << " ) ▁ " ; cout << " ( " << - y + x_@@ centre << " , ▁ " << x + y_@@ centre << " ) \n " ; } int P = 1 - r ; while ( x > y ) { y ++ ; if ( P <= 0 ) P = P + 2 * y + 1 ; else { x -- ; P = P + 2 * y - 2 * x + 1 ; } if ( x < y ) break ; cout << " ( " << x + x_@@ centre << " , ▁ " << y + y_@@ centre << " ) ▁ " ; cout << " ( " << - x + x_@@ centre << " , ▁ " << y + y_@@ centre << " ) ▁ " ; cout << " ( " << x + x_@@ centre << " , ▁ " << - y + y_@@ centre << " ) ▁ " ; cout << " ( " << - x + x_@@ centre << " , ▁ " << - y + y_@@ centre << " ) \n " ; if ( x != y ) { cout << " ( " << y + x_@@ centre << " , ▁ " << x + y_@@ centre << " ) ▁ " ; cout << " ( " << - y + x_@@ centre << " , ▁ " << x + y_@@ centre << " ) ▁ " ; cout << " ( " << y + x_@@ centre << " , ▁ " << - x + y_@@ centre << " ) ▁ " ; cout << " ( " << - y + x_@@ centre << " , ▁ " << - x + y_@@ centre << " ) \n " ; } } }
SM@@ ALLE@@ ST_@@ ELEMENT_@@ REPE@@ ATED_@@ EXAC@@ TL@@ Y_@@ K_@@ TIME@@ S_@@ NOT_@@ LIMI@@ TE@@ D_S@@ M@@ ALL_@@ RANGE | int smalle@@ st@@ K@@ Freq ( int a [ ] , int n , int k ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ a [ i ] ] ++ ; int res = INT_MAX ; for ( auto it = m . begin ( ) ; it != m . end ( ) ; ++ it ) if ( it -> second == k ) res = min ( res , it -> first ) ; return ( res != INT_MAX ) ? res : - 1 ; }
MINIMUM_@@ X@@ OR_@@ VALUE_@@ PAIR | int min@@ XOR ( int arr [ ] , int n ) { int min_@@ xor = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) min_@@ xor = min ( min_@@ xor , arr [ i ] ^ arr [ j ] ) ; return min_@@ xor ; }
MIRR@@ OR_@@ CHARAC@@ TER@@ S_@@ STRING | string compute ( string str , int n ) { string reverse@@ Alphabet = " zy@@ x@@ w@@ v@@ ut@@ sr@@ qp@@ on@@ ml@@ k@@ ji@@ hg@@ fed@@ cb@@ a " ; int l = str . length ( ) ; for ( int i = n ; i < l ; i ++ ) str [ i ] = reverse@@ Alphabet [ str [ i ] - ' a ' ] ; return str ; }
PROGRAM_@@ CHECK_@@ PL@@ US_@@ PER@@ F@@ ECT_@@ NUMBER | bool check@@ plu@@ sper@@ f@@ ect ( int x ) { int temp = x ; int n = 0 ; while ( x != 0 ) { x /= 10 ; n ++ ; } x = temp ; int sum = 0 ; while ( x != 0 ) { sum += pow ( x % 10 , n ) ; x /= 10 ; } return ( sum == temp ) ; }
AR@@ C_@@ LENGTH_@@ ANGLE | double arc@@ Length ( double diameter , double angle ) { double pi = 2@@ 2.0 / 7.0 ; double arc ; if ( angle >= 360 ) { cout << " Angle ▁ cannot " , " ▁ be ▁ formed " ; return 0 ; } else { arc = ( pi * diameter ) * ( angle / 36@@ 0.0 ) ; return arc ; } }
FIND_@@ LAST_@@ INDEX_@@ CHARACTER_@@ STRING | int find@@ Last@@ Index ( string & str , char x ) { int index = - 1 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) if ( str [ i ] == x ) index = i ; return index ; }
COUNT_@@ TRAI@@ LING_@@ ZER@@ O@@ ES_@@ FAC@@ TOR@@ I@@ AL_@@ NUMBER | int find@@ Trailing@@ Zeros ( int n ) { int count = 0 ; for ( int i = 5 ; n / i >= 1 ; i *= 5 ) count += n / i ; return count ; }
ROTA@@ TE_@@ MATRIX_@@ 18@@ 0_@@ DEGRE@@ E | void rotate@@ Matrix ( int mat [ ] [ N ] ) { for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = N - 1 ; j >= 0 ; j -- ) printf ( " % d ▁ " , mat [ i ] [ j ] ) ; printf ( " \n " ) ; } }
S@@ UM_@@ FI@@ BON@@ ACC@@ I_@@ NUMB@@ ERS | int calculate@@ Sum ( int n ) { if ( n <= 0 ) return 0 ; int fi@@ bo [ n + 1 ] ; fi@@ bo [ 0 ] = 0 , fi@@ bo [ 1 ] = 1 ; int sum = fi@@ bo [ 0 ] + fi@@ bo [ 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) { fi@@ bo [ i ] = fi@@ bo [ i - 1 ] + fi@@ bo [ i - 2 ] ; sum += fi@@ bo [ i ] ; } return sum ; }
LAR@@ GE@@ ST_@@ LE@@ XI@@ CO@@ GRAP@@ HI@@ C_@@ ARRAY_@@ WITH_@@ AT_@@ MO@@ ST_@@ K_@@ CON@@ SEC@@ UTI@@ VE_@@ SWAP@@ S | void K@@ Swap@@ Maximum ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - 1 && k > 0 ; ++ i ) { int index@@ Position = i ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( k <= j - i ) break ; if ( arr [ j ] > arr [ index@@ Position ] ) index@@ Position = j ; } for ( int j = index@@ Position ; j > i ; -- j ) swap ( arr [ j ] , arr [ j - 1 ] ) ; k -= index@@ Position - i ; } }
FIND_@@ WHE@@ THER_@@ GI@@ V@@ EN_@@ INTEGER_@@ POWER_@@ 3_@@ NOT | bool check ( int n ) { return 11@@ 6@@ 22@@ 614@@ 67 % n == 0 ; }
FIND_@@ THE_@@ TWO_@@ REPE@@ ATING_@@ ELEMEN@@ TS_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY | void print@@ Repe@@ ating ( int arr [ ] , int size ) { int i , j ; printf ( " ▁ Repe@@ ating ▁ elements ▁ are ▁ " ) ; for ( i = 0 ; i < size ; i ++ ) for ( j = i + 1 ; j < size ; j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << " ▁ " ; }
C_@@ PROGRAM_@@ FIND_@@ AREA_@@ TRI@@ ANGLE | float find@@ Area ( float a , float b , float c ) { if ( a < 0 || b < 0 || c < 0 || ( a + b <= c ) || a + c <= b || b + c <= a ) { cout << " Not ▁ a ▁ valid ▁ triang@@ len " ; exit ( 0 ) ; } float s = ( a + b + c ) / 2 ; return sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
GI@@ V@@ EN_@@ LARGE_@@ NUMBER_@@ CHECK@@ _SUB@@ SEQU@@ ENCE_@@ DIG@@ IT@@ S_@@ DI@@ VISI@@ BLE_@@ 8_@@ 1 | bool isSub@@ Seq@@ Di@@ visible ( string str ) { int n = str . length ( ) ; int dp [ n + 1 ] [ 10 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; int arr [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] - '0' ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ arr [ i ] % 8 ] = 1 ; for ( int j = 0 ; j < 8 ; j ++ ) { if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ; if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( dp [ i ] [ 0 ] == 1 ) return true ; } return false ; }
DELETE_@@ ARRAY_@@ ELEMEN@@ TS_@@ WHI@@ CH_@@ ARE_@@ SM@@ ALL@@ ER_@@ TH@@ AN_@@ NEXT_@@ OR_@@ BE@@ COM@@ E_@@ SMAL@@ LER | void delete@@ Elements ( int arr [ ] , int n , int k ) { stack < int > s ; s . push ( arr [ 0 ] ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && count < k ) { s . pop ( ) ; count ++ ; } s . push ( arr [ i ] ) ; } int m = s . size ( ) ; vector < int > v ( m ) ; while ( ! s . empty ( ) ) { v [ -- m ] = s . top ( ) ; s . pop ( ) ; } for ( auto x : v ) cout << x << " ▁ " ; cout << endl ; }
MINIMUM_@@ LENGTH@@ _SUB@@ ARRA@@ Y_S@@ UM_@@ GREATER_@@ GI@@ V@@ EN_@@ VALUE | int smalle@@ st@@ Sub@@ With@@ Sum ( int arr [ ] , int n , int x ) { int curr_@@ sum = 0 , min_@@ len = n + 1 ; int start = 0 , end = 0 ; while ( end < n ) { while ( curr_@@ sum <= x && end < n ) curr_@@ sum += arr [ end ++ ] ; while ( curr_@@ sum > x && start < n ) { if ( end - start < min_@@ len ) min_@@ len = end - start ; curr_@@ sum -= arr [ start ++ ] ; } } return min_@@ len ; }
FIND_@@ PAIR@@ S_IN_@@ ARRAY_@@ WHO@@ SE_@@ SUM@@ S_@@ ALREADY_@@ EXI@@ ST_@@ IN_@@ ARRAY_@@ 1 | void find@@ Pair ( int arr [ ] , int n ) { unordered_@@ set < int > s ; for ( int i = 0 ; i < n ; i ++ ) s . insert ( arr [ i ] ) ; bool found = false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( ) ) { cout << arr [ i ] << " ▁ " << arr [ j ] << endl ; found = true ; } } } if ( found == false ) cout << " Not ▁ exist " << endl ; }
COUNT_@@ ARI@@ TH@@ ME@@ TIC_@@ PROG@@ RES@@ SION@@ _SUB@@ SEQU@@ EN@@ CES_@@ ARRAY | int nu@@ mo@@ f@@ AP ( int a [ ] , int n ) { int min@@ arr = INT_MAX , max@@ arr = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { min@@ arr = min ( min@@ arr , a [ i ] ) ; max@@ arr = max ( max@@ arr , a [ i ] ) ; } int dp [ n ] , sum [ MAX ] ; int ans = n + 1 ; for ( int d = ( min@@ arr - max@@ arr ) ; d <= ( max@@ arr - min@@ arr ) ; d ++ ) { memset ( sum , 0 , sizeof sum ) ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = 1 ; if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ; ans += dp [ i ] - 1 ; sum [ a [ i ] ] += dp [ i ] ; } } return ans ; }
COUNT_@@ NUMB@@ ERS_@@ TH@@ AT_@@ DONT_@@ CONTA@@ IN_@@ 3 | int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int ms@@ d = n / po ; if ( ms@@ d != 3 ) return count ( ms@@ d ) * count ( po - 1 ) + count ( ms@@ d ) + count ( n % po ) ; else return count ( ms@@ d * po - 1 ) ; }
PROGRAM_@@ TO_@@ FIND_@@ TRANSP@@ OS@@ E_@@ OF_@@ A_@@ MATRIX_@@ 2 | void transpose ( int A [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = i + 1 ; j < N ; j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ; }
S@@ UM_@@ DIAG@@ ON@@ AL@@ S@@ _SP@@ IR@@ AL_@@ OD@@ D_@@ ORDER@@ _S@@ QU@@ ARE_@@ MATRIX | int spir@@ al@@ Di@@ a@@ Sum ( int n ) { if ( n == 1 ) return 1 ; return ( 4 * n * n - 6 * n + 6 + spir@@ al@@ Di@@ a@@ Sum ( n - 2 ) ) ; }
COUNT_@@ IN@@ VERSION@@ S_@@ OF@@ _SIZE_@@ THRE@@ E_@@ IN_@@ A_@@ GI@@ VE_@@ ARRAY | int getIn@@ v@@ Count ( int arr [ ] , int n ) { int inv@@ count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ j ] > arr [ k ] ) inv@@ count ++ ; } } } } return inv@@ count ; }
FIN@@ D_S@@ UM_@@ NODE@@ S_@@ GI@@ V@@ EN_@@ PER@@ F@@ ECT_@@ BINARY_@@ TREE | int sum@@ Nodes ( int l ) { int leaf@@ Node@@ Count = pow ( 2 , l - 1 ) ; vector < int > vec [ l ] ; for ( int i = 1 ; i <= leaf@@ Node@@ Count ; i ++ ) vec [ l - 1 ] . push_back ( i ) ; for ( int i = l - 2 ; i >= 0 ; i -- ) { int k = 0 ; while ( k < vec [ i + 1 ] . size ( ) - 1 ) { vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] ) ; k += 2 ; } } int sum = 0 ; for ( int i = 0 ; i < l ; i ++ ) { for ( int j = 0 ; j < vec [ i ] . size ( ) ; j ++ ) sum += vec [ i ] [ j ] ; } return sum ; }
S@@ UM_@@ OF_@@ ALL_@@ PRO@@ PER_@@ DI@@ VI@@ SOR@@ S_@@ OF_@@ A_@@ N@@ ATUR@@ AL_@@ NUMBER | int div@@ Sum ( int num ) { int result = 0 ; for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == ( num / i ) ) result += i ; else result += ( i + num / i ) ; } } return ( result + 1 ) ; }
FIND_@@ A_@@ TR@@ IP@@ LET_@@ TH@@ AT_@@ S@@ UM_@@ TO_@@ A_@@ GI@@ V@@ EN_@@ VALUE_@@ 2 | bool find@@ 3@@ Numbers ( int A [ ] , int arr_@@ size , int sum ) { for ( int i = 0 ; i < arr_@@ size - 2 ; i ++ ) { unordered_@@ set < int > s ; int curr_@@ sum = sum - A [ i ] ; for ( int j = i + 1 ; j < arr_@@ size ; j ++ ) { if ( s . find ( curr_@@ sum - A [ j ] ) != s . end ( ) ) { printf ( " Trip@@ let ▁ is ▁ % d , ▁ % d , ▁ % d " , A [ i ] , A [ j ] , curr_@@ sum - A [ j ] ) ; return true ; } s . insert ( A [ j ] ) ; } } return false ; }
N@@ TH_@@ EV@@ EN_@@ LENGTH_@@ PA@@ LIN@@ DRO@@ ME | string even@@ length ( string n ) { string res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; -- j ) res += n [ j ] ; return res ; }
FIN@@ DING_@@ POWER_@@ PRI@@ ME_@@ NUMBER_@@ P_@@ N | int Power@@ OFP@@ IN@@ n@@ factorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) { ans += n / temp ; temp = temp * p ; } return ans ; }
MINIMUM_@@ CO@@ ST_@@ MAKE_@@ LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQU@@ ENCE_@@ LENGTH_@@ K | int solve ( char X [ ] , char Y [ ] , int l , int r , int k , int dp [ ] [ N ] [ N ] ) { if ( ! k ) return 0 ; if ( l < 0 | r < 0 ) return 1e@@ 9 ; if ( dp [ l ] [ r ] [ k ] != - 1 ) return dp [ l ] [ r ] [ k ] ; int cost = ( X [ l ] - ' a ' ) ^ ( Y [ r ] - ' a ' ) ; return dp [ l ] [ r ] [ k ] = min ( { cost + solve ( X , Y , l - 1 , r - 1 , k - 1 , dp ) , solve ( X , Y , l - 1 , r , k , dp ) , solve ( X , Y , l , r - 1 , k , dp ) } ) ; }
PRINT_@@ STRING@@ _SPECI@@ FI@@ ED_@@ CHARACTER_@@ OC@@ CUR@@ RED_@@ GI@@ V@@ EN_@@ NO_@@ TIMES | void print@@ String ( string str , char ch , int count ) { int oc@@ c = 0 , i ; if ( count == 0 ) { cout << str ; return ; } for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == ch ) oc@@ c ++ ; if ( oc@@ c == count ) break ; } if ( i < str . length ( ) - 1 ) cout << str . substr ( i + 1 , str . length ( ) - ( i + 1 ) ) ; else cout << " Empty ▁ string " ; }
SORT_@@ 1_@@ N@@ _SW@@ APP@@ ING_@@ AD@@ J@@ AC@@ ENT_@@ ELEMENTS | bool sorted@@ After@@ Swap ( int A [ ] , bool B [ ] , int n ) { int i , j ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( B [ i ] ) { j = i ; while ( B [ j ] ) j ++ ; sort ( A + i , A + 1 + j ) ; i = j ; } } for ( i = 0 ; i < n ; i ++ ) { if ( A [ i ] != i + 1 ) return false ; } return true ; }
GENERATE_@@ PYTH@@ AG@@ O@@ RE@@ AN_@@ TR@@ IP@@ LET@@ S | void py@@ th@@ ag@@ ore@@ an@@ Trip@@ lets ( int limit ) { int a , b , c = 0 ; int m = 2 ; while ( c < limit ) { for ( int n = 1 ; n < m ; ++ n ) { a = m * m - n * n ; b = 2 * m * n ; c = m * m + n * n ; if ( c > limit ) break ; printf ( " % d ▁ % d ▁ % d \n " , a , b , c ) ; } m ++ ; } }
COUNT_@@ EV@@ EN_@@ LENGTH_@@ BIN@@ AR@@ Y@@ _SEQU@@ EN@@ CES_@@ WITH@@ _S@@ AME_@@ S@@ UM_@@ OF_@@ FIRST_@@ AND@@ _SECON@@ D_@@ HALF_@@ BITS | int count@@ Seq ( int n , int diff ) { if ( abs ( diff ) > n ) return 0 ; if ( n == 1 && diff == 0 ) return 2 ; if ( n == 1 && abs ( diff ) == 1 ) return 1 ; int res = count@@ Seq ( n - 1 , diff + 1 ) + 2 * count@@ Seq ( n - 1 , diff ) + count@@ Seq ( n - 1 , diff - 1 ) ; return res ; }
POSSI@@ BLE_@@ FORM_@@ TRIANGLE_@@ ARRAY_@@ VALUES | bool is@@ Possible@@ Triangle ( int arr [ ] , int N ) { if ( N < 3 ) return false ; sort ( arr , arr + N ) ; for ( int i = 0 ; i < N - 2 ; i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ; }
PRINT_@@ ARRAY_@@ STRING@@ S_S@@ OR@@ TED_@@ ORDER_@@ WITH@@ OUT_@@ COPY@@ ING_@@ ONE_@@ STRING_@@ AN@@ OTHER | void print@@ In@@ Sorted@@ Order ( string arr [ ] , int n ) { int index [ n ] ; int i , j , min ; for ( i = 0 ; i < n ; i ++ ) index [ i ] = i ; for ( i = 0 ; i < n - 1 ; i ++ ) { min = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ index [ min ] ] . compare ( arr [ index [ j ] ] ) > 0 ) min = j ; } if ( min != i ) { int temp = index [ min ] ; index [ min ] = index [ i ] ; index [ i ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) cout << arr [ index [ i ] ] << " ▁ " ; }
GAME_@@ REPL@@ AC@@ ING_@@ ARRAY_@@ ELEMENTS | int play@@ Game ( int arr [ ] , int n ) { unordered_@@ set < int > hash ; for ( int i = 0 ; i < n ; i ++ ) hash . insert ( arr [ i ] ) ; return ( hash . size ( ) % 2 == 0 ? 1 : 2 ) ; }
BASIC_@@ AND_@@ EXTENDED_@@ EUC@@ LI@@ DE@@ AN_@@ ALGORITH@@ MS | int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }
SORT_@@ ARRAY_@@ WAVE_@@ FORM_@@ 2_1 | void sort@@ In@@ Wave ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i += 2 ) { if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [ i ] , & arr [ i - 1 ] ) ; if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & arr [ i ] , & arr [ i + 1 ] ) ; } }
MAX@@ IM@@ UM@@ _SUB@@ ARRA@@ Y_S@@ UM_@@ USING_@@ PRE@@ FIX@@ _S@@ UM | int maximum@@ Sum@@ Sub@@ array ( int arr [ ] , int n ) { int min_@@ prefix_@@ sum = 0 ; int res = numeric_limits < int > :: min ( ) ; int prefix_@@ sum [ n ] ; prefix_@@ sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefix_@@ sum [ i ] = prefix_@@ sum [ i - 1 ] + arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { res = max ( res , prefix_@@ sum [ i ] - min_@@ prefix_@@ sum ) ; min_@@ prefix_@@ sum = min ( min_@@ prefix_@@ sum , prefix_@@ sum [ i ] ) ; } return res ; }
STRING_@@ CONTAIN@@ ING_@@ FIRST_@@ LET@@ TER_@@ EVER@@ Y_@@ WORD_@@ GI@@ V@@ EN_@@ STRING@@ _SPAC@@ ES | string first@@ Letter@@ Word ( string str ) { string result = " " ; bool v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == ' ▁ ' ) v = true ; else if ( str [ i ] != ' ▁ ' && v == true ) { result . push_back ( str [ i ] ) ; v = false ; } } return result ; }
S@@ UM_@@ PAIR@@ WI@@ SE_@@ PRODUC@@ TS_@@ 1 | long long int find@@ Sum ( int n ) { long long int multi@@ Terms = n * ( n + 1 ) / 2 ; long long int sum = multi@@ Terms ; for ( int i = 2 ; i <= n ; i ++ ) { multi@@ Terms = multi@@ Terms - ( i - 1 ) ; sum = sum + multi@@ Terms * i ; } return sum ; }
CLU@@ STER@@ ING@@ PARTI@@ TION@@ ING_@@ AN_@@ ARRAY@@ _SU@@ CH_@@ TH@@ AT_@@ S@@ UM_@@ OF@@ _S@@ QU@@ ARE_@@ DIFF@@ ER@@ EN@@ CES_@@ IS_@@ MIN@@ IM@@ UM@@ _1 | int min@@ Cost ( int a [ ] , int n , int k ) { int dp [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= k ; j ++ ) dp [ i ] [ j ] = inf ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= k ; j ++ ) for ( int m = i - 1 ; m >= 0 ; m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ; return dp [ n ] [ k ] ; }
LE@@ IB@@ NI@@ Z_@@ HAR@@ MON@@ IC_@@ TRI@@ ANGLE | void Le@@ ib@@ n@@ iz@@ Harmon@@ ic@@ Triangle ( int n ) { int C [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) cout << "1 / " << i * C [ i - 1 ] [ j - 1 ] << " ▁ " ; cout << endl ; } }
CHECK_@@ WHE@@ THER@@ _SECON@@ D_@@ STRING_@@ CAN_@@ FOR@@ MED_@@ FIRST_@@ STRING_@@ USING_@@ COUNT_@@ ARRAY | bool can@@ Make@@ Str@@ 2 ( string str1 , string str2 ) { int count [ MAX ] = { 0 } ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count [ str1 [ i ] ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { if ( count [ str2 [ i ] ] == 0 ) return false ; count [ str2 [ i ] ] -- ; } return true ; }
S@@ UM_@@ MINIMUM_@@ MAXIMUM_@@ ELEMEN@@ TS@@ _SUB@@ ARRAY@@ S@@ _SIZE_@@ K | int Sum@@ Of@@ K@@ sub@@ Array ( int arr [ ] , int n , int k ) { int sum = 0 ; deque < int > S ( k ) , G ( k ) ; int i = 0 ; for ( i = 0 ; i < k ; i ++ ) { while ( ( ! S . empty ( ) ) && arr [ S . back ( ) ] >= arr [ i ] ) S . pop_back ( ) ; while ( ( ! G . empty ( ) ) && arr [ G . back ( ) ] <= arr [ i ] ) G . pop_back ( ) ; G . push_back ( i ) ; S . push_back ( i ) ; } for ( ; i < n ; i ++ ) { sum += arr [ S . front ( ) ] + arr [ G . front ( ) ] ; while ( ! S . empty ( ) && S . front ( ) <= i - k ) S . pop_front ( ) ; while ( ! G . empty ( ) && G . front ( ) <= i - k ) G . pop_front ( ) ; while ( ( ! S . empty ( ) ) && arr [ S . back ( ) ] >= arr [ i ] ) S . pop_back ( ) ; while ( ( ! G . empty ( ) ) && arr [ G . back ( ) ] <= arr [ i ] ) G . pop_back ( ) ; G . push_back ( i ) ; S . push_back ( i ) ; } sum += arr [ S . front ( ) ] + arr [ G . front ( ) ] ; return sum ; }
LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQUENCE | int l@@ cs ( char * X , char * Y , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + l@@ cs ( X , Y , m - 1 , n - 1 ) ; else return max ( l@@ cs ( X , Y , m , n - 1 ) , l@@ cs ( X , Y , m - 1 , n ) ) ; }
MIN@@ IM@@ UM@@ _S@@ UM_@@ ABSOL@@ UTE_@@ DIFF@@ ER@@ ENCE_@@ PAIR@@ S_@@ TWO_@@ ARRAY@@ S | long long int find@@ Min@@ Sum ( int a [ ] , int b [ ] , int n ) { sort ( a , a + n ) ; sort ( b , b + n ) ; long long int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + abs ( a [ i ] - b [ i ] ) ; return sum ; }
COUNT_@@ DISTIN@@ CT_@@ NON_@@ NEGATIVE_@@ PAIR@@ S_@@ X_@@ Y_S@@ ATI@@ SF@@ Y_@@ IN@@ EQU@@ ALI@@ TY_@@ X@@ X_@@ YY_@@ N_@@ 2 | int count@@ Solutions ( int n ) { int res = 0 ; for ( int x = 0 ; x * x < n ; x ++ ) for ( int y = 0 ; x * x + y * y < n ; y ++ ) res ++ ; return res ; }
FIND_@@ NUMBER_@@ TRANS@@ FORMA@@ TION_@@ MAKE_@@ TWO_@@ MATRIX_@@ EQUAL | int count@@ Ops ( int A [ ] [ MAX ] , int B [ ] [ MAX ] , int m , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = 1 ; j < m ; j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) result += abs ( A [ i ] [ 0 ] ) ; for ( int j = 0 ; j < m ; j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ; return ( result ) ; }
EF@@ FI@@ CI@@ EN@@ TL@@ Y_@@ FIND_@@ FIRST_@@ REPE@@ ATED_@@ CHARACTER_@@ STRING_@@ WITH@@ OUT_@@ USING_@@ ADDI@@ TIONAL_@@ DATA_@@ STRUC@@ TURE_@@ ONE_@@ TRA@@ VERS@@ AL | int First@@ Repe@@ ated ( string str ) { int checker = 0 ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { int val = ( str [ i ] - ' a ' ) ; if ( ( checker & ( 1 << val ) ) > 0 ) return i ; checker |= ( 1 << val ) ; } return - 1 ; }
MAXIMUM_@@ UNI@@ QUE_@@ ELEMENT_@@ EVER@@ Y@@ _SUB@@ ARRAY@@ _SIZE_@@ K | void find_@@ max ( int A [ ] , int N , int K ) { map < int , int > Count ; for ( int i = 0 ; i < K - 1 ; i ++ ) Count [ A [ i ] ] ++ ; set < int > My@@ set ; for ( auto x : Count ) if ( x . second == 1 ) My@@ set . insert ( x . first ) ; for ( int i = K - 1 ; i < N ; i ++ ) { Count [ A [ i ] ] ++ ; if ( Count [ A [ i ] ] == 1 ) My@@ set . insert ( A [ i ] ) ; else My@@ set . erase ( A [ i ] ) ; if ( My@@ set . size ( ) == 0 ) printf ( " Nothing \n " ) ; else printf ( " % d \n " , * My@@ set . rbegin ( ) ) ; int x = A [ i - K + 1 ] ; Count [ x ] -- ; if ( Count [ x ] == 1 ) My@@ set . insert ( x ) ; if ( Count [ x ] == 0 ) My@@ set . erase ( x ) ; } }
MINIMUM_@@ CO@@ ST@@ _S@@ ORT_@@ MATRIX_@@ NUMB@@ ERS_@@ 0_@@ N@@ 2_1 | int calculate@@ Energy ( int mat [ SIZE ] [ SIZE ] , int n ) { int i_@@ des , j_@@ des , q ; int tot_@@ energy = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { q = mat [ i ] [ j ] / n ; i_@@ des = q ; j_@@ des = mat [ i ] [ j ] - ( n * q ) ; tot_@@ energy += abs ( i_@@ des - i ) + abs ( j_@@ des - j ) ; } } return tot_@@ energy ; }
LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ STRING | int LC@@ Sub@@ Str ( char * X , char * Y , int m , int n ) { int LC@@ Su@@ ff [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LC@@ Su@@ ff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) { LC@@ Su@@ ff [ i ] [ j ] = LC@@ Su@@ ff [ i - 1 ] [ j - 1 ] + 1 ; result = max ( result , LC@@ Su@@ ff [ i ] [ j ] ) ; } else LC@@ Su@@ ff [ i ] [ j ] = 0 ; } } return result ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ BIT@@ ON@@ IC@@ _SUB@@ ARRAY | int max@@ Sum@@ Bit@@ on@@ ic@@ Sub@@ Arr ( int arr [ ] , int n ) { int m@@ sis [ n ] , ms@@ ds [ n ] ; int max_@@ sum = INT_@@ MIN ; m@@ sis [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) m@@ sis [ i ] = m@@ sis [ i - 1 ] + arr [ i ] ; else m@@ sis [ i ] = arr [ i ] ; ms@@ ds [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) if ( arr [ i ] > arr [ i + 1 ] ) ms@@ ds [ i ] = ms@@ ds [ i + 1 ] + arr [ i ] ; else ms@@ ds [ i ] = arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) if ( max_@@ sum < ( m@@ sis [ i ] + ms@@ ds [ i ] - arr [ i ] ) ) max_@@ sum = m@@ sis [ i ] + ms@@ ds [ i ] - arr [ i ] ; return max_@@ sum ; }
NEW@@ MAN_@@ CON@@ WAY@@ _SEQU@@ ENCE | int sequence ( int n ) { if ( n == 1 || n == 2 ) return 1 ; else return sequence ( sequence ( n - 1 ) ) + sequence ( n - sequence ( n - 1 ) ) ; }
PRINT_@@ TR@@ IP@@ LET@@ S_S@@ OR@@ TED_@@ ARRAY_@@ FORM_@@ AP | void print@@ All@@ AP@@ Trip@@ lets ( int arr [ ] , int n ) { unordered_@@ set < int > s ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int diff = arr [ j ] - arr [ i ] ; if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cout << arr [ i ] - diff << " ▁ " << arr [ i ] << " ▁ " << arr [ j ] << endl ; } s . insert ( arr [ i ] ) ; } }
QUER@@ I@@ ES_@@ COUN@@ TS_@@ ARRAY_@@ ELEMEN@@ TS_@@ VALU@@ ES_@@ GI@@ V@@ EN_@@ RANGE | int count@@ InRange ( int arr [ ] , int n , int x , int y ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ; } return count ; }
HIGH@@ WA@@ Y_@@ B@@ IL@@ L@@ BOARD_@@ PRO@@ BLE@@ M | int max@@ Re@@ venue ( int m , int x [ ] , int re@@ venue [ ] , int n , int t ) { int max@@ Rev [ m + 1 ] ; memset ( max@@ Rev , 0 , sizeof ( max@@ Rev ) ) ; int nx@@ tbb = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( nx@@ tbb < n ) { if ( x [ nx@@ tbb ] != i ) max@@ Rev [ i ] = max@@ Rev [ i - 1 ] ; else { if ( i <= t ) max@@ Rev [ i ] = max ( max@@ Rev [ i - 1 ] , re@@ venue [ nx@@ tbb ] ) ; else max@@ Rev [ i ] = max ( max@@ Rev [ i - t - 1 ] + re@@ venue [ nx@@ tbb ] , max@@ Rev [ i - 1 ] ) ; nx@@ tbb ++ ; } } else max@@ Rev [ i ] = max@@ Rev [ i - 1 ] ; } return max@@ Rev [ m ] ; }
CONSTRUC@@ T_@@ GRAPH_@@ GI@@ V@@ EN_@@ DEGRE@@ ES_@@ VER@@ TIC@@ ES | void print@@ Mat ( int deg@@ seq [ ] , int n ) { int mat [ n ] [ n ] ; memset ( mat , 0 , sizeof ( mat ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( deg@@ seq [ i ] > 0 && deg@@ seq [ j ] > 0 ) { deg@@ seq [ i ] -- ; deg@@ seq [ j ] -- ; mat [ i ] [ j ] = 1 ; mat [ j ] [ i ] = 1 ; } } } cout << " \n " << setw ( 3 ) << " ▁ ▁ ▁ ▁ ▁ " ; for ( int i = 0 ; i < n ; i ++ ) cout << setw ( 3 ) << " ( " << i << " ) " ; cout << " \n \n " ; for ( int i = 0 ; i < n ; i ++ ) { cout << setw ( 4 ) << " ( " << i << " ) " ; for ( int j = 0 ; j < n ; j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ] ; cout << " \n " ; } }
DETE@@ CT_@@ IF_@@ TWO_@@ INTEG@@ ERS_@@ HAVE_@@ OP@@ POSI@@ TE_@@ SIGN@@ S | bool opposi@@ te@@ Sig@@ ns ( int x , int y ) { return ( ( x ^ y ) < 0 ) ; }
TRIANG@@ ULAR_@@ NUMB@@ ERS_@@ 1 | bool is@@ Tri@@ angular ( int num ) { if ( num < 0 ) return false ; int c = ( - 2 * num ) ; int b = 1 , a = 1 ; int d = ( b * b ) - ( 4 * a * c ) ; if ( d < 0 ) return false ; float roo@@ t1 = ( - b + sqrt ( d ) ) / ( 2 * a ) ; float root@@ 2 = ( - b - sqrt ( d ) ) / ( 2 * a ) ; if ( roo@@ t1 > 0 && floor ( roo@@ t1 ) == roo@@ t1 ) return true ; if ( root@@ 2 > 0 && floor ( root@@ 2 ) == root@@ 2 ) return true ; return false ; }
FIND_@@ WHE@@ THER_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ IS_@@ A_@@ POWER_@@ OF_@@ 4_@@ OR_@@ NOT | public : bool is@@ PowerOf@@ Four ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; }
LAST_@@ NON_@@ ZERO_@@ DIG@@ IT_@@ FAC@@ TOR@@ I@@ AL | int last@@ Non@@ 0@@ Digit ( int n ) { if ( n < 10 ) return dig [ n ] ; if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * last@@ Non@@ 0@@ Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ; else return ( 4 * last@@ Non@@ 0@@ Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ; }
SORT_@@ STRING_@@ AC@@ COR@@ DING_@@ ORDER_@@ DEFINED_@@ AN@@ OTHER_@@ STRING | void sort@@ By@@ Pattern ( string & str , string pat ) { int count [ MAX_@@ CHAR ] = { 0 } ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] - ' a ' ] ++ ; int index = 0 ; for ( int i = 0 ; i < pat . length ( ) ; i ++ ) for ( int j = 0 ; j < count [ pat [ i ] - ' a ' ] ; j ++ ) str [ index ++ ] = pat [ i ] ; }
NUMBER_@@ VISI@@ BLE_@@ BOX@@ ES_@@ PUT@@ TING_@@ ONE_@@ IN@@ SIDE_@@ AN@@ OTHER | int minimum@@ Box ( int arr [ ] , int n ) { queue < int > q ; sort ( arr , arr + n ) ; q . push ( arr [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { int now = q . front ( ) ; if ( arr [ i ] >= 2 * now ) q . pop ( ) ; q . push ( arr [ i ] ) ; } return q . size ( ) ; }
SEARCH_@@ INSERT_@@ AND_@@ DELETE_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY | int binary@@ Search ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binary@@ Search ( arr , ( mid + 1 ) , high , key ) ; return binary@@ Search ( arr , low , ( mid - 1 ) , key ) ; }
FIND_@@ THE_@@ TWO_@@ REPE@@ ATING_@@ ELEMEN@@ TS_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 3 | void print@@ Repe@@ ating ( int arr [ ] , int size ) { int i ; cout << " The ▁ repe@@ ating ▁ elements ▁ are " ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ] ; else cout << " ▁ " << abs ( arr [ i ] ) << " ▁ " ; } }
COUNT_@@ POSSI@@ BLE_@@ GROUP@@ S@@ _SIZE_@@ 2_@@ 3@@ _S@@ UM_@@ MULTIPLE_@@ 3 | int find@@ groups ( int arr [ ] , int n ) { int c [ 3 ] = { 0 } , i ; int res = 0 ; for ( i = 0 ; i < n ; i ++ ) c [ arr [ i ] % 3 ] ++ ; res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ; res += c [ 1 ] * c [ 2 ] ; res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) / 6 ; res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) / 6 ; res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) ) / 6 ) ; res += c [ 0 ] * c [ 1 ] * c [ 2 ] ; return res ; }
PRINT_@@ STRING_@@ IGNOR@@ ING_@@ ALTER@@ N@@ ATE_@@ OC@@ CURR@@ EN@@ CES_@@ CHARACTER | void print@@ String@@ Altern@@ ate ( string str ) { unordered_map < char , int > oc@@ c ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char temp = tolower ( str [ i ] ) ; oc@@ c [ temp ] ++ ; if ( oc@@ c [ temp ] & 1 ) cout << str [ i ] ; } cout << endl ; }
NUMBER_@@ DAY@@ S_@@ TAN@@ K_@@ WI@@ LL_@@ BE@@ COM@@ E_@@ EMPTY | int min@@ Day@@ sTo@@ Empty ( int C , int l ) { if ( l >= C ) return C ; double eq_@@ root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2 ; return std :: ceil ( eq_@@ root ) + l ; }
REVERSE_@@ STRING_@@ WITH@@ OUT_@@ USING_@@ ANY_@@ TEMPOR@@ ARY_@@ VARIABLE | string rever@@ sing@@ String ( string str , int start , int end ) { while ( start < end ) { str [ start ] ^= str [ end ] ; str [ end ] ^= str [ start ] ; str [ start ] ^= str [ end ] ; ++ start ; -- end ; } return str ; }
FREQU@@ ENCY_@@ ELEMENT_@@ UN@@ SOR@@ TED_@@ ARRAY | void count@@ Freq ( int a [ ] , int n ) { unordered_map < int , int > hm ; for ( int i = 0 ; i < n ; i ++ ) hm [ a [ i ] ] ++ ; set < pair < int , int > > st ; for ( auto x : hm ) { st . insert ( { x . first , x . second } ) ; } int cum@@ ul = 0 ; for ( auto x : st ) { cum@@ ul += x . second ; cout << x . first << " ▁ " << cum@@ ul << endl ; } }
FIND_@@ ROTATION_@@ COUNT_@@ ROTA@@ TE@@ D_S@@ OR@@ TED_@@ ARRAY | int count@@ Rot@@ ations ( int arr [ ] , int n ) { int min = arr [ 0 ] , min_@@ index ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; min_@@ index = i ; } } return min_@@ index ; }
LON@@ GE@@ ST_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQU@@ ENCE_@@ 1 | int lis ( int arr [ ] , int n ) { int lis [ n ] ; lis [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { lis [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; } return * max_@@ element ( lis , lis + n ) ; }
MEDI@@ AN_@@ OF_@@ TW@@ O@@ _S@@ OR@@ TED_@@ ARRAY@@ S | int get@@ Medi@@ an ( int ar@@ 1 [ ] , int ar@@ 2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = - 1 , m2 = - 1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar@@ 2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar@@ 1 [ 0 ] ; break ; } if ( ar@@ 1 [ i ] < ar@@ 2 [ j ] ) { m1 = m2 ; m2 = ar@@ 1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar@@ 2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL@@ LY_@@ MINIMUM_@@ STRING_@@ RO@@ TATION | string min@@ Lex@@ Rotation ( string str ) { int n = str . length ( ) ; string arr [ n ] ; string concat = str + str ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = concat . substr ( i , n ) ; sort ( arr , arr + n ) ; return arr [ 0 ] ; }
INTER@@ PO@@ LA@@ TION@@ _SEARCH | int interpol@@ ation@@ Search ( int arr [ ] , int n , int x ) { int lo = 0 , hi = ( n - 1 ) ; while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) { if ( lo == hi ) { if ( arr [ lo ] == x ) return lo ; return - 1 ; } int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) ; if ( arr [ pos ] == x ) return pos ; if ( arr [ pos ] < x ) lo = pos + 1 ; else hi = pos - 1 ; } return - 1 ; }
COUNT_@@ PAIR@@ S_@@ TW@@ O@@ _S@@ OR@@ TED_@@ ARRAY@@ S_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL_@@ GI@@ V@@ EN_@@ VALUE_@@ X_@@ 2 | int count@@ Pairs ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int m , int n , int x ) { int count = 0 ; int l = 0 , r = n - 1 ; while ( l < m && r >= 0 ) { if ( ( ar@@ r1 [ l ] + ar@@ r2 [ r ] ) == x ) { l ++ ; r -- ; count ++ ; } else if ( ( ar@@ r1 [ l ] + ar@@ r2 [ r ] ) < x ) l ++ ; else r -- ; } return count ; }
COUNT_@@ SUB@@ SE@@ TS_@@ DISTIN@@ CT_@@ EV@@ EN_@@ NUMB@@ ERS | int count@@ Sub@@ sets ( int arr [ ] , int n ) { unordered_@@ set < int > us ; int ev@@ en_@@ count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 0 ) us . insert ( arr [ i ] ) ; unordered_@@ set < int > :: iterator itr ; for ( itr = us . begin ( ) ; itr != us . end ( ) ; itr ++ ) ev@@ en_@@ count ++ ; return ( pow ( 2 , ev@@ en_@@ count ) - 1 ) ; }
COUNT_@@ NUMBER_OF_@@ OC@@ CURR@@ EN@@ CES_@@ OR_@@ FREQU@@ ENCY_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY | int count@@ Occurren@@ ces ( int arr [ ] , int n , int x ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( x == arr [ i ] ) res ++ ; return res ; }
CONSTRUC@@ T_@@ THE_@@ ROO@@ TED_@@ TREE_@@ BY_@@ USING_@@ START_@@ AND_@@ FINI@@ SH_@@ TIME_@@ OF_@@ IT@@ S_@@ DFS_@@ TRA@@ VERS@@ AL | vector < int > Re@@ store_@@ Tree ( int Start [ ] , int End [ ] ) { vector < int > Identity ( N , 0 ) ; for ( int i = 0 ; i < N ; i ++ ) { Identity [ Start [ i ] ] = i ; } vector < int > parent ( N , - 1 ) ; int curr_@@ parent = Identity [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) { int child = Identity [ j ] ; if ( End [ child ] - j > 1 ) { parent [ child ] = curr_@@ parent ; curr_@@ parent = child ; } else parent [ child ] = curr_@@ parent ; while ( End [ child ] == End [ parent [ child ] ] ) { child = parent [ child ] ; curr_@@ parent = parent [ child ] ; if ( curr_@@ parent == Identity [ 0 ] ) break ; } } for ( int i = 0 ; i < N ; i ++ ) parent [ i ] += 1 ; return parent ; }
NUMBER@@ _SUB@@ SEQU@@ EN@@ CES_@@ AB_@@ STRING_@@ REPE@@ ATED_@@ K_@@ TIMES | int count@@ Occurren@@ ces ( string s , int K ) { int n = s . length ( ) ; int C , c1 = 0 , c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' a ' ) c1 ++ ; if ( s [ i ] == ' b ' ) { c2 ++ ; C += c1 ; } } return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ; }
NUMBER@@ _SUB@@ STRING@@ S_@@ STRING | int count@@ Non@@ Empty@@ Sub@@ str ( string str ) { int n = str . length ( ) ; return n * ( n + 1 ) / 2 ; }
MAXIMUM_@@ NUMBER_@@ CHARAC@@ TER@@ S_@@ TWO_@@ CHARACTER_@@ STRING_@@ 1 | int maximum@@ Chars ( string & str ) { int n = str . length ( ) ; int res = - 1 ; int first@@ Ind [ MAX_@@ CHAR ] ; for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) first@@ Ind [ i ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int first_@@ ind = first@@ Ind [ str [ i ] ] ; if ( first_@@ ind == - 1 ) first@@ Ind [ str [ i ] ] = i ; else res = max ( res , abs ( i - first_@@ ind - 1 ) ) ; } return res ; }
SUM@@ _S@@ QUAR@@ ES_@@ BIN@@ O@@ MI@@ AL_@@ CO@@ EF@@ FI@@ CI@@ ENTS | int su@@ mo@@ f@@ square ( int n ) { int C [ n + 1 ] [ n + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum += ( C [ n ] [ i ] * C [ n ] [ i ] ) ; return sum ; }
PRINT_@@ POSSI@@ BLE_@@ STRING@@ S_@@ CAN_@@ MA@@ DE_@@ PL@@ AC@@ ING@@ _SPAC@@ ES_@@ 2 | void print@@ Sub@@ sequences ( string str ) { int n = str . length ( ) ; unsigned int op@@ size = pow ( 2 , n - 1 ) ; for ( int counter = 0 ; counter < op@@ size ; counter ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cout << str [ j ] ; if ( counter & ( 1 << j ) ) cout << " ▁ " ; } cout << endl ; } }
NON_@@ REPE@@ ATING_@@ ELEMENT | int first@@ Non@@ Repe@@ ating ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < n ; j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ; if ( j == n ) return arr [ i ] ; } return - 1 ; }
S@@ UM_@@ OF_@@ ALL_@@ ELEMEN@@ TS_@@ UP_@@ TO_@@ N@@ TH_@@ ROW_@@ IN_@@ A_@@ PAS@@ CAL@@ S_@@ TRI@@ ANGLE | long long int calculate@@ Sum ( int n ) { long long int sum = 0 ; for ( int row = 0 ; row < n ; row ++ ) { sum = sum + ( 1 << row ) ; } return sum ; }
CHECK_@@ TWO_@@ STRING@@ S_@@ K_@@ AN@@ AG@@ RAM@@ S_@@ NOT | bool are@@ k@@ An@@ agram@@ s ( string str1 , string str2 , int k ) { int n = str1 . length ( ) ; if ( str2 . length ( ) != n ) return false ; int count@@ 1 [ MAX_@@ CHAR ] = { 0 } ; int count2 [ MAX_@@ CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count@@ 1 [ str1 [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) count2 [ str2 [ i ] - ' a ' ] ++ ; int count = 0 ; for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) if ( count@@ 1 [ i ] > count2 [ i ] ) count = count + abs ( count@@ 1 [ i ] - count2 [ i ] ) ; return ( count <= k ) ; }
LON@@ GE@@ ST@@ _SP@@ AN@@ _S@@ UM_@@ TWO_@@ BINARY_@@ ARRAY@@ S | int lon@@ gest@@ Common@@ Sum ( bool ar@@ r1 [ ] , bool ar@@ r2 [ ] , int n ) { int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum@@ 1 = 0 , sum@@ 2 = 0 ; for ( int j = i ; j < n ; j ++ ) { sum@@ 1 += ar@@ r1 [ j ] ; sum@@ 2 += ar@@ r2 [ j ] ; if ( sum@@ 1 == sum@@ 2 ) { int len = j - i + 1 ; if ( len > maxLen ) maxLen = len ; } } } return maxLen ; }
RE@@ MA@@ INDE@@ R_@@ 7_@@ LARGE_@@ NUMB@@ ERS | int remain@@ der@@ With@@ 7 ( string num ) { int series [ ] = { 1 , 3 , 2 , - 1 , - 3 , - 2 } ; int series_@@ index = 0 ; int result = 0 ; for ( int i = num . size ( ) - 1 ; i >= 0 ; i -- ) { int digit = num [ i ] - '0' ; result += digit * series [ series_@@ index ] ; series_@@ index = ( series_@@ index + 1 ) % 6 ; result %= 7 ; } if ( result < 0 ) result = ( result + 7 ) % 7 ; return result ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL@@ LY_@@ PREVI@@ OUS_@@ PER@@ MU@@ TATION_@@ IN_@@ C | bool prev@@ Permutation ( string & str ) { int n = str . length ( ) - 1 ; int i = n ; while ( i > 0 && str [ i - 1 ] <= str [ i ] ) i -- ; if ( i <= 0 ) return false ; int j = i - 1 ; while ( j + 1 <= n && str [ j + 1 ] <= str [ i - 1 ] ) j ++ ; swap ( str [ i - 1 ] , str [ j ] ) ; reverse ( str . begin ( ) + i , str . end ( ) ) ; return true ; }
NUMBER@@ _SUB@@ SEQU@@ EN@@ CES_@@ FORM_@@ AI_@@ B@@ J_@@ CK | int count@@ Sub@@ sequences ( string s ) { int a@@ Count = 0 ; int b@@ Count = 0 ; int c@@ Count = 0 ; for ( unsigned int i = 0 ; i < s . size ( ) ; i ++ ) { if ( s [ i ] == ' a ' ) a@@ Count = ( 1 + 2 * a@@ Count ) ; else if ( s [ i ] == ' b ' ) b@@ Count = ( a@@ Count + 2 * b@@ Count ) ; else if ( s [ i ] == ' c ' ) c@@ Count = ( b@@ Count + 2 * c@@ Count ) ; } return c@@ Count ; }
PROGRAM_@@ PR@@ IN@@ T_ID@@ ENTITY_@@ MATRIX_@@ 1 | bool is@@ Identity ( int mat [ ] [ MAX ] , int N ) { for ( int row = 0 ; row < N ; row ++ ) { for ( int col = 0 ; col < N ; col ++ ) { if ( row == col && mat [ row ] [ col ] != 1 ) return false ; else if ( row != col && mat [ row ] [ col ] != 0 ) return false ; } } return true ; }
MAXIMUM_@@ POSSI@@ BLE_@@ DIFF@@ ER@@ ENCE_@@ TW@@ O@@ _SUB@@ SE@@ TS_@@ ARRAY_@@ 1 | int max@@ Diff ( int arr [ ] , int n ) { int result = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i ] ) ; else i ++ ; } if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] ) ; return result ; }
PROGRAM_@@ PRINT_@@ S@@ UM_@@ GI@@ V@@ EN_@@ N@@ TH_@@ TERM | int summ@@ ing@@ Series ( long n ) { int S = 0 ; for ( int i = 1 ; i <= n ; i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ; return S ; }
PRE@@ FIX@@ _S@@ UM_@@ 2D_@@ ARRAY | void prefix@@ Sum@@ 2D ( int a [ ] [ C ] ) { int ps@@ a [ R ] [ C ] ; ps@@ a [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( int i = 1 ; i < C ; i ++ ) ps@@ a [ 0 ] [ i ] = ps@@ a [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ; for ( int i = 0 ; i < R ; i ++ ) ps@@ a [ i ] [ 0 ] = ps@@ a [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ; for ( int i = 1 ; i < R ; i ++ ) { for ( int j = 1 ; j < C ; j ++ ) ps@@ a [ i ] [ j ] = ps@@ a [ i - 1 ] [ j ] + ps@@ a [ i ] [ j - 1 ] - ps@@ a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) cout << ps@@ a [ i ] [ j ] << " ▁ " ; cout << " \n " ; } }
MAXIMUM_@@ NUMBER_@@ 2@@ X@@ 2@@ _S@@ QUAR@@ ES_@@ CAN_@@ FI@@ T_@@ IN@@ SIDE_@@ RIGHT_@@ ISO@@ SCE@@ LES_@@ TRI@@ ANGLE | int numberOf@@ Squ@@ ares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return base * ( base + 1 ) / 2 ; }
GI@@ V@@ EN_@@ BINARY_@@ STRING_@@ COUNT_@@ NUMBER@@ _SUB@@ STRING@@ S_@@ START_@@ END_@@ 1_1 | int count@@ Sub@@ Str ( char str [ ] ) { int m = 0 ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) { if ( str [ i ] == '1' ) m ++ ; } return m * ( m - 1 ) / 2 ; }
CONVER@@ TING_@@ ONE_@@ STRING_@@ USING_@@ APP@@ END_@@ DELETE_@@ LAST_@@ OPER@@ ATIONS | bool is@@ Conver@@ tible ( string str1 , string str2 , int k ) { if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true ; int common@@ Length = 0 ; for ( int i = 0 ; i < min ( str1 . length ( ) , str2 . length ( ) ) ; i ++ ) { if ( str1 [ i ] == str2 [ i ] ) common@@ Length ++ ; else break ; } if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * common@@ Length ) % 2 == 0 ) return true ; return false ; }
FIND_@@ THE_@@ NUMBER_@@ OC@@ CURR@@ ING_@@ OD@@ D_@@ NUMBER_OF_@@ TIME@@ S_@@ 2 | int getO@@ dd@@ Occurren@@ ce ( int ar [ ] , int ar@@ _size ) { int res = 0 ; for ( int i = 0 ; i < ar@@ _size ; i ++ ) res = res ^ ar [ i ] ; return res ; }
S@@ UM_@@ MIDD@@ LE_@@ ROW_@@ COLUMN_@@ MATRIX | void middle@@ sum ( int mat [ ] [ MAX ] , int n ) { int row_@@ sum = 0 , col_@@ sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) row_@@ sum += mat [ n / 2 ] [ i ] ; cout << " Sum ▁ of ▁ middle ▁ row ▁ = ▁ " << row_@@ sum << endl ; for ( int i = 0 ; i < n ; i ++ ) col_@@ sum += mat [ i ] [ n / 2 ] ; cout << " Sum ▁ of ▁ middle ▁ column ▁ = ▁ " << col_@@ sum ; }
K_@@ TH_@@ DISTIN@@ CT_@@ OR_@@ NON_@@ REPE@@ ATING_@@ ELEMENT_@@ IN_@@ AN_@@ ARRAY | int print@@ K@@ Distin@@ ct ( int arr [ ] , int n , int k ) { int dist@@ _count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < n ; j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break ; if ( j == n ) dist@@ _count ++ ; if ( dist@@ _count == k ) return arr [ i ] ; } return - 1 ; }
MER@@ G@@ ING_@@ INTER@@ VAL@@ S | void merge@@ Intervals ( Interval arr [ ] , int n ) { sort ( arr , arr + n , my@@ comp ) ; int index = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ index ] . e >= arr [ i ] . s ) { arr [ index ] . e = max ( arr [ index ] . e , arr [ i ] . e ) ; arr [ index ] . s = min ( arr [ index ] . s , arr [ i ] . s ) ; } else { arr [ index ] = arr [ i ] ; index ++ ; } } cout << " \n ▁ The ▁ Mer@@ ged ▁ Intervals ▁ are : ▁ " ; for ( int i = 0 ; i <= index ; i ++ ) cout << " [ " << arr [ i ] . s << " , ▁ " << arr [ i ] . e << " ] ▁ " ; }
FIND_@@ NUMBER_@@ PER@@ F@@ ECT_@@ SQU@@ AR@@ ES_@@ TWO_@@ GI@@ V@@ EN_@@ NUMB@@ ERS_@@ 1 | int count@@ Squ@@ ares ( int a , int b ) { return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ; }
LAR@@ GE@@ ST@@ _SUB@@ SET_@@ WHO@@ SE_@@ ALL_@@ ELEMEN@@ TS_@@ ARE_@@ FI@@ BON@@ ACC@@ I_@@ NUMB@@ ERS | void find@@ Fi@@ b@@ Subset ( int arr [ ] , int n ) { int max = * std :: max_@@ element ( arr , arr + n ) ; int a = 0 , b = 1 ; unordered_@@ set < int > hash ; hash . insert ( a ) ; hash . insert ( b ) ; while ( b < max ) { int c = a + b ; a = b ; b = c ; hash . insert ( b ) ; } for ( int i = 0 ; i < n ; i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) printf ( " % d ▁ " , arr [ i ] ) ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL_@@ CON@@ CAT@@ EN@@ ATION@@ _SUB@@ STRING@@ S_@@ STRING | string lex@@ ico@@ graphic@@ Sub@@ Concat ( string s ) { int n = s . length ( ) ; int sub@@ _count = n * ( n + 1 ) / 2 ; string arr [ sub@@ _count ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int len = 1 ; len <= n - i ; len ++ ) arr [ index ++ ] = s . substr ( i , len ) ; sort ( arr , arr + sub@@ _count ) ; string res = " " ; for ( int i = 0 ; i < sub@@ _count ; i ++ ) res += arr [ i ] ; return res ; }
COUNT_@@ OPER@@ ATION@@ S_@@ MAKE_@@ STRING@@ AB_@@ FREE | int ab@@ Free ( string s ) { int n = s . length ( ) ; char char_@@ array [ n + 1 ] ; strcpy ( char_@@ array , s . c_str ( ) ) ; int b_@@ count = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( char_@@ array [ n - i - 1 ] == ' a ' ) { res = ( res + b_@@ count ) ; b_@@ count = ( b_@@ count * 2 ) ; } else { b_@@ count += 1 ; } } return res ; }
MAXIMUM_@@ HEIGHT_@@ OF_@@ TRIANG@@ ULAR_@@ AR@@ RANGE@@ MENT_@@ OF_@@ ARRAY_@@ VALU@@ ES_@@ 1 | int Maximum@@ Height ( int a [ ] , int n ) { return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ; }
MAXI@@ MI@@ ZE_@@ VOLUME_@@ CU@@ BO@@ ID_@@ GI@@ VEN@@ _S@@ UM@@ _SI@@ DES | int max@@ volume ( int s ) { int max@@ value = 0 ; for ( int i = 1 ; i <= s - 2 ; i ++ ) { for ( int j = 1 ; j <= s - 1 ; j ++ ) { int k = s - i - j ; max@@ value = max ( max@@ value , i * j * k ) ; } } return max@@ value ; }
PROGRAM_@@ DECIMAL_@@ HEX@@ A@@ DECIMAL_@@ CONVERSION | void dec@@ To@@ Hex@@ a ( int n ) { char hexa@@ Deci@@ Num [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = 0 ; temp = n % 16 ; if ( temp < 10 ) { hexa@@ Deci@@ Num [ i ] = temp + 48 ; i ++ ; } else { hexa@@ Deci@@ Num [ i ] = temp + 55 ; i ++ ; } n = n / 16 ; } for ( int j = i - 1 ; j >= 0 ; j -- ) cout << hexa@@ Deci@@ Num [ j ] ; }
SM@@ ALLE@@ ST@@ _SUB@@ ARRAY_@@ WITH_@@ ALL_@@ OC@@ CURR@@ EN@@ CES_@@ OF_@@ A_@@ MO@@ ST_@@ FREQU@@ ENT_@@ ELEMENT | void smalle@@ st@@ Sub@@ segment ( int a [ ] , int n ) { unordered_map < int , int > left ; unordered_map < int , int > count ; int mx = 0 ; int mn , str@@ index ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( count [ x ] == 0 ) { left [ x ] = i ; count [ x ] = 1 ; } else count [ x ] ++ ; if ( count [ x ] > mx ) { mx = count [ x ] ; mn = i - left [ x ] + 1 ; str@@ index = left [ x ] ; } else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) { mn = i - left [ x ] + 1 ; str@@ index = left [ x ] ; } } for ( int i = str@@ index ; i < str@@ index + mn ; i ++ ) cout << a [ i ] << " ▁ " ; }
FIND_@@ LAST_@@ INDEX_@@ CHARACTER_@@ STRING_@@ 1 | int find@@ Last@@ Index ( string & str , char x ) { for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) if ( str [ i ] == x ) return i ; return - 1 ; }
RE@@ CAM@@ AN@@ S@@ _SEQU@@ ENCE | int rec@@ am@@ an ( int n ) { int arr [ n ] ; arr [ 0 ] = 0 ; printf ( " % d , ▁ " , arr [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { int curr = arr [ i - 1 ] - i ; int j ; for ( j = 0 ; j < i ; j ++ ) { if ( ( arr [ j ] == curr ) || curr < 0 ) { curr = arr [ i - 1 ] + i ; break ; } } arr [ i ] = curr ; printf ( " % d , ▁ " , arr [ i ] ) ; } }
C_@@ PROGRAM_@@ FIN@@ D@@ _SECON@@ D_@@ FREQU@@ ENT_@@ CHARACTER | char get@@ Second@@ Most@@ Freq ( string str ) { int count [ NO_@@ OF_@@ CHARS ] = { 0 } , i ; for ( i = 0 ; str [ i ] ; i ++ ) ( count [ str [ i ] ] ) ++ ; int first = 0 , second = 0 ; for ( i = 0 ; i < NO_@@ OF_@@ CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) second = i ; } return second ; }
FIND_@@ MAXIMUM_@@ HEIGHT_@@ PY@@ RAM@@ ID_@@ FROM_@@ THE_@@ GI@@ V@@ EN_@@ ARRAY_@@ OF_@@ OBJECTS | int max@@ Level ( int boxes [ ] , int n ) { sort ( boxes , boxes + n ) ; int ans = 1 ; int prev_@@ width = boxes [ 0 ] ; int prev_@@ count = 1 ; int curr_@@ count = 0 ; int curr_@@ width = 0 ; for ( int i = 1 ; i < n ; i ++ ) { curr_@@ width += boxes [ i ] ; curr_@@ count += 1 ; if ( curr_@@ width > prev_@@ width && curr_@@ count > prev_@@ count ) { prev_@@ width = curr_@@ width ; prev_@@ count = curr_@@ count ; curr_@@ count = 0 ; curr_@@ width = 0 ; ans ++ ; } } return ans ; }
COUN@@ TING_@@ IN@@ VERSIONS | int getIn@@ v@@ Count ( int arr [ ] , int n ) { int inv_@@ count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) inv_@@ count ++ ; return inv_@@ count ; }
SQU@@ AR@@ ES_@@ OF_@@ MATRIX_@@ DIAG@@ ON@@ AL_@@ ELEMENTS | void diag@@ onal@@ square ( int mat [ ] [ MAX ] , int row , int column ) { cout << " Diagonal ▁ one ▁ : ▁ " ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << " ▁ " ; } cout << " ▁ \n \n Diagonal ▁ two ▁ : ▁ " ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << " ▁ ▁ " ; } }
ROW_@@ WI@@ SE_@@ COMMON_@@ ELEMEN@@ TS_@@ TWO_@@ DIAG@@ ON@@ AL@@ S_S@@ QU@@ ARE_@@ MATRIX | int count@@ Common ( int mat [ ] [ MAX ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; }
E@@ UL@@ ERI@@ AN_@@ NUMBER | int e@@ ul@@ eri@@ an ( int n , int m ) { if ( m >= n || n == 0 ) return 0 ; if ( m == 0 ) return 1 ; return ( n - m ) * e@@ ul@@ eri@@ an ( n - 1 , m - 1 ) + ( m + 1 ) * e@@ ul@@ eri@@ an ( n - 1 , m ) ; }
E@@ UL@@ ERS_@@ CRITERI@@ ON_@@ CHECK_@@ IF@@ _S@@ QU@@ ARE_@@ ROOT_@@ UN@@ DER_@@ MODUL@@ O_@@ P_@@ EXISTS | bool square@@ Root@@ Exists ( int n , int p ) { n = n % p ; for ( int x = 2 ; x < p ; x ++ ) if ( ( x * x ) % p == n ) return true ; return false ; }
COUNT_@@ POSSI@@ BLE_@@ PATH@@ S_@@ TOP_@@ LEFT_@@ BOTTOM_@@ RIGHT_@@ NX@@ M_@@ MATRIX_@@ 3 | int numberOf@@ Paths ( int m , int n ) { int path = 1 ; for ( int i = n ; i < ( m + n - 1 ) ; i ++ ) { path *= i ; path /= ( i - n + 1 ) ; } return path ; }
MODI@@ FY_@@ ARRAY_@@ TO_@@ MAXI@@ MI@@ ZE_@@ S@@ UM_@@ OF_@@ AD@@ J@@ AC@@ ENT_@@ DIFF@@ ER@@ EN@@ CES | int maximum@@ Difference@@ Sum ( int arr [ ] , int N ) { int dp [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ; for ( int i = 0 ; i < ( N - 1 ) ; i ++ ) { dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) ) ; dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) ) ; } return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ; }
STER@@ N_@@ BRO@@ CO@@ T_@@ SEQUENCE | void St@@ er@@ n@@ Sequence@@ Func ( vector < int > & Bro@@ co@@ t@@ Sequence , int n ) { for ( int i = 1 ; Bro@@ co@@ t@@ Sequence . size ( ) < n ; i ++ ) { int consi@@ dered_@@ element = Bro@@ co@@ t@@ Sequence [ i ] ; int pre@@ ced@@ ent = Bro@@ co@@ t@@ Sequence [ i - 1 ] ; Bro@@ co@@ t@@ Sequence . push_back ( consi@@ dered_@@ element + pre@@ ced@@ ent ) ; Bro@@ co@@ t@@ Sequence . push_back ( consi@@ dered_@@ element ) ; } for ( int i = 0 ; i < 15 ; ++ i ) cout << Bro@@ co@@ t@@ Sequence [ i ] << " ▁ " ; }
NUMBER@@ _SUB@@ SEQU@@ EN@@ CES_@@ STRING_@@ DI@@ VISI@@ BLE_@@ N | int count@@ Di@@ visible@@ Sub@@ seq ( string str , int n ) { int len = str . length ( ) ; int dp [ len ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++ ; for ( int i = 1 ; i < len ; i ++ ) { dp [ i ] [ ( str [ i ] - '0' ) % n ] ++ ; for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp [ i - 1 ] [ j ] ; } } return dp [ len - 1 ] [ 0 ] ; }
HO@@ W_@@ TO_@@ BEGIN_@@ WITH_@@ COMP@@ E@@ TI@@ TIVE_@@ PROGR@@ AM@@ M@@ ING | int search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; } return - 1 ; }
COUNT_@@ PAIR@@ S_@@ WITH_@@ GI@@ VEN@@ _S@@ UM@@ _1 | int get@@ Pai@@ rs@@ Count ( int arr [ ] , int n , int sum ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; int tw@@ ice_@@ count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tw@@ ice_@@ count += m [ sum - arr [ i ] ] ; if ( sum - arr [ i ] == arr [ i ] ) tw@@ ice_@@ count -- ; } return tw@@ ice_@@ count / 2 ; }
FIND_@@ THE_@@ MINIMUM_@@ DISTAN@@ CE_@@ BETWE@@ EN_@@ TWO_@@ NUMB@@ ERS | int min@@ Dist ( int arr [ ] , int n , int x , int y ) { int i , j ; int min_@@ dist = INT_MAX ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i ] && x == arr [ j ] ) && min_@@ dist > abs ( i - j ) ) { min_@@ dist = abs ( i - j ) ; } } } return min_@@ dist ; }
FIND_@@ REPE@@ TI@@ TIVE_@@ ELEMENT_@@ 1_@@ N_@@ 1_2 | int find@@ Repe@@ ating ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ; res = res ^ arr [ n - 1 ] ; return res ; }
SHOR@@ TEST_@@ PATH_@@ EXAC@@ TL@@ Y_@@ K_@@ ED@@ GE@@ S_@@ DIREC@@ TED_@@ WE@@ I@@ GH@@ TED_@@ GRAPH_@@ 1 | INT_MAX int shor@@ test@@ Path ( int graph [ ] [ V ] , int u , int v , int k ) { int sp [ V ] [ V ] [ k + 1 ] ; for ( int e = 0 ; e <= k ; e ++ ) { for ( int i = 0 ; i < V ; i ++ ) { for ( int j = 0 ; j < V ; j ++ ) { sp [ i ] [ j ] [ e ] = INF ; if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0 ; if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ] ; if ( e > 1 ) { for ( int a = 0 ; a < V ; a ++ ) { if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] ) ; } } } } } return sp [ u ] [ v ] [ k ] ; }
LON@@ GE@@ ST@@ _SUB@@ ARRAY_@@ NOT_@@ K_@@ DISTIN@@ CT_@@ ELEMENTS | void longest ( int a [ ] , int n , int k ) { unordered_map < int , int > freq ; int start = 0 , end = 0 , now = 0 , l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; if ( freq [ a [ i ] ] == 1 ) now ++ ; while ( now > k ) { freq [ a [ l ] ] -- ; if ( freq [ a [ l ] ] == 0 ) now -- ; l ++ ; } if ( i - l + 1 >= end - start + 1 ) end = i , start = l ; } for ( int i = start ; i <= end ; i ++ ) cout << a [ i ] << " ▁ " ; }
MAXIMUM_@@ X@@ OR_@@ VALUE_@@ MATRIX | int max@@ XOR ( int mat [ ] [ MAX ] , int N ) { int r_@@ xor , c_@@ xor ; int max_@@ xor = 0 ; for ( int i = 0 ; i < N ; i ++ ) { r_@@ xor = 0 , c_@@ xor = 0 ; for ( int j = 0 ; j < N ; j ++ ) { r_@@ xor = r_@@ xor ^ mat [ i ] [ j ] ; c_@@ xor = c_@@ xor ^ mat [ j ] [ i ] ; } if ( max_@@ xor < max ( r_@@ xor , c_@@ xor ) ) max_@@ xor = max ( r_@@ xor , c_@@ xor ) ; } return max_@@ xor ; }
LENGTH_@@ LON@@ GE@@ ST@@ _SUB_@@ STRING_@@ CAN_@@ MAKE_@@ REMOVED | int lon@@ gest@@ Null ( string str ) { vector < pair < char , int > > arr ; arr . push_back ( { ' @ ' , - 1 } ) ; int maxlen = 0 ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { arr . push_back ( { str [ i ] , i } ) ; while ( arr . size ( ) >= 3 && arr [ arr . size ( ) - 3 ] . first == '1' && arr [ arr . size ( ) - 2 ] . first == '0' && arr [ arr . size ( ) - 1 ] . first == '0' ) { arr . pop_back ( ) ; arr . pop_back ( ) ; arr . pop_back ( ) ; } int tmp = arr . back ( ) . second ; maxlen = max ( maxlen , i - tmp ) ; } return maxlen ; }
LON@@ GE@@ ST_@@ ALTER@@ N@@ AT@@ ING@@ _SUB_@@ ARRAY_@@ START@@ ING_@@ EVER@@ Y_@@ INDEX_@@ BINARY_@@ ARRAY | void alternate@@ Sub@@ array ( bool arr [ ] , int n ) { int len [ n ] ; len [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; -- i ) { if ( arr [ i ] ^ arr [ i + 1 ] == 1 ) len [ i ] = len [ i + 1 ] + 1 ; else len [ i ] = 1 ; } for ( int i = 0 ; i < n ; ++ i ) cout << len [ i ] << " ▁ " ; }
WI@@ LD@@ CARD_@@ CHARACTER_@@ MATCH@@ ING | bool match ( char * first , char * second ) { if ( * first == ' \0' && * second == ' \0' ) return true ; if ( * first == ' * ' && * ( first + 1 ) != ' \0' && * second == ' \0' ) return false ; if ( * first == ' ? ' || * first == * second ) return match ( first + 1 , second + 1 ) ; if ( * first == ' * ' ) return match ( first + 1 , second ) || match ( first , second + 1 ) ; return false ; }
FIND_@@ FAC@@ TOR@@ I@@ AL_@@ NUMB@@ ERS_@@ LESS_@@ EQUAL_@@ N | void print@@ Fac@@ tori@@ al@@ Num@@ s ( int n ) { int fact = 1 ; int x = 2 ; while ( fact <= n ) { cout << fact << " ▁ " ; fact = fact * x ; x ++ ; } }
FRI@@ END@@ S_@@ PAIR@@ ING_@@ PRO@@ BLE@@ M_@@ 2 | int count@@ Fri@@ ends@@ Pair@@ ings ( int n ) { int a = 1 , b = 2 , c = 0 ; if ( n <= 2 ) { return n ; } for ( int i = 3 ; i <= n ; i ++ ) { c = b + ( i - 1 ) * a ; a = b ; b = c ; } return c ; }
FIND_@@ THE_@@ LAR@@ GE@@ ST_@@ REC@@ TAN@@ GLE_@@ OF_@@ 1@@ S_@@ WITH@@ _SW@@ APP@@ ING_@@ OF_@@ COLUM@@ NS_@@ ALLOWED | int max@@ Area ( bool mat [ R ] [ C ] ) { int hist [ R + 1 ] [ C + 1 ] ; for ( int i = 0 ; i < C ; i ++ ) { hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int j = 1 ; j < R ; j ++ ) hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist [ j - 1 ] [ i ] + 1 ; } for ( int i = 0 ; i < R ; i ++ ) { int count [ R + 1 ] = { 0 } ; for ( int j = 0 ; j < C ; j ++ ) count [ hist [ i ] [ j ] ] ++ ; int col_@@ no = 0 ; for ( int j = R ; j >= 0 ; j -- ) { if ( count [ j ] > 0 ) { for ( int k = 0 ; k < count [ j ] ; k ++ ) { hist [ i ] [ col_@@ no ] = j ; col_@@ no ++ ; } } } } int curr_@@ area , max_@@ area = 0 ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { curr_@@ area = ( j + 1 ) * hist [ i ] [ j ] ; if ( curr_@@ area > max_@@ area ) max_@@ area = curr_@@ area ; } } return max_@@ area ; }
SUM@@ _SEQU@@ ENCE_@@ 2_@@ 22_@@ 222 | float sum@@ Of@@ Series ( int n ) { return 0.02@@ 46 * ( pow ( 10 , n ) - 1 - ( 9 * n ) ) ; }
PROGRAM_@@ FIRST_@@ FI@@ T_@@ ALGORITH@@ M_@@ MEMORY_@@ MAN@@ A@@ GEMENT | void first@@ Fit ( int blockSize [ ] , int m , int process@@ Size [ ] , int n ) { int allocation [ n ] ; memset ( allocation , - 1 , sizeof ( allocation ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= process@@ Size [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= process@@ Size [ i ] ; break ; } } } cout << " \n Process ▁ No . \t@@ Process ▁ Size@@ \t@@ Block ▁ no . \n " ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ " << i + 1 << " \t\t " << process@@ Size [ i ] << " \t\t " ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; cout << endl ; } }
CHECK_@@ IF_@@ A_@@ NUMBER_@@ IS_@@ POWER_@@ OF_@@ AN@@ OTHER_@@ NUMBER | bool is@@ Power ( int x , long int y ) { if ( x == 1 ) return ( y == 1 ) ; long int pow = 1 ; while ( pow < y ) pow *= x ; return ( pow == y ) ; }
DI@@ VI@@ DE_@@ LARGE_@@ NUMBER_@@ RE@@ PRESEN@@ TED_@@ STRING | string long@@ Division ( string number , int divisor ) { string ans ; int idx = 0 ; int temp = number [ idx ] - '0' ; while ( temp < divisor ) temp = temp * 10 + ( number [ ++ idx ] - '0' ) ; while ( number . size ( ) > idx ) { ans += ( temp / divisor ) + '0' ; temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0' ; } if ( ans . length ( ) == 0 ) return "0" ; return ans ; }
FIND_@@ ROW_@@ NUMBER_@@ BINARY_@@ MATRIX_@@ MAXIMUM_@@ NUMBER_@@ 1@@ S | void find@@ Max ( int arr [ ] [ N ] ) { int row = 0 , i , j ; for ( i = 0 , j = N - 1 ; i < N ; i ++ ) { while ( arr [ i ] [ j ] == 1 && j >= 0 ) { row = i ; j -- ; } } cout << " Row ▁ number ▁ = ▁ " << row + 1 ; cout << " , ▁ Max@@ Count ▁ = ▁ " << N - 1 - j ; }
MINIMUM_@@ ROTA@@ TIONS_@@ REQUIRED_@@ GET_@@ STRING | int find@@ Rot@@ ations ( string str ) { string tmp = str + str ; int n = str . length ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { string substring = tmp . substr ( i , str . size ( ) ) ; if ( str == substring ) return i ; } return n ; }
COUNT_@@ POSSI@@ BLE_@@ PATH@@ S_@@ TOP_@@ LEFT_@@ BOTTOM_@@ RIGHT_@@ NX@@ M_@@ MATRIX | int numberOf@@ Paths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return numberOf@@ Paths ( m - 1 , n ) + numberOf@@ Paths ( m , n - 1 ) ; }
N_@@ TH_@@ NUMBER_@@ WHO@@ SE_@@ S@@ UM_@@ OF_@@ DIG@@ IT@@ S_@@ IS_@@ T@@ EN_@@ 1 | int find@@ N@@ th ( int n ) { int count = 0 ; for ( int curr = 19 ; ; curr += 9 ) { int sum = 0 ; for ( int x = curr ; x > 0 ; x = x / 10 ) sum = sum + x % 10 ; if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } return - 1 ; }
S@@ UM_@@ NODE@@ S_@@ K_@@ TH_@@ LEVEL_@@ TREE_@@ RE@@ PRESEN@@ TED_@@ STRING_@@ 1 | int sum@@ At@@ K@@ th@@ Level ( string tree , int k , int & i , int level ) { if ( tree [ i ++ ] == ' ( ' ) { if ( tree [ i ] == ' ) ' ) return 0 ; int sum = 0 ; if ( level == k ) sum = tree [ i ] - '0' ; int left@@ sum = sum@@ At@@ K@@ th@@ Level ( tree , k , ++ i , level + 1 ) ; int right@@ sum = sum@@ At@@ K@@ th@@ Level ( tree , k , ++ i , level + 1 ) ; ++ i ; return sum + left@@ sum + right@@ sum ; } }
COUNT_@@ OF@@ DIFF@@ ER@@ ENT_@@ WAY@@ S_@@ EXP@@ RESS_@@ N_S@@ UM_@@ 1_@@ 3_@@ 4 | int count@@ W@@ ays ( int n ) { int DP [ n + 1 ] ; DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1 ; DP [ 3 ] = 2 ; for ( int i = 4 ; i <= n ; i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ] ; return DP [ n ] ; }
MAXIMUM_@@ EQU@@ LIB@@ RI@@ UM@@ _S@@ UM_@@ ARRAY | int find@@ Max@@ Sum ( int arr [ ] , int n ) { int res = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { int prefix_@@ sum = arr [ i ] ; for ( int j = 0 ; j < i ; j ++ ) prefix_@@ sum += arr [ j ] ; int suffix_@@ sum = arr [ i ] ; for ( int j = n - 1 ; j > i ; j -- ) suffix_@@ sum += arr [ j ] ; if ( prefix_@@ sum == suffix_@@ sum ) res = max ( res , prefix_@@ sum ) ; } return res ; }
STE@@ INS_@@ ALGORITH@@ M_@@ FOR_@@ FIN@@ DING_@@ GC@@ D_@@ 1 | int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( ~ a & 1 ) { if ( b & 1 ) return gcd ( a >> 1 , b ) ; else return gcd ( a >> 1 , b >> 1 ) << 1 ; } if ( ~ b & 1 ) return gcd ( a , b >> 1 ) ; if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ; return gcd ( ( b - a ) >> 1 , a ) ; }
PROGRAM_@@ TO_@@ FIND_@@ THE_@@ VOLUME_@@ OF_@@ A_@@ TRIANG@@ ULAR_@@ PRI@@ SM | float find@@ Volume ( float l , float b , float h ) { float volume = ( l * b * h ) / 2 ; return volume ; }
FIND_@@ REC@@ TAN@@ GLE_@@ BINARY_@@ MATRIX_@@ COR@@ NE@@ RS_@@ 1 | bool is@@ Rectangle ( const vector < vector < int > > & m ) { int rows = m . size ( ) ; if ( rows == 0 ) return false ; int columns = m [ 0 ] . size ( ) ; for ( int y1 = 0 ; y1 < rows ; y1 ++ ) for ( int x1 = 0 ; x1 < columns ; x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ; y2 < rows ; y2 ++ ) for ( int x2 = x1 + 1 ; x2 < columns ; x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ; return false ; }
CHECK_@@ IF_@@ STRING_@@ RE@@ MA@@ INS_@@ PA@@ LIN@@ DRO@@ ME_@@ AFTER_@@ REMO@@ V@@ ING_@@ GI@@ V@@ EN_@@ NUMBER_OF_@@ CHARAC@@ TERS | bool is@@ Possible ( string str , int n ) { int len = str . length ( ) ; if ( len >= n ) return true ; return false ; }
CHECK_@@ STAR@@ _@@ GRAP@@ H | bool check@@ Star ( int mat [ ] [ size ] ) { int vertex@@ D1 = 0 , vertex@@ D@@ n_@@ 1 = 0 ; if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 ) ; if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 ) ; for ( int i = 0 ; i < size ; i ++ ) { int degree@@ I = 0 ; for ( int j = 0 ; j < size ; j ++ ) if ( mat [ i ] [ j ] ) degree@@ I ++ ; if ( degree@@ I == 1 ) vertex@@ D1 ++ ; else if ( degree@@ I == size - 1 ) vertex@@ D@@ n_@@ 1 ++ ; } return ( vertex@@ D1 == ( size - 1 ) && vertex@@ D@@ n_@@ 1 == 1 ) ; }
ROO@@ TS_@@ OF_@@ UNI@@ TY | void print@@ Roots ( int n ) { double theta = M_PI * 2 / n ; for ( int k = 0 ; k < n ; k ++ ) { double real = cos ( k * theta ) ; double img = sin ( k * theta ) ; printf ( " % .@@ 6f " , real ) ; img >= 0 ? printf ( " ▁ + ▁ i ▁ " ) : printf ( " ▁ - ▁ i ▁ " ) ; printf ( " % .@@ 6f \n " , abs ( img ) ) ; } }
FIND_@@ LAR@@ GE@@ ST_@@ D_@@ IN_@@ ARRAY@@ _SU@@ CH_@@ TH@@ AT_@@ A_@@ B_@@ C_@@ D | int find@@ Large@@ std ( int S [ ] , int n ) { bool found = false ; sort ( S , S + n ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = j + 1 ; k < n ; k ++ ) { if ( i == k ) continue ; for ( int l = k + 1 ; l < n ; l ++ ) { if ( i == l ) continue ; if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) { found = true ; return S [ i ] ; } } } } } if ( found == false ) return INT_@@ MIN ; }
GI@@ V@@ EN_@@ NUMBER_@@ STRING_@@ FIND_@@ NUMBER_@@ CON@@ TI@@ GU@@ OU@@ S@@ _SUB@@ SEQU@@ EN@@ CES_@@ RECUR@@ SI@@ VEL@@ Y_@@ ADD_@@ 9@@ _SET_@@ 2 | int count@@ 9@@ s ( char number [ ] ) { int n = strlen ( number ) ; int d [ 9 ] ; memset ( d , 0 , sizeof ( d ) ) ; d [ 0 ] = 1 ; int result = 0 ; int mod_@@ sum = 0 , continu@@ ous_@@ zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! int ( number [ i ] - '0' ) ) continu@@ ous_@@ zero ++ ; else continu@@ ous_@@ zero = 0 ; mod_@@ sum += int ( number [ i ] - '0' ) ; mod_@@ sum %= 9 ; result += d [ mod_@@ sum ] ; d [ mod_@@ sum ] ++ ; result -= continu@@ ous_@@ zero ; } return result ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL_@@ MAX@@ IM@@ UM@@ _SUB@@ STRING_@@ STRING | string Lex@@ ico@@ graphic@@ al@@ Max@@ String ( string str ) { string mx = " " ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) mx = max ( mx , str . substr ( i ) ) ; return mx ; }
CHECK_@@ TWO_@@ GI@@ VEN@@ _SE@@ TS_@@ DIS@@ JO@@ INT_@@ 1 | bool are@@ Dis@@ joint ( int set1 [ ] , int set2 [ ] , int m , int n ) { sort ( set1 , set1 + m ) ; sort ( set2 , set2 + n ) ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( set1 [ i ] < set2 [ j ] ) i ++ ; else if ( set2 [ j ] < set1 [ i ] ) j ++ ; else return false ; } return true ; }
EQU@@ ILI@@ BRI@@ UM_@@ INDEX_@@ OF_@@ AN_@@ ARRAY_@@ 1 | int equi@@ lib@@ ri@@ um ( int arr [ ] , int n ) { int sum = 0 ; int left@@ sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( left@@ sum == sum ) return i ; left@@ sum += arr [ i ] ; } return - 1 ; }
AREA_@@ CIRCUM@@ SCRI@@ BED_@@ CI@@ R@@ CLE_@@ SQUARE | float are@@ ac@@ ir@@ cum@@ scri@@ bed ( float a ) { return ( a * a * ( PI / 2 ) ) ; }
LON@@ GE@@ ST_@@ REPE@@ ATING_@@ AND_@@ NON_@@ OVER@@ L@@ APP@@ ING@@ _SUB@@ STRING | string lon@@ gest@@ Repeated@@ Sub@@ string ( string str ) { int n = str . length ( ) ; int L@@ CS@@ Re [ n + 1 ] [ n + 1 ] ; memset ( L@@ CS@@ Re , 0 , sizeof ( L@@ CS@@ Re ) ) ; string res ; int res_@@ length = 0 ; int i , index = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { if ( str [ i - 1 ] == str [ j - 1 ] && L@@ CS@@ Re [ i - 1 ] [ j - 1 ] < ( j - i ) ) { L@@ CS@@ Re [ i ] [ j ] = L@@ CS@@ Re [ i - 1 ] [ j - 1 ] + 1 ; if ( L@@ CS@@ Re [ i ] [ j ] > res_@@ length ) { res_@@ length = L@@ CS@@ Re [ i ] [ j ] ; index = max ( i , index ) ; } } else L@@ CS@@ Re [ i ] [ j ] = 0 ; } } if ( res_@@ length > 0 ) for ( i = index - res_@@ length + 1 ; i <= index ; i ++ ) res . push_back ( str [ i - 1 ] ) ; return res ; }
HO@@ W_@@ TO_@@ AV@@ OID_@@ OVERFLOW_@@ IN_@@ MODUL@@ AR_@@ MULTIP@@ LIC@@ ATION | ll mul@@ mod ( ll a , ll b , ll mod ) { ll res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( a * 2 ) % mod ; b /= 2 ; } return res % mod ; }
PA@@ IR_@@ WITH_@@ GI@@ V@@ EN_@@ PRODUCT_@@ SET_@@ 1_@@ FIND_@@ IF_@@ ANY_@@ PA@@ IR_@@ EXI@@ ST@@ S_@@ 1 | bool is@@ Product ( int arr [ ] , int n , int x ) { if ( n < 2 ) return false ; unordered_@@ set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { if ( x == 0 ) return true ; else continue ; } if ( x % arr [ i ] == 0 ) { if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return true ; s . insert ( arr [ i ] ) ; } } return false ; }
S@@ UM_@@ K_@@ TH_@@ GROUP_@@ OD@@ D_@@ POSITIVE_@@ NUMB@@ ERS | int k@@ th@@ group@@ sum ( int k ) { int cur = ( k * ( k - 1 ) ) + 1 ; int sum = 0 ; while ( k -- ) { sum += cur ; cur += 2 ; } return sum ; }
FIND_@@ ELEMEN@@ TS_@@ ARRAY_@@ LEA@@ ST_@@ TWO_@@ GREATER_@@ ELEMEN@@ TS_@@ 1 | void find@@ Elements ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) cout << arr [ i ] << " ▁ " ; }
MINIMUM_@@ STE@@ PS_@@ TO_@@ DELETE_@@ A_@@ STRING_@@ AFTER_@@ REPE@@ ATED_@@ DELE@@ TION_@@ OF_@@ PA@@ LIN@@ DRO@@ ME_@@ SUB@@ STRINGS | int min@@ Step@@ To@@ Delete@@ String ( string str ) { int N = str . length ( ) ; int dp [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) for ( int j = 0 ; j <= N ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int len = 1 ; len <= N ; len ++ ) { for ( int i = 0 , j = len - 1 ; j < N ; i ++ , j ++ ) { if ( len == 1 ) dp [ i ] [ j ] = 1 ; else { dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; if ( str [ i ] == str [ i + 1 ] ) dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ; for ( int K = i + 2 ; K <= j ; K ++ ) if ( str [ i ] == str [ K ] ) dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ; } } } return dp [ 0 ] [ N - 1 ] ; }
CAL@@ CUL@@ ATE_@@ AREA_@@ TE@@ TRA@@ HE@@ DRO@@ N | double vol_@@ te@@ tra ( int side ) { double volume = ( pow ( side , 3 ) / ( 6 * sqrt ( 2 ) ) ) ; return volume ; }
SI@@ EV@@ E_@@ OF_@@ AT@@ K@@ IN | int Si@@ eve@@ Of@@ At@@ kin ( int limit ) { if ( limit > 2 ) cout << 2 << " ▁ " ; if ( limit > 3 ) cout << 3 << " ▁ " ; bool si@@ eve [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) si@@ eve [ i ] = false ; for ( int x = 1 ; x * x < limit ; x ++ ) { for ( int y = 1 ; y * y < limit ; y ++ ) { int n = ( 4 * x * x ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 1 || n % 12 == 5 ) ) si@@ eve [ n ] ^= true ; n = ( 3 * x * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) si@@ eve [ n ] ^= true ; n = ( 3 * x * x ) - ( y * y ) ; if ( x > y && n <= limit && n % 12 == 11 ) si@@ eve [ n ] ^= true ; } } for ( int r = 5 ; r * r < limit ; r ++ ) { if ( si@@ eve [ r ] ) { for ( int i = r * r ; i < limit ; i += r * r ) si@@ eve [ i ] = false ; } } for ( int a = 5 ; a < limit ; a ++ ) if ( si@@ eve [ a ] ) cout << a << " ▁ " ; }
LENGTH_@@ OF_THE_@@ LON@@ GE@@ ST_@@ ARI@@ TH@@ MA@@ TIC_@@ PROG@@ RES@@ SION_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY | int l@@ eng@@ ht@@ Of@@ Lon@@ gest@@ AP ( int set [ ] , int n ) { if ( n <= 2 ) return n ; int L [ n ] [ n ] ; int l@@ lap = 2 ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ n - 1 ] = 2 ; for ( int j = n - 2 ; j >= 1 ; j -- ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ; else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) { L [ i ] [ j ] = 2 , i -- ; } else { L [ i ] [ j ] = L [ j ] [ k ] + 1 ; l@@ lap = max ( l@@ lap , L [ i ] [ j ] ) ; i -- ; k ++ ; } } while ( i >= 0 ) { L [ i ] [ j ] = 2 ; i -- ; } } return l@@ lap ; }
COUNT_@@ GROUP@@ INGS_@@ NUMBER@@ _S@@ UM_@@ DIG@@ IT@@ S_@@ EVER@@ Y@@ _SUB_@@ GROUP_@@ LESS_@@ EQUAL@@ S_@@ IM@@ MEDI@@ ATE_@@ RIGHT_@@ SUB_@@ GROUP_@@ 1 | int count@@ Groups ( int position , int previous_@@ sum , int length , char * num ) { if ( position == length ) return 1 ; if ( dp [ position ] [ previous_@@ sum ] != - 1 ) return dp [ position ] [ previous_@@ sum ] ; dp [ position ] [ previous_@@ sum ] = 0 ; int res = 0 ; int sum = 0 ; for ( int i = position ; i < length ; i ++ ) { sum += ( num [ i ] - '0' ) ; if ( sum >= previous_@@ sum ) res += count@@ Groups ( i + 1 , sum , length , num ) ; } dp [ position ] [ previous_@@ sum ] = res ; return res ; }
LON@@ GE@@ ST@@ _SP@@ AN@@ _S@@ UM_@@ TWO_@@ BINARY_@@ ARRAY@@ S_@@ 1 | int lon@@ gest@@ Common@@ Sum ( bool ar@@ r1 [ ] , bool ar@@ r2 [ ] , int n ) { int maxLen = 0 ; int pre@@ Sum@@ 1 = 0 , pre@@ Sum@@ 2 = 0 ; int diff [ 2 * n + 1 ] ; memset ( diff , - 1 , sizeof ( diff ) ) ; for ( int i = 0 ; i < n ; i ++ ) { pre@@ Sum@@ 1 += ar@@ r1 [ i ] ; pre@@ Sum@@ 2 += ar@@ r2 [ i ] ; int curr_@@ diff = pre@@ Sum@@ 1 - pre@@ Sum@@ 2 ; int diff@@ Index = n + curr_@@ diff ; if ( curr_@@ diff == 0 ) maxLen = i + 1 ; else if ( diff [ diff@@ Index ] == - 1 ) diff [ diff@@ Index ] = i ; else { int len = i - diff [ diff@@ Index ] ; if ( len > maxLen ) maxLen = len ; } } return maxLen ; }
PROGRAM_@@ TO_@@ PRINT_@@ FIRST_@@ N_@@ FI@@ BON@@ ACC@@ I_@@ NUMB@@ ERS | void print@@ Fi@@ bon@@ ac@@ ci@@ Numbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; for ( i = 1 ; i <= n ; i ++ ) { cout << f2 << " ▁ " ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } }
LAR@@ GE@@ ST@@ _S@@ UM_@@ CON@@ TI@@ GU@@ OU@@ S@@ _SUB@@ ARRAY_@@ 3 | int max@@ Sub@@ Array@@ Sum ( int a [ ] , int size ) { int max_@@ so@@ _f@@ ar = INT_@@ MIN , max_@@ ending_@@ here = 0 , start = 0 , end = 0 , s = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_@@ ending_@@ here += a [ i ] ; if ( max_@@ so@@ _f@@ ar < max_@@ ending_@@ here ) { max_@@ so@@ _f@@ ar = max_@@ ending_@@ here ; start = s ; end = i ; } if ( max_@@ ending_@@ here < 0 ) { max_@@ ending_@@ here = 0 ; s = i + 1 ; } } cout << " Maximum ▁ contiguous ▁ sum ▁ is ▁ " << max_@@ so@@ _f@@ ar << endl ; cout << " Starting ▁ index ▁ " << start << endl << " Ending ▁ index ▁ " << end << endl ; }
FIND_@@ EQUAL_@@ POINT_@@ STRING_@@ BRAC@@ KETS | int find@@ Index ( string str ) { int len = str . length ( ) ; int open [ len + 1 ] , close [ len + 1 ] ; int index = - 1 ; memset ( open , 0 , sizeof ( open ) ) ; memset ( close , 0 , sizeof ( close ) ) ; open [ 0 ] = 0 ; close [ len ] = 0 ; if ( str [ 0 ] == ' ( ' ) open [ 1 ] = 1 ; if ( str [ len - 1 ] == ' ) ' ) close [ len - 1 ] = 1 ; for ( int i = 1 ; i < len ; i ++ ) { if ( str [ i ] == ' ( ' ) open [ i + 1 ] = open [ i ] + 1 ; else open [ i + 1 ] = open [ i ] ; } for ( int i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] == ' ) ' ) close [ i ] = close [ i + 1 ] + 1 ; else close [ i ] = close [ i + 1 ] ; } if ( open [ len ] == 0 ) return len ; if ( close [ 0 ] == 0 ) return 0 ; for ( int i = 0 ; i <= len ; i ++ ) if ( open [ i ] == close [ i ] ) index = i ; return index ; }
COUNT_@@ NUMBER_OF_@@ WAY@@ S_TO_@@ PARTITION_@@ A@@ _SET_@@ IN@@ TO_@@ K@@ _SUB@@ SE@@ TS_@@ 1 | int count@@ P ( int n , int k ) { int dp [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int i = 0 ; i <= k ; i ++ ) dp [ 0 ] [ k ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= i ; j ++ ) if ( j == 1 || i == j ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; return dp [ n ] [ k ] ; }
LON@@ GE@@ ST_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQUENCE | int lis ( int arr [ ] , int n ) { int max = 1 ; _@@ lis ( arr , n , & max ) ; return max ; }
FIND_@@ REPE@@ ATED_@@ CHARACTER_@@ PRES@@ ENT_@@ FIRST_@@ STRING | int find@@ Repeat@@ First@@ N2 ( char * s ) { int p = - 1 , i , j ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) { for ( j = i + 1 ; j < strlen ( s ) ; j ++ ) { if ( s [ i ] == s [ j ] ) { p = i ; break ; } } if ( p != - 1 ) break ; } return p ; }
K_@@ TH@@ _S@@ MAL@@ LE@@ ST_@@ ELEMENT_@@ REMO@@ V@@ ING_@@ INTEG@@ ERS_@@ N@@ ATUR@@ AL_@@ NUMB@@ ERS | int k@@ smallest ( int arr [ ] , int n , int k ) { int b [ MAX ] ; memset ( b , 0 , sizeof b ) ; for ( int i = 0 ; i < n ; i ++ ) b [ arr [ i ] ] = 1 ; for ( int j = 1 ; j < MAX ; j ++ ) { if ( b [ j ] != 1 ) k -- ; if ( ! k ) return j ; } }
CHECK_@@ IF_@@ STACK_@@ ELEMEN@@ TS_@@ ARE_@@ PAIR@@ WI@@ SE_@@ CON@@ SEC@@ UTI@@ VE | bool pair@@ Wi@@ se@@ Con@@ sec@@ utive ( stack < int > s ) { stack < int > aux ; while ( ! s . empty ( ) ) { aux . push ( s . top ( ) ) ; s . pop ( ) ; } bool result = true ; while ( aux . empty ( ) > 1 ) { int x = aux . top ( ) ; aux . pop ( ) ; int y = aux . top ( ) ; aux . pop ( ) ; if ( abs ( x - y ) != 1 ) result = false ; s . push ( x ) ; s . push ( y ) ; } if ( aux . size ( ) == 1 ) s . push ( aux . top ( ) ) ; return result ; }
BIN@@ AR@@ Y@@ _SEARCH_@@ 1 | int binary@@ Search ( int arr [ ] , int l , int r , int x ) { while ( l <= r ) { int m = l + ( r - l ) / 2 ; if ( arr [ m ] == x ) return m ; if ( arr [ m ] < x ) l = m + 1 ; else r = m - 1 ; } return - 1 ; }
COUNT_@@ DISTIN@@ CT_@@ OC@@ CURR@@ EN@@ CES_@@ AS_@@ A@@ _SUB@@ SEQUENCE | int find@@ Sub@@ sequence@@ Count ( string S , string T ) { int m = T . length ( ) , n = S . length ( ) ; if ( m > n ) return 0 ; int mat [ m + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) mat [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) mat [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ; else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ; } } return mat [ m ] [ n ] ; }
SW@@ AP_@@ TWO_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ USING_@@ TEMPOR@@ ARY_@@ VARIABLE | void swap ( int * xp , int * yp ) { * xp = * xp ^ * yp ; * yp = * xp ^ * yp ; * xp = * xp ^ * yp ; }
POLIC@@ E@@ MEN@@ _C@@ ATCH_@@ TH@@ I@@ EV@@ ES | int poli@@ ce@@ Th@@ ie@@ f ( char arr [ ] , int n , int k ) { int res = 0 ; vector < int > th@@ i ; vector < int > pol ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ' P ' ) pol . push_back ( i ) ; else if ( arr [ i ] == ' T ' ) th@@ i . push_back ( i ) ; } int l = 0 , r = 0 ; while ( l < th@@ i . size ( ) && r < pol . size ( ) ) { if ( abs ( th@@ i [ l ] - pol [ r ] ) <= k ) { res ++ ; l ++ ; r ++ ; } else if ( th@@ i [ l ] < pol [ r ] ) l ++ ; else r ++ ; } return res ; }
LAR@@ GE@@ ST@@ _SUB@@ ARRAY_@@ WITH_@@ EQUAL_@@ NUMBER_OF_@@ 0@@ S_@@ AND_@@ 1@@ S_@@ 1 | int maxLen ( int arr [ ] , int n ) { unordered_map < int , int > h@@ M ; int sum = 0 ; int max_len = 0 ; int ending_@@ index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum == 0 ) { max_len = i + 1 ; ending_@@ index = i ; } if ( h@@ M . find ( sum + n ) != h@@ M . end ( ) ) { if ( max_len < i - h@@ M [ sum + n ] ) { max_len = i - h@@ M [ sum + n ] ; ending_@@ index = i ; } } else h@@ M [ sum + n ] = i ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ; printf ( " % d ▁ to ▁ % d \n " , ending_@@ index - max_len + 1 , ending_@@ index ) ; return max_len ; }
MAXIMUM_@@ DIFF@@ ER@@ ENCE_@@ ZER@@ OS_@@ ONE@@ S_@@ BINARY_@@ STRING@@ _SET_@@ 2_@@ TIME | int find@@ Length ( string str , int n ) { int current_@@ sum = 0 ; int max_@@ sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { current_@@ sum += ( str [ i ] == '0' ? 1 : - 1 ) ; if ( current_@@ sum < 0 ) current_@@ sum = 0 ; max_@@ sum = max ( current_@@ sum , max_@@ sum ) ; } return max_@@ sum == 0 ? - 1 : max_@@ sum ; }
MAXIMUM_@@ CON@@ SEC@@ UTI@@ VE_@@ NUMB@@ ERS_@@ PRES@@ ENT_@@ ARRAY | int find@@ Lon@@ gest@@ Con@@ seq@@ Sub@@ seq ( int arr [ ] , int n ) { unordered_@@ set < int > S ; for ( int i = 0 ; i < n ; i ++ ) S . insert ( arr [ i ] ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) { int j = arr [ i ] ; while ( S . find ( j ) != S . end ( ) ) j ++ ; ans = max ( ans , j - arr [ i ] ) ; } } return ans ; }
LE@@ XI@@ CO@@ GRAPHIC@@ AL@@ LY_@@ NEXT_@@ STRING | string next@@ Word ( string s ) { if ( s == " " ) return " a " ; int i = s . length ( ) - 1 ; while ( s [ i ] == ' z ' && i >= 0 ) i -- ; if ( i == - 1 ) s = s + ' a ' ; else s [ i ] ++ ; return s ; }
SCHEDUL@@ E_@@ J@@ OBS@@ _SERVER_@@ GE@@ TS_@@ EQUAL_@@ LOAD | int solve ( int a [ ] , int b [ ] , int n ) { int i ; long long int s = 0 ; for ( i = 0 ; i < n ; i ++ ) s += ( a [ i ] + b [ i ] ) ; if ( n == 1 ) return a [ 0 ] + b [ 0 ] ; if ( s % n != 0 ) return - 1 ; int x = s / n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) return - 1 ; if ( i > 0 ) { a [ i ] += b [ i - 1 ] ; b [ i - 1 ] = 0 ; } if ( a [ i ] == x ) continue ; int y = a [ i ] + b [ i ] ; if ( i + 1 < n ) y += b [ i + 1 ] ; if ( y == x ) { a [ i ] = y ; b [ i ] = b [ i + 1 ] = 0 ; continue ; } if ( a [ i ] + b [ i ] == x ) { a [ i ] += b [ i ] ; b [ i ] = 0 ; continue ; } if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } return - 1 ; } for ( i = 0 ; i < n ; i ++ ) if ( b [ i ] != 0 ) return - 1 ; return x ; }
FORM_@@ MINIMUM_@@ NUMBER_@@ FROM_@@ GI@@ VEN@@ _SEQU@@ ENCE_@@ 1 | string getMin@@ Number@@ For@@ Pattern ( string seq ) { int n = seq . length ( ) ; if ( n >= 9 ) return " - 1" ; string result ( n + 1 , ' ▁ ' ) ; int count = 1 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i == n || seq [ i ] == ' I ' ) { for ( int j = i - 1 ; j >= - 1 ; j -- ) { result [ j + 1 ] = '0' + count ++ ; if ( j >= 0 && seq [ j ] == ' I ' ) break ; } } } return result ; }
SHUFF@@ LE_@@ 2@@ N_@@ INTEG@@ ERS_@@ FORMAT_@@ A@@ 1_@@ B@@ 1_@@ A@@ 2_@@ B@@ 2_@@ A@@ 3_@@ B@@ 3_@@ BN_@@ WITH@@ OUT_@@ USING_@@ EX@@ TRA@@ _SPACE | void shuffle@@ Array ( int a [ ] , int n ) { for ( int i = 0 , q = 1 , k = n ; i < n ; i ++ , k ++ , q ++ ) for ( int j = k ; j > i + q ; j -- ) swap ( a [ j - 1 ] , a [ j ] ) ; }
FIND_@@ REPE@@ TI@@ TIVE_@@ ELEMENT_@@ 1_@@ N_@@ 1_1 | int find@@ Repe@@ ating ( int arr [ ] , int n ) { unordered_@@ set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ i ] ; s . insert ( arr [ i ] ) ; } return - 1 ; }
C_@@ PROGR@@ AM@@ _SUB@@ TRAC@@ TION_@@ MA@@ TIC@@ ES | void multiply ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < N ; j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ; }
FIRST_@@ NEGATIVE_@@ INTEGER_@@ EVER@@ Y_@@ WINDOW@@ _SIZE_@@ K | void print@@ First@@ Negative@@ Integer ( int arr [ ] , int n , int k ) { bool flag ; for ( int i = 0 ; i < ( n - k + 1 ) ; i ++ ) { flag = false ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < 0 ) { cout << arr [ i + j ] << " ▁ " ; flag = true ; break ; } } if ( ! flag ) cout << "0" << " ▁ " ; } }
NUMBER_@@ FULL_@@ BINARY_@@ TRE@@ ES_@@ NODE_@@ PRODUCT_@@ CHILDREN | int nu@@ mo@@ ff@@ bt ( int arr [ ] , int n ) { int max@@ value = INT_@@ MIN , min@@ value = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { max@@ value = max ( max@@ value , arr [ i ] ) ; min@@ value = min ( min@@ value , arr [ i ] ) ; } int mark [ max@@ value + 2 ] ; int value [ max@@ value + 2 ] ; memset ( mark , 0 , sizeof ( mark ) ) ; memset ( value , 0 , sizeof ( value ) ) ; for ( int i = 0 ; i < n ; i ++ ) { mark [ arr [ i ] ] = 1 ; value [ arr [ i ] ] = 1 ; } int ans = 0 ; for ( int i = min@@ value ; i <= max@@ value ; i ++ ) { if ( mark [ i ] ) { for ( int j = i + i ; j <= max@@ value && j / i <= i ; j += i ) { if ( ! mark [ j ] ) continue ; value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ; if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ; } } ans += value [ i ] ; } return ans ; }
TRIANG@@ ULAR_@@ MATCH@@ STICK_@@ NUMBER | int numberOf@@ S@@ ticks ( int x ) { return ( 3 * x * ( x + 1 ) ) / 2 ; }
K_@@ MAX@@ IM@@ UM@@ _S@@ UM_@@ COMBIN@@ ATION@@ S_@@ TWO_@@ ARRAY@@ S | void K@@ Max@@ Combin@@ ations ( int A [ ] , int B [ ] , int N , int K ) { priority_@@ queue < int > pq ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) pq . push ( A [ i ] + B [ j ] ) ; int count = 0 ; while ( count < K ) { cout << pq . top ( ) << endl ; pq . pop ( ) ; count ++ ; } }
CONSTRUC@@ T_@@ ARRAY_@@ PAIR@@ _S@@ UM_@@ ARRAY | void construct@@ Arr ( int arr [ ] , int pair [ ] , int n ) { arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ; for ( int i = 1 ; i < n ; i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ; }
CHECK_@@ HALF_@@ STRING_@@ CHARACTER_@@ FREQU@@ ENCY_@@ CHARACTER | bool check@@ Correct@@ Or@@ Not ( string s ) { int count@@ 1 [ MAX_@@ CHAR ] = { 0 } ; int count2 [ MAX_@@ CHAR ] = { 0 } ; int n = s . length ( ) ; if ( n == 1 ) return true ; for ( int i = 0 , j = n - 1 ; i < j ; i ++ , j -- ) { count@@ 1 [ s [ i ] - ' a ' ] ++ ; count2 [ s [ j ] - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_@@ CHAR ; i ++ ) if ( count@@ 1 [ i ] != count2 [ i ] ) return false ; return true ; }
MINI@@ MI@@ ZE_@@ THE_@@ MAXIMUM_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN_@@ THE_@@ HE@@ IGHT@@ S | int getMin@@ Diff ( int arr [ ] , int n , int k ) { if ( n == 1 ) return 0 ; sort ( arr , arr + n ) ; int ans = arr [ n - 1 ] - arr [ 0 ] ; int small = arr [ 0 ] + k ; int big = arr [ n - 1 ] - k ; if ( small > big ) swap ( small , big ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int subtract = arr [ i ] - k ; int add = arr [ i ] + k ; if ( subtract >= small || add <= big ) continue ; if ( big - subtract <= add - small ) small = subtract ; else big = add ; } return min ( ans , big - small ) ; }
MINIMUM_@@ POSSI@@ BLE_@@ VALUE_@@ AI_@@ A@@ J_@@ K_@@ GI@@ V@@ EN_@@ ARRAY_@@ K | void pairs ( int arr [ ] , int n , int k ) { int smallest = INT_MAX ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) { smallest = abs ( arr [ i ] + arr [ j ] - k ) ; count = 1 ; } else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ; } cout << " Min@@ imal ▁ Value ▁ = ▁ " << smallest << " \n " ; cout << " Total ▁ Pairs ▁ = ▁ " << count << " \n " ; }
SIZE_@@ SUB@@ ARRAY_@@ MAX@@ IM@@ UM@@ _S@@ UM | int max@@ Sub@@ Array@@ Sum ( int a [ ] , int size ) { int max_@@ so@@ _f@@ ar = INT_@@ MIN , max_@@ ending_@@ here = 0 , start = 0 , end = 0 , s = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_@@ ending_@@ here += a [ i ] ; if ( max_@@ so@@ _f@@ ar < max_@@ ending_@@ here ) { max_@@ so@@ _f@@ ar = max_@@ ending_@@ here ; start = s ; end = i ; } if ( max_@@ ending_@@ here < 0 ) { max_@@ ending_@@ here = 0 ; s = i + 1 ; } } return ( end - start + 1 ) ; }
MINIMUM_@@ NUMBER_@@ OF@@ _S@@ QUAR@@ ES_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL@@ S_TO_@@ GI@@ V@@ EN_@@ NUMBER_@@ N_@@ 1 | int getMin@@ Squ@@ ares ( int n ) { int * dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 2 ; dp [ 3 ] = 3 ; for ( int i = 4 ; i <= n ; i ++ ) { dp [ i ] = i ; for ( int x = 1 ; x <= ceil ( sqrt ( i ) ) ; x ++ ) { int temp = x * x ; if ( temp > i ) break ; else dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] ) ; } } int res = dp [ n ] ; delete [ ] dp ; return res ; }
DI@@ VISIBILITY_@@ BY_@@ 7 | int is@@ Di@@ visible@@ By@@ 7 ( int num ) { if ( num < 0 ) return is@@ Di@@ visible@@ By@@ 7 ( - num ) ; if ( num == 0 || num == 7 ) return 1 ; if ( num < 10 ) return 0 ; return is@@ Di@@ visible@@ By@@ 7 ( num / 10 - 2 * ( num - num / 10 * 10 ) ) ; }
POSITION_@@ OF_@@ RIGHT@@ MO@@ ST@@ _SET_@@ BIT_@@ 2 | int R@@ ight_@@ most_@@ set@@ bit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_@@ SIZE ; i ++ ) { if ( ! ( num & ( 1 << i ) ) ) pos ++ ; else break ; } return pos ; }
EF@@ FI@@ CI@@ ENT_@@ WA@@ Y_@@ TO_@@ MULTI@@ PLY_@@ WITH_@@ 7 | long multiply@@ By@@ Se@@ ven ( long n ) { return ( ( n << 3 ) - n ) ; }
NEXT_@@ HIGH@@ ER_@@ NUMBER_@@ WITH@@ _S@@ AME_@@ NUMBER_@@ OF@@ _SET_@@ BITS | uint@@ _t sno@@ ob ( uint@@ _t x ) { uint@@ _t right@@ One ; uint@@ _t next@@ High@@ er@@ One@@ Bit ; uint@@ _t right@@ One@@ s@@ Pattern ; uint@@ _t next = 0 ; if ( x ) { right@@ One = x & - ( signed ) x ; next@@ High@@ er@@ One@@ Bit = x + right@@ One ; right@@ One@@ s@@ Pattern = x ^ next@@ High@@ er@@ One@@ Bit ; right@@ One@@ s@@ Pattern = ( right@@ One@@ s@@ Pattern ) / right@@ One ; right@@ One@@ s@@ Pattern >>= 2 ; next = next@@ High@@ er@@ One@@ Bit | right@@ One@@ s@@ Pattern ; } return next ; }
CHANGE_@@ ARRAY_@@ PER@@ MU@@ TATION_@@ NUMB@@ ERS_@@ 1_@@ N | void make@@ Permutation ( int a [ ] , int n ) { unordered_map < int , int > count ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int next_@@ missing = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( count [ a [ i ] ] != 1 || a [ i ] > n || a [ i ] < 1 ) { count [ a [ i ] ] -- ; while ( count . find ( next_@@ missing ) != count . end ( ) ) next_@@ missing ++ ; a [ i ] = next_@@ missing ; count [ next_@@ missing ] = 1 ; } } }
MAXIMUM_@@ AREA_@@ QUAD@@ RI@@ LAT@@ ER@@ AL | double max@@ Area ( double a , double b , double c , double d ) { double semi@@ per@@ imeter = ( a + b + c + d ) / 2 ; return sqrt ( ( semi@@ per@@ imeter - a ) * ( semi@@ per@@ imeter - b ) * ( semi@@ per@@ imeter - c ) * ( semi@@ per@@ imeter - d ) ) ; }
REPL@@ ACE_@@ OC@@ CURR@@ EN@@ CES_@@ STRING_@@ AB_@@ C_@@ WITH@@ OUT_@@ USING_@@ EX@@ TRA@@ _SPACE_@@ 1 | void translate ( char * str ) { int len = strlen ( str ) ; if ( len < 2 ) return ; int i = 0 ; int j = 0 ; while ( j < len - 1 ) { if ( str [ j ] == ' A ' && str [ j + 1 ] == ' B ' ) { j = j + 2 ; str [ i ++ ] = ' C ' ; continue ; } str [ i ++ ] = str [ j ++ ] ; } if ( j == len - 1 ) str [ i ++ ] = str [ j ] ; str [ i ] = '' ; }
FIND_@@ POWER_@@ POWER_@@ MOD_@@ PRI@@ ME | unsigned int Calculate ( unsigned int A , unsigned int B , unsigned int C , unsigned int M ) { unsigned int res , ans ; res = power ( B , C , M - 1 ) ; ans = power ( A , res , M ) ; return ans ; }
CHECK_@@ EXI@@ ST_@@ TWO_@@ ELEMEN@@ TS_@@ ARRAY_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL@@ _S@@ UM_@@ REST_@@ ARRAY | bool check@@ Pair ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( sum % 2 != 0 ) return false ; sum = sum / 2 ; unordered_@@ set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { int val = sum - arr [ i ] ; if ( s . find ( val ) != s . end ( ) ) { printf ( " Pair ▁ elements ▁ are ▁ % d ▁ and ▁ % d \n " , arr [ i ] , val ) ; return true ; } s . insert ( arr [ i ] ) ; } return false ; }
PROGRAM_@@ FOR@@ _SUR@@ FACE_@@ AREA_@@ OF_@@ OC@@ TA@@ HE@@ DRO@@ N | double surface_@@ area_@@ oc@@ ta@@ hedron ( double side ) { return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ; }
FIND_@@ A@@ _SPECI@@ FIC_@@ PA@@ IR_@@ IN_@@ MATRIX | int find@@ Max@@ Value ( int mat [ ] [ N ] ) { int maxValue = INT_@@ MIN ; for ( int a = 0 ; a < N - 1 ; a ++ ) for ( int b = 0 ; b < N - 1 ; b ++ ) for ( int d = a + 1 ; d < N ; d ++ ) for ( int e = b + 1 ; e < N ; e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ; return maxValue ; }
MULTI@@ PLY_@@ TWO_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ USING_@@ MULTI@@ PLY_@@ DI@@ VISI@@ ON_@@ BIT@@ WI@@ SE_@@ OPER@@ ATOR@@ S_@@ AND_@@ NO_@@ LOOP@@ S | public : int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; if ( y < 0 ) return - multiply ( x , - y ) ; }
FIND_@@ TR@@ IP@@ LET@@ S_@@ ARRAY_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL_@@ ZERO_@@ 1 | void find@@ Trip@@ lets ( int arr [ ] , int n ) { bool found = false ; for ( int i = 0 ; i < n - 1 ; i ++ ) { unordered_@@ set < int > s ; for ( int j = i + 1 ; j < n ; j ++ ) { int x = - ( arr [ i ] + arr [ j ] ) ; if ( s . find ( x ) != s . end ( ) ) { printf ( " % d ▁ % d ▁ % d \n " , x , arr [ i ] , arr [ j ] ) ; found = true ; } else s . insert ( arr [ j ] ) ; } } if ( found == false ) cout << " ▁ No ▁ Trip@@ let ▁ Found " << endl ; }
FIND_@@ MAXIMUM_@@ VALUE_@@ OF@@ _S@@ UM_@@ I@@ AR@@ RI@@ _@@ WITH_@@ ONLY_@@ ROTA@@ TIONS_@@ ON_@@ GI@@ V@@ EN_@@ ARRAY_@@ ALLOWED | int max@@ Sum ( int arr [ ] , int n ) { int arr@@ Sum = 0 ; int curr@@ Val = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr@@ Sum = arr@@ Sum + arr [ i ] ; curr@@ Val = curr@@ Val + ( i * arr [ i ] ) ; } int maxVal = curr@@ Val ; for ( int j = 1 ; j < n ; j ++ ) { curr@@ Val = curr@@ Val + arr@@ Sum - n * arr [ n - j ] ; if ( curr@@ Val > maxVal ) maxVal = curr@@ Val ; } return maxVal ; }
PROGRAM_@@ FOR@@ _SCAL@@ AR_@@ MULTIP@@ LIC@@ ATION_@@ OF_@@ A_@@ MATRIX | void scalar@@ Product@@ Mat ( int mat [ ] [ N ] , int k ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ; }
PRINT_@@ SQU@@ AR@@ ES_@@ FIRST_@@ N_@@ N@@ ATUR@@ AL_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ USING_@@ 1 | void print@@ Squ@@ ares ( int n ) { int square = 0 , odd = 1 ; for ( int x = 0 ; x < n ; x ++ ) { cout << square << " ▁ " ; square = square + odd ; odd = odd + 2 ; } }
N@@ TH_@@ PEN@@ TAG@@ ON@@ AL_@@ NUMBER | int pent@@ ag@@ onal@@ Num ( int n ) { return ( 3 * n * n - n ) / 2 ; }
COUNT_@@ ARRAY@@ S_@@ AD@@ J@@ AC@@ ENT_@@ ELEMEN@@ TS_@@ ONE_@@ DI@@ VI@@ DE_@@ AN@@ OTHER | int nu@@ mo@@ f@@ Array ( int n , int m ) { int dp [ MAX ] [ MAX ] ; vector < int > di [ MAX ] ; vector < int > mu [ MAX ] ; memset ( dp , 0 , sizeof dp ) ; memset ( di , 0 , sizeof di ) ; memset ( mu , 0 , sizeof mu ) ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 2 * i ; j <= m ; j += i ) { di [ j ] . push_back ( i ) ; mu [ i ] . push_back ( j ) ; } di [ i ] . push_back ( i ) ; } for ( int i = 1 ; i <= m ; i ++ ) dp [ 1 ] [ i ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = 0 ; for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ; for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ans += dp [ n ] [ i ] ; di [ i ] . clear ( ) ; mu [ i ] . clear ( ) ; } return ans ; }
0_@@ 1_@@ KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M_@@ D@@ P_@@ 10 | int kn@@ ap@@ S@@ ack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 || W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return kn@@ ap@@ S@@ ack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + kn@@ ap@@ S@@ ack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , kn@@ ap@@ S@@ ack ( W , wt , val , n - 1 ) ) ; }
FIND_@@ TR@@ IP@@ LET@@ S_@@ ARRAY_@@ WHO@@ SE_@@ S@@ UM_@@ EQUAL_@@ ZERO | void find@@ Trip@@ lets ( int arr [ ] , int n ) { bool found = true ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) { cout << arr [ i ] << " ▁ " << arr [ j ] << " ▁ " << arr [ k ] << endl ; found = true ; } } } } if ( found == false ) cout << " ▁ not ▁ exist ▁ " << endl ; }
COUNT_@@ NUMBER_@@ WAY@@ S_@@ REACH_@@ GI@@ VEN@@ _S@@ CORE_@@ GAME | int count ( int n ) { int table [ n + 1 ] , i ; for ( int j = 0 ; j < n + 1 ; j ++ ) table [ j ] = 0 ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ ABSOL@@ UTE_@@ DIFF@@ ER@@ ENCE_@@ ARRAY | int Max@@ Sum@@ Difference ( int a [ ] , int n ) { vector < int > final@@ Sequence ; sort ( a , a + n ) ; for ( int i = 0 ; i < n / 2 ; ++ i ) { final@@ Sequence . push_back ( a [ i ] ) ; final@@ Sequence . push_back ( a [ n - i - 1 ] ) ; } int Maximum@@ Sum = 0 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { Maximum@@ Sum = Maximum@@ Sum + abs ( final@@ Sequence [ i ] - final@@ Sequence [ i + 1 ] ) ; } Maximum@@ Sum = Maximum@@ Sum + abs ( final@@ Sequence [ n - 1 ] - final@@ Sequence [ 0 ] ) ; return Maximum@@ Sum ; }
PROGRAM_@@ FIND_@@ M@@ ID_@@ POINT_@@ LINE | void midpoint ( int x1 , int x2 , int y1 , int y2 ) { cout << ( float ) ( x1 + x2 ) / 2 << " ▁ , ▁ " << ( float ) ( y1 + y2 ) / 2 ; }
ALTER@@ NATIVE_@@ SOR@@ TING | void alternate@@ Sort ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int i = 0 , j = n - 1 ; while ( i < j ) { cout << arr [ j -- ] << " ▁ " ; cout << arr [ i ++ ] << " ▁ " ; } if ( n % 2 != 0 ) cout << arr [ i ] ; }
NUMBER@@ _SUB@@ ARRAY@@ S_S@@ UM_@@ EXAC@@ TL@@ Y_@@ EQUAL_@@ K | int find@@ Sub@@ array@@ Sum ( int arr [ ] , int n , int sum ) { unordered_map < int , int > prev@@ Sum ; int res = 0 ; int curr@@ sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr@@ sum += arr [ i ] ; if ( curr@@ sum == sum ) res ++ ; if ( prev@@ Sum . find ( curr@@ sum - sum ) != prev@@ Sum . end ( ) ) res += ( prev@@ Sum [ curr@@ sum - sum ] ) ; prev@@ Sum [ curr@@ sum ] ++ ; } return res ; }
FIND_@@ THE_@@ ELEMENT_@@ TH@@ AT_@@ AP@@ PE@@ AR@@ S_@@ ON@@ CE_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ ARRAY | void search ( int * arr , int low , int high ) { if ( low > high ) return ; if ( low == high ) { printf ( " The ▁ required ▁ element ▁ is ▁ % d ▁ " , arr [ low ] ) ; return ; } int mid = ( low + high ) / 2 ; if ( mid % 2 == 0 ) { if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ; else search ( arr , low , mid ) ; } else { if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ; else search ( arr , low , mid - 1 ) ; } }
FORM_S@@ MAL@@ LE@@ ST_@@ NUMBER_@@ USING_@@ ONE@@ _SW@@ AP_@@ OPERATION | string smalle@@ st@@ Number ( string num ) { int n = num . size ( ) ; int right@@ Min [ n ] , right ; right@@ Min [ n - 1 ] = - 1 ; right = n - 1 ; for ( int i = n - 2 ; i >= 1 ; i -- ) { if ( num [ i ] >= num [ right ] ) right@@ Min [ i ] = right ; else { if ( num [ i ] == num [ i + 1 ] ) { right@@ Min [ i ] = right ; } else { right@@ Min [ i ] = - 1 ; right = i ; } } } int small = - 1 ; for ( int i = 1 ; i < n ; i ++ ) if ( num [ i ] != '0' ) { if ( small == - 1 ) { if ( num [ i ] < num [ 0 ] ) small = i ; } else if ( num [ i ] <= num [ small ] ) small = i ; } if ( small != - 1 ) swap ( num [ 0 ] , num [ small ] ) ; else { for ( int i = 1 ; i < n ; i ++ ) { if ( right@@ Min [ i ] != - 1 && num [ i ] != num [ right@@ Min [ i ] ] ) { swap ( num [ i ] , num [ right@@ Min [ i ] ] ) ; break ; } } } return num ; }
PROGRAM_@@ ARE@@ A@@ _S@@ QU@@ ARE | int area@@ Square ( int side ) { int area = side * side ; return area ; }
FIND_@@ DAY_OF_@@ THE_@@ WEEK_@@ FOR_@@ A_@@ GI@@ V@@ EN_@@ DATE | int day@@ of@@ week ( int d , int m , int y ) { static int t [ ] = { 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 } ; y -= m < 3 ; return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d ) % 7 ; }
CHECK_@@ QUEUE_@@ CAN@@ _S@@ OR@@ TED_@@ AN@@ OTHER_@@ QUEUE_@@ USING_@@ STACK | bool check@@ Sorted ( int n , queue < int > & q ) { stack < int > st ; int expected = 1 ; int f@@ nt ; while ( ! q . empty ( ) ) { f@@ nt = q . front ( ) ; q . pop ( ) ; if ( f@@ nt == expected ) expected ++ ; else { if ( st . empty ( ) ) { st . push ( f@@ nt ) ; } else if ( ! st . empty ( ) && st . top ( ) < f@@ nt ) { return false ; } else st . push ( f@@ nt ) ; } while ( ! st . empty ( ) && st . top ( ) == expected ) { st . pop ( ) ; expected ++ ; } } if ( expected - 1 == n && st . empty ( ) ) return true ; return false ; }
SORT_@@ ARRAY_@@ CONTA@@ IN_@@ 1_@@ N_@@ VALUES | void sor@@ tit ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = i + 1 ; } }
LC@@ S_@@ LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQU@@ ENCE_@@ THRE@@ E_@@ STRING@@ S_@@ 1 | int l@@ cs@@ Of@@ 3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) return 0 ; if ( dp [ i ] [ j ] [ k ] != - 1 ) return dp [ i ] [ j ] [ k ] ; if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) return dp [ i ] [ j ] [ k ] = 1 + l@@ cs@@ Of@@ 3 ( i - 1 , j - 1 , k - 1 ) ; else return dp [ i ] [ j ] [ k ] = max ( max ( l@@ cs@@ Of@@ 3 ( i - 1 , j , k ) , l@@ cs@@ Of@@ 3 ( i , j - 1 , k ) ) , l@@ cs@@ Of@@ 3 ( i , j , k - 1 ) ) ; }
LOWER_@@ INSER@@ TION_@@ POINT | int Lower@@ Insertion@@ Point ( int arr [ ] , int n , int X ) { if ( X < arr [ 0 ] ) return 0 ; else if ( X > arr [ n - 1 ] ) return n ; int lower@@ Pnt = 0 ; int i = 1 ; while ( i < n && arr [ i ] < X ) { lower@@ Pnt = i ; i = i * 2 ; } while ( lower@@ Pnt < n && arr [ lower@@ Pnt ] < X ) lower@@ Pnt ++ ; return lower@@ Pnt ; }
CONSTRUC@@ T_@@ LE@@ XI@@ CO@@ GRAPHIC@@ AL@@ LY@@ _S@@ MAL@@ LE@@ ST_@@ PA@@ LIN@@ DRO@@ ME | string construct@@ Pal@@ in ( string str , int len ) { int i = 0 , j = len - 1 ; for ( ; i < j ; i ++ , j -- ) { if ( str [ i ] == str [ j ] && str [ i ] != ' * ' ) continue ; else if ( str [ i ] == str [ j ] && str [ i ] == ' * ' ) { str [ i ] = ' a ' ; str [ j ] = ' a ' ; continue ; } else if ( str [ i ] == ' * ' ) { str [ i ] = str [ j ] ; continue ; } else if ( str [ j ] == ' * ' ) { str [ j ] = str [ i ] ; continue ; } cout << " Not ▁ Possible " ; return " " ; } return str ; }
SECTION_@@ FOR@@ MUL@@ A_@@ POINT_@@ DI@@ VIDE@@ S_@@ LINE_@@ GI@@ V@@ EN_@@ RATIO | void section ( double x1 , double x2 , double y1 , double y2 , double m , double n ) { double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n ) ; double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n ) ; cout << " ( " << x << " , ▁ " ; cout << y << " ) " << endl ; }
SQU@@ ARE_@@ ROOT_@@ NUMBER_@@ USING_@@ LOG | double square@@ Root ( double n ) { return pow ( 2 , 0.5 * log2 ( n ) ) ; }
MAXI@@ MI@@ ZE_@@ S@@ UM_@@ AR@@ RI@@ I | int max@@ Sum ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += ( arr [ i ] * i ) ; return sum ; }
STRING_@@ K_@@ DISTIN@@ CT_@@ CHARAC@@ TER@@ S_@@ NO_@@ CHARAC@@ TER@@ S_@@ AD@@ J@@ AC@@ ENT | string find@@ String ( int n , int k ) { string res = " " ; for ( int i = 0 ; i < k ; i ++ ) res = res + ( char ) ( ' a ' + i ) ; int count = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { res = res + ( char ) ( ' a ' + count ) ; count ++ ; if ( count == k ) count = 0 ; } return res ; }
COUNT_@@ WOR@@ DS_@@ WHO@@ SE_@@ TH_@@ LET@@ TER_@@ EI@@ THER_@@ 1_@@ TH_@@ TH_@@ I@@ 1_@@ TH_@@ LET@@ TER_@@ GI@@ V@@ EN_@@ WORD | int count@@ Words ( char str [ ] , int len ) { int count = 1 ; if ( len == 1 ) return count ; if ( str [ 0 ] == str [ 1 ] ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j < len - 1 ; j ++ ) { if ( str [ j ] == str [ j - 1 ] && str [ j ] == str [ j + 1 ] ) count *= 1 ; else if ( str [ j ] == str [ j - 1 ] || str [ j ] == str [ j + 1 ] || str [ j - 1 ] == str [ j + 1 ] ) count *= 2 ; else count *= 3 ; } if ( str [ len - 1 ] == str [ len - 2 ] ) count *= 1 ; else count *= 2 ; return count ; }
NUMBER_@@ JUM@@ P_@@ REQUIRED_@@ GI@@ V@@ EN_@@ LENGTH_@@ REACH_@@ POINT_@@ FORM_@@ D_@@ 0_@@ ORIG@@ IN_@@ 2D_@@ PLAN@@ E | int min@@ Jump@@ s ( int a , int b , int d ) { int temp = a ; a = min ( a , b ) ; b = max ( temp , b ) ; if ( d >= b ) return ( d + b - 1 ) / b ; if ( d == 0 ) return 0 ; if ( d == a ) return 1 ; return 2 ; }
S@@ UM_@@ FAC@@ TOR@@ S_@@ NUMBER_@@ 1 | int su@@ mo@@ f@@ Factors ( int n ) { int res = 1 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { int curr_@@ sum = 1 ; int curr_@@ term = 1 ; while ( n % i == 0 ) { n = n / i ; curr_@@ term *= i ; curr_@@ sum += curr_@@ term ; } res *= curr_@@ sum ; } if ( n >= 2 ) res *= ( 1 + n ) ; return res ; }
DELETE_@@ CON@@ SEC@@ UTI@@ VE_@@ WOR@@ DS@@ _SEQU@@ ENCE | int remove@@ Con@@ sec@@ uti@@ ve@@ Same ( vector < string > v ) { int n = v . size ( ) ; for ( int i = 0 ; i < n - 1 ; ) { if ( v [ i ] . compare ( v [ i + 1 ] ) == 0 ) { v . erase ( v . begin ( ) + i ) ; v . erase ( v . begin ( ) + i ) ; if ( i > 0 ) i -- ; n = n - 2 ; } else i ++ ; } return v . size ( ) ; }
COUNT_@@ NUMBER_@@ BINARY_@@ STRING@@ S_@@ WITH@@ OUT_@@ CON@@ SEC@@ UTI@@ VE_@@ 1@@ S | int count@@ Strings ( int n ) { int a [ n ] , b [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return a [ n - 1 ] + b [ n - 1 ] ; }
FIND_@@ THE_@@ MISSING_@@ NUMBER | int get@@ Missing@@ No ( int a [ ] , int n ) { int total = ( n + 1 ) * ( n + 2 ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) total -= a [ i ] ; return total ; }
SQU@@ ARE_@@ ROOT_@@ OF_@@ A_@@ PER@@ F@@ ECT_@@ SQUARE | public : float square@@ Root ( float n ) { float x = n ; float y = 1 ; float e = 0.000001 ; while ( x - y > e ) { x = ( x + y ) / 2 ; y = n / x ; } return x ; }
SUB@@ SET_@@ S@@ UM_@@ PRO@@ BLE@@ M_@@ OS@@ UM@@ _SPACE | bool isSub@@ set@@ Sum ( int arr [ ] , int n , int sum ) { bool subset [ 2 ] [ sum + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= sum ; j ++ ) { if ( j == 0 ) subset [ i % 2 ] [ j ] = true ; else if ( i == 0 ) subset [ i % 2 ] [ j ] = false ; else if ( arr [ i - 1 ] <= j ) subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] || subset [ ( i + 1 ) % 2 ] [ j ] ; else subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ] ; } } return subset [ n % 2 ] [ sum ] ; }
MULTIP@@ LIC@@ ATI@@ VE_@@ INVER@@ SE_@@ UN@@ DER_@@ MODUL@@ O_@@ M | int mod@@ Inverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; }
COMP@@ UTE_@@ AVER@@ AGE_@@ TWO_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ OVERFLOW | int compute_@@ average ( int a , int b ) { return ( a + b ) / 2 ; }
RE@@ PRES@@ ENT_@@ GI@@ VEN@@ _SET_@@ POINT@@ S_@@ BE@@ ST_@@ POSSI@@ BLE_@@ STR@@ AI@@ GHT_@@ LINE | void best@@ Approxim@@ ate ( int x [ ] , int y [ ] , int n ) { float m , c , sum@@ _x = 0 , sum_@@ y = 0 , sum_@@ xy = 0 , sum_@@ x2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum@@ _x += x [ i ] ; sum_@@ y += y [ i ] ; sum_@@ xy += x [ i ] * y [ i ] ; sum_@@ x2 += pow ( x [ i ] , 2 ) ; } m = ( n * sum_@@ xy - sum@@ _x * sum_@@ y ) / ( n * sum_@@ x2 - pow ( sum@@ _x , 2 ) ) ; c = ( sum_@@ y - m * sum@@ _x ) / n ; cout << " m ▁ = " << m ; cout << " \n c ▁ = " << c ; }
SP@@ LIT_@@ ARRAY_@@ ADD_@@ FIRST_@@ PART_@@ END | void split@@ Arr ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { int x = arr [ 0 ] ; for ( int j = 0 ; j < n - 1 ; ++ j ) arr [ j ] = arr [ j + 1 ] ; arr [ n - 1 ] = x ; } }
MAXIMUM_@@ POSSI@@ BLE_@@ DIFF@@ ER@@ ENCE_@@ TW@@ O@@ _SUB@@ SE@@ TS_@@ ARRAY | int max@@ Diff ( int arr [ ] , int n ) { int Subset@@ Sum@@ _1 = 0 , Subset@@ Sum@@ _2 = 0 ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { bool is@@ Single@@ Occur@@ ance = true ; for ( int j = i + 1 ; j <= n - 1 ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { is@@ Single@@ Occur@@ ance = false ; arr [ i ] = arr [ j ] = 0 ; break ; } } if ( is@@ Single@@ Occur@@ ance ) { if ( arr [ i ] > 0 ) Subset@@ Sum@@ _1 += arr [ i ] ; else Subset@@ Sum@@ _2 += arr [ i ] ; } } return abs ( Subset@@ Sum@@ _1 - Subset@@ Sum@@ _2 ) ; }
LON@@ GE@@ ST@@ _SUB@@ SEQU@@ ENCE_@@ DIFF@@ ER@@ ENCE_@@ AD@@ J@@ AC@@ ENTS_@@ ONE@@ _SET_@@ 2 | int long@@ Len@@ Sub ( int arr [ ] , int n ) { unordered_map < int , int > um ; int long@@ Len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len = 0 ; if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ] ; if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < um [ arr [ i ] + 1 ] ) len = um [ arr [ i ] + 1 ] ; um [ arr [ i ] ] = len + 1 ; if ( long@@ Len < um [ arr [ i ] ] ) long@@ Len = um [ arr [ i ] ] ; } return long@@ Len ; }
LON@@ GE@@ ST_@@ REPE@@ ATE@@ D@@ _SUB@@ SEQU@@ ENCE_@@ 1 | string lon@@ gest@@ Repeated@@ Sub@@ Seq ( string str ) { int n = str . length ( ) ; int dp [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; string res = " " ; int i = n , j = n ; while ( i > 0 && j > 0 ) { if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) { res = res + str [ i - 1 ] ; i -- ; j -- ; } else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ; else j -- ; } reverse ( res . begin ( ) , res . end ( ) ) ; return res ; }
FIND_@@ INDEX_@@ MAXIMUM_@@ OC@@ CURR@@ ING_@@ ELEMENT_@@ EQUAL_@@ PRO@@ B@@ ABILITY | void find@@ Random@@ Index@@ Of@@ Max ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] += 1 ; int max_@@ element ; int max_@@ so@@ _f@@ ar = INT_@@ MIN ; for ( pair < int , int > p : freq ) { if ( p . second > max_@@ so@@ _f@@ ar ) { max_@@ so@@ _f@@ ar = p . second ; max_@@ element = p . first ; } } int r = ( rand ( ) % max_@@ so@@ _f@@ ar ) + 1 ; for ( int i = 0 , count = 0 ; i < n ; i ++ ) { if ( arr [ i ] == max_@@ element ) count ++ ; if ( count == r ) { cout << " Element ▁ with ▁ maximum ▁ frequency ▁ present ▁ " " at ▁ index ▁ " << i << endl ; break ; } } }
CHECK_@@ NUMBER_@@ IS_@@ PER@@ F@@ ECT_@@ SQU@@ ARE_@@ USING_@@ ADDI@@ TION@@ SUB@@ TRAC@@ TION | bool is@@ Per@@ fec@@ t@@ Square ( int n ) { for ( int sum = 0 , i = 1 ; sum < n ; i += 2 ) { sum += i ; if ( sum == n ) return true ; } return false ; }
N_@@ BON@@ ACC@@ I_@@ NUMB@@ ERS_@@ 1 | void bon@@ ac@@ ci@@ series ( long n , int m ) { int a [ m ] = { 0 } ; a [ n - 1 ] = 1 ; a [ n ] = 1 ; for ( int i = n + 1 ; i < m ; i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ; for ( int i = 0 ; i < m ; i ++ ) cout << a [ i ] << " ▁ " ; }
COUNT_@@ INDEX_@@ PAIR@@ S_@@ EQUAL_@@ ELEMEN@@ TS_@@ ARRAY_@@ 1 | int count@@ Pairs ( int arr [ ] , int n ) { unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int ans = 0 ; for ( auto it = mp . begin ( ) ; it != mp . end ( ) ; it ++ ) { int count = it -> second ; ans += ( count * ( count - 1 ) ) / 2 ; } return ans ; }
SORT_@@ EV@@ EN_@@ PL@@ AC@@ ED_@@ ELEMEN@@ TS_@@ INCRE@@ AS@@ ING_@@ OD@@ D_@@ PL@@ AC@@ ED_@@ DECRE@@ AS@@ ING_@@ ORDER | void bit@@ on@@ ic@@ Generator ( int arr [ ] , int n ) { vector < int > even@@ Arr ; vector < int > odd@@ Arr ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! ( i % 2 ) ) even@@ Arr . push_back ( arr [ i ] ) ; else odd@@ Arr . push_back ( arr [ i ] ) ; } sort ( even@@ Arr . begin ( ) , even@@ Arr . end ( ) ) ; sort ( odd@@ Arr . begin ( ) , odd@@ Arr . end ( ) , greater < int > ( ) ) ; int i = 0 ; for ( int j = 0 ; j < even@@ Arr . size ( ) ; j ++ ) arr [ i ++ ] = even@@ Arr [ j ] ; for ( int j = 0 ; j < odd@@ Arr . size ( ) ; j ++ ) arr [ i ++ ] = odd@@ Arr [ j ] ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 9_@@ BIN@@ O@@ MI@@ AL_@@ CO@@ EF@@ FI@@ CI@@ ENT | int bin@@ omi@@ al@@ Coeff ( int n , int k ) { if ( k == 0 || k == n ) return 1 ; return bin@@ omi@@ al@@ Coeff ( n - 1 , k - 1 ) + bin@@ omi@@ al@@ Coeff ( n - 1 , k ) ; }
WRITE_@@ A_@@ C_@@ PROGRAM_@@ TO_@@ FIND_@@ THE_@@ PAR@@ ITY_@@ OF_@@ AN_@@ UNSIGNED_@@ INTEGER | bool get@@ Par@@ ity ( unsigned int n ) { bool parity = 0 ; while ( n ) { parity = ! parity ; n = n & ( n - 1 ) ; } return parity ; }
CHECK_@@ WHE@@ THER_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 7 | int is@@ di@@ visible@@ 7 ( char num [ ] ) { int n = strlen ( num ) , g@@ Sum ; if ( n == 0 && num [ 0 ] == ' \n ' ) return 1 ; if ( n % 3 == 1 ) { strcat ( num , "@@ 00" ) ; n += 2 ; } else if ( n % 3 == 2 ) { strcat ( num , "0" ) ; n ++ ; } int i , GS@@ um = 0 , p = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { int group = 0 ; group += num [ i -- ] - '0' ; group += ( num [ i -- ] - '0' ) * 10 ; group += ( num [ i ] - '0' ) * 100 ; g@@ Sum = g@@ Sum + group * p ; p *= ( - 1 ) ; } return ( g@@ Sum % 7 == 0 ) ; }
PRODUCT_@@ NODE@@ S_@@ K_@@ TH_@@ LEVEL_@@ TREE_@@ RE@@ PRESEN@@ TED_@@ STRING | int product@@ At@@ K@@ th@@ Level ( string tree , int k ) { int level = - 1 ; int product = 1 ; int n = tree . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ( ' ) level ++ ; else if ( tree [ i ] == ' ) ' ) level -- ; else { if ( level == k ) product *= ( tree [ i ] - '0' ) ; } } return product ; }
CHECK_@@ WHE@@ THER_@@ GI@@ V@@ EN_@@ NUMBER_@@ EV@@ EN_@@ O@@ DD | bool is@@ Even ( int n ) { return ( n % 2 == 0 ) ; }
COUNT_@@ GROUP@@ INGS_@@ NUMBER@@ _S@@ UM_@@ DIG@@ IT@@ S_@@ EVER@@ Y@@ _SUB_@@ GROUP_@@ LESS_@@ EQUAL@@ S_@@ IM@@ MEDI@@ ATE_@@ RIGHT_@@ SUB_@@ GROUP | int count@@ Groups ( int position , int previous_@@ sum , int length , char * num ) { if ( position == length ) return 1 ; int res = 0 ; int sum = 0 ; for ( int i = position ; i < length ; i ++ ) { sum += ( num [ i ] - '0' ) ; if ( sum >= previous_@@ sum ) res += count@@ Groups ( i + 1 , sum , length , num ) ; } return res ; }
FIND_@@ THE_@@ ELEMENT_@@ TH@@ AT_@@ OD@@ D_@@ NUMBER_OF_@@ TIME@@ S_IN_@@ O@@ LOG_@@ N_@@ TIME | void search ( int * arr , int low , int high ) { if ( low > high ) return ; if ( low == high ) { printf ( " The ▁ required ▁ element ▁ is ▁ % d ▁ " , arr [ low ] ) ; return ; } int mid = ( low + high ) / 2 ; if ( mid % 2 == 0 ) { if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ; else search ( arr , low , mid ) ; } else { if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ; else search ( arr , low , mid - 1 ) ; } }
DELETE_@@ CON@@ SEC@@ UTI@@ VE_@@ WOR@@ DS@@ _SEQU@@ ENCE_@@ 1 | int remove@@ Con@@ sec@@ uti@@ ve@@ Same ( vector < string > v ) { stack < string > st ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( st . empty ( ) ) st . push ( v [ i ] ) ; else { string str = st . top ( ) ; if ( str . compare ( v [ i ] ) == 0 ) st . pop ( ) ; else st . push ( v [ i ] ) ; } } return st . size ( ) ; }
MINIMUM_@@ NUMBER_OF_@@ JUM@@ PS_@@ TO_@@ REACH_@@ END_OF_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 2 | int min@@ Jump@@ s ( int arr [ ] , int n ) { int * jumps = new int [ n ] ; int min ; jumps [ n - 1 ] = 0 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX ; else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ; else { min = INT_MAX ; for ( int j = i + 1 ; j < n && j <= arr [ i ] + i ; j ++ ) { if ( min > jumps [ j ] ) min = jumps [ j ] ; } if ( min != INT_MAX ) jumps [ i ] = min + 1 ; else jumps [ i ] = min ; } } return jumps [ 0 ] ; }
PROGRAM_@@ FIND_@@ GC@@ D_@@ FLOAT@@ ING_@@ POINT_@@ NUMB@@ ERS | double gcd ( double a , double b ) { if ( a < b ) return gcd ( b , a ) ; if ( fabs ( b ) < 0.001 ) return a ; else return ( gcd ( b , a - floor ( a / b ) * b ) ) ; }
MAXIMUM_@@ PROFI@@ T_@@ BY_@@ BU@@ Y@@ ING_@@ AND@@ _S@@ EL@@ LING_@@ A@@ _SH@@ ARE_@@ AT_@@ MO@@ ST_@@ TWI@@ CE | int max@@ Pro@@ fit ( int price [ ] , int n ) { int * pro@@ fit = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) pro@@ fit [ i ] = 0 ; int max_@@ price = price [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( price [ i ] > max_@@ price ) max_@@ price = price [ i ] ; pro@@ fit [ i ] = max ( pro@@ fit [ i + 1 ] , max_@@ price - price [ i ] ) ; } int min_@@ price = price [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( price [ i ] < min_@@ price ) min_@@ price = price [ i ] ; pro@@ fit [ i ] = max ( pro@@ fit [ i - 1 ] , pro@@ fit [ i ] + ( price [ i ] - min_@@ price ) ) ; } int result = pro@@ fit [ n - 1 ] ; delete [ ] pro@@ fit ; return result ; }
COUNT_@@ SET_@@ BITS_@@ IN_@@ AN_@@ INTEGER_@@ 1 | int count@@ Set@@ Bits ( int n ) { if ( n == 0 ) return 0 ; else return ( n & 1 ) + count@@ Set@@ Bits ( n >> 1 ) ; }
RE@@ ORDER_@@ A_@@ ARRAY_@@ AC@@ COR@@ DING_@@ TO_@@ GI@@ V@@ EN_@@ INDEX@@ ES | void reorder ( int arr [ ] , int index [ ] , int n ) { int temp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) temp [ index [ i ] ] = arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = temp [ i ] ; index [ i ] = i ; } }
CHECK_@@ IF_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ CAN_@@ RE@@ PRES@@ ENT_@@ PRE@@ ORDER_@@ TRA@@ VERS@@ AL_@@ OF_@@ BIN@@ AR@@ Y@@ _SEARCH_@@ TREE | bool can@@ Represent@@ B@@ ST ( int pre [ ] , int n ) { stack < int > s ; int root = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( pre [ i ] < root ) return false ; while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) { root = s . top ( ) ; s . pop ( ) ; } s . push ( pre [ i ] ) ; } return true ; }
FIND_@@ REPE@@ TI@@ TIVE_@@ ELEMENT_@@ 1_@@ N_@@ 1_@@ 3 | int find@@ Repe@@ ating ( int arr [ ] , int n ) { int missing@@ Element = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int element = arr [ abs ( arr [ i ] ) ] ; if ( element < 0 ) { missing@@ Element = arr [ i ] ; break ; } arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ] ; } return abs ( missing@@ Element ) ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 8_@@ MATRIX_@@ CHAIN_@@ MULTIP@@ LIC@@ ATION_@@ 1 | int Matrix@@ Chain@@ Order ( int p [ ] , int n ) { int m [ n ] [ n ] ; int i , j , k , L , q ; for ( i = 1 ; i < n ; i ++ ) m [ i ] [ i ] = 0 ; for ( L = 2 ; L < n ; L ++ ) { for ( i = 1 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; m [ i ] [ j ] = INT_MAX ; for ( k = i ; k <= j - 1 ; k ++ ) { q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ; } } } return m [ 1 ] [ n - 1 ] ; }
COUNT_@@ NUMBER_@@ IS@@ LAND@@ S_@@ EVER@@ Y_@@ IS@@ LAND@@ _SE@@ PAR@@ ATED_@@ LINE | int count@@ Is@@ lands ( int mat [ ] [ N ] ) { int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mat [ i ] [ j ] == ' X ' ) { if ( ( i == 0 || mat [ i - 1 ] [ j ] == ' O ' ) && ( j == 0 || mat [ i ] [ j - 1 ] == ' O ' ) ) count ++ ; } } } return count ; }
MINI@@ MI@@ ZE_@@ MAX@@ AI_@@ B@@ J_@@ CK_@@ MIN@@ AI_@@ B@@ J_@@ CK_@@ THRE@@ E_@@ DIFF@@ ER@@ ENT_@@ SOR@@ TED_@@ ARRAY@@ S | int solve ( int A [ ] , int B [ ] , int C [ ] , int i , int j , int k ) { int min_@@ diff , current_@@ diff , max_@@ term ; min_@@ diff = abs ( max ( A [ i ] , max ( B [ j ] , C [ k ] ) ) - min ( A [ i ] , min ( B [ j ] , C [ k ] ) ) ) ; while ( i != - 1 && j != - 1 && k != - 1 ) { current_@@ diff = abs ( max ( A [ i ] , max ( B [ j ] , C [ k ] ) ) - min ( A [ i ] , min ( B [ j ] , C [ k ] ) ) ) ; if ( current_@@ diff < min_@@ diff ) min_@@ diff = current_@@ diff ; max_@@ term = max ( A [ i ] , max ( B [ j ] , C [ k ] ) ) ; if ( A [ i ] == max_@@ term ) i -= 1 ; else if ( B [ j ] == max_@@ term ) j -= 1 ; else k -= 1 ; } return min_@@ diff ; }
ROO@@ TS_@@ QUAD@@ RATI@@ C_@@ EQU@@ ATION | void find@@ Roots ( int a , int b , int c ) { if ( a == 0 ) { cout << " Invalid " ; return ; } int d = b * b - 4 * a * c ; double sq@@ rt_@@ val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { cout << " Roots ▁ are ▁ real ▁ and ▁ different ▁ \n " ; cout << ( double ) ( - b + sq@@ rt_@@ val ) / ( 2 * a ) << " \n " << ( double ) ( - b - sq@@ rt_@@ val ) / ( 2 * a ) ; } else if ( d == 0 ) { cout << " Roots ▁ are ▁ real ▁ and ▁ same ▁ \n " ; cout << - ( double ) b / ( 2 * a ) ; } else { cout << " Roots ▁ are ▁ complex ▁ \n " ; cout << - ( double ) b / ( 2 * a ) << " ▁ + ▁ i " << sq@@ rt_@@ val << " \n " << - ( double ) b / ( 2 * a ) << " ▁ - ▁ i " << sq@@ rt_@@ val ; } }
GI@@ V@@ EN_@@ LEVEL_@@ ORDER_@@ TRA@@ VERS@@ AL_@@ BINARY_@@ TREE_@@ CHECK_@@ TREE_@@ MIN_@@ HEA@@ P | bool is@@ Min@@ Heap ( int level [ ] , int n ) { for ( int i = ( n / 2 - 1 ) ; i >= 0 ; i -- ) { if ( level [ i ] > level [ 2 * i + 1 ] ) return false ; if ( 2 * i + 2 < n ) { if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; } } return true ; }
FIND_@@ MINIMUM_@@ ELEMENT_@@ IN_@@ A@@ _S@@ OR@@ TED_@@ AND_@@ ROTA@@ TED_@@ ARRAY | int find@@ Min ( int arr [ ] , int low , int high ) { if ( high < low ) return arr [ 0 ] ; if ( high == low ) return arr [ low ] ; int mid = low + ( high - low ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ high ] > arr [ mid ] ) return find@@ Min ( arr , low , mid - 1 ) ; return find@@ Min ( arr , mid + 1 , high ) ; }
SM@@ ALLE@@ ST_@@ LENGTH_@@ STRING_@@ WITH_@@ REPE@@ ATED_@@ REPLACE@@ MENT_@@ OF_@@ TWO_@@ DISTIN@@ CT_@@ AD@@ J@@ AC@@ ENT | int string@@ Reduction ( string str ) { int n = str . length ( ) ; int count [ 3 ] = { 0 } ; for ( int i = 0 ; i < n ; ++ i ) count [ str [ i ] - ' a ' ] ++ ; if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] == n ) return n ; if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) && ( count [ 1 ] % 2 ) == ( count [ 2 ] % 2 ) ) return 2 ; return 1 ; }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 3_@@ NOT | int check ( string str ) { int n = str . length ( ) ; int digit@@ Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) digit@@ Sum += ( str [ i ] - '0' ) ; return ( digit@@ Sum % 3 == 0 ) ; }
COMP@@ UTE_@@ N_@@ UN@@ DER_@@ MODUL@@ O_@@ P | int mod@@ Fact ( int n , int p ) { if ( n >= p ) return 0 ; int result = 1 ; for ( int i = 1 ; i <= n ; i ++ ) result = ( result * i ) % p ; return result ; }
POSSI@@ BILITY_@@ OF_@@ A_@@ WORD_@@ FROM_@@ A_@@ GI@@ VEN@@ _SET_@@ OF_@@ CHARAC@@ TERS | bool isPresent ( string s , string q ) { int freq [ MAX_@@ CHAR ] = { 0 } ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s [ i ] ] ++ ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ q [ i ] ] -- ; if ( freq [ q [ i ] ] < 0 ) return false ; } return true ; }
NEXT_@@ POWER_@@ OF_@@ 2_1 | unsigned int next@@ PowerOf@@ 2 ( unsigned int n ) { unsigned int p = 1 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( p < n ) p <<= 1 ; return p ; }
RE@@ ORDER_@@ A_@@ ARRAY_@@ AC@@ COR@@ DING_@@ TO_@@ GI@@ V@@ EN_@@ INDEX@@ ES_@@ 1 | void reorder ( int arr [ ] , int index [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( index [ i ] != i ) { int old@@ Target@@ I = index [ index [ i ] ] ; char old@@ Target@@ E = arr [ index [ i ] ] ; arr [ index [ i ] ] = arr [ i ] ; index [ index [ i ] ] = index [ i ] ; index [ i ] = old@@ Target@@ I ; arr [ i ] = old@@ Target@@ E ; } } }
UN@@ BOUN@@ DED_@@ KN@@ AP@@ S@@ ACK_@@ REPE@@ TI@@ TION_@@ ITE@@ MS_@@ ALLOWED | int un@@ bounded@@ K@@ nap@@ s@@ ack ( int W , int n , int val [ ] , int wt [ ] ) { int dp [ W + 1 ] ; memset ( dp , 0 , sizeof dp ) ; int ans = 0 ; for ( int i = 0 ; i <= W ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( wt [ j ] <= i ) dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] ) ; return dp [ W ] ; }
PROGRAM_@@ CHECK_@@ DIAG@@ ON@@ AL_@@ MATRI@@ X@@ _SCAL@@ AR_@@ MATRIX | bool is@@ Diag@@ onal@@ Matrix ( int mat [ N ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ; return true ; }
MAXIMUM_@@ REMO@@ VAL_@@ FROM_@@ ARRAY_@@ WH@@ EN_@@ REMO@@ VAL_@@ TIME_@@ WAIT@@ ING_@@ TIME | int max@@ Removal ( int arr [ ] , int n ) { int count = 0 ; int cum@@ mul@@ ative@@ _@@ sum = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= cum@@ mul@@ ative@@ _@@ sum ) { count ++ ; cum@@ mul@@ ative@@ _@@ sum += arr [ i ] ; } } return count ; }
PROGRAM_@@ CEN@@ S@@ OR_@@ WORD_@@ AST@@ ER@@ IS@@ K@@ S_S@@ ENT@@ ENCE | string cen@@ sor ( string text , string word ) { vector < string > word_@@ list ; boost :: split ( word_@@ list , text , boost :: is_@@ any_@@ of ( " \\ ▁ + " ) ) ; string result = " " ; string stars = " " ; for ( int i = 0 ; i < word . size ( ) ; i ++ ) stars += ' * ' ; int index = 0 ; for ( string i : word_@@ list ) { if ( i . compare ( word ) == 0 ) { word_@@ list [ index ] = stars ; } index ++ ; } for ( string i : word_@@ list ) { result += i + ' ▁ ' ; } return result ; }
COUNT_@@ STRING@@ S_@@ WITH_@@ CON@@ SEC@@ UTI@@ VE_@@ 1@@ S | int count@@ Strings ( int n ) { int a [ n ] , b [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ; }
LENGTH_@@ LON@@ GE@@ ST_@@ BAL@@ ANCE@@ D@@ _SUB@@ SEQUENCE | int maxLength ( char s [ ] , int n ) { int dp [ n ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( s [ i ] == ' ( ' && s [ i + 1 ] == ' ) ' ) dp [ i ] [ i + 1 ] = 2 ; for ( int l = 2 ; l < n ; l ++ ) { for ( int i = 0 , j = l ; j < n ; i ++ , j ++ ) { if ( s [ i ] == ' ( ' && s [ j ] == ' ) ' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ; for ( int k = i ; k < j ; k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ; } } return dp [ 0 ] [ n - 1 ] ; }
FIND_@@ THE_@@ POINT_@@ W@@ HER@@ E_@@ MAXIMUM_@@ INTER@@ VAL@@ S_@@ OVER@@ LA@@ P | void find@@ Max@@ Gue@@ sts ( int ar@@ rl [ ] , int exit [ ] , int n ) { sort ( ar@@ rl , ar@@ rl + n ) ; sort ( exit , exit + n ) ; int guest@@ s_@@ in = 1 , max_@@ gue@@ sts = 1 , time = ar@@ rl [ 0 ] ; int i = 1 , j = 0 ; while ( i < n && j < n ) { if ( ar@@ rl [ i ] <= exit [ j ] ) { guest@@ s_@@ in ++ ; if ( guest@@ s_@@ in > max_@@ gue@@ sts ) { max_@@ gue@@ sts = guest@@ s_@@ in ; time = ar@@ rl [ i ] ; } i ++ ; } else { guest@@ s_@@ in -- ; j ++ ; } } cout << " Maximum ▁ Number ▁ of ▁ Gue@@ sts ▁ = ▁ " << max_@@ gue@@ sts << " ▁ at ▁ time ▁ " << time ; }
EF@@ FI@@ CI@@ ENT_@@ WA@@ Y_@@ CHECK_@@ WHE@@ THER_@@ N_@@ TH_@@ FI@@ BON@@ ACC@@ I_@@ NUMBER_@@ MULTIPLE_@@ 10 | bool is@@ Multiple@@ Of@@ 10 ( int n ) { return ( n % 15 == 0 ) ; }
MAX@@ IM@@ UM@@ _S@@ UM_@@ PAIR@@ S@@ _SPECI@@ FIC_@@ DIFF@@ ER@@ ENCE | int max@@ Sum@@ Pair@@ With@@ Difference@@ LessThan@@ K ( int arr [ ] , int N , int K ) { sort ( arr , arr + N ) ; int dp [ N ] ; dp [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) { dp [ i ] = dp [ i - 1 ] ; if ( arr [ i ] - arr [ i - 1 ] < K ) { if ( i >= 2 ) dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ; else dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ; } } return dp [ N - 1 ] ; }
FIND_@@ K_@@ PAIR@@ S_S@@ MAL@@ LE@@ ST@@ _S@@ UM@@ S_@@ TWO_@@ ARRAY@@ S | void k@@ S@@ malle@@ st@@ Pair ( int ar@@ r1 [ ] , int n1 , int ar@@ r2 [ ] , int n2 , int k ) { if ( k > n1 * n2 ) { cout << " k ▁ pairs ▁ don ' t ▁ exist " ; return ; } int index2 [ n1 ] ; memset ( index2 , 0 , sizeof ( index2 ) ) ; while ( k > 0 ) { int min_@@ sum = INT_MAX ; int min_@@ index = 0 ; for ( int i1 = 0 ; i1 < n1 ; i1 ++ ) { if ( index2 [ i1 ] < n2 && ar@@ r1 [ i1 ] + ar@@ r2 [ index2 [ i1 ] ] < min_@@ sum ) { min_@@ index = i1 ; min_@@ sum = ar@@ r1 [ i1 ] + ar@@ r2 [ index2 [ i1 ] ] ; } } cout << " ( " << ar@@ r1 [ min_@@ index ] << " , ▁ " << ar@@ r2 [ index2 [ min_@@ index ] ] << " ) ▁ " ; index2 [ min_@@ index ] ++ ; k -- ; } }
FIRST_@@ UP@@ PER@@ CASE_@@ LET@@ TER_@@ IN_@@ A_@@ STRING_@@ ITER@@ ATI@@ VE_@@ AND_@@ RECUR@@ SIVE_@@ 1 | char first ( string str , int i = 0 ) { if ( str [ i ] == ' \0' ) return 0 ; if ( is@@ upper ( str [ i ] ) ) return str [ i ] ; return first ( str , i + 1 ) ; }
FIND_@@ PAIR@@ S_@@ B_@@ ARRAY_@@ B_@@ K | bool print@@ Pairs ( int arr [ ] , int n , int k ) { bool is@@ Pair@@ Found = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i != j && arr [ i ] % arr [ j ] == k ) { cout << " ( " << arr [ i ] << " , ▁ " << arr [ j ] << " ) " << " ▁ " ; is@@ Pair@@ Found = true ; } } } return is@@ Pair@@ Found ; }
FIND_@@ AR@@ RANGE@@ MENT_@@ QUEUE_@@ GI@@ V@@ EN_@@ TIME | void solve ( int n , int t , string s ) { for ( int i = 0 ; i < t ; i ++ ) for ( int j = 0 ; j < n - 1 ; j ++ ) if ( s [ j ] == ' B ' && s [ j + 1 ] == ' G ' ) { char temp = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = temp ; j ++ ; } cout << s ; }
SHOR@@ TEST_@@ POSSI@@ BLE_@@ COMBIN@@ ATION_@@ TWO_@@ STRINGS | void print@@ Super@@ Seq ( string & a , string & b ) { int m = a . length ( ) , n = b . length ( ) ; int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( ! i ) dp [ i ] [ j ] = j ; else if ( ! j ) dp [ i ] [ j ] = i ; else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } int index = dp [ m ] [ n ] ; string res ( index + 1 , ' \0' ) ; int i = m , j = n ; while ( i > 0 && j > 0 ) { if ( a [ i - 1 ] == b [ j - 1 ] ) { res [ index - 1 ] = a [ i - 1 ] ; i -- ; j -- ; index -- ; } else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) { res [ index - 1 ] = a [ i - 1 ] ; i -- ; index -- ; } else { res [ index - 1 ] = b [ j - 1 ] ; j -- ; index -- ; } } while ( i > 0 ) { res [ index - 1 ] = a [ i - 1 ] ; i -- ; index -- ; } while ( j > 0 ) { res [ index - 1 ] = b [ j - 1 ] ; j -- ; index -- ; } cout << res ; }
COUNT_@@ ROTA@@ TIONS_@@ DI@@ VISI@@ BLE_@@ 8 | int count@@ Rotation@@ s@@ Div@@ By@@ 8 ( string n ) { int len = n . length ( ) ; int count = 0 ; if ( len == 1 ) { int one@@ Digit = n [ 0 ] - '0' ; if ( one@@ Digit % 8 == 0 ) return 1 ; return 0 ; } if ( len == 2 ) { int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' ) ; int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' ) ; if ( first % 8 == 0 ) count ++ ; if ( second % 8 == 0 ) count ++ ; return count ; } int three@@ Digit ; for ( int i = 0 ; i < ( len - 2 ) ; i ++ ) { three@@ Digit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0' ) * 10 + ( n [ i + 2 ] - '0' ) ; if ( three@@ Digit % 8 == 0 ) count ++ ; } three@@ Digit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' ) ; if ( three@@ Digit % 8 == 0 ) count ++ ; three@@ Digit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' ) ; if ( three@@ Digit % 8 == 0 ) count ++ ; return count ; }
LON@@ GE@@ ST_@@ COMM@@ ON@@ _SUB@@ SEQU@@ ENCE_@@ WITH_@@ AT_@@ MO@@ ST_@@ K_@@ CHANGE@@ S_@@ ALLOWED | int l@@ cs ( int dp [ MAX ] [ MAX ] [ MAX ] , int ar@@ r1 [ ] , int n , int ar@@ r2 [ ] , int m , int k ) { if ( k < 0 ) return - 1e@@ 7 ; if ( n < 0 || m < 0 ) return 0 ; int & ans = dp [ n ] [ m ] [ k ] ; if ( ans != - 1 ) return ans ; ans = max ( l@@ cs ( dp , ar@@ r1 , n - 1 , ar@@ r2 , m , k ) , l@@ cs ( dp , ar@@ r1 , n , ar@@ r2 , m - 1 , k ) ) ; if ( ar@@ r1 [ n - 1 ] == ar@@ r2 [ m - 1 ] ) ans = max ( ans , 1 + l@@ cs ( dp , ar@@ r1 , n - 1 , ar@@ r2 , m - 1 , k ) ) ; ans = max ( ans , 1 + l@@ cs ( dp , ar@@ r1 , n - 1 , ar@@ r2 , m - 1 , k - 1 ) ) ; return ans ; }
CHECK_@@ LINE_@@ TOU@@ CHE@@ S_@@ INTER@@ SEC@@ TS_@@ CIRC@@ LE | void check@@ Collision ( int a , int b , int c , int x , int y , int radius ) { int dist = ( abs ( a * x + b * y + c ) ) / sqrt ( a * a + b * b ) ; if ( radius == dist ) cout << " Touch " << endl ; else if ( radius > dist ) cout << " Intersect " << endl ; else cout << " Outside " << endl ; }
FIND_@@ THE_@@ MAX@@ IM@@ UM@@ _SUB@@ ARRAY_@@ X@@ OR_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY | int max@@ Sub@@ array@@ XOR ( int arr [ ] , int n ) { int ans = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { int curr_@@ xor = 0 ; for ( int j = i ; j < n ; j ++ ) { curr_@@ xor = curr_@@ xor ^ arr [ j ] ; ans = max ( ans , curr_@@ xor ) ; } } return ans ; }
SHOR@@ TEST_@@ PATH_@@ EXAC@@ TL@@ Y_@@ K_@@ ED@@ GE@@ S_@@ DIREC@@ TED_@@ WE@@ I@@ GH@@ TED_@@ GRAP@@ H | INT_MAX int shor@@ test@@ Path ( int graph [ ] [ V ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 0 ; if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ; if ( k <= 0 ) return INF ; int res = INF ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] != INF && u != i && v != i ) { int rec_@@ res = shor@@ test@@ Path ( graph , i , v , k - 1 ) ; if ( rec_@@ res != INF ) res = min ( res , graph [ u ] [ i ] + rec_@@ res ) ; } } return res ; }
FIN@@ D@@ _SUB@@ ARRAY_@@ WITH_@@ GI@@ VEN@@ _S@@ UM | int sub@@ Array@@ Sum ( int arr [ ] , int n , int sum ) { int curr_@@ sum , i , j ; for ( i = 0 ; i < n ; i ++ ) { curr_@@ sum = arr [ i ] ; for ( j = i + 1 ; j <= n ; j ++ ) { if ( curr_@@ sum == sum ) { cout << " Sum ▁ found ▁ between ▁ indexes ▁ " << i << " ▁ and ▁ " << j - 1 ; return 1 ; } if ( curr_@@ sum > sum || j == n ) break ; curr_@@ sum = curr_@@ sum + arr [ j ] ; } } cout << " No ▁ sub@@ array ▁ found " ; return 0 ; }
K_@@ TH_@@ PRI@@ ME_@@ FAC@@ TOR_@@ GI@@ V@@ EN_@@ NUMBER | int k@@ Prime@@ Factor ( int n , int k ) { while ( n % 2 == 0 ) { k -- ; n = n / 2 ; if ( k == 0 ) return 2 ; } for ( int i = 3 ; i <= sqrt ( n ) ; i = i + 2 ) { while ( n % i == 0 ) { if ( k == 1 ) return i ; k -- ; n = n / i ; } } if ( n > 2 && k == 1 ) return n ; return - 1 ; }
FIND_@@ ROTATION_@@ COUNT_@@ ROTA@@ TE@@ D_S@@ OR@@ TED_@@ ARRAY_@@ 1 | int count@@ Rot@@ ations ( int arr [ ] , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) return low ; int mid = low + ( high - low ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) return count@@ Rot@@ ations ( arr , low , mid - 1 ) ; return count@@ Rot@@ ations ( arr , mid + 1 , high ) ; }
COMP@@ UTE_@@ AVER@@ AGE_@@ TWO_@@ NUMB@@ ERS_@@ WITH@@ OUT_@@ OVERFLOW_@@ 1 | int compute_@@ average ( int a , int b ) { return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ; }
SOR@@ TING_@@ USING_@@ TRI@@ VI@@ AL_@@ HASH_@@ FUNCTION_@@ 1 | void sort@@ Using@@ Hash ( int a [ ] , int n ) { int max = * std :: max_@@ element ( a , a + n ) ; int min = abs ( * std :: min_@@ element ( a , a + n ) ) ; int hash@@ pos [ max + 1 ] = { 0 } ; int hash@@ neg [ min + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= 0 ) hash@@ pos [ a [ i ] ] += 1 ; else hash@@ neg [ abs ( a [ i ] ) ] += 1 ; } for ( int i = min ; i > 0 ; i -- ) { if ( hash@@ neg [ i ] ) { for ( int j = 0 ; j < hash@@ neg [ i ] ; j ++ ) { cout << ( - 1 ) * i << " ▁ " ; } } } for ( int i = 0 ; i <= max ; i ++ ) { if ( hash@@ pos [ i ] ) { for ( int j = 0 ; j < hash@@ pos [ i ] ; j ++ ) { cout << i << " ▁ " ; } } } }
FIND_@@ THE_@@ TWO_@@ REPE@@ ATING_@@ ELEMEN@@ TS_@@ IN_@@ A_@@ GI@@ V@@ EN_@@ ARRAY_@@ 1 | void print@@ Repe@@ ating ( int arr [ ] , int size ) { int * count = new int [ sizeof ( int ) * ( size - 2 ) ] ; int i ; cout << " ▁ Repe@@ ating ▁ elements ▁ are ▁ " ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << " ▁ " ; else count [ arr [ i ] ] ++ ; } }
MINIMUM_@@ STE@@ PS_@@ MINI@@ MI@@ ZE_@@ N_@@ PER_@@ GI@@ V@@ EN_@@ CONDITION | int getMin@@ Steps ( int n ) { int table [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) table [ i ] = n - i ; for ( int i = n ; i >= 1 ; i -- ) { if ( ! ( i % 2 ) ) table [ i / 2 ] = min ( table [ i ] + 1 , table [ i / 2 ] ) ; if ( ! ( i % 3 ) ) table [ i / 3 ] = min ( table [ i ] + 1 , table [ i / 3 ] ) ; } return table [ 1 ] ; 
COUNT_@@ POSSI@@ BLE_@@ DE@@ COD@@ INGS_@@ GI@@ V@@ EN_@@ DIG@@ IT_@@ SEQU@@ ENCE_@@ 1 | int count@@ Decoding@@ DP ( char * digits , int n ) { int count [ n + 1 ] ; count [ 0 ] = 1 ; count [ 1 ] = 1 ; if ( digits [ 0 ] == '0' ) return 0 ; for ( int i = 2 ; i <= n ; i ++ ) { count [ i ] = 0 ; if ( digits [ i - 1 ] > '0' ) count [ i ] = count [ i - 1 ] ; if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2' && digits [ i - 1 ] < '7' ) ) count [ i ] += count [ i - 2 ] ; } return count [ n ] ; }
E@@ UL@@ ERS_@@ FOUR@@ _S@@ QU@@ ARE_@@ IDENTI@@ TY_@@ 1 | void check@@ Euler@@ Four@@ Square@@ Identity ( int a , int b ) { int ab = a * b ; bool flag = false ; int i = 0 ; while ( i * i <= ab ) { int j = i ; while ( i * i + j * j <= ab ) { int k = j ; while ( i * i + j * j + k * k <= ab ) { double l = sqrt ( ab - ( i * i + j * j + k * k ) ) ; if ( floor ( l ) == ceil ( l ) && l >= k ) { flag = true ; cout << " i ▁ = ▁ " << i << " \n " ; cout << " j ▁ = ▁ " << j << " \n " ; cout << " k ▁ = ▁ " << k << " \n " ; cout << " l ▁ = ▁ " << ( int ) l << " \n " ; cout << " Product ▁ of ▁ " << a << " ▁ and ▁ " << b << " ▁ can ▁ be ▁ written ▁ as ▁ sum ▁ of ▁ squares " << " ▁ of ▁ i , ▁ j , ▁ k , ▁ l ▁ \n " ; cout << ab + " ▁ = ▁ " << i << " * " << i << " ▁ + ▁ " << j << " * " << j << " ▁ + ▁ " << k << " * " << k << " ▁ + ▁ " << ( int ) l << " * " << ( int ) l << " \n " ; } k += 1 ; } j += 1 ; } i += 1 ; } if ( flag == false ) { cout << " Solution ▁ doesn ' t ▁ exist ! \n " ; return ; } }
COUNT_@@ NUMBER_@@ INCRE@@ AS@@ ING@@ _SUB@@ SEQU@@ EN@@ CE@@ S@@ _SIZE_@@ K | int numOf@@ Inc@@ Sub@@ seq@@ Of@@ Size@@ K ( int arr [ ] , int n , int k ) { int dp [ k ] [ n ] , sum = 0 ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int l = 1 ; l < k ; l ++ ) { for ( int i = l ; i < n ; i ++ ) { dp [ l ] [ i ] = 0 ; for ( int j = l - 1 ; j < i ; j ++ ) { if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ; } } } for ( int i = k - 1 ; i < n ; i ++ ) sum += dp [ k - 1 ] [ i ] ; return sum ; }
KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M_@@ 1 | int kn@@ ap@@ S@@ ack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; }
PROGRAM_@@ TO_@@ PRINT_@@ DOUBLE_@@ HEA@@ DED_@@ ARROW_@@ PATTERN | void draw@@ Pattern ( int N ) { int n = N ; int row = 1 ; int n@@ st = 1 ; int n@@ sp@@ 1 = n - 1 ; int n@@ sp@@ 2 = - 1 ; int val1 = row ; int val2 = 1 ; while ( row <= n ) { int c@@ sp@@ 1 = 1 ; while ( c@@ sp@@ 1 <= n@@ sp@@ 1 ) { cout << " ▁ " << " ▁ " ; c@@ sp@@ 1 = c@@ sp@@ 1 + 1 ; } int c@@ st1 = 1 ; while ( c@@ st1 <= n@@ st ) { cout << val1 << " ▁ " ; val1 = val1 - 1 ; c@@ st1 = c@@ st1 + 1 ; } int c@@ sp@@ 2 = 1 ; while ( c@@ sp@@ 2 <= n@@ sp@@ 2 ) { cout << " ▁ " << " ▁ " ; c@@ sp@@ 2 = c@@ sp@@ 2 + 1 ; } if ( row != 1 && row != n ) { int c@@ st2 = 1 ; while ( c@@ st2 <= n@@ st ) { cout << val2 << " ▁ " ; val2 = val2 + 1 ; c@@ st2 = c@@ st2 + 1 ; } } cout << endl ; if ( row <= n / 2 ) { n@@ st = n@@ st + 1 ; n@@ sp@@ 1 = n@@ sp@@ 1 - 2 ; n@@ sp@@ 2 = n@@ sp@@ 2 + 2 ; val1 = row + 1 ; val2 = 1 ; } else { n@@ st = n@@ st - 1 ; n@@ sp@@ 1 = n@@ sp@@ 1 + 2 ; n@@ sp@@ 2 = n@@ sp@@ 2 - 2 ; val1 = n - row ; val2 = 1 ; } row = row + 1 ; } }
INTEGER_@@ POSITIVE_@@ VALUE_@@ POSITIVE_@@ NEGATIVE_@@ VALUE_@@ ARRAY | int find@@ Integer ( int arr [ ] , int n ) { unordered_map < int , int > hash ; int maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1 ; else hash [ arr [ i ] ] += 1 ; } for ( int i = 0 ; i < n ; i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ] ; return - 1 ; }
SPACE_@@ OPTIMIZ@@ ED@@ _S@@ OL@@ U@@ TION_@@ L@@ CS | int l@@ cs ( string & X , string & Y ) { int m = X . length ( ) , n = Y . length ( ) ; int L [ 2 ] [ n + 1 ] ; bool bi ; for ( int i = 0 ; i <= m ; i ++ ) { bi = i & 1 ; for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) L [ bi ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) L [ bi ] [ j ] = L [ 1 - bi ] [ j - 1 ] + 1 ; else L [ bi ] [ j ] = max ( L [ 1 - bi ] [ j ] , L [ bi ] [ j - 1 ] ) ; } } return L [ bi ] [ n ] ; }
RE@@ PRES@@ ENT_@@ NUMBER@@ _S@@ UM_@@ MINIMUM_@@ POSSI@@ BLE_@@ P@@ SU@@ E@@ DO@@ BINARY_@@ NUMB@@ ERS | void p@@ su@@ e@@ do@@ Binary ( int n ) { while ( n > 0 ) { int temp = n , m = 0 , p = 1 ; while ( temp ) { int rem = temp % 10 ; temp = temp / 10 ; if ( rem != 0 ) m += p ; p *= 10 ; } cout << m << " ▁ " ; n = n - m ; } }
FIND_@@ NUMBER_@@ CURRENCY_@@ NOTE@@ S_S@@ UM_@@ UP@@ TO_@@ GI@@ V@@ EN_@@ AMOUNT | void count@@ Currency ( int amount ) { int notes [ 9 ] = { 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 } ; int note@@ Counter [ 9 ] = { 0 } ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( amount >= notes [ i ] ) { note@@ Counter [ i ] = amount / notes [ i ] ; amount = amount - note@@ Counter [ i ] * notes [ i ] ; } } cout << " Currency ▁ Count ▁ - > " << endl ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( note@@ Counter [ i ] != 0 ) { cout << notes [ i ] << " ▁ : ▁ " << note@@ Counter [ i ] << endl ; } } }
POSITIVE_@@ ELEMEN@@ TS_@@ EV@@ EN_@@ NEGATIVE_@@ OD@@ D_@@ POSI@@ TIONS | void re@@ arrange ( int a [ ] , int size ) { int positive = 0 , negative = 1 ; while ( true ) { while ( positive < size && a [ positive ] >= 0 ) positive += 2 ; while ( negative < size && a [ negative ] <= 0 ) negative += 2 ; if ( positive < size && negative < size ) swap ( a [ positive ] , a [ negative ] ) ; else break ; } }
FIND_@@ WHE@@ THER_@@ AN_@@ ARRAY_@@ IS@@ _SUB@@ SET_@@ OF_@@ AN@@ OTHER_@@ ARRAY@@ _SET_@@ 1 | bool is@@ Subset ( int ar@@ r1 [ ] , int ar@@ r2 [ ] , int m , int n ) { int i = 0 ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( ar@@ r2 [ i ] == ar@@ r1 [ j ] ) break ; } if ( j == m ) return 0 ; } return 1 ; }
GI@@ V@@ EN_@@ A@@ _S@@ OR@@ TED_@@ AND_@@ ROTA@@ TED_@@ ARRAY_@@ FIND_@@ IF_@@ THER@@ E_@@ IS_@@ A_@@ PA@@ IR_@@ WITH_@@ A_@@ GI@@ VEN@@ _S@@ UM | bool pair@@ In@@ Sorted@@ Rot@@ ated ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ; int l = ( i + 1 ) % n ; int r = i ; while ( l != r ) { if ( arr [ l ] + arr [ r ] == x ) return true ; if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; else r = ( n + r - 1 ) % n ; } return false ; }
PROGRAM_@@ TO_@@ FIND_@@ RE@@ MA@@ INDE@@ R_@@ WITH@@ OUT_@@ USING_@@ MODUL@@ O_@@ OR_@@ OPERATOR_@@ 1 | int getRe@@ main@@ der ( int num , int divisor ) { if ( divisor == 0 ) { cout << " Error : ▁ divisor ▁ can ' t ▁ be ▁ zero ▁ \n " ; return - 1 ; } if ( divisor < 0 ) divisor = - divisor ; if ( num < 0 ) num = - num ; int i = 1 ; int product = 0 ; while ( product <= num ) { product = divisor * i ; i ++ ; } return num - ( product - divisor ) ; }
G@@ NO@@ ME_@@ SORT_@@ A_@@ ST@@ UP@@ ID_@@ ONE | void g@@ nome@@ Sort ( int arr [ ] , int n ) { int index = 0 ; while ( index < n ) { if ( index == 0 ) index ++ ; if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ; else { swap ( arr [ index ] , arr [ index - 1 ] ) ; index -- ; } } return ; }
NUMBER_@@ WAY@@ S_@@ INSERT_@@ CHARACTER_@@ INCRE@@ ASE_@@ LC@@ S_@@ ONE | int number@@ of@@ ways ( string A , string B , int N , int M ) { vector < int > pos [ MAX ] ; for ( int i = 0 ; i < M ; i ++ ) pos [ B [ i ] ] . push_back ( i + 1 ) ; int d@@ pl [ N + 2 ] [ M + 2 ] ; memset ( d@@ pl , 0 , sizeof ( d@@ pl ) ) ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { if ( A [ i - 1 ] == B [ j - 1 ] ) d@@ pl [ i ] [ j ] = d@@ pl [ i - 1 ] [ j - 1 ] + 1 ; else d@@ pl [ i ] [ j ] = max ( d@@ pl [ i - 1 ] [ j ] , d@@ pl [ i ] [ j - 1 ] ) ; } } int L@@ CS = d@@ pl [ N ] [ M ] ; int d@@ pr [ N + 2 ] [ M + 2 ] ; memset ( d@@ pr , 0 , sizeof ( d@@ pr ) ) ; for ( int i = N ; i >= 1 ; i -- ) { for ( int j = M ; j >= 1 ; j -- ) { if ( A [ i - 1 ] == B [ j - 1 ] ) d@@ pr [ i ] [ j ] = d@@ pr [ i + 1 ] [ j + 1 ] + 1 ; else d@@ pr [ i ] [ j ] = max ( d@@ pr [ i + 1 ] [ j ] , d@@ pr [ i ] [ j + 1 ] ) ; } } int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j < MAX ; j ++ ) { for ( auto x : pos [ j ] ) { if ( d@@ pl [ i ] [ x - 1 ] + d@@ pr [ i + 1 ] [ x + 1 ] == L@@ CS ) { ans ++ ; break ; } } } } return ans ; }
MINIMUM_@@ PRODUCT_@@ K_@@ INTEG@@ ERS_@@ ARRAY_@@ POSITIVE_@@ INTEG@@ ERS | int min@@ Product ( int arr [ ] , int n , int k ) { priority_@@ queue < int , vector < int > , greater < int > > pq ; for ( int i = 0 ; i < n ; i ++ ) pq . push ( arr [ i ] ) ; int count = 0 , ans = 1 ; while ( pq . empty ( ) == false && count < k ) { ans = ans * pq . top ( ) ; pq . pop ( ) ; count ++ ; } return ans ; }
FIND_@@ UNI@@ QUE_@@ ELEMEN@@ TS_@@ MATRIX | int unique ( int mat [ R ] [ C ] , int n , int m ) { int maximum = 0 , flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( maximum < mat [ i ] [ j ] ) maximum = mat [ i ] [ j ] ; int b [ maximum + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) b [ mat [ i ] [ j ] ] ++ ; for ( int i = 1 ; i <= maximum ; i ++ ) if ( b [ i ] == 1 ) cout << i << " ▁ " ; flag = 1 ; if ( ! flag ) { cout << " No ▁ unique ▁ element ▁ in ▁ the ▁ matrix " ; } }
LON@@ GE@@ ST@@ _SUB@@ SEQU@@ ENCE_@@ SU@@ CH_@@ TH@@ AT_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN_@@ AD@@ J@@ AC@@ ENTS_@@ IS_@@ ONE | int lon@@ gest@@ Sub@@ seq@@ With@@ Diff@@ One ( int arr [ ] , int n ) { int dp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == arr [ j ] - 1 ) ) dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) ; } } int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ; return result ; }
C_@@ PROGRAM_@@ CON@@ CAT@@ EN@@ ATE_@@ STRING_@@ GI@@ V@@ EN_@@ NUMBER_@@ TIMES | string repeat ( string s , int n ) { string s1 = s ; for ( int i = 1 ; i < n ; i ++ ) s += s1 ; return s ; }
SE@@ ARCH@@ ING_@@ FOR_@@ PATTER@@ NS@@ _SET_@@ 1_@@ N@@ AI@@ VE_@@ PATTER@@ N@@ _SE@@ ARCH@@ ING | void search ( char * pat , char * txt ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) cout << " Pattern ▁ found ▁ at ▁ index ▁ " << i << endl ; } }
COUNT_@@ POSSI@@ BLE_@@ PATH@@ S@@ _SOURCE_@@ DESTIN@@ ATION_@@ EXAC@@ TL@@ Y_@@ K_@@ ED@@ GES | int coun@@ tw@@ al@@ ks ( int graph [ ] [ V ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 1 ; if ( k == 1 && graph [ u ] [ v ] ) return 1 ; if ( k <= 0 ) return 0 ; int count = 0 ; for ( int i = 0 ; i < V ; i ++ ) if ( graph [ u ] [ i ] == 1 ) count += coun@@ tw@@ al@@ ks ( graph , i , v , k - 1 ) ; return count ; }
COUNT_@@ DI@@ VISI@@ BLE_@@ PAIR@@ S_@@ ARRAY | int count@@ Di@@ visi@@ bles ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ i ] == 0 ) res ++ ; return res ; }
PROGRAM_@@ TO_@@ CHECK_@@ IF_@@ A_@@ MATRIX_@@ IS_@@ SYM@@ METRIC | bool is@@ Symmetri@@ c ( int mat [ ] [ MAX ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ; return true ; }
COUNT_@@ PA@@ LIN@@ DRO@@ ME_@@ SUB_@@ STRING@@ S_@@ STRING | int Count@@ PS ( char str [ ] , int n ) { int dp [ n ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; bool P [ n ] [ n ] ; memset ( P , false , sizeof ( P ) ) ; for ( int i = 0 ; i < n ; i ++ ) P [ i ] [ i ] = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str [ i ] == str [ i + 1 ] ) { P [ i ] [ i + 1 ] = true ; dp [ i ] [ i + 1 ] = 1 ; } } for ( int gap = 2 ; gap < n ; gap ++ ) { for ( int i = 0 ; i < n - gap ; i ++ ) { int j = gap + i ; if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ; if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ; } } return dp [ 0 ] [ n - 1 ] ; }
WAY@@ S_S@@ UM_@@ N_@@ USING_@@ ARRAY_@@ ELEMEN@@ TS_@@ REPE@@ TI@@ TION_@@ ALLOWED | int count@@ W@@ ays ( int arr [ ] , int m , int N ) { int count [ N + 1 ] ; memset ( count , 0 , sizeof ( count ) ) ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; return count [ N ] ; }
MINIMUM_@@ NUMBER_OF_@@ OPER@@ ATION@@ S_TO_@@ MOVE_@@ ALL_@@ UP@@ PER@@ CASE_@@ CHARAC@@ TER@@ S_@@ BEFORE_@@ ALL_@@ LOWER_@@ CASE_@@ CHARAC@@ TERS | int min@@ Operations ( string str , int n ) { int i , last@@ Upper = - 1 , first@@ Lower = - 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( is@@ upper ( str [ i ] ) ) { last@@ Upper = i ; break ; } } for ( i = 0 ; i < n ; i ++ ) { if ( is@@ lower ( str [ i ] ) ) { first@@ Lower = i ; break ; } } if ( last@@ Upper == - 1 || first@@ Lower == - 1 ) return 0 ; int count@@ Upper = 0 ; for ( i = first@@ Lower ; i < n ; i ++ ) { if ( is@@ upper ( str [ i ] ) ) { count@@ Upper ++ ; } } int count@@ Lower = 0 ; for ( i = 0 ; i < last@@ Upper ; i ++ ) { if ( is@@ lower ( str [ i ] ) ) { count@@ Lower ++ ; } } return min ( count@@ Lower , count@@ Upper ) ; }
PRINT_@@ A_@@ GI@@ V@@ EN_@@ MATRIX_@@ IN@@ _SP@@ IR@@ AL_@@ FORM | void spir@@ al@@ Print ( int m , int n , int a [ R ] [ C ] ) { int i , k = 0 , l = 0 ; while ( k < m && l < n ) { for ( i = l ; i < n ; ++ i ) { cout << a [ k ] [ i ] << " ▁ " ; } k ++ ; for ( i = k ; i < m ; ++ i ) { cout << a [ i ] [ n - 1 ] << " ▁ " ; } n -- ; if ( k < m ) { for ( i = n - 1 ; i >= l ; -- i ) { cout << a [ m - 1 ] [ i ] << " ▁ " ; } m -- ; } if ( l < n ) { for ( i = m - 1 ; i >= k ; -- i ) { cout << a [ i ] [ l ] << " ▁ " ; } l ++ ; } } }
FIND_@@ DISTIN@@ CT_@@ INTEG@@ ERS_@@ FOR_@@ A_@@ TR@@ IP@@ LET_@@ WITH_@@ GI@@ V@@ EN_@@ PRODUCT | void find@@ Trip@@ lets ( int x ) { vector < int > fact ; unordered_@@ set < int > factors ; for ( int i = 2 ; i <= sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { fact . push_back ( i ) ; if ( x / i != i ) fact . push_back ( x / i ) ; factors . insert ( i ) ; factors . insert ( x / i ) ; } } bool found = false ; int k = fact . size ( ) ; for ( int i = 0 ; i < k ; i ++ ) { int a = fact [ i ] ; for ( int j = 0 ; j < k ; j ++ ) { int b = fact [ j ] ; if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) { cout << a << " ▁ " << b << " ▁ " << ( x / ( a * b ) ) ; found = true ; break ; } } if ( found ) break ; } if ( ! found ) cout << " - 1" ; }
S@@ UM_@@ TWO_@@ LARGE_@@ NUMB@@ ERS_@@ 1 | string find@@ Sum ( string str1 , string str2 ) { if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1 , str2 ) ; string str = " " ; int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; int diff = n2 - n1 ; int carry = 0 ; for ( int i = n1 - 1 ; i >= 0 ; i -- ) { int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i + diff ] - '0' ) + carry ) ; str . push_back ( sum % 10 + '0' ) ; carry = sum / 10 ; } for ( int i = n2 - n1 - 1 ; i >= 0 ; i -- ) { int sum = ( ( str2 [ i ] - '0' ) + carry ) ; str . push_back ( sum % 10 + '0' ) ; carry = sum / 10 ; } if ( carry ) str . push_back ( carry + '0' ) ; reverse ( str . begin ( ) , str . end ( ) ) ; return str ; }
CO@@ CK@@ TA@@ IL@@ _S@@ ORT | void Co@@ ck@@ tail@@ Sort ( int a [ ] , int n ) { bool swapped = true ; int start = 0 ; int end = n - 1 ; while ( swapped ) { swapped = false ; for ( int i = start ; i < end ; ++ i ) { if ( a [ i ] > a [ i + 1 ] ) { swap ( a [ i ] , a [ i + 1 ] ) ; swapped = true ; } } if ( ! swapped ) break ; swapped = false ; -- end ; for ( int i = end - 1 ; i >= start ; -- i ) { if ( a [ i ] > a [ i + 1 ] ) { swap ( a [ i ] , a [ i + 1 ] ) ; swapped = true ; } } ++ start ; } }
COUNT_@@ DE@@ RANGE@@ MEN@@ TS_@@ PER@@ MU@@ TA@@ TION@@ _SU@@ CH_@@ TH@@ AT_@@ NO_@@ ELEMENT_@@ AP@@ PE@@ AR@@ S_IN_@@ IT@@ S_@@ ORIGIN@@ AL_@@ POSITION_@@ 1 | int count@@ D@@ er ( int n ) { int der [ n + 1 ] ; der [ 0 ] = 1 ; der [ 1 ] = 0 ; der [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ; return der [ n ] ; }
MAXIMUM_@@ PRODUCT_@@ SUB@@ ARRAY_@@ AD@@ DED_@@ NEGATIVE_@@ PRODUCT_@@ CASE | int find@@ Max@@ Product ( int arr [ ] , int n ) { int i ; int ans = INT_@@ MIN ; int maxval = 1 ; int min@@ val = 1 ; int prev@@ Max ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { maxval = maxval * arr [ i ] ; min@@ val = min ( 1 , min@@ val * arr [ i ] ) ; } else if ( arr [ i ] == 0 ) { min@@ val = 1 ; maxval = 0 ; } else if ( arr [ i ] < 0 ) { prev@@ Max = maxval ; maxval = min@@ val * arr [ i ] ; min@@ val = prev@@ Max * arr [ i ] ; } ans = max ( ans , maxval ) ; if ( maxval <= 0 ) { maxval = 1 ; } } return ans ; }
RE@@ AR@@ RANGE_@@ ARRAY@@ _SU@@ CH_@@ TH@@ AT_@@ EV@@ EN_@@ POSI@@ TI@@ ONED_@@ ARE_@@ GREATER_@@ TH@@ AN_@@ O@@ DD | void assign ( int a [ ] , int n ) { sort ( a , a + n ) ; int ans [ n ] ; int p = 0 , q = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ; else ans [ i ] = a [ p ++ ] ; } for ( int i = 0 ; i < n ; i ++ ) cout << ans [ i ] << " ▁ " ; }
FRI@@ END@@ S_@@ PAIR@@ ING_@@ PRO@@ BLE@@ M | int count@@ Fri@@ ends@@ Pair@@ ings ( int n ) { int dp [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i <= 2 ) dp [ i ] = i ; else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; } return dp [ n ] ; }
PRI@@ ME_@@ NUMB@@ ERS | bool is@@ Prime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }
PRO@@ B@@ AB@@ ILITY_@@ REACH@@ ING_@@ POINT_@@ 2_@@ 3_@@ STE@@ PS_@@ TIME | float find_@@ prob ( int N , float P ) { double dp [ N + 1 ] ; dp [ 0 ] = 1 ; dp [ 1 ] = 0 ; dp [ 2 ] = P ; dp [ 3 ] = 1 - P ; for ( int i = 4 ; i <= N ; ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ; return dp [ N ] ; }
SM@@ ALLE@@ ST_@@ OF_@@ THRE@@ E_@@ INTEG@@ ERS_@@ WITH@@ OUT_@@ COMP@@ ARIS@@ ON_@@ OPER@@ ATOR@@ S_@@ 1 | int smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z ; return ( ! ( x / z ) ) ? x : z ; }
COMMON_@@ ELEMEN@@ TS_@@ IN_@@ ALL_@@ RO@@ WS_@@ OF_@@ A_@@ GI@@ V@@ EN_@@ MATRIX | void print@@ Common@@ Elements ( int mat [ M ] [ N ] ) { unordered_map < int , int > mp ; for ( int j = 0 ; j < N ; j ++ ) mp [ mat [ 0 ] [ j ] ] = 1 ; for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp [ mat [ i ] [ j ] ] == i ) { mp [ mat [ i ] [ j ] ] = i + 1 ; if ( i == M - 1 ) cout << mat [ i ] [ j ] << " ▁ " ; } } } }
DETE@@ CT@@ ING_@@ NEGATIVE_@@ CY@@ CLE_@@ USING_@@ FLO@@ Y@@ D_@@ WAR@@ SHALL | bool neg@@ Cycle@@ flo@@ y@@ d@@ War@@ shall ( int graph [ ] [ V ] ) { int dist [ V ] [ V ] , i , j , k ; for ( i = 0 ; i < V ; i ++ ) for ( j = 0 ; j < V ; j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ] ; for ( k = 0 ; k < V ; k ++ ) { for ( i = 0 ; i < V ; i ++ ) { for ( j = 0 ; j < V ; j ++ ) { if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ; } } } for ( int i = 0 ; i < V ; i ++ ) if ( dist [ i ] [ i ] < 0 ) return true ; return false ; }
PROGR@@ AM@@ _S@@ ORT_@@ STRING_@@ DESC@@ END@@ ING_@@ ORDER | void sort@@ String ( string & str ) { int char@@ Count [ MAX_@@ CHAR ] = { 0 } ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) char@@ Count [ str [ i ] - ' a ' ] ++ ; for ( int i = MAX_@@ CHAR - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < char@@ Count [ i ] ; j ++ ) cout << ( char ) ( ' a ' + i ) ; }
COUNT_@@ PAIR@@ S_@@ WITH_@@ GI@@ VEN@@ _S@@ UM | int get@@ Pai@@ rs@@ Count ( int arr [ ] , int n , int sum ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] + arr [ j ] == sum ) count ++ ; return count ; }
SUM@@ _SERI@@ ES_@@ 12_@@ 32_@@ 5@@ 2_@@ 2@@ N_@@ 12@@ _1 | int sum@@ Of@@ Series ( int n ) { return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ; }
MAXIMUM_@@ DIFF@@ ER@@ ENCE_@@ BETWE@@ EN_@@ FREQU@@ ENCY_@@ OF_@@ TWO_@@ ELEMEN@@ TS@@ _SU@@ CH_@@ TH@@ AT_@@ ELEMENT_@@ H@@ AV@@ ING_@@ GREATER_@@ FREQU@@ ENCY_@@ IS_@@ AL@@ SO_@@ GREATER | int max@@ diff ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) ; else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) ; } } return ans ; }
SHIFT_@@ MATRIX_@@ ELEMEN@@ TS_@@ K | void shift@@ Matrix@@ By@@ K ( int mat [ N ] [ N ] , int k ) { if ( k > N ) { cout << " shift@@ ing ▁ is ▁ not ▁ possible " << endl ; return ; } int j = 0 ; while ( j < N ) { for ( int i = k ; i < N ; i ++ ) cout << mat [ j ] [ i ] << " ▁ " ; for ( int i = 0 ; i < k ; i ++ ) cout << mat [ j ] [ i ] << " ▁ " ; cout << endl ; j ++ ; } }
MAXIMUM_@@ AND_@@ MINIMUM_@@ IN_@@ A@@ _S@@ QU@@ ARE_@@ MATRIX | void max@@ Min ( int arr [ ] [ MAX ] , int n ) { int min = INT_MAX ; int max = INT_@@ MIN ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n / 2 ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) { if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ; if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ; } else { if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ; if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ] ; } } } cout << " Maximum ▁ = ▁ " << max ; << " , ▁ Minimum ▁ = ▁ " << min ; }
FIND_@@ PA@@ IR_@@ WITH_@@ GREA@@ TEST_@@ PRODUCT_@@ IN_@@ ARRAY_@@ 1 | int find@@ Gre@@ atest ( int arr [ ] , int n ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; sort ( arr , arr + n ) ; for ( int i = n - 1 ; i > 1 ; i -- ) { for ( int j = 0 ; j < i && arr [ j ] <= sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) { int result = arr [ i ] / arr [ j ] ; if ( result != arr [ j ] && m [ result ] > 0 ) return arr [ i ] ; else if ( result == arr [ j ] && m [ result ] > 1 ) return arr [ i ] ; } } } return - 1 ; }
0_@@ 1_@@ KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M_@@ D@@ P_@@ 10@@ _1 | int kn@@ ap@@ S@@ ack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; }
PROGRAM_@@ DECIMAL_@@ OC@@ TAL_@@ CONVERSION | void dec@@ To@@ Oct@@ al ( int n ) { int oct@@ al@@ Num [ 100 ] ; int i = 0 ; while ( n != 0 ) { oct@@ al@@ Num [ i ] = n % 8 ; n = n / 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) cout << oct@@ al@@ Num [ j ] ; }
SUB@@ SEQU@@ EN@@ CE@@ S@@ _SIZE_@@ THRE@@ E_@@ ARRAY_@@ WHO@@ SE_@@ S@@ UM_@@ DI@@ VISI@@ BLE_@@ M_@@ 1 | int count@@ Sub@@ Seq ( int A [ ] , int N , int M ) { int ans = 0 ; int h [ M ] = { 0 } ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = A [ i ] % M ; h [ A [ i ] ] ++ ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = i ; j < M ; j ++ ) { int rem = ( M - ( i + j ) % M ) % M ; if ( rem < j ) continue ; if ( i == j && rem == j ) ans += h [ i ] * ( h [ i ] - 1 ) * ( h [ i ] - 2 ) / 6 ; else if ( i == j ) ans += h [ i ] * ( h [ i ] - 1 ) * h [ rem ] / 2 ; else if ( i == rem ) ans += h [ i ] * ( h [ i ] - 1 ) * h [ j ] / 2 ; else if ( rem == j ) ans += h [ j ] * ( h [ j ] - 1 ) * h [ i ] / 2 ; else ans = ans + h [ i ] * h [ j ] * h [ rem ] ; } } return ans ; }
COUNT_@@ FI@@ BON@@ ACC@@ I_@@ NUMB@@ ERS_@@ GI@@ V@@ EN_@@ RANGE_@@ LOG_@@ TIME | int count@@ Fi@@ bs ( int low , int high ) { int f1 = 0 , f2 = 1 , f3 = 1 ; int result = 0 ; while ( f1 <= high ) { if ( f1 >= low ) result ++ ; f1 = f2 ; f2 = f3 ; f3 = f1 + f2 ; } return result ; }
FIND_@@ WHE@@ THER_@@ A_@@ GI@@ V@@ EN_@@ NUMBER_@@ IS_@@ A_@@ POWER_@@ OF_@@ 4_@@ OR_@@ NOT_@@ 1 | bool is@@ PowerOf@@ Four ( unsigned int n ) { int count = 0 ; if ( n && ! ( n & ( n - 1 ) ) ) { while ( n > 1 ) { n >>= 1 ; count += 1 ; } return ( count % 2 == 0 ) ? 1 : 0 ; } return 0 ; }
FIN@@ D_S@@ UM_@@ EV@@ EN_@@ FAC@@ TOR@@ S_@@ NUMBER | int su@@ mo@@ f@@ Factors ( int n ) { if ( n % 2 != 0 ) return 0 ; int res = 1 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { int count = 0 , curr_@@ sum = 1 , curr_@@ term = 1 ; while ( n % i == 0 ) { count ++ ; n = n / i ; if ( i == 2 && count == 1 ) curr_@@ sum = 0 ; curr_@@ term *= i ; curr_@@ sum += curr_@@ term ; } res *= curr_@@ sum ; } if ( n >= 2 ) res *= ( 1 + n ) ; return res ; }
FIN@@ D_S@@ UM_@@ NON_@@ REPE@@ ATING_@@ DISTIN@@ CT_@@ ELEMEN@@ TS_@@ ARRAY | int find@@ Sum ( int arr [ ] , int n ) { int sum = 0 ; unordered_@@ set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . find ( arr [ i ] ) == s . end ( ) ) { sum += arr [ i ] ; s . insert ( arr [ i ] ) ; } } return sum ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 17@@ _@@ PA@@ LIN@@ DRO@@ ME_@@ PARTI@@ TION@@ ING_@@ 1 | int min@@ Pal@@ Par@@ tion ( char * str ) { int n = strlen ( str ) ; int C [ n ] ; bool P [ n ] [ n ] ; int i , j , k , L ; for ( i = 0 ; i < n ; i ++ ) { P [ i ] [ i ] = true ; } for ( L = 2 ; L <= n ; L ++ ) { for ( i = 0 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] ) ; else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ] ; } } for ( i = 0 ; i < n ; i ++ ) { if ( P [ 0 ] [ i ] == true ) C [ i ] = 0 ; else { C [ i ] = INT_MAX ; for ( j = 0 ; j < i ; j ++ ) { if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ] ; } } } return C [ n - 1 ] ; }
MINIMUM_@@ POSITIVE_@@ POINT@@ S_TO_@@ REACH_@@ DESTIN@@ ATION | int min@@ Initial@@ Points ( int points [ ] [ C ] ) { int dp [ R ] [ C ] ; int m = R , n = C ; dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ; for ( int i = m - 2 ; i >= 0 ; i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ; for ( int j = n - 2 ; j >= 0 ; j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ] , 1 ) ; for ( int i = m - 2 ; i >= 0 ; i -- ) { for ( int j = n - 2 ; j >= 0 ; j -- ) { int min_@@ points_@@ on_@@ exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ; dp [ i ] [ j ] = max ( min_@@ points_@@ on_@@ exit - points [ i ] [ j ] , 1 ) ; } } return dp [ 0 ] [ 0 ] ; }
COUNT_@@ OF_@@ PAIR@@ S_S@@ ATI@@ SF@@ Y@@ ING_@@ THE_@@ GI@@ V@@ EN_@@ CONDITION | int count@@ Pair ( int a , int b ) { string s = to_string ( b ) ; int i ; for ( i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] != '9' ) break ; } int result ; if ( i == s . length ( ) ) result = a * s . length ( ) ; else result = a * ( s . length ( ) - 1 ) ; return result ; }
SUR@@ VI@@ VAL | void survi@@ val ( int S , int N , int M ) { if ( ( ( N * 6 ) < ( M * 7 ) && S > 6 ) || M > N ) cout << " No \n " ; else { int days = ( M * S ) / N ; if ( ( ( M * S ) % N ) != 0 ) days ++ ; cout << " Yes ▁ " << days << endl ; } }
INTER@@ LE@@ AVE_@@ FIRST_@@ HALF_@@ QUEUE_@@ SECON@@ D_@@ HALF | void inter@@ Leave@@ Queue ( queue < int > & q ) { if ( q . size ( ) % 2 != 0 ) cout << " Input ▁ even ▁ number ▁ of ▁ integers . " << endl ; stack < int > s ; int half@@ Size = q . size ( ) / 2 ; for ( int i = 0 ; i < half@@ Size ; i ++ ) { s . push ( q . front ( ) ) ; q . pop ( ) ; } while ( ! s . empty ( ) ) { q . push ( s . top ( ) ) ; s . pop ( ) ; } for ( int i = 0 ; i < half@@ Size ; i ++ ) { q . push ( q . front ( ) ) ; q . pop ( ) ; } for ( int i = 0 ; i < half@@ Size ; i ++ ) { s . push ( q . front ( ) ) ; q . pop ( ) ; } while ( ! s . empty ( ) ) { q . push ( s . top ( ) ) ; s . pop ( ) ; q . push ( q . front ( ) ) ; q . pop ( ) ; } }
INTEGER_@@ POSITIVE_@@ VALUE_@@ POSITIVE_@@ NEGATIVE_@@ VALUE_@@ ARRAY_@@ 1 | int find@@ Integer ( int arr [ ] , int n ) { int neg = 0 , pos = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] < 0 ) neg ++ ; else pos ++ ; } return ( sum / abs ( neg - pos ) ) ; }
FIN@@ D_S@@ UM_@@ EV@@ EN_@@ INDEX_@@ BIN@@ O@@ MI@@ AL_@@ CO@@ EF@@ FI@@ CI@@ ENTS | int even@@ Sum ( int n ) { int C [ n + 1 ] [ n + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } int sum = 0 ; for ( int i = 0 ; i <= n ; i += 2 ) sum += C [ n ] [ i ] ; return sum ; }
DE@@ LAN@@ NO@@ Y_@@ NUMBER | int de@@ al@@ n@@ no@@ y ( int n , int m ) { if ( m == 0 || n == 0 ) return 1 ; return de@@ al@@ n@@ no@@ y ( m - 1 , n ) + de@@ al@@ n@@ no@@ y ( m - 1 , n - 1 ) + de@@ al@@ n@@ no@@ y ( m , n - 1 ) ; }
FIND_@@ THE_@@ LAR@@ GE@@ ST@@ _SUB@@ ARRAY_@@ WITH_@@ 0@@ _S@@ UM | int maxLen ( int arr [ ] , int n ) { int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_@@ sum = 0 ; for ( int j = i ; j < n ; j ++ ) { curr_@@ sum += arr [ j ] ; if ( curr_@@ sum == 0 ) max_len = max ( max_len , j - i + 1 ) ; } } return max_len ; }
NEXT_@@ POWER_@@ OF_@@ 2 | unsigned int next@@ PowerOf@@ 2 ( unsigned int n ) { unsigned count = 0 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( n != 0 ) { n >>= 1 ; count += 1 ; } return 1 << count ; }
LON@@ GE@@ ST_@@ GEO@@ METRIC_@@ PROG@@ RES@@ SION | int len@@ Of@@ Lon@@ gest@@ GP ( int set [ ] , int n ) { if ( n < 2 ) return n ; if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 ) ; sort ( set , set + n ) ; int L [ n ] [ n ] ; int ll@@ gp = 1 ; for ( int i = 0 ; i < n ; ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n - 1 ] = 2 ; else L [ i ] [ n - 1 ] = 1 ; for ( int j = n - 2 ; j >= 1 ; -- j ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ k ; else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) { if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ; else L [ i ] [ j ] = 1 ; -- i ; } else { L [ i ] [ j ] = L [ j ] [ k ] + 1 ; if ( L [ i ] [ j ] > ll@@ gp ) ll@@ gp = L [ i ] [ j ] ; -- i ; ++ k ; } } while ( i >= 0 ) { if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ; else L [ i ] [ j ] = 1 ; -- i ; } } return ll@@ gp ; }
DYNAMIC_@@ PROGR@@ AM@@ MIN@@ G@@ _SET_@@ 6_@@ MIN_@@ CO@@ ST_@@ PATH | int min@@ Cost ( int cost [ R ] [ C ] , int m , int n ) { int i , j ; int tc [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; }
PROGRAM_@@ DISTAN@@ CE_@@ TWO_@@ POINT@@ S_@@ EAR@@ TH | long double distance ( long double lat@@ 1 , long double long@@ 1 , long double lat@@ 2 , long double long@@ 2 ) { lat@@ 1 = to@@ Radians ( lat@@ 1 ) ; long@@ 1 = to@@ Radians ( long@@ 1 ) ; lat@@ 2 = to@@ Radians ( lat@@ 2 ) ; long@@ 2 = to@@ Radians ( long@@ 2 ) ; long double d@@ long = long@@ 2 - long@@ 1 ; long double dl@@ at = lat@@ 2 - lat@@ 1 ; long double ans = pow ( sin ( dl@@ at / 2 ) , 2 ) + cos ( lat@@ 1 ) * cos ( lat@@ 2 ) * pow ( sin ( d@@ long / 2 ) , 2 ) ; ans = 2 * asin ( sqrt ( ans ) ) ; long double R = 637@@ 1 ; ans = ans * R ; return ans ; }
B@@ IN_@@ PAC@@ KING_@@ PRO@@ BLE@@ M_@@ MINI@@ MI@@ ZE_@@ NUMBER_OF_@@ USED_@@ BIN@@ S | int next@@ Fit ( int weight [ ] , int n , int c ) { int res = 0 , bin@@ _re@@ m = c ; for ( int i = 0 ; i < n ; i ++ ) { if ( weight [ i ] > bin@@ _re@@ m ) { res ++ ; bin@@ _re@@ m = c - weight [ i ] ; } else bin@@ _re@@ m -= weight [ i ] ; } return res ; }
FIN@@ D@@ _SUB@@ ARRAY_@@ WITH_@@ GI@@ VEN@@ _S@@ UM@@ _1 | int sub@@ Array@@ Sum ( int arr [ ] , int n , int sum ) { int curr_@@ sum = arr [ 0 ] , start = 0 , i ; for ( i = 1 ; i <= n ; i ++ ) { while ( curr_@@ sum > sum && start < i - 1 ) { curr_@@ sum = curr_@@ sum - arr [ start ] ; start ++ ; } if ( curr_@@ sum == sum ) { cout << " Sum ▁ found ▁ between ▁ indexes ▁ " << start << " ▁ and ▁ " << i - 1 ; return 1 ; } if ( i < n ) curr_@@ sum = curr_@@ sum + arr [ i ] ; } cout << " No ▁ sub@@ array ▁ found " ; return 0 ; }
SPACE_@@ OPTIMIZ@@ ED_@@ D@@ P_S@@ OL@@ U@@ TION_@@ 0_@@ 1_@@ KN@@ AP@@ S@@ ACK_@@ PRO@@ BLE@@ M_@@ 1 | int K@@ nap@@ S@@ ack ( int val [ ] , int wt [ ] , int n , int W ) { int dp [ W + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = W ; j >= wt [ i ] ; j -- ) dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ; return dp [ W ] ; }
FIND_@@ VALUE_@@ OF_@@ Y_@@ MOD_@@ 2_@@ RAI@@ SED_@@ TO_@@ POWER_@@ X | long long int y@@ Mod ( long long int y , long long int x ) { if ( log2 ( y ) < x ) return y ; if ( x > 63 ) return y ; return ( y % ( 1 << x ) ) ; }
SUM@@ _SERI@@ ES_@@ 23@@ _@@ 45@@ _@@ 67@@ _@@ 89@@ _@@ UP@@ TO_@@ N_@@ TER@@ MS | double series@@ Sum ( int n ) { int i = 1 ; double res = 0.0 ; bool sign = true ; while ( n > 0 ) { n -- ; if ( sign ) { sign = ! sign ; res = res + ( double ) ++ i / ++ i ; } else { sign = ! sign ; res = res - ( double ) ++ i / ++ i ; } } return res ; }
LENGTH_@@ LON@@ GE@@ ST_@@ STRICT_@@ BIT@@ ON@@ IC@@ _SUB@@ SEQUENCE | int long@@ Len@@ Strict@@ Bit@@ on@@ ic@@ Sub ( int arr [ ] , int n ) { unordered_map < int , int > inc , d@@ cr ; int len_@@ inc [ n ] , len@@ _d@@ cr [ n ] ; int long@@ Len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len = 0 ; if ( inc . find ( arr [ i ] - 1 ) != inc . end ( ) ) len = inc [ arr [ i ] - 1 ] ; inc [ arr [ i ] ] = len_@@ inc [ i ] = len + 1 ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { int len = 0 ; if ( d@@ cr . find ( arr [ i ] - 1 ) != d@@ cr . end ( ) ) len = d@@ cr [ arr [ i ] - 1 ] ; d@@ cr [ arr [ i ] ] = len@@ _d@@ cr [ i ] = len + 1 ; } for ( int i = 0 ; i < n ; i ++ ) if ( long@@ Len < ( len_@@ inc [ i ] + len@@ _d@@ cr [ i ] - 1 ) ) long@@ Len = len_@@ inc [ i ] + len@@ _d@@ cr [ i ] - 1 ; return long@@ Len ; }
MAXIMUM_@@ DISTAN@@ CE_@@ TWO_@@ OC@@ CURR@@ EN@@ CES_@@ ELEMENT_@@ ARRAY | int max@@ Distance ( int arr [ ] , int n ) { unordered_map < int , int > mp ; int max_@@ dist = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i ; else max_@@ dist = max ( max_@@ dist , i - mp [ arr [ i ] ] ) ; } return max_@@ dist ; }
FIND_@@ REC@@ TAN@@ GLE_@@ BINARY_@@ MATRIX_@@ COR@@ NE@@ RS_@@ 1_1 | bool is@@ Rectangle ( const vector < vector < int > > & matrix ) { int rows = matrix . size ( ) ; if ( rows == 0 ) return false ; int columns = matrix [ 0 ] . size ( ) ; unordered_map < int , unordered_@@ set < int > > table ; for ( int i = 0 ; i < rows ; ++ i ) { for ( int j = 0 ; j < columns - 1 ; ++ j ) { for ( int k = j + 1 ; k < columns ; ++ k ) { if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) { if ( table . find ( j ) != table . end ( ) && table [ j ] . find ( k ) != table [ j ] . end ( ) ) return true ; table [ j ] . insert ( k ) ; } } } } return false ; }
COUNT_@@ MINIMUM_@@ NUMBER@@ _SUB@@ SET@@ S@@ _SUB@@ SEQU@@ EN@@ CES_@@ CON@@ SEC@@ UTI@@ VE_@@ NUMB@@ ERS | int nu@@ mo@@ f@@ subset ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ; } return count ; }
LAR@@ GE@@ ST@@ _S@@ UM_@@ CON@@ TI@@ GU@@ OU@@ S@@ _SUB@@ ARRAY | int max@@ Sub@@ Array@@ Sum ( int a [ ] , int size ) { int max_@@ so@@ _f@@ ar = INT_@@ MIN , max_@@ ending_@@ here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_@@ ending_@@ here = max_@@ ending_@@ here + a [ i ] ; if ( max_@@ so@@ _f@@ ar < max_@@ ending_@@ here ) max_@@ so@@ _f@@ ar = max_@@ ending_@@ here ; if ( max_@@ ending_@@ here < 0 ) max_@@ ending_@@ here = 0 ; } return max_@@ so@@ _f@@ ar ; }
PROGRAM_@@ TO_@@ FIND_@@ RE@@ MA@@ INDE@@ R_@@ WITH@@ OUT_@@ USING_@@ MODUL@@ O_@@ OR_@@ OPERATOR_@@ 2 | int getRe@@ main@@ der ( int num , int divisor ) { while ( num >= divisor ) num -= divisor ; return num ; }
CHECK_@@ LARGE_@@ NUMBER_@@ DI@@ VISI@@ BLE_@@ 4_@@ NOT | bool check ( string str ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 ) ; int last = str [ n - 1 ] - '0' ; int second_@@ last = str [ n - 2 ] - '0' ; return ( ( second_@@ last * 10 + last ) % 4 == 0 ) ; }
FIND_@@ THE_@@ ELEMENT_@@ TH@@ AT_@@ AP@@ PE@@ AR@@ S_@@ ON@@ CE_@@ 1 | int get@@ Single ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_@@ SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sum ++ ; } if ( sum % 3 ) result |= x ; } return result ; }
NUMBER_@@ REC@@ TA@@ NG@@ LES_@@ NM_@@ GRID | int rect@@ Count ( int n , int m ) { return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ; }
MAXIMUM_@@ POINT@@ S_@@ INTER@@ SECTION_@@ N_@@ CIRC@@ LES | int intersection ( int n ) { return n * ( n - 1 ) ; }
