define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i64 
 %4 = alloca i32 
 %5 = alloca i32 
 store i32 0 , i32 * %1 
 store i32 0 , i32 * %5 
 br label %6 
 6: 
 %7 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %4 ) 
 %8 = icmp eq i32 %7 , 1 
 br i1 %8 , label %9 , label %46 
 9: 
 store i32 0 , i32 * %5 
 call void @llvm.memset.p0i8.i64 ( i8 * bitcast ( [ 1000000 x i32 ] * @a to i8 * ) i8 0 i64 4000000 i1 false ) 
 store i64 2 , i64 * %2 
 br label %10 
 10: 
 %11 = load i64 , i64 * %2 
 %12 = load i32 , i32 * %4 
 %13 = sext i32 %12 to i64 
 %14 = icmp sle i64 %11 , %13 
 br i1 %14 , label %15 , label %43 
 15: 
 %16 = load i64 , i64 * %2 
 %17 = getelementptr inbounds [ 1000000 x i32 ] , [ 1000000 x i32 ] * @a , i64 0 , i64 %16 
 %18 = load i32 , i32 * %17 
 %19 = icmp eq i32 %18 , 0 
 br i1 %19 , label %20 , label %39 
 20: 
 %21 = load i64 , i64 * %2 
 %22 = load i64 , i64 * %2 
 %23 = mul nsw i64 %21 , %22 
 store i64 %23 , i64 * %3 
 br label %24 
 24: 
 %25 = load i64 , i64 * %3 
 %26 = load i32 , i32 * %4 
 %27 = sext i32 %26 to i64 
 %28 = icmp sle i64 %25 , %27 
 br i1 %28 , label %29 , label %36 
 29: 
 %30 = load i64 , i64 * %3 
 %31 = getelementptr inbounds [ 1000000 x i32 ] , [ 1000000 x i32 ] * @a , i64 0 , i64 %30 
 store i32 -1 , i32 * %31 
 br label %32 
 32: 
 %33 = load i64 , i64 * %2 
 %34 = load i64 , i64 * %3 
 %35 = add nsw i64 %34 , %33 
 store i64 %35 , i64 * %3 
 br label %24 
 36: 
 %37 = load i32 , i32 * %5 
 %38 = add nsw i32 %37 , 1 
 store i32 %38 , i32 * %5 
 br label %39 
 39: 
 br label %40 
 40: 
 %41 = load i64 , i64 * %2 
 %42 = add nsw i64 %41 , 1 
 store i64 %42 , i64 * %2 
 br label %10 
 43: 
 %44 = load i32 , i32 * %5 
 %45 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 4 x i8 ] @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) 
 br label %6 
 46: 
 ret i32 0 
 } 
