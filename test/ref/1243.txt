define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i32 
 store i32 0 , i32 * %1 
 store double , double * 0.000000e+00 @x 
 store double , double * 0.000000e+00 @y 
 store i32 90 , i32 * %2 
 br label %3 
 3: 
 %4 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str:%d,%d~00" i64 0 i64 0 ) i32 * @len i32 * @arg ) 
 %5 = icmp ne i32 -1 , %4 
 br i1 %5 , label %6 , label %14 
 6: 
 %7 = load i32 , i32 * @len 
 %8 = icmp ne i32 %7 , 0 
 br i1 %8 , label %12 , label %9 
 9: 
 %10 = load i32 , i32 * @arg 
 %11 = icmp ne i32 %10 , 0 
 br label %12 
 12: 
 %13 = phi i1 [ true %6 ] , [ %11 %9 ] 
 br label %14 
 14: 
 %15 = phi i1 [ false %3 ] , [ %13 %12 ] 
 br i1 %15 , label %16 , label %42 
 16: 
 %17 = load i32 , i32 * %2 
 %18 = sitofp i32 %17 to double 
 %19 = load double , double * @PAI 
 %20 = fdiv double %19 , 1.800000e+02 
 %21 = fmul double %18 , %20 
 %22 = call double @cos ( double %21 ) #3 
 %23 = load i32 , i32 * @len 
 %24 = sitofp i32 %23 to double 
 %25 = fmul double %22 , %24 
 %26 = load double , double * @x 
 %27 = fadd double %26 , %25 
 store double %27 , double * @x 
 %28 = load i32 , i32 * %2 
 %29 = sitofp i32 %28 to double 
 %30 = load double , double * @PAI 
 %31 = fdiv double %30 , 1.800000e+02 
 %32 = fmul double %29 , %31 
 %33 = call double @sin ( double %32 ) #3 
 %34 = load i32 , i32 * @len 
 %35 = sitofp i32 %34 to double 
 %36 = fmul double %33 , %35 
 %37 = load double , double * @y 
 %38 = fadd double %37 , %36 
 store double %38 , double * @y 
 %39 = load i32 , i32 * @arg 
 %40 = load i32 , i32 * %2 
 %41 = sub nsw i32 %40 , %39 
 store i32 %41 , i32 * %2 
 br label %3 
 42: 
 %43 = load double , double * @x 
 %44 = fptosi double %43 to i32 
 %45 = load double , double * @y 
 %46 = fptosi double %45 to i32 
 %47 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 7 x i8 ] @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) 
 ret i32 0 
 } 
