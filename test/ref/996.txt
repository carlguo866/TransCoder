define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 store i32 0 , i32 * %1 
 br label %2 
 2: 
 %3 = load i32 , i32 * @j 
 %4 = add nsw i32 %3 , 1 
 store i32 %4 , i32 * @j 
 %5 = sext i32 %3 to i64 
 %6 = getelementptr inbounds float , float * getelementptr inbounds ( [ 8 x float ] , [ 8 x float ] * @c i64 0 i64 0 ) , i64 %5 
 %7 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%f~00" i64 0 i64 0 ) float * %6 ) 
 %8 = xor i32 %7 , -1 
 %9 = icmp ne i32 %8 , 0 
 br i1 %9 , label %10 , label %35 
 10: 
 br label %11 
 11: 
 %12 = load i32 , i32 * @j 
 %13 = srem i32 %12 , 8 
 %14 = icmp ne i32 %13 , 0 
 br i1 %14 , label %32 , label %15 
 15: 
 store i32 0 , i32 * @j 
 %16 = call i32 @f ( i32 0 ) 
 %17 = call i32 @f ( i32 2 ) 
 %18 = mul nsw i32 %16 , %17 
 %19 = icmp sgt i32 %18 , 0 
 %20 = zext i1 %19 to i32 
 %21 = call i32 @f ( i32 2 ) 
 %22 = call i32 @f ( i32 4 ) 
 %23 = mul nsw i32 %21 , %22 
 %24 = icmp sgt i32 %23 , 0 
 %25 = zext i1 %24 to i32 
 %26 = and i32 %20 , %25 
 %27 = icmp ne i32 %26 , 0 
 %28 = zext i1 %27 to i64 
 %29 = select i1 %27 , i8 * getelementptr inbounds ( [ 4 x i8 ] , [ 4 x i8 ] * @".str.1:YES~00" i64 0 i64 0 ) , i8 * getelementptr inbounds ( [ 3 x i8 ] , [ 3 x i8 ] * @".str.2:NO~00" i64 0 i64 0 ) 
 %30 = call i32 ( i8 * ... ) bitcast ( i32 ( ... ) * @puts to i32 ( i8 * ... ) * ) ( i8 * %29 ) 
 %31 = icmp ne i32 %30 , 0 
 br label %32 
 32: 
 %33 = phi i1 [ true %11 ] , [ %31 %15 ] 
 %34 = zext i1 %33 to i32 
 br label %2 
 35: 
 %36 = load i32 , i32 * %1 
 ret i32 %36 
 } 
