define dso_local void @func_output ( i8 * %0 i32 %1 ) #0 { 
 %3 = alloca i8 * 
 %4 = alloca i32 
 %5 = alloca i32 
 store i8 * %0 , i8 * * %3 
 store i32 %1 , i32 * %4 
 %6 = load i32 , i32 * %4 
 store i32 %6 , i32 * %5 
 %7 = load i32 , i32 * %5 
 %8 = icmp sle i32 80 , %7 
 br i1 %8 , label %9 , label %11 
 9: 
 %10 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 10 x i8 ] @".str.2:overflow~0A~00" i64 0 i64 0 ) ) 
 br label %40 
 11: 
 br label %12 
 12: 
 %13 = load i32 , i32 * %5 
 %14 = icmp sge i32 %13 , 0 
 br i1 %14 , label %15 , label %39 
 15: 
 %16 = load i32 , i32 * %5 
 %17 = icmp eq i32 %16 , 0 
 br i1 %17 , label %18 , label %28 
 18: 
 %19 = load i8 * , i8 * * %3 
 %20 = load i32 , i32 * %5 
 %21 = sext i32 %20 to i64 
 %22 = getelementptr inbounds i8 , i8 * %19 , i64 %21 
 %23 = load i8 , i8 * %22 
 %24 = sext i8 %23 to i32 
 %25 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 4 x i8 ] @".str.3:%d~0A~00" i64 0 i64 0 ) i32 %24 ) 
 %26 = load i32 , i32 * %5 
 %27 = add nsw i32 %26 , -1 
 store i32 %27 , i32 * %5 
 br label %38 
 28: 
 %29 = load i8 * , i8 * * %3 
 %30 = load i32 , i32 * %5 
 %31 = sext i32 %30 to i64 
 %32 = getelementptr inbounds i8 , i8 * %29 , i64 %31 
 %33 = load i8 , i8 * %32 
 %34 = sext i8 %33 to i32 
 %35 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 %34 ) 
 %36 = load i32 , i32 * %5 
 %37 = add nsw i32 %36 , -1 
 store i32 %37 , i32 * %5 
 br label %38 
 38: 
 br label %12 
 39: 
 br label %40 
 40: 
 ret void 
 } 
