define dso_local i32 @main ( i32 %0 ) #0 { 
 %2 = alloca i32 
 %3 = alloca i32 
 store i32 0 , i32 * %2 
 store i32 %0 , i32 * %3 
 br label %4 
 4: 
 %5 = load i32 , i32 * %3 
 %6 = sext i32 %5 to i64 
 %7 = getelementptr inbounds i32 , i32 * getelementptr inbounds ( [ 1 x i32 ] , [ 1 x i32 ] * @s i64 0 i64 0 ) , i64 %6 
 %8 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %7 ) 
 %9 = xor i32 %8 , -1 
 %10 = load i32 , i32 * %3 
 %11 = mul nsw i32 %9 , %10 
 %12 = icmp ne i32 %11 , 0 
 br i1 %12 , label %13 , label %32 
 13: 
 br label %14 
 14: 
 %15 = load i32 , i32 * %3 
 %16 = add nsw i32 %15 , 1 
 store i32 %16 , i32 * %3 
 %17 = sext i32 %15 to i64 
 %18 = getelementptr inbounds [ 0 x i32 ] , [ 0 x i32 ] * bitcast ( [ 1 x i32 ] * @s to [ 0 x i32 ] * ) , i64 0 , i64 %17 
 %19 = load i32 , i32 * %18 
 %20 = icmp ne i32 %19 , 0 
 br i1 %20 , label %29 , label %21 
 21: 
 %22 = load i32 , i32 * %3 
 %23 = sub nsw i32 %22 , 2 
 store i32 %23 , i32 * %3 
 %24 = sext i32 %23 to i64 
 %25 = getelementptr inbounds [ 0 x i32 ] , [ 0 x i32 ] * bitcast ( [ 1 x i32 ] * @s to [ 0 x i32 ] * ) , i64 0 , i64 %24 
 %26 = load i32 , i32 * %25 
 %27 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 4 x i8 ] @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) 
 %28 = icmp ne i32 %27 , 0 
 br label %29 
 29: 
 %30 = phi i1 [ true %14 ] , [ %28 %21 ] 
 %31 = zext i1 %30 to i32 
 br label %4 
 32: 
 %33 = load i32 , i32 * %2 
 ret i32 %33 
 } 
