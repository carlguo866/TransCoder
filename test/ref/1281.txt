define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i32 
 %3 = alloca i32 
 %4 = alloca i32 
 %5 = alloca double 
 %6 = alloca double 
 store i32 0 , i32 * %1 
 store i32 0 , i32 * %2 
 store double , double * 0.000000e+00 %5 
 store double , double * 0.000000e+00 %6 
 br label %7 
 7: 
 %8 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str:%d,%d~00" i64 0 i64 0 ) i32 * %4 i32 * %3 ) 
 %9 = load double , double * %5 
 %10 = load i32 , i32 * %2 
 %11 = sitofp i32 %10 to double 
 %12 = fmul double %11 , 1.000000e+00 
 %13 = fdiv double %12 , 1.800000e+02 
 %14 = call double @atan ( double 1.000000e+00 ) #3 
 %15 = fmul double %14 , 4.000000e+00 
 %16 = fmul double %13 , %15 
 %17 = call double @sin ( double %16 ) #3 
 %18 = load i32 , i32 * %4 
 %19 = sitofp i32 %18 to double 
 %20 = fmul double %17 , %19 
 %21 = fadd double %9 , %20 
 store double %21 , double * %5 
 %22 = load double , double * %6 
 %23 = load i32 , i32 * %2 
 %24 = sitofp i32 %23 to double 
 %25 = fmul double %24 , 1.000000e+00 
 %26 = fdiv double %25 , 1.800000e+02 
 %27 = call double @atan ( double 1.000000e+00 ) #3 
 %28 = fmul double %27 , 4.000000e+00 
 %29 = fmul double %26 , %28 
 %30 = call double @cos ( double %29 ) #3 
 %31 = load i32 , i32 * %4 
 %32 = sitofp i32 %31 to double 
 %33 = fmul double %30 , %32 
 %34 = fadd double %22 , %33 
 store double %34 , double * %6 
 %35 = load i32 , i32 * %2 
 %36 = load i32 , i32 * %3 
 %37 = add nsw i32 %35 , %36 
 store i32 %37 , i32 * %2 
 br label %38 
 38: 
 %39 = load i32 , i32 * %3 
 %40 = icmp ne i32 %39 , 0 
 br i1 %40 , label %44 , label %41 
 41: 
 %42 = load i32 , i32 * %4 
 %43 = icmp ne i32 %42 , 0 
 br label %44 
 44: 
 %45 = phi i1 [ true %38 ] , [ %43 %41 ] 
 br i1 %45 , label %7 , label %46 
 46: 
 %47 = load double , double * %5 
 %48 = fptosi double %47 to i32 
 %49 = load double , double * %6 
 %50 = fptosi double %49 to i32 
 %51 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 7 x i8 ] @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %48 i32 %50 ) 
 ret i32 0 
 } 
