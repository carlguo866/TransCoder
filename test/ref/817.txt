define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i64 
 %4 = alloca i64 
 %5 = alloca i32 
 store i32 0 , i32 * %1 
 store i64 0 , i64 * %2 
 br label %6 
 6: 
 %7 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 5 x i8 ] @".str:%lld~00" i64 0 i64 0 ) i64 * %3 ) 
 %8 = icmp eq i32 %7 , 1 
 br i1 %8 , label %9 , label %38 
 9: 
 store i32 1 , i32 * %5 
 br label %10 
 10: 
 %11 = load i32 , i32 * %5 
 %12 = icmp slt i32 %11 , 600 
 br i1 %12 , label %13 , label %35 
 13: 
 %14 = load i32 , i32 * %5 
 %15 = sext i32 %14 to i64 
 %16 = load i64 , i64 * %3 
 %17 = mul nsw i64 %15 , %16 
 store i64 %17 , i64 * %4 
 %18 = load i64 , i64 * %4 
 %19 = load i64 , i64 * %3 
 %20 = sub nsw i64 600 , %19 
 %21 = icmp sgt i64 %18 , %20 
 br i1 %21 , label %22 , label %23 
 22: 
 br label %35 
 23: 
 %24 = load i64 , i64 * %4 
 %25 = load i64 , i64 * %4 
 %26 = mul nsw i64 %25 , %24 
 store i64 %26 , i64 * %4 
 %27 = load i64 , i64 * %4 
 %28 = load i64 , i64 * %3 
 %29 = mul nsw i64 %27 , %28 
 %30 = load i64 , i64 * %2 
 %31 = add nsw i64 %30 , %29 
 store i64 %31 , i64 * %2 
 br label %32 
 32: 
 %33 = load i32 , i32 * %5 
 %34 = add nsw i32 %33 , 1 
 store i32 %34 , i32 * %5 
 br label %10 
 35: 
 %36 = load i64 , i64 * %2 
 %37 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %36 ) 
 store i64 0 , i64 * %2 
 br label %6 
 38: 
 ret i32 0 
 } 
