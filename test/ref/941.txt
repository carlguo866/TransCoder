define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i16 
 %3 = alloca i16 
 %4 = alloca i64 
 store i32 0 , i32 * %1 
 br label %5 
 5: 
 %6 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i16 * %3 ) 
 %7 = icmp ne i32 %6 , -1 
 br i1 %7 , label %8 , label %40 
 8: 
 store i64 0 , i64 * %4 
 store i16 1 , i16 * %2 
 br label %9 
 9: 
 %10 = load i16 , i16 * %2 
 %11 = zext i16 %10 to i32 
 %12 = load i16 , i16 * %3 
 %13 = zext i16 %12 to i32 
 %14 = sdiv i32 600 , %13 
 %15 = icmp slt i32 %11 , %14 
 br i1 %15 , label %16 , label %37 
 16: 
 %17 = load i16 , i16 * %2 
 %18 = zext i16 %17 to i32 
 %19 = load i16 , i16 * %3 
 %20 = zext i16 %19 to i32 
 %21 = mul nsw i32 %18 , %20 
 %22 = load i16 , i16 * %2 
 %23 = zext i16 %22 to i32 
 %24 = load i16 , i16 * %3 
 %25 = zext i16 %24 to i32 
 %26 = mul nsw i32 %23 , %25 
 %27 = mul nsw i32 %21 , %26 
 %28 = load i16 , i16 * %3 
 %29 = zext i16 %28 to i32 
 %30 = mul nsw i32 %27 , %29 
 %31 = sext i32 %30 to i64 
 %32 = load i64 , i64 * %4 
 %33 = add nsw i64 %32 , %31 
 store i64 %33 , i64 * %4 
 br label %34 
 34: 
 %35 = load i16 , i16 * %2 
 %36 = add i16 %35 , 1 
 store i16 %36 , i16 * %2 
 br label %9 
 37: 
 %38 = load i64 , i64 * %4 
 %39 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %38 ) 
 br label %5 
 40: 
 ret i32 0 
 } 
