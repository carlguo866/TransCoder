define dso_local i32 @main ( i32 %0 ) #0 { 
 %2 = alloca i32 
 %3 = alloca i32 
 store i32 0 , i32 * %2 
 store i32 %0 , i32 * %3 
 br label %4 
 4: 
 %5 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 7 x i8 ] @".str:%[^~0A] ~00" i64 0 i64 0 ) i8 * getelementptr inbounds ( [ 99 x i8 ] @s i64 0 i64 0 ) ) 
 %6 = xor i32 %5 , -1 
 %7 = icmp ne i32 %6 , 0 
 br i1 %7 , label %8 , label %38 
 8: 
 br label %9 
 9: 
 %10 = call i8 * @strstr ( i8 * getelementptr inbounds ( [ 99 x i8 ] @s i64 0 i64 0 ) i8 * getelementptr inbounds ( [ 3 x i8 ] @".str.1:th~00" i64 0 i64 0 ) ) 
 %11 = icmp ne i8 * %10 , null 
 %12 = xor i1 %11 , true 
 br i1 %12 , label %13 , label %35 
 13: 
 store i8 * getelementptr inbounds ( [ 99 x i8 ] , [ 99 x i8 ] * @s i64 0 i64 0 ) , i8 * * @p 
 br label %14 
 14: 
 %15 = load i8 * , i8 * * @p 
 %16 = load i8 , i8 * %15 
 %17 = sext i8 %16 to i32 
 store i32 %17 , i32 * %3 
 %18 = icmp ne i32 %17 , 0 
 br i1 %18 , label %19 , label %34 
 19: 
 %20 = load i32 , i32 * %3 
 %21 = icmp sgt i32 %20 , 96 
 br i1 %21 , label %22 , label %27 
 22: 
 %23 = load i32 , i32 * %3 
 %24 = srem i32 %23 , 122 
 %25 = srem i32 %24 , 96 
 %26 = add nsw i32 %25 , 97 
 br label %29 
 27: 
 %28 = load i32 , i32 * %3 
 br label %29 
 29: 
 %30 = phi i32 [ %26 %22 ] , [ %28 %27 ] 
 %31 = trunc i32 %30 to i8 
 %32 = load i8 * , i8 * * @p 
 %33 = getelementptr inbounds i8 , i8 * %32 , i32 1 
 store i8 * %33 , i8 * * @p 
 store i8 %31 , i8 * %32 
 br label %14 
 34: 
 br label %9 
 35: 
 br label %36 
 36: 
 %37 = call i32 ( i8 * ... ) bitcast ( i32 ( ... ) * @puts to i32 ( i8 * ... ) * ) ( i8 * getelementptr inbounds ( [ 99 x i8 ] @s i64 0 i64 0 ) ) 
 br label %4 
 38: 
 %39 = load i32 , i32 * %2 
 ret i32 %39 
 } 
