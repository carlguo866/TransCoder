define dso_local i32 @isprime ( i64 %0 ) #0 { 
 %2 = alloca i32 
 %3 = alloca i64 
 %4 = alloca i64 
 %5 = alloca i64 
 store i64 %0 , i64 * %3 
 %6 = load i64 , i64 * %3 
 %7 = sub i64 %6 , 1 
 store i64 %7 , i64 * %5 
 %8 = load i64 , i64 * %3 
 %9 = icmp ult i64 %8 , 2 
 br i1 %9 , label %10 , label %11 
 10: 
 store i32 0 , i32 * %2 
 br label %40 
 11: 
 %12 = load i64 , i64 * %3 
 %13 = icmp eq i64 %12 , 2 
 br i1 %13 , label %14 , label %15 
 14: 
 store i32 1 , i32 * %2 
 br label %40 
 15: 
 %16 = load i64 , i64 * %3 
 %17 = urem i64 %16 , 2 
 %18 = icmp ne i64 %17 , 0 
 br i1 %18 , label %19 , label %37 
 19: 
 store i64 3 , i64 * %4 
 br label %20 
 20: 
 %21 = load i64 , i64 * %4 
 %22 = load i64 , i64 * %4 
 %23 = mul i64 %21 , %22 
 %24 = load i64 , i64 * %3 
 %25 = icmp ule i64 %23 , %24 
 br i1 %25 , label %26 , label %36 
 26: 
 %27 = load i64 , i64 * %3 
 %28 = load i64 , i64 * %4 
 %29 = urem i64 %27 , %28 
 %30 = icmp eq i64 %29 , 0 
 br i1 %30 , label %31 , label %32 
 31: 
 store i32 0 , i32 * %2 
 br label %40 
 32: 
 br label %33 
 33: 
 %34 = load i64 , i64 * %4 
 %35 = add i64 %34 , 2 
 store i64 %35 , i64 * %4 
 br label %20 
 36: 
 store i32 1 , i32 * %2 
 br label %40 
 37: 
 br label %38 
 38: 
 br label %39 
 39: 
 store i32 0 , i32 * %2 
 br label %40 
 40: 
 %41 = load i32 , i32 * %2 
 ret i32 %41 
 } 
