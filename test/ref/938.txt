define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i64 
 %4 = alloca i64 
 store i32 0 , i32 * %1 
 br label %5 
 5: 
 %6 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 4 x i8 ] @".str:%ld~00" i64 0 i64 0 ) i64 * %2 ) 
 %7 = icmp eq i32 %6 , 1 
 br i1 %7 , label %8 , label %40 
 8: 
 store i64 0 , i64 * %4 
 store i64 1 , i64 * %3 
 br label %9 
 9: 
 %10 = load i64 , i64 * %3 
 %11 = icmp slt i64 %10 , 600 
 br i1 %11 , label %12 , label %37 
 12: 
 %13 = load i64 , i64 * %3 
 %14 = load i64 , i64 * %2 
 %15 = mul nsw i64 %13 , %14 
 %16 = load i64 , i64 * %2 
 %17 = mul nsw i64 %15 , %16 
 %18 = load i64 , i64 * %2 
 %19 = mul nsw i64 %17 , %18 
 %20 = load i64 , i64 * %3 
 %21 = mul nsw i64 %19 , %20 
 %22 = load i64 , i64 * %4 
 %23 = add nsw i64 %22 , %21 
 store i64 %23 , i64 * %4 
 %24 = load i64 , i64 * %4 
 %25 = srem i64 %24 , 72000000 
 store i64 %25 , i64 * %4 
 %26 = load i64 , i64 * %3 
 %27 = load i64 , i64 * %2 
 %28 = mul nsw i64 %26 , %27 
 %29 = load i64 , i64 * %2 
 %30 = sub nsw i64 600 , %29 
 %31 = icmp eq i64 %28 , %30 
 br i1 %31 , label %32 , label %33 
 32: 
 br label %37 
 33: 
 br label %34 
 34: 
 %35 = load i64 , i64 * %3 
 %36 = add nsw i64 %35 , 1 
 store i64 %36 , i64 * %3 
 br label %9 
 37: 
 %38 = load i64 , i64 * %4 
 %39 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 5 x i8 ] @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %38 ) 
 br label %5 
 40: 
 ret i32 0 
 } 
