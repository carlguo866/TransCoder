define dso_local i32 @judgeprime ( i64 %0 ) #0 { 
 %2 = alloca i64 
 %3 = alloca i32 
 %4 = alloca i32 
 store i64 %0 , i64 * %2 
 store i32 1 , i32 * %3 
 %5 = load i64 , i64 * %2 
 %6 = srem i64 %5 , 2 
 %7 = icmp eq i64 %6 , 0 
 br i1 %7 , label %8 , label %9 
 8: 
 store i32 0 , i32 * %3 
 br label %30 
 9: 
 store i32 3 , i32 * %4 
 br label %10 
 10: 
 %11 = load i32 , i32 * %4 
 %12 = sitofp i32 %11 to double 
 %13 = load i64 , i64 * %2 
 %14 = sitofp i64 %13 to double 
 %15 = call double @sqrt ( double %14 ) #3 
 %16 = fadd double %15 , 1.000000e+00 
 %17 = fcmp olt double %12 , %16 
 br i1 %17 , label %18 , label %29 
 18: 
 %19 = load i64 , i64 * %2 
 %20 = load i32 , i32 * %4 
 %21 = sext i32 %20 to i64 
 %22 = srem i64 %19 , %21 
 %23 = icmp eq i64 %22 , 0 
 br i1 %23 , label %24 , label %25 
 24: 
 store i32 0 , i32 * %3 
 br label %29 
 25: 
 br label %26 
 26: 
 %27 = load i32 , i32 * %4 
 %28 = add nsw i32 %27 , 2 
 store i32 %28 , i32 * %4 
 br label %10 
 29: 
 br label %30 
 30: 
 %31 = load i64 , i64 * %2 
 %32 = icmp eq i64 %31 , 0 
 br i1 %32 , label %36 , label %33 
 33: 
 %34 = load i64 , i64 * %2 
 %35 = icmp eq i64 %34 , 1 
 br i1 %35 , label %36 , label %37 
 36: 
 store i32 0 , i32 * %3 
 br label %42 
 37: 
 %38 = load i64 , i64 * %2 
 %39 = icmp eq i64 %38 , 2 
 br i1 %39 , label %40 , label %41 
 40: 
 store i32 1 , i32 * %3 
 br label %41 
 41: 
 br label %42 
 42: 
 %43 = load i32 , i32 * %3 
 ret i32 %43 
 } 
