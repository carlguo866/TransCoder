define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i32 
 %4 = alloca i32 
 %5 = alloca i32 
 store i32 0 , i32 * %1 
 br label %6 
 6: 
 %7 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %3 ) 
 %8 = icmp ne i32 %7 , -1 
 br i1 %8 , label %9 , label %35 
 9: 
 store i64 0 , i64 * %2 
 %10 = load i32 , i32 * %3 
 %11 = sdiv i32 600 , %10 
 store i32 %11 , i32 * %4 
 store i32 0 , i32 * %5 
 br label %12 
 12: 
 %13 = load i32 , i32 * %5 
 %14 = load i32 , i32 * %4 
 %15 = icmp slt i32 %13 , %14 
 br i1 %15 , label %16 , label %32 
 16: 
 %17 = load i32 , i32 * %3 
 %18 = load i32 , i32 * %3 
 %19 = mul nsw i32 %17 , %18 
 %20 = load i32 , i32 * %3 
 %21 = mul nsw i32 %19 , %20 
 %22 = load i32 , i32 * %5 
 %23 = mul nsw i32 %21 , %22 
 %24 = load i32 , i32 * %5 
 %25 = mul nsw i32 %23 , %24 
 %26 = sext i32 %25 to i64 
 %27 = load i64 , i64 * %2 
 %28 = add nsw i64 %27 , %26 
 store i64 %28 , i64 * %2 
 br label %29 
 29: 
 %30 = load i32 , i32 * %5 
 %31 = add nsw i32 %30 , 1 
 store i32 %31 , i32 * %5 
 br label %12 
 32: 
 %33 = load i64 , i64 * %2 
 %34 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 5 x i8 ] @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %33 ) 
 br label %6 
 35: 
 ret i32 0 
 } 
