define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i32 
 %4 = alloca i32 
 %5 = alloca i32 
 store i32 0 , i32 * %1 
 br label %6 
 6: 
 %7 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 5 x i8 ] @".str:%lld~00" i64 0 i64 0 ) i32 * %3 ) 
 %8 = icmp ne i32 %7 , -1 
 br i1 %8 , label %9 , label %41 
 9: 
 %10 = load i32 , i32 * %3 
 %11 = sdiv i32 600 , %10 
 store i32 %11 , i32 * %4 
 store i64 0 , i64 * %2 
 store i32 1 , i32 * %5 
 br label %12 
 12: 
 %13 = load i32 , i32 * %5 
 %14 = load i32 , i32 * %4 
 %15 = icmp sle i32 %13 , %14 
 br i1 %15 , label %16 , label %38 
 16: 
 %17 = load i64 , i64 * %2 
 %18 = load i32 , i32 * %3 
 %19 = sext i32 %18 to i64 
 %20 = load i32 , i32 * %5 
 %21 = sext i32 %20 to i64 
 %22 = mul nsw i64 %19 , %21 
 %23 = sub nsw i64 600 , %22 
 %24 = load i32 , i32 * %3 
 %25 = sext i32 %24 to i64 
 %26 = load i32 , i32 * %5 
 %27 = sext i32 %26 to i64 
 %28 = mul nsw i64 %25 , %27 
 %29 = sub nsw i64 600 , %28 
 %30 = mul nsw i64 %23 , %29 
 %31 = load i32 , i32 * %3 
 %32 = sext i32 %31 to i64 
 %33 = mul nsw i64 %30 , %32 
 %34 = add nsw i64 %17 , %33 
 store i64 %34 , i64 * %2 
 br label %35 
 35: 
 %36 = load i32 , i32 * %5 
 %37 = add nsw i32 %36 , 1 
 store i32 %37 , i32 * %5 
 br label %12 
 38: 
 %39 = load i64 , i64 * %2 
 %40 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %39 ) 
 br label %6 
 41: 
 ret i32 0 
 } 
