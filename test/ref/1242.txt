define dso_local i32 @main ( i32 %0 ) #0 { 
 %2 = alloca i32 
 %3 = alloca i32 
 store i32 0 , i32 * %2 
 store i32 %0 , i32 * %3 
 br label %4 
 4: 
 %5 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str:%d,%d~00" i64 0 i64 0 ) i32 * %3 i32 * @d ) 
 %6 = xor i32 %5 , -1 
 %7 = icmp ne i32 %6 , 0 
 br i1 %7 , label %8 , label %35 
 8: 
 %9 = load i32 , i32 * %3 
 %10 = sitofp i32 %9 to double 
 %11 = load i32 , i32 * @t 
 %12 = sitofp i32 %11 to double 
 %13 = fdiv double %12 , 5.730000e+01 
 %14 = fptrunc double %13 to float 
 store float %14 , float * @z 
 %15 = fpext float %14 to double 
 %16 = call double @cos ( double %15 ) #3 
 %17 = fmul double %10 , %16 
 %18 = load float , float * @y 
 %19 = fpext float %18 to double 
 %20 = fadd double %19 , %17 
 %21 = fptrunc double %20 to float 
 store float %21 , float * @y 
 %22 = load i32 , i32 * %3 
 %23 = sitofp i32 %22 to double 
 %24 = load float , float * @z 
 %25 = fpext float %24 to double 
 %26 = call double @sin ( double %25 ) #3 
 %27 = fmul double %23 , %26 
 %28 = load float , float * @x 
 %29 = fpext float %28 to double 
 %30 = fsub double %29 , %27 
 %31 = fptrunc double %30 to float 
 store float %31 , float * @x 
 %32 = load i32 , i32 * @d 
 %33 = load i32 , i32 * @t 
 %34 = sub nsw i32 %33 , %32 
 store i32 %34 , i32 * @t 
 br label %44 
 35: 
 %36 = load float , float * @x 
 %37 = fptosi float %36 to i32 
 store i32 %37 , i32 * @t 
 %38 = load float , float * @y 
 %39 = fptosi float %38 to i32 
 store i32 %39 , i32 * @d 
 %40 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 7 x i8 ] @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) 
 %41 = icmp ne i32 %40 , 0 
 %42 = xor i1 %41 , true 
 %43 = zext i1 %42 to i32 
 br label %44 
 44: 
 %45 = phi i32 [ %34 %8 ] , [ %43 %35 ] 
 %46 = icmp ne i32 %45 , 0 
 br i1 %46 , label %47 , label %48 
 47: 
 br label %4 
 48: 
 %49 = load i32 , i32 * %2 
 ret i32 %49 
 } 
