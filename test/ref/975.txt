define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i64 
 %3 = alloca i64 
 %4 = alloca i64 
 %5 = alloca i64 
 %6 = alloca i64 
 %7 = alloca i64 
 %8 = alloca i64 
 store i32 0 , i32 * %1 
 store i64 1 , i64 * %4 
 br label %9 
 9: 
 %10 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 5 x i8 ] @".str:%lld~00" i64 0 i64 0 ) i64 * %2 ) 
 %11 = icmp ne i32 %10 , -1 
 br i1 %11 , label %12 , label %40 
 12: 
 store i64 0 , i64 * %7 
 store i64 0 , i64 * %4 
 store i64 1 , i64 * %3 
 br label %13 
 13: 
 %14 = load i64 , i64 * %3 
 %15 = icmp sle i64 %14 , 600 
 br i1 %15 , label %16 , label %37 
 16: 
 store i64 0 , i64 * %6 
 store i64 0 , i64 * %5 
 store i64 0 , i64 * %8 
 %17 = load i64 , i64 * %4 
 %18 = load i64 , i64 * %2 
 %19 = mul nsw i64 %17 , %18 
 %20 = load i64 , i64 * %4 
 %21 = mul nsw i64 %19 , %20 
 %22 = load i64 , i64 * %2 
 %23 = mul nsw i64 %21 , %22 
 store i64 %23 , i64 * %6 
 %24 = load i64 , i64 * %2 
 store i64 %24 , i64 * %5 
 %25 = load i64 , i64 * %5 
 %26 = load i64 , i64 * %6 
 %27 = mul nsw i64 %25 , %26 
 store i64 %27 , i64 * %8 
 %28 = load i64 , i64 * %8 
 %29 = load i64 , i64 * %7 
 %30 = add nsw i64 %29 , %28 
 store i64 %30 , i64 * %7 
 %31 = load i64 , i64 * %4 
 %32 = add nsw i64 %31 , 1 
 store i64 %32 , i64 * %4 
 br label %33 
 33: 
 %34 = load i64 , i64 * %2 
 %35 = load i64 , i64 * %3 
 %36 = add nsw i64 %35 , %34 
 store i64 %36 , i64 * %3 
 br label %13 
 37: 
 %38 = load i64 , i64 * %7 
 %39 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %38 ) 
 br label %9 
 40: 
 ret i32 0 
 } 
