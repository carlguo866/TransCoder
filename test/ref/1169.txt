define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 store i32 0 , i32 * %1 
 br label %2 
 2: 
 %3 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 7 x i8 ] @".str:%[^~0A] ~00" i64 0 i64 0 ) i32 * getelementptr inbounds ( [ 1 x i32 ] @c i64 0 i64 0 ) ) 
 %4 = xor i32 %3 , -1 
 %5 = icmp ne i32 %4 , 0 
 br i1 %5 , label %6 , label %40 
 6: 
 br label %7 
 7: 
 %8 = load i8 * , i8 * * @p 
 %9 = load i8 , i8 * %8 
 %10 = sext i8 %9 to i32 
 %11 = icmp sgt i32 %10 , 96 
 br i1 %11 , label %12 , label %19 
 12: 
 %13 = load i8 * , i8 * * @p 
 %14 = load i8 , i8 * %13 
 %15 = sext i8 %14 to i32 
 %16 = srem i32 %15 , 96 
 %17 = srem i32 %16 , 26 
 %18 = add nsw i32 %17 , 97 
 br label %23 
 19: 
 %20 = load i8 * , i8 * * @p 
 %21 = load i8 , i8 * %20 
 %22 = sext i8 %21 to i32 
 br label %23 
 23: 
 %24 = phi i32 [ %18 %12 ] , [ %22 %19 ] 
 %25 = trunc i32 %24 to i8 
 %26 = load i8 * , i8 * * @p 
 %27 = getelementptr inbounds i8 , i8 * %26 , i32 1 
 store i8 * %27 , i8 * * @p 
 store i8 %25 , i8 * %26 
 %28 = sext i8 %25 to i32 
 %29 = icmp ne i32 %28 , 0 
 br i1 %29 , label %34 , label %30 
 30: 
 store i8 * bitcast ( [ 1 x i32 ] * @c to i8 * ) , i8 * * @p 
 %31 = call i8 * @strstr ( i8 * bitcast ( [ 1 x i32 ] * @c to i8 * ) i8 * getelementptr inbounds ( [ 3 x i8 ] @".str.1:th~00" i64 0 i64 0 ) ) 
 %32 = icmp ne i8 * %31 , null 
 %33 = xor i1 %32 , true 
 br label %34 
 34: 
 %35 = phi i1 [ true %23 ] , [ %33 %30 ] 
 br i1 %35 , label %36 , label %37 
 36: 
 br label %7 
 37: 
 br label %38 
 38: 
 %39 = call i32 ( i32 * ... ) bitcast ( i32 ( ... ) * @puts to i32 ( i32 * ... ) * ) ( i32 * getelementptr inbounds ( [ 1 x i32 ] @c i64 0 i64 0 ) ) 
 br label %2 
 40: 
 %41 = load i32 , i32 * %1 
 ret i32 %41 
 } 
