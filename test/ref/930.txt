define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 store i32 0 , i32 * %1 
 %2 = load i32 , i32 * @p 
 %3 = sext i32 %2 to i64 
 %4 = getelementptr inbounds i32 , i32 * getelementptr inbounds ( [ 1 x i32 ] , [ 1 x i32 ] * @s i64 0 i64 0 ) , i64 %3 
 %5 = call i32 ( i8 * ... ) @scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %4 ) 
 %6 = xor i32 %5 , -1 
 %7 = icmp ne i32 %6 , 0 
 br i1 %7 , label %8 , label %27 
 8: 
 %9 = load i32 , i32 * @p 
 %10 = add nsw i32 %9 , 1 
 store i32 %10 , i32 * @p 
 %11 = sext i32 %9 to i64 
 %12 = getelementptr inbounds [ 0 x i32 ] , [ 0 x i32 ] * bitcast ( [ 1 x i32 ] * @s to [ 0 x i32 ] * ) , i64 0 , i64 %11 
 %13 = load i32 , i32 * %12 
 %14 = icmp ne i32 %13 , 0 
 br i1 %14 , label %15 , label %16 
 15: 
 br label %23 
 16: 
 %17 = load i32 , i32 * @p 
 %18 = sub nsw i32 %17 , 2 
 store i32 %18 , i32 * @p 
 %19 = sext i32 %18 to i64 
 %20 = getelementptr inbounds [ 0 x i32 ] , [ 0 x i32 ] * bitcast ( [ 1 x i32 ] * @s to [ 0 x i32 ] * ) , i64 0 , i64 %19 
 %21 = load i32 , i32 * %20 
 %22 = call i32 ( i8 * ... ) @printf ( i8 * getelementptr inbounds ( [ 4 x i8 ] @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) 
 br label %23 
 23: 
 %24 = phi i32 [ %13 %15 ] , [ %22 %16 ] 
 %25 = call i32 ( i32 ... ) bitcast ( i32 ( ) * @main to i32 ( i32 ... ) * ) ( i32 %24 ) 
 %26 = icmp ne i32 %25 , 0 
 br label %27 
 27: 
 %28 = phi i1 [ false %0 ] , [ %26 %23 ] 
 %29 = zext i1 %28 to i32 
 %30 = load i32 , i32 * %1 
 ret i32 %30 
 } 
