define dso_local i32 @main ( ) #0 { 
 %1 = alloca i32 
 %2 = alloca i32 
 %3 = alloca i32 
 %4 = alloca i32 
 %5 = alloca i8 * 
 %6 = alloca i64 
 %7 = alloca i32 
 %8 = alloca i32 
 store i32 0 , i32 * %1 
 store i32 0 , i32 * %2 
 store i32 0 , i32 * %3 
 store i32 0 , i32 * %4 
 %9 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %3 ) 
 %10 = load i32 , i32 * %3 
 %11 = zext i32 %10 to i64 
 %12 = call i8 * @llvm.stacksave ( ) 
 store i8 * %12 , i8 * * %5 
 %13 = alloca i32 , i64 %11 
 store i64 %11 , i64 * %6 
 %14 = load i32 , i32 * %3 
 call void @func_arrayInit ( i32 * %13 i32 %14 ) 
 %15 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 3 x i8 ] @".str:%d~00" i64 0 i64 0 ) i32 * %4 ) 
 store i32 0 , i32 * %2 
 br label %16 
 16: 
 %17 = load i32 , i32 * %2 
 %18 = load i32 , i32 * %4 
 %19 = icmp slt i32 %17 , %18 
 br i1 %19 , label %20 , label %27 
 20: 
 store i32 0 , i32 * %7 
 store i32 0 , i32 * %8 
 %21 = call i32 ( i8 * ... ) @__isoc99_scanf ( i8 * getelementptr inbounds ( [ 6 x i8 ] @".str.1:%d,%d~00" i64 0 i64 0 ) i32 * %7 i32 * %8 ) 
 %22 = load i32 , i32 * %7 
 %23 = load i32 , i32 * %8 
 call void @func_swap ( i32 * %13 i32 %22 i32 %23 ) 
 br label %24 
 24: 
 %25 = load i32 , i32 * %2 
 %26 = add nsw i32 %25 , 1 
 store i32 %26 , i32 * %2 
 br label %16 
 27: 
 %28 = load i32 , i32 * %3 
 call void @func_output ( i32 * %13 i32 %28 ) 
 store i32 0 , i32 * %1 
 %29 = load i8 * , i8 * * %5 
 call void @llvm.stackrestore ( i8 * %29 ) 
 %30 = load i32 , i32 * %1 
 ret i32 %30 
 } 
