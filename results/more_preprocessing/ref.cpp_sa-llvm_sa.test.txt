define i64 @func_1 ( ) { NEW_LINE %1 = load i64 @g_2 NEW_LINE ret i64 %1 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i32 @g_2 NEW_LINE ret i32 %1 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i16 @g_2 NEW_LINE %2 = sext i16 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i8 @g_2 NEW_LINE %2 = sext i8 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i64 @g_2 NEW_LINE %2 = trunc i64 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = load i32 @g_2 NEW_LINE %2 = zext i32 %1 to i64 NEW_LINE ret i64 %2 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i8 @g_2 NEW_LINE %2 = zext i8 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = load i8 @g_2 NEW_LINE %2 = zext i8 %1 to i16 NEW_LINE ret i16 %2 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = load i32 @g_2 NEW_LINE %2 = trunc i32 %1 to i16 NEW_LINE ret i16 %2 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = load i32 @g_2 NEW_LINE %2 = trunc i32 %1 to i8 NEW_LINE ret i8 %2 NEW_LINE }
define * i64 @func_66 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE ret * i64 @g_74 NEW_LINE }
define i32 @func_2 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @g_4 NEW_LINE ret i32 %3 NEW_LINE }
define * i32 @func_68 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE ret * i32 @g_18 NEW_LINE }
define zeroext i8 @func_12 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE %3 = load i8 %2 NEW_LINE ret i8 %3 NEW_LINE }
define signext i16 @func_52 ( i16 zeroext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 -1 %1 NEW_LINE %2 = load i32 %1 NEW_LINE ret i32 %2 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = load i32 %1 NEW_LINE ret i32 %2 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = load i32 %1 NEW_LINE ret i32 %2 NEW_LINE }
define signext i16 @func_48 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE store * i16 %0 %2 NEW_LINE %3 = load i16 @g_23 NEW_LINE ret i16 %3 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 622684660 %1 NEW_LINE ret i16 27124 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE store i8 -10 %1 NEW_LINE %2 = load i8 %1 NEW_LINE ret i8 %2 NEW_LINE }
define i32 @func_40 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE %3 = load i8 %2 NEW_LINE %4 = zext i8 %3 to i32 NEW_LINE ret i32 %4 NEW_LINE }
define i32 @func_34 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE %4 = trunc i64 %3 to i32 NEW_LINE ret i32 %4 NEW_LINE }
define signext i16 @func_16 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE %3 = load i8 %2 NEW_LINE %4 = zext i8 %3 to i16 NEW_LINE ret i16 %4 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 -1 %1 NEW_LINE %2 = load i16 %1 NEW_LINE %3 = zext i16 %2 to i32 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE store i8 1 %1 NEW_LINE %2 = load i8 %1 NEW_LINE %3 = zext i8 %2 to i32 NEW_LINE ret i32 %3 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE store i8 73 %1 NEW_LINE %2 = load i8 %1 NEW_LINE %3 = zext i8 %2 to i16 NEW_LINE ret i16 %3 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 -569651828 %1 NEW_LINE %2 = load i32 %1 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE ret i64 %3 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 -8 %1 NEW_LINE %2 = load i16 %1 NEW_LINE %3 = sext i16 %2 to i64 NEW_LINE ret i64 %3 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i64 getelementptr inbounds ( ARR 3 1 x i64 @g_2 , i64 0 , i64 0 ) NEW_LINE %2 = trunc i64 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define * i32 @func_27 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE ret * i32 @g_64 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 541994421 %1 NEW_LINE %2 = load i32 %1 NEW_LINE %3 = trunc i32 %2 to i8 NEW_LINE ret i8 %3 NEW_LINE }
define * i32 @func_69 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE ret * i32 @g_57 NEW_LINE }
define * i8 @func_41 ( * * i16 %0 ) { NEW_LINE %2 = alloca * * i16 NEW_LINE store * * i16 %0 %2 NEW_LINE %3 = load * i8 @g_45 NEW_LINE ret * i8 %3 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE store i64 -1 %1 NEW_LINE %2 = load i64 %1 NEW_LINE %3 = trunc i64 %2 to i8 NEW_LINE ret i8 %3 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 -1 %1 NEW_LINE %2 = load i16 %1 NEW_LINE %3 = trunc i16 %2 to i8 NEW_LINE ret i8 %3 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = load i8 getelementptr inbounds ( ARR 3 2 x i8 @g_2 , i64 0 , i64 1 ) NEW_LINE %2 = zext i8 %1 to i16 NEW_LINE ret i16 %2 NEW_LINE }
define zeroext i16 @func_22 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i16 NEW_LINE store * i32 %0 %2 NEW_LINE store i16 -1 %3 NEW_LINE ret i16 -1 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 -208926585 %1 NEW_LINE %2 = load i32 %1 NEW_LINE %3 = trunc i32 %2 to i16 NEW_LINE ret i16 %3 NEW_LINE }
define zeroext i8 @func_12 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE %3 = load * i8 @g_112 NEW_LINE %4 = load i8 %3 NEW_LINE ret i8 %4 NEW_LINE }
define i64 @func_44 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE %3 = load * i64 @g_479 NEW_LINE %4 = load volatile i64 %3 NEW_LINE ret i64 %4 NEW_LINE }
define signext i8 @func_43 ( * * i32 %0 ) { NEW_LINE %2 = alloca * * i32 NEW_LINE store * * i32 %0 %2 NEW_LINE %3 = load i16 @g_35 NEW_LINE %4 = trunc i16 %3 to i8 NEW_LINE ret i8 %4 NEW_LINE }
define i32 @func_75 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE ret i32 %5 NEW_LINE }
define i32 @func_33 ( i32 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i8 NEW_LINE store i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE ret i32 %5 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE store i8 -1 %1 NEW_LINE %2 = load i8 %1 NEW_LINE %3 = add i8 %2 , -1 NEW_LINE store i8 %3 %1 NEW_LINE ret i64 0 NEW_LINE }
define * i32 @func_57 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * * i32 %2 @g_59 NEW_LINE %3 = load * i32 %2 NEW_LINE ret * i32 %3 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE store i64 -5736321741561452966 %1 NEW_LINE %2 = load i64 %1 NEW_LINE %3 = trunc i64 %2 to i8 NEW_LINE ret i8 %3 NEW_LINE }
define i32 @func_46 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %5 = load i64 %4 NEW_LINE %6 = trunc i64 %5 to i32 NEW_LINE ret i32 %6 NEW_LINE }
define i64 @func_16 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = zext i32 %5 to i64 NEW_LINE ret i64 %6 NEW_LINE }
define * i16 @func_58 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i16 NEW_LINE store i32 %0 %2 NEW_LINE store * i16 @g_37 %3 NEW_LINE %4 = load * i16 %3 NEW_LINE ret * i16 %4 NEW_LINE }
define * i32 @func_33 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * i32 NEW_LINE store i64 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE %4 = load * i32 %3 NEW_LINE ret * i32 %4 NEW_LINE }
define i32 @func_49 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE store * i16 %0 %2 NEW_LINE %3 = load volatile * * i32 @g_321 NEW_LINE %4 = load * i32 %3 NEW_LINE %5 = load i32 %4 NEW_LINE ret i32 %5 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i32 getelementptr inbounds ( ARR 3 2 x ARR 3 2 x ARR 3 7 x i32 @g_2 , i64 0 , i64 1 , i64 1 , i64 4 ) NEW_LINE ret i32 %1 NEW_LINE }
define zeroext i8 @func_84 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 %0 %2 NEW_LINE store i64 -1 %3 NEW_LINE store * i32 @g_46 @g_86 NEW_LINE ret i8 -1 NEW_LINE }
define * i32 @func_72 ( * i64 %0 ) { NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca * i32 NEW_LINE store * i64 %0 %2 NEW_LINE store * i32 @g_6 %3 NEW_LINE %4 = load * i32 %3 NEW_LINE ret * i32 %4 NEW_LINE }
define signext i16 @func_33 ( i32 %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i16 NEW_LINE store i32 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = trunc i32 %5 to i16 NEW_LINE ret i16 %6 NEW_LINE }
define * i32 @func_68 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 @g_3 %3 NEW_LINE %4 = load * i32 %3 NEW_LINE ret * i32 %4 NEW_LINE }
define signext i16 @func_29 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE %3 = alloca i32 NEW_LINE store * i16 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = trunc i32 %4 to i16 NEW_LINE ret i16 %5 NEW_LINE }
define * i32 @func_2 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE ret * i32 %5 NEW_LINE }
define signext i8 @func_24 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE %3 = load i32 getelementptr inbounds ( ARR 3 4 x i32 @g_5 , i64 0 , i64 0 ) NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE ret i8 %4 NEW_LINE }
define zeroext i8 @func_31 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = trunc i32 %5 to i8 NEW_LINE ret i8 %6 NEW_LINE }
define * i64 @func_57 ( * i64 %0 ) { NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca * i64 NEW_LINE store * i64 %0 %2 NEW_LINE store * i64 @g_32 %3 NEW_LINE %4 = load * i64 %3 NEW_LINE ret * i64 %4 NEW_LINE }
define i32 @func_39 ( i16 signext %0 , * i16 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * i16 NEW_LINE store i16 %0 %3 NEW_LINE store * i16 %1 %4 NEW_LINE %5 = load volatile i16 @g_363 NEW_LINE %6 = sext i16 %5 to i32 NEW_LINE ret i32 %6 NEW_LINE }
define * i32 @func_18 ( i32 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i8 NEW_LINE store i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %5 = load volatile * * i32 @g_275 NEW_LINE %6 = load * i32 %5 NEW_LINE ret * i32 %6 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = load i16 getelementptr inbounds ( ARR 3 6 x ARR 3 10 x ARR 3 2 x i16 @g_2 , i64 0 , i64 0 , i64 5 , i64 0 ) NEW_LINE %2 = zext i16 %1 to i32 NEW_LINE ret i32 %2 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE store * i32 @g_3 %1 NEW_LINE %2 = load * i32 %1 NEW_LINE store * i32 %2 %1 NEW_LINE %3 = load i32 @g_3 NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE ret i64 %4 NEW_LINE }
define i64 @func_7 ( i64 %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load i64 %4 NEW_LINE ret i64 %7 NEW_LINE }
define * i32 @func_69 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE %3 = load volatile * * * i32 @g_71 NEW_LINE store * * i32 %2 %3 NEW_LINE %4 = load * i32 %2 NEW_LINE ret * i32 %4 NEW_LINE }
define zeroext i8 @func_23 ( * i8 %0 ) { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 786880976 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = trunc i32 %4 to i8 NEW_LINE ret i8 %5 NEW_LINE }
define zeroext i16 @func_4 ( i16 signext %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load i16 %4 NEW_LINE ret i16 %7 NEW_LINE }
define * i8 @func_40 ( i32 %0 , * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE store i32 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE ret * i8 getelementptr inbounds ( ARR 3 1 x i8 @g_431 , i64 0 , i64 0 ) NEW_LINE }
define * i32 @func_58 ( i32 %0 , i32 %1 , * i16 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i16 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE ret * i32 @g_64 NEW_LINE }
define zeroext i8 @func_59 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i8 -31 %5 NEW_LINE %6 = load i8 %5 NEW_LINE ret i8 %6 NEW_LINE }
define zeroext i16 @func_6 ( i16 signext %0 , i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE store i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE %7 = load i16 %6 NEW_LINE ret i16 %7 NEW_LINE }
define zeroext i16 @func_105 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 -1 %5 NEW_LINE %6 = load i16 %5 NEW_LINE ret i16 %6 NEW_LINE }
define signext i16 @func_26 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 getelementptr inbounds ( ARR 3 7 x ARR 3 6 x i32 @g_4 , i64 0 , i64 3 , i64 5 ) NEW_LINE %4 = trunc i32 %3 to i16 NEW_LINE ret i16 %4 NEW_LINE }
define * i32 @func_31 ( i32 %0 , * * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * * i32 %1 %4 NEW_LINE %5 = load volatile * * i32 @g_6 NEW_LINE %6 = load * i32 %5 NEW_LINE ret * i32 %6 NEW_LINE }
define i64 @func_10 ( i64 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i16 NEW_LINE store i64 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store i16 8 %5 NEW_LINE %6 = load i16 %5 NEW_LINE %7 = sext i16 %6 to i64 NEW_LINE ret i64 %7 NEW_LINE }
define void @func_1 ( * STRUCT 4 i16 i64 i32 i16 noalias sret %0 ) { NEW_LINE %2 = bitcast * STRUCT 4 i16 i64 i32 i16 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %2 , * i8 bitcast ( * STRUCT 4 i16 i64 i32 i16 @g_2 to * i8 ) , i64 24 , i1 false ) NEW_LINE ret void NEW_LINE }
define * i32 @func_17 ( i64 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE ret * i32 @g_30 NEW_LINE }
define * i32 @func_22 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_2 %5 NEW_LINE %6 = load * i32 %5 NEW_LINE ret * i32 %6 NEW_LINE }
define i64 @func_10 ( i64 %0 , i64 %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE store i64 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE %7 = load i8 %6 NEW_LINE %8 = sext i8 %7 to i64 NEW_LINE ret i64 %8 NEW_LINE }
define i32 @func_29 ( * i16 %0 , i32 %1 , * i16 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i16 NEW_LINE store * i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE %7 = load i32 %5 NEW_LINE ret i32 %7 NEW_LINE }
define * i32 @func_60 ( * * STRUCT 1 i32 %0 , * * STRUCT 1 i32 %1 ) { NEW_LINE %3 = alloca * * STRUCT 1 i32 NEW_LINE %4 = alloca * * STRUCT 1 i32 NEW_LINE store * * STRUCT 1 i32 %0 %3 NEW_LINE store * * STRUCT 1 i32 %1 %4 NEW_LINE ret * i32 @g_36 NEW_LINE }
define * i64 @func_75 ( i64 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i64 NEW_LINE store i64 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i64 @g_57 %5 NEW_LINE %6 = load * i64 %5 NEW_LINE ret * i64 %6 NEW_LINE }
define * i8 @func_28 ( * i8 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * i8 @g_20 %5 NEW_LINE %6 = load * i8 %5 NEW_LINE ret * i8 %6 NEW_LINE }
define zeroext i8 @func_19 ( i32 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i8 NEW_LINE store i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %5 = load i32 getelementptr inbounds ( ARR 3 4 x i32 @g_5 , i64 0 , i64 1 ) NEW_LINE %6 = trunc i32 %5 to i8 NEW_LINE ret i8 %6 NEW_LINE }
define signext i8 @func_23 ( i8 signext %0 , i64 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i16 NEW_LINE store i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i16 -1 %5 NEW_LINE %6 = load i16 %5 NEW_LINE %7 = trunc i16 %6 to i8 NEW_LINE ret i8 %7 NEW_LINE }
define zeroext i8 @func_31 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 6 x i32 @g_2 , i64 0 , i64 2 , i64 2 , i64 3 ) NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE ret i8 %4 NEW_LINE }
define void @func_1 ( * STRUCT 2 i64 ARR 3 24 x i8 noalias sret %0 ) { NEW_LINE %2 = bitcast * STRUCT 2 i64 ARR 3 24 x i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %2 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 31 x i8 @g_2 , i32 0 , i32 0 ) , i64 32 , i1 false ) NEW_LINE ret void NEW_LINE }
define signext i16 @func_18 ( i16 zeroext %0 , i64 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i32 982692691 %5 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = trunc i32 %6 to i16 NEW_LINE ret i16 %7 NEW_LINE }
define i64 @func_8 ( * i32 %0 , i8 signext %1 , i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE store * i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE %7 = load i8 %5 NEW_LINE %8 = sext i8 %7 to i64 NEW_LINE ret i64 %8 NEW_LINE }
define i64 @func_64 ( * i16 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca i32 NEW_LINE store * i16 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i64 getelementptr inbounds ( ARR 3 8 x ARR 3 6 x i64 @g_9 , i64 0 , i64 4 , i64 5 ) NEW_LINE ret i64 %5 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x i32 @g_3 , i64 0 , i64 1 ) %1 NEW_LINE %2 = load * i32 %1 NEW_LINE store * i32 %2 %1 NEW_LINE %3 = load i16 @g_4 NEW_LINE %4 = zext i16 %3 to i64 NEW_LINE ret i64 %4 NEW_LINE }
define i32 @func_62 ( i64 %0 , * i16 %1 , * i16 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE store i64 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE %7 = load i64 %4 NEW_LINE %8 = trunc i64 %7 to i32 NEW_LINE ret i32 %8 NEW_LINE }
define i32 @func_13 ( i32 %0 , i32 %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %9 = load i32 @g_20 NEW_LINE ret i32 %9 NEW_LINE }
define i64 @func_12 ( * i8 %0 , i32 %1 , * i8 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE %7 = load i32 @g_936 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE ret i64 %8 NEW_LINE }
define * i32 @func_40 ( * i8 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %7 = load * i32 %6 NEW_LINE ret * i32 %7 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i32 NEW_LINE %2 = bitcast * STRUCT 1 i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %2 , * i8 bitcast ( * STRUCT 1 i32 @g_2 to * i8 ) , i64 4 , i1 false ) NEW_LINE %3 = getelementptr inbounds STRUCT 1 i32 %1 , i32 0 , i32 0 NEW_LINE %4 = load i32 %3 NEW_LINE ret i32 %4 NEW_LINE }
define signext i16 @func_90 ( * i16 %0 , i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE store * i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE %7 = load * i16 @g_101 NEW_LINE %8 = load i16 %7 NEW_LINE ret i16 %8 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 31444 %1 NEW_LINE %2 = load i16 %1 NEW_LINE %3 = zext i16 %2 to i64 NEW_LINE %4 = xor i64 %3 , 1595784908 NEW_LINE %5 = trunc i64 %4 to i16 NEW_LINE store i16 %5 %1 NEW_LINE %6 = load i64 @g_3 NEW_LINE ret i64 %6 NEW_LINE }
define * i16 @func_20 ( i32 %0 , i8 signext %1 , * i16 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca i16 NEW_LINE store i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE ret * i16 @g_12 NEW_LINE }
define i32 @func_28 ( i32 %0 , i64 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i16 NEW_LINE store i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE %7 = load * * i32 @g_2045 NEW_LINE %8 = load * i32 %7 NEW_LINE %9 = load i32 %8 NEW_LINE ret i32 %9 NEW_LINE }
define * i32 @func_45 ( i16 zeroext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load volatile * * i32 @g_591 NEW_LINE store * i32 null %3 NEW_LINE %4 = load * i32 getelementptr inbounds ( ARR 3 4 x * i32 @g_1755 , i64 0 , i64 2 ) NEW_LINE ret * i32 %4 NEW_LINE }
define i32 @func_2 ( i8 zeroext %0 , i8 zeroext %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define * i32 @func_54 ( i8 signext %0 , * i32 %1 , i64 %2 , i64 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i8 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE ret * i32 @g_3 NEW_LINE }
define i32 @func_60 ( * i8 %0 ) { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load i16 getelementptr inbounds ( ARR 3 8 x ARR 3 5 x ARR 3 1 x i16 @g_75 , i64 0 , i64 0 , i64 2 , i64 0 ) NEW_LINE %4 = sext i16 %3 to i32 NEW_LINE ret i32 %4 NEW_LINE }
define signext i16 @func_86 ( * i16 %0 , i8 zeroext %1 , * i16 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i16 NEW_LINE store * i16 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE %7 = load i32 @g_31 NEW_LINE %8 = trunc i32 %7 to i16 NEW_LINE ret i16 %8 NEW_LINE }
define i32 @func_34 ( i16 zeroext %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 -491678358 %7 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define * STRUCT 1 i32 @func_18 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 1 i32 NEW_LINE store i32 %0 %2 NEW_LINE store * STRUCT 1 i32 bitcast ( * STRUCT 2 i8 ARR 3 3 x i8 @g_155 to * STRUCT 1 i32 ) %3 NEW_LINE %4 = load * STRUCT 1 i32 %3 NEW_LINE ret * STRUCT 1 i32 %4 NEW_LINE }
define signext i8 @func_37 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load volatile * i32 @g_43 NEW_LINE store i32 1217462847 %5 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = trunc i32 %6 to i8 NEW_LINE ret i8 %7 NEW_LINE }
define * i32 @func_10 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 @g_39 %3 NEW_LINE %4 = load * * i32 @g_64 NEW_LINE %5 = load volatile * i32 %4 NEW_LINE store volatile i32 1 %5 NEW_LINE %6 = load * i32 %3 NEW_LINE ret * i32 %6 NEW_LINE }
define zeroext i8 @func_17 ( * i8 %0 ) { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca * i32 NEW_LINE store * i8 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE %4 = load * i32 %3 NEW_LINE store * i32 %4 %3 NEW_LINE %5 = load * i8 %2 NEW_LINE %6 = load i8 %5 NEW_LINE ret i8 %6 NEW_LINE }
define i64 @func_6 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 -9 %5 NEW_LINE %6 = load i64 %5 NEW_LINE %7 = trunc i64 %6 to i32 NEW_LINE store i32 %7 @g_11 NEW_LINE %8 = load i64 %5 NEW_LINE ret i64 %8 NEW_LINE }
define * i32 @func_6 ( i16 zeroext %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load volatile * * i32 @g_502 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 0 %1 NEW_LINE %2 = load * i32 @g_4 NEW_LINE %3 = call * i32 @func_2 ( * i32 %2 ) NEW_LINE %4 = load volatile * * i32 @g_1777 NEW_LINE store * i32 %3 %4 NEW_LINE %5 = load i16 %1 NEW_LINE %6 = sext i16 %5 to i64 NEW_LINE ret i64 %6 NEW_LINE }
define i32 @func_6 ( * i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %7 = load * i32 @g_1972 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define zeroext i16 @func_51 ( * i8 %0 , i32 %1 , * i16 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i16 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE %7 = load * i16 %6 NEW_LINE %8 = load i16 %7 NEW_LINE ret i16 %8 NEW_LINE }
define signext i16 @func_32 ( i32 %0 , i32 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i64 1 %7 NEW_LINE %8 = load i64 %7 NEW_LINE %9 = trunc i64 %8 to i16 NEW_LINE ret i16 %9 NEW_LINE }
define i32 @func_6 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE %3 = load i8 %2 NEW_LINE %4 = sext i8 %3 to i32 NEW_LINE %5 = load * i32 @g_420 NEW_LINE store volatile i32 %4 %5 NEW_LINE %6 = load volatile * * i32 @g_941 NEW_LINE %7 = load * i32 %6 NEW_LINE %8 = load volatile i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define void @func_30 ( * %struct.S0 noalias sret %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE store i32 %1 %3 NEW_LINE %4 = bitcast * %struct.S0 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %4 , * i8 getelementptr inbounds ( STRUCT 17 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_1345 , i32 0 , i32 0 ) , i64 17 , i1 false ) NEW_LINE ret void NEW_LINE }
define * i32 @func_41 ( i16 signext %0 , * * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load * * i32 %5 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define * i32 @func_2 ( * i32 %0 , i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 @g_52 %7 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define i64 @func_12 ( i64 %0 , i8 signext %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca STRUCT 1 i64 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = getelementptr inbounds STRUCT 1 i64 %4 , i32 0 , i32 0 NEW_LINE store i64 %0 %7 NEW_LINE store i8 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE %8 = load i8 %6 NEW_LINE %9 = zext i8 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i32 NEW_LINE %2 = bitcast * STRUCT 1 i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %2 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_2 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE %3 = getelementptr inbounds STRUCT 1 i32 %1 , i32 0 , i32 0 NEW_LINE %4 = load i32 %3 NEW_LINE ret i32 %4 NEW_LINE }
define * i32 @func_63 ( i16 zeroext %0 , * i32 %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * i32 @g_4 %7 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define i32 @func_58 ( i32 %0 , * i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE store i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store i16 22824 %7 NEW_LINE %8 = load i16 %7 NEW_LINE %9 = sext i16 %8 to i32 NEW_LINE ret i32 %9 NEW_LINE }
define * i32 @func_6 ( * i32 %0 , i16 zeroext %1 , i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 @g_68 %7 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define * STRUCT 1 i32 @func_25 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 1 i32 NEW_LINE store i32 %0 %2 NEW_LINE store * STRUCT 1 i32 bitcast ( * STRUCT 2 i8 ARR 3 3 x i8 @g_47 to * STRUCT 1 i32 ) %3 NEW_LINE ret * STRUCT 1 i32 bitcast ( * STRUCT 2 i8 ARR 3 3 x i8 @g_47 to * STRUCT 1 i32 ) NEW_LINE }
define zeroext i8 @func_60 ( i8 signext %0 , * i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %9 = load i16 @g_33 NEW_LINE %10 = trunc i16 %9 to i8 NEW_LINE ret i8 %10 NEW_LINE }
define i32 @func_84 ( i64 %0 , * i16 %1 ) { NEW_LINE %3 = alloca STRUCT 2 i32 i32 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca i16 NEW_LINE %6 = bitcast * STRUCT 2 i32 i32 %3 to * i64 NEW_LINE store i64 %0 %6 NEW_LINE store * i16 %1 %4 NEW_LINE store i16 14312 %5 NEW_LINE %7 = load i16 %5 NEW_LINE %8 = sext i16 %7 to i32 NEW_LINE ret i32 %8 NEW_LINE }
define i64 @func_21 ( i16 signext %0 , i8 signext %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE store i16 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE %7 = load volatile i32 getelementptr inbounds ( STRUCT 3 i32 i64 i32 @g_385 , i32 0 , i32 2 ) NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE ret i64 %8 NEW_LINE }
define signext i16 @func_77 ( * i8 %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i8 -3 %7 NEW_LINE %8 = load i8 %7 NEW_LINE %9 = sext i8 %8 to i16 NEW_LINE ret i16 %9 NEW_LINE }
define * i32 @func_27 ( * i32 %0 , i8 signext %1 , i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define * i8 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 * i8 NEW_LINE %2 = bitcast * STRUCT 1 * i8 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %2 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_2 to * i8 ) , i64 8 , i1 false ) NEW_LINE %3 = getelementptr inbounds STRUCT 1 * i8 %1 , i32 0 , i32 0 NEW_LINE %4 = load * i8 %3 NEW_LINE ret * i8 %4 NEW_LINE }
define i64 @func_75 ( i64 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE store i64 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 0 %5 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = add i8 %6 , 1 NEW_LINE store i8 %7 %5 NEW_LINE %8 = load i8 %5 NEW_LINE %9 = zext i8 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define signext i16 @func_30 ( i32 %0 , i64 %1 , * STRUCT 3 i16 i64 i64 byval ( STRUCT 3 i16 i64 i64 ) %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE store i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE %6 = load i32 getelementptr inbounds ( ARR 3 8 x i32 @g_63 , i64 0 , i64 0 ) NEW_LINE %7 = trunc i32 %6 to i16 NEW_LINE ret i16 %7 NEW_LINE }
define i64 @func_62 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i16 NEW_LINE store i8 %0 %2 NEW_LINE store i16 6595 %3 NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = load i32 @g_64 NEW_LINE %7 = and i32 %6 , %5 NEW_LINE store i32 %7 @g_64 NEW_LINE %8 = load i16 %3 NEW_LINE %9 = zext i16 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define i32 @func_55 ( i32 %0 , i32 %1 , i16 signext %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store i32 6 %9 NEW_LINE %10 = load i32 %9 NEW_LINE ret i32 %10 NEW_LINE }
define * i32 @func_8 ( * i32 %0 , i8 zeroext %1 , i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE store * i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE %7 = load * i32 @g_879 NEW_LINE store i32 1205982311 %7 NEW_LINE %8 = load * i32 %4 NEW_LINE ret * i32 %8 NEW_LINE }
define i64 @func_12 ( i8 zeroext %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load volatile i64 getelementptr inbounds ( ARR 3 7 x STRUCT 9 i64 i32 i64 i64 i8 i64 i64 i32 i16 @g_1132 , i64 0 , i64 6 , i32 6 ) NEW_LINE ret i64 %7 NEW_LINE }
define * i32 @func_21 ( * * * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * * * i32 NEW_LINE %4 = alloca i32 NEW_LINE store * * * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 8 x * i32 @g_79 to * i8 ) , i64 16 ) to * * i32 ) NEW_LINE ret * i32 %5 NEW_LINE }
define i32 @func_36 ( * i32 %0 , * i32 %1 , i8 signext %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE %9 = load i16 %8 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE ret i32 %10 NEW_LINE }
define * i32 @func_52 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 2 x ARR 3 9 x i32 @g_511 , i64 0 , i64 0 , i64 0 , i64 6 ) %3 NEW_LINE %4 = load * i32 %3 NEW_LINE ret * i32 %4 NEW_LINE }
define zeroext i8 @func_127 ( i32 %0 , * i64 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE store i32 %0 %4 NEW_LINE store * i64 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i16 -3468 %7 NEW_LINE %8 = load i16 %7 NEW_LINE %9 = trunc i16 %8 to i8 NEW_LINE ret i8 %9 NEW_LINE }
define * i32 @func_4 ( * i32 %0 , i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %7 = load * i32 %6 NEW_LINE store i32 1917988674 %7 NEW_LINE %8 = load * i32 %4 NEW_LINE ret * i32 %8 NEW_LINE }
define * i32 @func_82 ( i8 signext %0 , i64 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 @g_52 %5 NEW_LINE %6 = load volatile * * * * i32 @g_408 NEW_LINE store * * * i32 @g_74 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE ret * i32 %7 NEW_LINE }
define signext i8 @func_35 ( * i32 %0 , * * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * * i32 %1 %4 NEW_LINE %5 = load i8 getelementptr inbounds ( ARR 3 3 x ARR 3 6 x ARR 3 3 x i8 @g_48 , i64 0 , i64 0 , i64 0 , i64 1 ) NEW_LINE ret i8 %5 NEW_LINE }
define * i32 @func_19 ( * i32 %0 , i8 zeroext %1 , i64 %2 , i64 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store * i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE %9 = load * * i32 @g_770 NEW_LINE %10 = load * i32 %9 NEW_LINE ret * i32 %10 NEW_LINE }
define zeroext i16 @func_6 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE store i64 -6596200685321559492 %3 NEW_LINE store i32 5 %4 NEW_LINE %5 = load i16 @g_2176 NEW_LINE %6 = add i16 %5 , 1 NEW_LINE store i16 %6 @g_2176 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = trunc i32 %7 to i16 NEW_LINE ret i16 %8 NEW_LINE }
define * i8 @func_96 ( i32 %0 , * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i64 NEW_LINE store i32 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE store i64 9 %5 NEW_LINE %6 = load i64 %5 NEW_LINE %7 = and i64 %6 , 3000594461 NEW_LINE store i64 %7 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE ret * i8 %8 NEW_LINE }
define i32 @func_81 ( * i8 %0 , i64 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store * i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 98024265633256046 %5 NEW_LINE %6 = load i64 %5 NEW_LINE %7 = add i64 %6 , 1 NEW_LINE store i64 %7 %5 NEW_LINE %8 = load i32 @g_46 NEW_LINE ret i32 %8 NEW_LINE }
define * * i16 @func_54 ( i64 %0 , * i16 %1 , i64 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * * i16 NEW_LINE store i64 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store * * i16 null %7 NEW_LINE %8 = load * * i16 %7 NEW_LINE ret * * i16 %8 NEW_LINE }
define i64 @func_80 ( i64 %0 , * i32 %1 , * i64 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i64 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i64 %2 %6 NEW_LINE %7 = load volatile * * i32 @g_85 NEW_LINE store * i32 @g_2 %7 NEW_LINE %8 = load i32 @g_5 NEW_LINE %9 = zext i32 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define i64 @func_18 ( i8 zeroext %0 , i32 %1 , i8 signext %2 , i64 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i16 NEW_LINE store i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store i16 0 %9 NEW_LINE %10 = load i16 %9 NEW_LINE %11 = zext i16 %10 to i64 NEW_LINE ret i64 %11 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = load * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 1 x * i32 @g_2 , i64 0 , i64 3 , i64 0 ) NEW_LINE store * i32 %1 getelementptr inbounds ( ARR 3 5 x ARR 3 1 x * i32 @g_2 , i64 0 , i64 3 , i64 0 ) NEW_LINE %2 = load volatile i32 @g_3 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE ret i64 %3 NEW_LINE }
define i32 @func_66 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE store i64 %0 %2 NEW_LINE store * i32 @g_16 %3 NEW_LINE store * * i32 %3 %4 NEW_LINE %5 = load * * i32 %4 NEW_LINE store * i32 null %5 NEW_LINE %6 = load i64 %2 NEW_LINE %7 = trunc i64 %6 to i32 NEW_LINE ret i32 %7 NEW_LINE }
define * i32 @func_6 ( i8 signext %0 , i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE store i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %7 = load i8 %4 NEW_LINE %8 = sext i8 %7 to i32 NEW_LINE %9 = load * i32 @g_1567 NEW_LINE store i32 %8 %9 NEW_LINE %10 = load * i32 %6 NEW_LINE ret * i32 %10 NEW_LINE }
define * i32 @func_37 ( i8 zeroext %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * i32 null %5 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = load * * i32 @g_1001 NEW_LINE store * i32 %6 %7 NEW_LINE %8 = load * i32 %5 NEW_LINE ret * i32 %8 NEW_LINE }
define signext i16 @func_13 ( i16 zeroext %0 , i8 zeroext %1 , i16 signext %2 , i16 signext %3 , * i8 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i8 NEW_LINE store i16 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE %11 = load i16 %8 NEW_LINE ret i16 %11 NEW_LINE }
define signext i16 @func_40 ( i32 %0 , i8 zeroext %1 , i32 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define i32 @func_23 ( * i32 %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load * * i32 @g_235 NEW_LINE store * i32 null %7 NEW_LINE %8 = load i16 @g_861 NEW_LINE %9 = sext i16 %8 to i32 NEW_LINE ret i32 %9 NEW_LINE }
define zeroext i8 @func_25 ( i64 %0 , i32 %1 , i64 %2 , i16 zeroext %3 , i16 signext %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i16 NEW_LINE store i64 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE %11 = load i16 %9 NEW_LINE %12 = trunc i16 %11 to i8 NEW_LINE ret i8 %12 NEW_LINE }
define * i32 @func_40 ( i32 %0 , * * i32 %1 , i8 signext %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * * i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %9 = load * * i32 @g_633 NEW_LINE %10 = load * i32 %9 NEW_LINE ret * i32 %10 NEW_LINE }
define i32 @func_51 ( i8 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_777 %5 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = load * * i32 @g_101 NEW_LINE store * i32 %6 %7 NEW_LINE %8 = load * i32 @g_57 NEW_LINE %9 = load volatile i32 %8 NEW_LINE ret i32 %9 NEW_LINE }
define * i16 @func_31 ( * * i16 %0 , * i16 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * * i16 %0 %5 NEW_LINE store * i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %9 = load * * i16 @g_740 NEW_LINE %10 = load * i16 %9 NEW_LINE ret * i16 %10 NEW_LINE }
define i64 @func_32 ( i32 %0 , i16 zeroext %1 , i64 %2 , i64 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE %9 = load * * * i64 @g_1043 NEW_LINE %10 = load * * i64 %9 NEW_LINE %11 = load * i64 %10 NEW_LINE %12 = load i64 %11 NEW_LINE ret i64 %12 NEW_LINE }
define i32 @func_51 ( * i8 %0 , i64 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i32 -8 %7 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = add i32 %8 , -1 NEW_LINE store i32 %9 %7 NEW_LINE %10 = load i32 @g_237 NEW_LINE ret i32 %10 NEW_LINE }
define * i32 @func_42 ( * i32 %0 , i32 %1 , i8 signext %2 , i64 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store * i32 @g_3 %9 NEW_LINE %10 = load * i32 %9 NEW_LINE ret * i32 %10 NEW_LINE }
define i32 @func_73 ( i8 signext %0 , i64 %1 , * * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 717843118 %9 NEW_LINE %10 = load i32 %9 NEW_LINE ret i32 %10 NEW_LINE }
define * i8 @func_12 ( * i8 %0 , i64 %1 , i32 %2 , i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE store * i8 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE %11 = load * i8 %10 NEW_LINE ret * i8 %11 NEW_LINE }
define * i8 @func_49 ( i16 signext %0 , * i64 %1 , i8 signext %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i8 NEW_LINE store i16 %0 %5 NEW_LINE store * i64 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i8 @g_1600 %9 NEW_LINE %10 = load * i8 %9 NEW_LINE ret * i8 %10 NEW_LINE }
define zeroext i16 @func_37 ( i16 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE store i16 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 4590 %5 NEW_LINE %6 = call * STRUCT 1 i64 @func_40 ( * i64 @g_19 ) NEW_LINE %7 = load * * STRUCT 1 i64 @g_1326 NEW_LINE store volatile * STRUCT 1 i64 %6 %7 NEW_LINE %8 = load i16 %5 NEW_LINE ret i16 %8 NEW_LINE }
define i32 @func_25 ( * * i8 %0 , i32 %1 , * * i8 %2 ) { NEW_LINE %4 = alloca * * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * * i8 NEW_LINE store * * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * * i8 %2 %6 NEW_LINE %7 = load volatile * i32 @g_1216 NEW_LINE store i32 0 %7 NEW_LINE %8 = load volatile * i32 @g_157 NEW_LINE %9 = load i32 %8 NEW_LINE ret i32 %9 NEW_LINE }
define * i8 @func_30 ( i16 zeroext %0 , i8 signext %1 , * i8 %2 , * i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i64 NEW_LINE store i16 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE %11 = load * i8 @g_2695 NEW_LINE ret * i8 %11 NEW_LINE }
define * i32 @func_26 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * * i32 @g_278 %3 NEW_LINE %4 = load * i32 %2 NEW_LINE %5 = load * * i32 %3 NEW_LINE store * i32 %4 %5 NEW_LINE %6 = load volatile * * i32 @g_410 NEW_LINE store * i32 %4 %6 NEW_LINE %7 = load * i32 %2 NEW_LINE ret * i32 %7 NEW_LINE }
define * i32 @func_27 ( i8 zeroext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 3 x ARR 3 4 x i32 @g_127 , i64 0 , i64 0 , i64 0 , i64 1 ) %5 NEW_LINE %6 = load * i32 %5 NEW_LINE ret * i32 %6 NEW_LINE }
define * i32 @func_54 ( i8 signext %0 , * i32 %1 , i32 %2 , i64 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE store i8 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store * i32 @g_72 %9 NEW_LINE %10 = load * i32 %9 NEW_LINE ret * i32 %10 NEW_LINE }
define * i32 @func_16 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i64 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_114 , i64 0 , i64 1 ) %5 NEW_LINE ret * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 2 x i32 @g_114 to * i8 ) , i64 4 ) to * i32 ) NEW_LINE }
define i64 @func_41 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i8 NEW_LINE store * i32 %0 %2 NEW_LINE store i8 8 %3 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = call * i32 @func_43 ( i32 %5 ) NEW_LINE %7 = load volatile * * i32 @g_58 NEW_LINE store * i32 %6 %7 NEW_LINE %8 = load i8 @g_55 NEW_LINE %9 = zext i8 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define * i32 @func_23 ( i64 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * i32 @g_158 %7 NEW_LINE store * i32 null %7 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca i8 NEW_LINE store * i32 @g_3 %1 NEW_LINE store i8 -57 %2 NEW_LINE %3 = load * i32 %1 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = or i64 %5 , 1636994071 NEW_LINE %7 = trunc i64 %6 to i32 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i8 %2 NEW_LINE %9 = zext i8 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define signext i8 @func_51 ( * i16 %0 , * i16 %1 , * i16 %2 , i32 %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i8 NEW_LINE store * i16 %0 %6 NEW_LINE store * i16 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE %11 = load i8 %10 NEW_LINE ret i8 %11 NEW_LINE }
define signext i8 @func_56 ( * i8 %0 , i32 %1 , i32 %2 , * i8 %3 , i64 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i64 NEW_LINE store * i8 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE %11 = load i32 %8 NEW_LINE %12 = trunc i32 %11 to i8 NEW_LINE ret i8 %12 NEW_LINE }
define * i16 @func_31 ( * i16 %0 , i64 %1 , * i16 %2 , * i16 %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca * i16 NEW_LINE store * i16 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * i16 %2 %7 NEW_LINE store * i16 %3 %8 NEW_LINE store volatile * i32 null @g_325 NEW_LINE %9 = load * i16 %7 NEW_LINE ret * i16 %9 NEW_LINE }
define * i32 @func_78 ( * STRUCT 1 * i8 %0 , i16 zeroext %1 , i16 zeroext %2 , i32 %3 ) { NEW_LINE %5 = alloca * STRUCT 1 * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i32 NEW_LINE store * STRUCT 1 * i8 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 3 ) NEW_LINE }
define zeroext i8 @func_33 ( i16 zeroext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca i32 NEW_LINE store i16 %0 %2 NEW_LINE store i32 -3 %3 NEW_LINE %4 = load volatile * * * * i32 @g_154 NEW_LINE %5 = load * * * i32 %4 NEW_LINE %6 = load volatile * * i32 %5 NEW_LINE %7 = load * i32 %6 NEW_LINE store volatile i32 -1 %7 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = trunc i32 %8 to i8 NEW_LINE ret i8 %9 NEW_LINE }
define i32 @func_18 ( i32 %0 , i8 zeroext %1 , i64 %2 , i64 %3 , i64 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 1 %11 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define zeroext i16 @func_30 ( i8 zeroext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 -11393 %5 NEW_LINE store i8 -81 %6 NEW_LINE %7 = load i8 %3 NEW_LINE %8 = zext i8 %7 to i16 NEW_LINE store i16 %8 %5 NEW_LINE %9 = load i8 %6 NEW_LINE %10 = sext i8 %9 to i16 NEW_LINE ret i16 %10 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca * * i32 NEW_LINE %3 = alloca i32 NEW_LINE store * i32 @g_4 %1 NEW_LINE store * * i32 %1 %2 NEW_LINE store i32 108933243 %3 NEW_LINE %4 = load * * i32 %2 NEW_LINE store * i32 null %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE ret i64 %6 NEW_LINE }
define * * * i32 @func_60 ( * * i32 %0 , * * i32 %1 , * i32 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE store * * i32 %0 %5 NEW_LINE store * * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE %9 = load * * * i32 @g_1230 NEW_LINE ret * * * i32 %9 NEW_LINE }
define * i8 @func_45 ( i8 zeroext %0 , * i8 %1 , * i64 %2 , i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE store i8 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store * i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE %11 = load * i8 %10 NEW_LINE ret * i8 %11 NEW_LINE }
define zeroext i16 @func_38 ( i32 %0 , i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i16 15994 %7 NEW_LINE %8 = load i16 %7 NEW_LINE %9 = add i16 %8 , -1 NEW_LINE store i16 %9 %7 NEW_LINE %10 = load i64 @g_2360 NEW_LINE %11 = trunc i64 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define * i32 @func_43 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 null %5 NEW_LINE %6 = load * i32 @g_84 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = trunc i64 %8 to i32 NEW_LINE store i32 %9 %6 NEW_LINE %10 = load * i32 %5 NEW_LINE ret * i32 %10 NEW_LINE }
define zeroext i8 @func_2 ( i16 zeroext %0 , i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 null %5 NEW_LINE store i32 -1 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE store * i32 %7 %5 NEW_LINE %8 = load i32 %6 NEW_LINE %9 = trunc i32 %8 to i8 NEW_LINE ret i8 %9 NEW_LINE }
define signext i8 @func_18 ( i8 signext %0 , i32 %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store i32 -1 %9 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = trunc i32 %10 to i8 NEW_LINE ret i8 %11 NEW_LINE }
define zeroext i8 @func_10 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i64 -9 %5 NEW_LINE %6 = load i64 %5 NEW_LINE %7 = trunc i64 %6 to i32 NEW_LINE %8 = load * i32 %3 NEW_LINE store i32 %7 %8 NEW_LINE %9 = load i64 %5 NEW_LINE %10 = trunc i64 %9 to i8 NEW_LINE ret i8 %10 NEW_LINE }
define i32 @func_38 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i64 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store * i32 @g_49 %4 NEW_LINE %5 = load i64 %2 NEW_LINE %6 = trunc i64 %5 to i32 NEW_LINE %7 = load * i32 %4 NEW_LINE store i32 %6 %7 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %8 NEW_LINE ret i32 %9 NEW_LINE }
define i32 @func_59 ( * i64 %0 , i32 %1 , i16 signext %2 , * i32 %3 , * i64 %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i64 NEW_LINE store * i64 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i64 %4 %10 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define signext i16 @func_52 ( i64 %0 , i16 signext %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %9 = load i32 getelementptr inbounds ( ARR 3 3 x ARR 3 5 x i32 @g_61 , i64 0 , i64 2 , i64 4 ) NEW_LINE %10 = trunc i32 %9 to i16 NEW_LINE ret i16 %10 NEW_LINE }
define i32 @func_48 ( i16 signext %0 , * i16 %1 , * i16 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i16 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %11 = load i16 %6 NEW_LINE %12 = sext i16 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define zeroext i16 @func_29 ( i64 %0 , i16 zeroext %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i8 NEW_LINE store i64 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store i8 19 %9 NEW_LINE %10 = load i64 %5 NEW_LINE %11 = trunc i64 %10 to i8 NEW_LINE store i8 %11 %9 NEW_LINE %12 = load i16 %6 NEW_LINE ret i16 %12 NEW_LINE }
define zeroext i16 @func_62 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %2 NEW_LINE store i64 -8 %3 NEW_LINE store * i32 @g_32 %4 NEW_LINE %5 = load i64 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = load i32 %6 NEW_LINE store i32 %7 %6 NEW_LINE %8 = load i64 @g_30 NEW_LINE %9 = trunc i64 %8 to i16 NEW_LINE ret i16 %9 NEW_LINE }
define * i32 @func_93 ( i16 signext %0 , i32 %1 , i16 signext %2 , i16 signext %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE store i16 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 6 x ARR 3 4 x i32 @g_3 , i64 0 , i64 2 , i64 1 , i64 1 ) NEW_LINE }
define i32 @func_87 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i8 NEW_LINE store i8 %0 %2 NEW_LINE store i8 0 %3 NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE store i32 %5 @g_30 NEW_LINE %6 = load i8 %3 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = or i32 %7 , %5 NEW_LINE %9 = trunc i32 %8 to i8 NEW_LINE store i8 %9 %3 NEW_LINE %10 = load i8 %3 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE ret i32 %11 NEW_LINE }
define i32 @func_13 ( i32 %0 , i64 %1 , i64 %2 , i64 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i64 %5 , i32 0 , i32 0 NEW_LINE store i64 %1 %9 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE %10 = bitcast * STRUCT 1 i64 %5 to * i64 NEW_LINE %11 = load i64 %10 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define i32 @func_38 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load volatile * * i32 @g_108 NEW_LINE %4 = load * i32 %3 NEW_LINE %5 = icmp eq * i32 %4 , null NEW_LINE %6 = zext i1 %5 to i32 NEW_LINE %7 = load * i32 @g_109 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = xor i32 %8 , %6 NEW_LINE store i32 %9 %7 NEW_LINE %10 = load * i32 @g_109 NEW_LINE %11 = load i32 %10 NEW_LINE ret i32 %11 NEW_LINE }
define signext i8 @func_106 ( i16 signext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i32 NEW_LINE store i16 %0 %2 NEW_LINE store * i32 @g_9 %3 NEW_LINE %4 = load i32 @g_36 NEW_LINE %5 = call * i32 @func_108 ( i16 signext 0 ) NEW_LINE %6 = load * * i32 @g_226 NEW_LINE store * i32 %5 %6 NEW_LINE %7 = load i16 %2 NEW_LINE %8 = trunc i16 %7 to i8 NEW_LINE ret i8 %8 NEW_LINE }
define * i32 @func_21 ( i32 %0 , i64 %1 , i32 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * i32 @g_176 %11 NEW_LINE %12 = load * i32 %11 NEW_LINE ret * i32 %12 NEW_LINE }
define * i8 @func_23 ( i32 %0 , i8 signext %1 , i8 signext %2 , i64 %3 , i8 signext %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i8 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE %11 = load * * * i8 @g_400 NEW_LINE %12 = load * * i8 %11 NEW_LINE %13 = load * i8 %12 NEW_LINE ret * i8 %13 NEW_LINE }
define * i8 @func_39 ( i8 signext %0 ) { NEW_LINE %2 = alloca STRUCT 1 * i8 NEW_LINE %3 = alloca i8 NEW_LINE store i8 %0 %3 NEW_LINE %4 = bitcast * STRUCT 1 * i8 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %4 , * i8 getelementptr inbounds ( STRUCT 3 i8 i8 ARR 3 6 x i8 @__const.func_39.l_1035 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE %5 = getelementptr inbounds STRUCT 1 * i8 %2 , i32 0 , i32 0 NEW_LINE %6 = load * i8 %5 NEW_LINE ret * i8 %6 NEW_LINE }
define i64 @func_45 ( i16 zeroext %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca STRUCT 1 i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i16 NEW_LINE store i16 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE %6 = bitcast * STRUCT 1 i64 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 7 x i8 @g_339 , i32 0 , i32 0 ) , i64 8 , i1 true ) NEW_LINE %7 = getelementptr inbounds STRUCT 1 i64 %3 , i32 0 , i32 0 NEW_LINE %8 = load i64 %7 NEW_LINE ret i64 %8 NEW_LINE }
define i64 @func_74 ( * * i16 %0 , * i32 %1 , i16 signext %2 , * i32 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca * * i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i16 NEW_LINE store * * i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE %11 = load i16 @g_54 NEW_LINE %12 = sext i16 %11 to i64 NEW_LINE ret i64 %12 NEW_LINE }
define i64 @func_54 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store i32 1 %4 NEW_LINE %5 = load i32 @g_31 NEW_LINE %6 = load i16 @g_58 NEW_LINE %7 = zext i16 %6 to i32 NEW_LINE %8 = and i32 %7 , %5 NEW_LINE %9 = trunc i32 %8 to i16 NEW_LINE store i16 %9 @g_58 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE ret i64 %11 NEW_LINE }
define * i32 @func_79 ( * * STRUCT 4 %struct.S0 i32 i64 i32 %0 , * * STRUCT 4 %struct.S0 i32 i64 i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * * STRUCT 4 %struct.S0 i32 i64 i32 NEW_LINE %5 = alloca * * STRUCT 4 %struct.S0 i32 i64 i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * * STRUCT 4 %struct.S0 i32 i64 i32 %0 %4 NEW_LINE store * * STRUCT 4 %struct.S0 i32 i64 i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %7 = load * i32 %6 NEW_LINE ret * i32 %7 NEW_LINE }
define i64 @func_17 ( i32 %0 , i32 %1 , i32 %2 , i64 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %1 %10 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store i32 -1619493466 %9 NEW_LINE %11 = load i32 %9 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE ret i64 %12 NEW_LINE }
define signext i16 @func_20 ( i8 zeroext %0 , i64 %1 , i64 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i8 NEW_LINE store i8 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i8 37 %11 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = zext i8 %12 to i16 NEW_LINE ret i16 %13 NEW_LINE }
define zeroext i16 @func_36 ( * i32 %0 , * i32 %1 , * i32 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i32 205713209 %9 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = trunc i32 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define i32 @func_31 ( * i32 %0 , i16 zeroext %1 , * i32 %2 , * i32 %3 , * i64 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i64 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i64 %4 %10 NEW_LINE %11 = load * i32 @g_185 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define i64 @func_35 ( i32 %0 , * * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store * * i32 %1 %4 NEW_LINE store i32 1443412375 %5 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = add i32 %6 , -1 NEW_LINE store i32 %7 %5 NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 3 x i32 @g_26 , i64 0 , i64 2 ) NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define signext i16 @func_6 ( i32 %0 , * i8 %1 , i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 @g_3205 %7 NEW_LINE %8 = load * i32 %7 NEW_LINE store * i32 %8 %7 NEW_LINE %9 = load * i32 %7 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = trunc i32 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define i16 @func_82 ( i16 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i16 NEW_LINE %3 = alloca STRUCT 1 i16 NEW_LINE %4 = getelementptr inbounds STRUCT 1 i16 %3 , i32 0 , i32 0 NEW_LINE store i16 %0 %4 NEW_LINE %5 = bitcast * STRUCT 1 i16 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * STRUCT 1 i16 @__const.func_82.l_85 to * i8 ) , i64 2 , i1 false ) NEW_LINE %6 = getelementptr inbounds STRUCT 1 i16 %2 , i32 0 , i32 0 NEW_LINE %7 = load i16 %6 NEW_LINE ret i16 %7 NEW_LINE }
define signext i16 @func_27 ( * i32 %0 , i32 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i16 -13821 %7 NEW_LINE %8 = load i16 %7 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = load * i32 %4 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define zeroext i8 @func_48 ( * i32 %0 , * i32 %1 , i16 signext %2 , * i64 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i64 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store * i64 %3 %8 NEW_LINE %9 = load volatile * * %struct.S0 @g_323 NEW_LINE store * %struct.S0 @g_92 %9 NEW_LINE %10 = load i16 %7 NEW_LINE %11 = trunc i16 %10 to i8 NEW_LINE ret i8 %11 NEW_LINE }
define * i32 @func_56 ( i16 signext %0 , * i32 %1 , * i16 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * * i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE store * * i32 @g_126 %7 NEW_LINE %8 = load * * i32 %7 NEW_LINE store * i32 null %8 NEW_LINE %9 = load * i32 %5 NEW_LINE ret * i32 %9 NEW_LINE }
define i64 @func_13 ( i8 zeroext %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE store i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 4 %5 NEW_LINE %6 = load i8 %3 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = load * * * i32 @g_3527 NEW_LINE %9 = load * * i32 %8 NEW_LINE %10 = load * i32 %9 NEW_LINE store i32 %7 %10 NEW_LINE %11 = load i8 %5 NEW_LINE %12 = zext i8 %11 to i64 NEW_LINE ret i64 %12 NEW_LINE }
define signext i16 @func_59 ( i16 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i16 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_81 %5 NEW_LINE %6 = load volatile * i32 @g_77 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i32 %5 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = and i32 %9 , %7 NEW_LINE store i32 %10 %8 NEW_LINE %11 = load i32 @g_37 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define i64 @func_32 ( * i8 %0 , * * i32 %1 , * i8 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * * i32 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE %7 = load * * i32 @g_146 NEW_LINE store * i32 null %7 NEW_LINE %8 = load volatile * * i64 @g_354 NEW_LINE %9 = load * i64 %8 NEW_LINE %10 = load i64 %9 NEW_LINE ret i64 %10 NEW_LINE }
define i32 @func_39 ( i32 %0 , i8 signext %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 -9 %9 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = load volatile * i32 @g_680 NEW_LINE store i32 %10 %11 NEW_LINE %12 = load i32 %9 NEW_LINE ret i32 %12 NEW_LINE }
define * i32 @func_37 ( i32 %0 , i16 %1 , * i8 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = getelementptr inbounds STRUCT 1 i16 %4 , i32 0 , i32 0 NEW_LINE store i16 %1 %8 NEW_LINE store i32 %0 %5 NEW_LINE store * i8 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_864 , i64 0 , i64 1 ) %7 NEW_LINE %9 = load * i32 %7 NEW_LINE ret * i32 %9 NEW_LINE }
define i32 @func_5 ( * * i32 %0 , i32 %1 , i16 signext %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i64 NEW_LINE store * * i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i64 -3581928214695699560 %9 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE ret i32 %11 NEW_LINE }
define zeroext i16 @func_74 ( * i8 %0 , i32 %1 , i8 signext %2 , i64 %3 , i64 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE store * i8 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 2 %11 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE ret i16 %13 NEW_LINE }
define signext i16 @func_37 ( * i32 %0 , i64 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * i32 @g_92 %7 NEW_LINE %8 = load * i32 %7 NEW_LINE %9 = load * * i32 @g_884 NEW_LINE store * i32 %8 %9 NEW_LINE %10 = load i64 %5 NEW_LINE %11 = trunc i64 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define * * i32 @func_58 ( i16 signext %0 , i8 zeroext %1 , * i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store i16 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * * i32 @g_291 %7 NEW_LINE %8 = load * i32 %6 NEW_LINE %9 = load * * i32 %7 NEW_LINE store * i32 %8 %9 NEW_LINE %10 = load * * i32 %7 NEW_LINE ret * * i32 %10 NEW_LINE }
define * i32 @func_50 ( * STRUCT 6 i32 i64 i64 i8 i64 i32 byval ( STRUCT 6 i32 i64 i64 i8 i64 i32 ) %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i32 NEW_LINE store i16 5 %2 NEW_LINE store * i32 @g_563 %3 NEW_LINE %4 = getelementptr inbounds STRUCT 6 i32 i64 i64 i8 i64 i32 %0 , i32 0 , i32 5 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = trunc i32 %5 to i16 NEW_LINE store i16 %6 %2 NEW_LINE %7 = load * i32 %3 NEW_LINE ret * i32 %7 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE store i8 -7 %1 NEW_LINE store i32 0 @g_2 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @g_2 NEW_LINE %4 = icmp eq i32 %3 , -29 NEW_LINE br i1 %4 , label %5 , label %9 NEW_LINE 5: NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 @g_2 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 @g_2 NEW_LINE br label %2 NEW_LINE 9: NEW_LINE %10 = load i8 %1 NEW_LINE ret i8 %10 NEW_LINE }
define * i8 @func_65 ( i32 %0 , i64 %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i8 NEW_LINE store i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i32 1 %7 NEW_LINE store * i8 @g_31 %8 NEW_LINE %9 = load i8 %6 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE store i32 %10 %7 NEW_LINE %11 = load * i8 %8 NEW_LINE ret * i8 %11 NEW_LINE }
define i64 @func_7 ( i8 signext %0 , i16 zeroext %1 , i16 zeroext %2 , i8 zeroext %3 , i64 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i64 NEW_LINE store i8 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE %11 = load * i32 @g_220 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load * i32 @g_220 NEW_LINE store i32 %12 %13 NEW_LINE ret i64 254 NEW_LINE }
define i32 @func_11 ( i8 signext %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE store i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i8 126 %7 NEW_LINE store i16 -1 %8 NEW_LINE %9 = load i8 %7 NEW_LINE %10 = add i8 %9 , 1 NEW_LINE store i8 %10 %7 NEW_LINE %11 = load i16 %8 NEW_LINE %12 = sext i16 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define i32 @func_4 ( i16 signext %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE store i16 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 72 %5 NEW_LINE %6 = load i16 %3 NEW_LINE %7 = sext i16 %6 to i32 NEW_LINE %8 = load i8 %5 NEW_LINE %9 = zext i8 %8 to i32 NEW_LINE %10 = or i32 %9 , %7 NEW_LINE %11 = trunc i32 %10 to i8 NEW_LINE store i8 %11 %5 NEW_LINE %12 = load i8 %5 NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE ret i32 %13 NEW_LINE }
define i32 @func_73 ( i32 %0 , * * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * STRUCT 1 i64 NEW_LINE store i32 %0 %4 NEW_LINE store * * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * * STRUCT 1 i64 @g_226 %7 NEW_LINE %8 = load * * STRUCT 1 i64 %7 NEW_LINE store * STRUCT 1 i64 null %8 NEW_LINE %9 = load i32 %6 NEW_LINE ret i32 %9 NEW_LINE }
define * i32 @func_49 ( i32 %0 , * i16 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i16 %1 %4 NEW_LINE store * i32 @g_5 %5 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = xor i64 %8 , 800295555 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %6 NEW_LINE %11 = load * i32 %5 NEW_LINE ret * i32 %11 NEW_LINE }
define void @func_10 ( * STRUCT 5 i16 i8 i32 i32 i16 noalias sret %0 , i8 zeroext %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i8 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * i32 %3 %7 NEW_LINE %8 = bitcast * STRUCT 5 i16 i8 i32 i32 i16 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * STRUCT 5 i16 i8 i32 i32 i16 @g_1779 to * i8 ) , i64 13 , i1 false ) NEW_LINE ret void NEW_LINE }
define zeroext i8 @func_50 ( i32 %0 , i16 zeroext %1 , i32 %2 , i8 zeroext %3 , * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i16 NEW_LINE store i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i16 30075 %11 NEW_LINE %12 = load i16 %11 NEW_LINE %13 = trunc i16 %12 to i8 NEW_LINE ret i8 %13 NEW_LINE }
define * i32 @func_44 ( * i32 %0 , i32 %1 , * i32 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i24 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = bitcast * STRUCT 1 i24 %6 to * i32 NEW_LINE store i32 %3 %11 NEW_LINE store * i32 %0 %7 NEW_LINE store i32 %1 %8 NEW_LINE store * i32 %2 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %12 = load * i32 %9 NEW_LINE ret * i32 %12 NEW_LINE }
define signext i16 @func_75 ( i8 zeroext %0 , * * i32 %1 , * * i32 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i8 NEW_LINE store i8 %0 %5 NEW_LINE store * * i32 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE %9 = load i16 getelementptr inbounds ( ARR 3 10 x ARR 3 4 x i16 @g_210 , i64 0 , i64 7 , i64 2 ) NEW_LINE ret i16 %9 NEW_LINE }
define i64 @func_11 ( i64 %0 , i64 %1 , * * i32 %2 , i64 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i8 NEW_LINE store i64 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store * * i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i8 -14 %11 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = zext i8 %12 to i64 NEW_LINE ret i64 %13 NEW_LINE }
define * i8 @func_56 ( i16 signext %0 , * i32 %1 , * i8 %2 , * i8 %3 , i64 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i8 NEW_LINE store i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store * i8 @g_30 %11 NEW_LINE %12 = load * i8 %11 NEW_LINE ret * i8 %12 NEW_LINE }
define * i8 @func_37 ( * i8 %0 , * i8 %1 , * i8 %2 , i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE store * i8 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE ret * i8 getelementptr inbounds ( ARR 3 8 x i8 @g_15 , i64 0 , i64 2 ) NEW_LINE }
define * i32 @func_58 ( * i64 %0 , i16 signext %1 , * i32 %2 , i16 zeroext %3 , i32 %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE store * i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_2061 %11 NEW_LINE %12 = load * i32 %11 NEW_LINE ret * i32 %12 NEW_LINE }
define zeroext i16 @func_56 ( i16 zeroext %0 , i16 signext %1 , i16 signext %2 , i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store i32 -1 %11 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE ret i16 %13 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE store i32 -1802089901 %1 NEW_LINE store * i32 null %2 NEW_LINE %3 = load i32 %1 NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE %5 = call * i32 @func_2 ( i8 signext %4 ) NEW_LINE store * i32 %5 %2 NEW_LINE %6 = load * * * i32 @g_1192 NEW_LINE %7 = load * * i32 %6 NEW_LINE %8 = load * i32 %7 NEW_LINE %9 = load i32 %8 NEW_LINE ret i32 %9 NEW_LINE }
define * * i32 @func_34 ( * i32 %0 , i8 signext %1 , * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %9 = load * * i32 @g_84 NEW_LINE store * i32 null %9 NEW_LINE ret * * i32 getelementptr inbounds ( ARR 3 1 x * i32 @g_641 , i32 0 , i32 0 ) NEW_LINE }
define * i32 @func_9 ( i32 %0 , * i32 %1 , * i32 %2 , * i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i64 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE %11 = load * i32 getelementptr inbounds ( ARR 3 1 x * i32 @g_2309 , i64 0 , i64 0 ) NEW_LINE ret * i32 %11 NEW_LINE }
define i32 @func_37 ( * i64 %0 , * i64 %1 , i32 %2 , * i64 %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca i16 NEW_LINE store * i64 %0 %6 NEW_LINE store * i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i64 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store i16 1 %11 NEW_LINE %12 = load i16 %11 NEW_LINE %13 = zext i16 %12 to i32 NEW_LINE ret i32 %13 NEW_LINE }
define * i32 @func_21 ( i64 %0 , * i32 %1 , * i32 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE store i64 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %11 = load * * i32 @g_814 NEW_LINE %12 = load * i32 %11 NEW_LINE ret * i32 %12 NEW_LINE }
define * i16 @func_48 ( i64 %0 , * i16 %1 , * i16 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * * i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE store * * i32 @g_274 %7 NEW_LINE %8 = load volatile * * i32 @g_763 NEW_LINE %9 = load * i32 %8 NEW_LINE %10 = load * * i32 %7 NEW_LINE store * i32 %9 %10 NEW_LINE ret * i16 @g_25 NEW_LINE }
define zeroext i8 @func_33 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca * * i64 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i64 @g_25 %3 NEW_LINE store * * i64 %3 %4 NEW_LINE store i32 -2 %5 NEW_LINE %6 = load * * i64 %4 NEW_LINE %7 = load volatile * * * i64 @g_39 NEW_LINE store * * i64 %6 %7 NEW_LINE %8 = load i32 %5 NEW_LINE %9 = trunc i32 %8 to i8 NEW_LINE ret i8 %9 NEW_LINE }
define i64 @func_33 ( i32 %0 , i16 zeroext %1 , i16 signext %2 ) { NEW_LINE %4 = alloca STRUCT 1 i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE store i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE %8 = bitcast * STRUCT 1 i64 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_38 to * i8 ) , i64 8 , i1 false ) NEW_LINE %9 = getelementptr inbounds STRUCT 1 i64 %4 , i32 0 , i32 0 NEW_LINE %10 = load i64 %9 NEW_LINE ret i64 %10 NEW_LINE }
define i32 @func_48 ( * i8 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i16 NEW_LINE store * i8 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i16 0 %5 NEW_LINE %6 = load * * * i32 @g_1287 NEW_LINE %7 = load * * i32 %6 NEW_LINE %8 = load * i32 %7 NEW_LINE %9 = load * * * i32 @g_1287 NEW_LINE %10 = load * * i32 %9 NEW_LINE store * i32 %8 %10 NEW_LINE %11 = load i16 %5 NEW_LINE %12 = zext i16 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define signext i16 @func_38 ( i16 zeroext %0 , i16 zeroext %1 , * i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE store i16 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i64 0 %7 NEW_LINE %8 = load i64 %7 NEW_LINE %9 = load * i32 @g_1333 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = xor i64 %11 , %8 NEW_LINE %13 = trunc i64 %12 to i32 NEW_LINE store i32 %13 %9 NEW_LINE %14 = load i16 %5 NEW_LINE ret i16 %14 NEW_LINE }
define i64 @func_36 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 -1275281477 %5 NEW_LINE store i64 1 %6 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = load i64 %6 NEW_LINE %11 = and i64 %10 , %9 NEW_LINE store i64 %11 %6 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE ret i64 %13 NEW_LINE }
define i64 @func_24 ( i64 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i8 NEW_LINE store i64 %0 %3 NEW_LINE store i8 -47 %4 NEW_LINE %5 = load i8 %4 NEW_LINE %6 = zext i8 %5 to i32 NEW_LINE store i32 %6 @g_26 NEW_LINE %7 = bitcast * STRUCT 1 i64 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_28 to * i8 ) , i64 8 , i1 false ) NEW_LINE %8 = getelementptr inbounds STRUCT 1 i64 %2 , i32 0 , i32 0 NEW_LINE %9 = load i64 %8 NEW_LINE ret i64 %9 NEW_LINE }
define i32 @func_6 ( i16 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store i16 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_67 %5 NEW_LINE store * * i32 %5 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = load * * i32 %6 NEW_LINE store * i32 %7 %8 NEW_LINE %9 = load * * i32 %6 NEW_LINE %10 = load * i32 %9 NEW_LINE %11 = load i32 %10 NEW_LINE ret i32 %11 NEW_LINE }
define i32 @func_31 ( i16 signext %0 , * i32 %1 , i32 %2 , i16 zeroext %3 , i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %11 = load * i32 %7 NEW_LINE %12 = load volatile * * i32 @g_796 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i16 %9 NEW_LINE %14 = zext i16 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define zeroext i16 @func_100 ( i32 %0 , i32 %1 , i64 %2 , i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store volatile * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_17 , i64 0 , i64 1 ) @g_86 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define i32 @func_2 ( i8 signext %0 , i32 %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 746976498 %9 NEW_LINE %10 = load * * i32 @g_1001 NEW_LINE %11 = load * i32 %10 NEW_LINE %12 = load * * i32 @g_996 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i32 %9 NEW_LINE ret i32 %13 NEW_LINE }
define * i32 @func_60 ( i64 %0 , * STRUCT 3 ARR 3 7 x i8 i16 i8 byval ( STRUCT 3 ARR 3 7 x i8 i16 i8 ) %1 , * * i32 %2 , i16 signext %3 , * STRUCT 2 i16 i32 byval ( STRUCT 2 i16 i32 ) %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE store i64 %0 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * i32 @g_106 %9 NEW_LINE %10 = load * i32 %9 NEW_LINE ret * i32 %10 NEW_LINE }
define i32 @func_40 ( i32 %0 , i16 zeroext %1 , i64 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE store i32 0 @g_81 NEW_LINE %8 = load i64 getelementptr inbounds ( ARR 3 6 x ARR 3 10 x ARR 3 1 x i64 @g_248 , i64 0 , i64 2 , i64 2 , i64 0 ) NEW_LINE %9 = trunc i64 %8 to i32 NEW_LINE ret i32 %9 NEW_LINE }
define * i32 @func_76 ( i32 %0 , i16 signext %1 , i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE %8 = load i16 %5 NEW_LINE %9 = sext i16 %8 to i32 NEW_LINE %10 = load volatile * i32 @g_84 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = and i32 %11 , %9 NEW_LINE store i32 %12 %10 NEW_LINE %13 = load * i32 %7 NEW_LINE ret * i32 %13 NEW_LINE }
define signext i8 @func_27 ( i16 zeroext %0 , * i8 %1 , i8 zeroext %2 , * i8 %3 , * i8 %4 ) { NEW_LINE %6 = alloca STRUCT 1 * i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = getelementptr inbounds STRUCT 1 * i8 %6 , i32 0 , i32 0 NEW_LINE store * i8 %4 %11 NEW_LINE store i16 %0 %7 NEW_LINE store * i8 %1 %8 NEW_LINE store i8 %2 %9 NEW_LINE store * i8 %3 %10 NEW_LINE %12 = load * i8 %8 NEW_LINE %13 = load i8 %12 NEW_LINE ret i8 %13 NEW_LINE }
define * * * i32 @func_94 ( i32 %0 , * i32 %1 , i16 signext %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * * * i32 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * * * i32 @g_69 %11 NEW_LINE %12 = load * * * i32 %11 NEW_LINE ret * * * i32 %12 NEW_LINE }
define * i32 @func_47 ( i16 zeroext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i16 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i32 @g_36 %5 NEW_LINE store * i32 @g_36 @g_51 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = icmp ne * i32 @g_36 , %6 NEW_LINE %8 = zext i1 %7 to i32 NEW_LINE %9 = load * i32 %5 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = xor i32 %10 , %8 NEW_LINE store i32 %11 %9 NEW_LINE ret * i32 @g_11 NEW_LINE }
define signext i16 @func_44 ( * i8 %0 , i16 signext %1 , * i64 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * * i32 NEW_LINE store * i8 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store * i64 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * * i32 null %9 NEW_LINE %10 = load volatile * * i32 @g_1669 NEW_LINE store * i32 @g_300 %10 NEW_LINE %11 = load i16 @g_201 NEW_LINE ret i16 %11 NEW_LINE }
define i32 @func_4 ( i64 %0 , i32 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca STRUCT 1 i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = getelementptr inbounds STRUCT 1 i64 %4 , i32 0 , i32 0 NEW_LINE store i64 %0 %8 NEW_LINE store i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i64 1 %7 NEW_LINE %9 = load * * * i32 @g_2046 NEW_LINE %10 = load * * i32 %9 NEW_LINE store * i32 null %10 NEW_LINE %11 = load i64 %7 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define * i32 @func_59 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i8 -3 %3 NEW_LINE store * i32 null %4 NEW_LINE store * i32 @g_65 %5 NEW_LINE %6 = load i8 %3 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = load * i32 %5 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = and i32 %9 , %7 NEW_LINE store i32 %10 %8 NEW_LINE %11 = load * i32 %4 NEW_LINE ret * i32 %11 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i16 0 %1 NEW_LINE %2 = load i16 getelementptr inbounds ( ARR 3 8 x i16 @g_4 , i64 0 , i64 6 ) NEW_LINE %3 = load i16 %1 NEW_LINE %4 = zext i16 %3 to i32 NEW_LINE %5 = call signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext %2 , i32 %4 ) NEW_LINE %6 = sext i16 %5 to i32 NEW_LINE %7 = load i16 %1 NEW_LINE %8 = zext i16 %7 to i32 NEW_LINE %9 = xor i32 %6 , %8 NEW_LINE store i32 %9 @g_6 NEW_LINE %10 = load i32 @g_6 NEW_LINE %11 = trunc i32 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define * i64 @func_58 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i64 NEW_LINE store i32 %0 %2 NEW_LINE store * i32 @g_34 %3 NEW_LINE store * i64 @g_13 %4 NEW_LINE %5 = load volatile i64 getelementptr inbounds ( STRUCT 3 i64 i32 i8 @g_8 , i32 0 , i32 0 ) NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = xor i64 %8 , %5 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %6 NEW_LINE %11 = load * i64 %4 NEW_LINE ret * i64 %11 NEW_LINE }
define i32 @func_38 ( i16 zeroext %0 , i32 %1 , i32 %2 , i64 %3 , i8 signext %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca i8 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE store i32 %1 %12 NEW_LINE %13 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %2 %13 NEW_LINE store i16 %0 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store i8 -102 %11 NEW_LINE ret i32 -102 NEW_LINE }
define i32 @func_51 ( * i32 %0 , i8 signext %1 , i16 zeroext %2 , * i64 %3 , i64 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i64 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 -6 %11 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = add i32 %12 , 1 NEW_LINE store i32 %13 %11 NEW_LINE %14 = load i32 @g_100 NEW_LINE ret i32 %14 NEW_LINE }
define * i32 @func_66 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * * i32 NEW_LINE %6 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * * * i32 @g_70 %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_12 , i64 0 , i64 2 ) %6 NEW_LINE %7 = load * * i32 @g_70 NEW_LINE %8 = load * * * i32 %5 NEW_LINE store * * i32 %7 %8 NEW_LINE %9 = load * i32 %6 NEW_LINE ret * i32 %9 NEW_LINE }
define signext i8 @func_17 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * * * i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * * * i16 @g_1530 %3 NEW_LINE store i32 -978662316 %4 NEW_LINE store * i32 @g_1102 %5 NEW_LINE %6 = load * i32 %5 NEW_LINE store i32 1 %6 NEW_LINE %7 = load * i8 @g_781 NEW_LINE %8 = load volatile i8 %7 NEW_LINE ret i8 %8 NEW_LINE }
define * i32 @func_109 ( * i8 %0 , * i32 %1 , i32 %2 , i16 zeroext %3 , * i8 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca i16 NEW_LINE store * i8 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store i16 1 %11 NEW_LINE %12 = load i16 %11 NEW_LINE %13 = add i16 %12 , 1 NEW_LINE store i16 %13 %11 NEW_LINE ret * i32 @g_127 NEW_LINE }
define i32 @func_65 ( * i64 %0 , * i64 %1 ) { NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca * i32 NEW_LINE store * i64 %0 %3 NEW_LINE store * i64 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 5 ) %5 NEW_LINE %6 = load * i32 %5 NEW_LINE store * i32 %6 %5 NEW_LINE %7 = load volatile i16 getelementptr inbounds ( STRUCT 4 i64 i32 i16 %struct.S3 @g_76 , i32 0 , i32 3 , i32 2 , i32 3 ) NEW_LINE %8 = zext i16 %7 to i32 NEW_LINE ret i32 %8 NEW_LINE }
define * i32 @func_2 ( * i32 %0 , i8 zeroext %1 , i8 zeroext %2 , i64 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca STRUCT 1 i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i16 NEW_LINE %11 = getelementptr inbounds STRUCT 1 i64 %6 , i32 0 , i32 0 NEW_LINE store i64 %3 %11 NEW_LINE store * i32 %0 %7 NEW_LINE store i8 %1 %8 NEW_LINE store i8 %2 %9 NEW_LINE store i16 %4 %10 NEW_LINE %12 = load * i32 %7 NEW_LINE %13 = load * * i32 @g_79 NEW_LINE store * i32 %12 %13 NEW_LINE ret * i32 @g_729 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE store i32 23 @g_2 NEW_LINE br label %1 NEW_LINE 1: NEW_LINE %2 = load i32 @g_2 NEW_LINE %3 = icmp sle i32 %2 , -5 NEW_LINE br i1 %3 , label %4 , label %10 NEW_LINE 4: NEW_LINE %5 = load i32 @g_5 NEW_LINE %6 = add i32 %5 , 1 NEW_LINE store i32 %6 @g_5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @g_2 NEW_LINE %9 = call i32 @safe_sub_func_int32_t_s_s ( i32 %8 , i32 2 ) NEW_LINE store i32 %9 @g_2 NEW_LINE br label %1 NEW_LINE 10: NEW_LINE %11 = load i32 @g_2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE ret i64 %12 NEW_LINE }
define * i32 @func_54 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_5 , i64 0 , i64 0 ) %5 NEW_LINE store * * i32 %5 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = load * * i32 %6 NEW_LINE store * i32 %7 %8 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_5 , i64 0 , i64 1 ) NEW_LINE }
define i64 @func_4 ( * i8 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 8 x ARR 3 3 x i32 @g_99 , i64 0 , i64 0 , i64 4 , i64 1 ) %5 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = load * * i32 @g_875 NEW_LINE store * i32 %6 %7 NEW_LINE %8 = load i16 %4 NEW_LINE %9 = zext i16 %8 to i64 NEW_LINE ret i64 %9 NEW_LINE }
define * i8 @func_25 ( * i8 %0 , * i8 %1 , * i8 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %3 %9 NEW_LINE store * i8 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE %10 = load * i32 @g_145 NEW_LINE store i32 -450479785 %10 NEW_LINE %11 = load * * i8 @g_153 NEW_LINE %12 = load * i8 %11 NEW_LINE ret * i8 %12 NEW_LINE }
define i32 @func_90 ( * * i16 %0 , i16 %1 , i8 zeroext %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i16 NEW_LINE %7 = alloca * * i16 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = getelementptr inbounds STRUCT 1 i16 %6 , i32 0 , i32 0 NEW_LINE store i16 %1 %11 NEW_LINE store * * i16 %0 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i16 %6 , i32 0 , i32 0 NEW_LINE %13 = load i16 %12 NEW_LINE %14 = sext i16 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define i32 @func_41 ( i32 %0 , i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca STRUCT 2 i8 ARR 3 3 x i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE %8 = bitcast * STRUCT 2 i8 ARR 3 3 x i8 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_45 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE %9 = bitcast * STRUCT 2 i8 ARR 3 3 x i8 %4 to * i32 NEW_LINE %10 = load i32 %9 NEW_LINE ret i32 %10 NEW_LINE }
define i32 @func_79 ( i16 signext %0 , * i32 %1 , * i32 %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * * i32 NEW_LINE store i16 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * * i32 @g_99 %9 NEW_LINE %10 = load * * i32 %9 NEW_LINE store * i32 @g_29 %10 NEW_LINE %11 = load * * i32 %9 NEW_LINE %12 = load * i32 %11 NEW_LINE %13 = load i32 %12 NEW_LINE ret i32 %13 NEW_LINE }
define zeroext i8 @func_35 ( * i32 %0 , i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE %7 = load volatile i32 bitcast ( * i24 getelementptr inbounds ( STRUCT 4 i24 i16 i24 i24 bitcast ( * STRUCT 15 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_54 to * STRUCT 4 i24 i16 i24 i24 ) , i32 0 , i32 3 ) to * i32 ) NEW_LINE %8 = shl i32 %7 , 10 NEW_LINE %9 = ashr i32 %8 , 10 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE ret i8 %10 NEW_LINE }
define * i32 @func_3 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * * * i32 NEW_LINE %6 = alloca * * * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * * * i32 @g_103 %5 NEW_LINE store * * * * i32 %5 %6 NEW_LINE %7 = load * * * * i32 %6 NEW_LINE store * * * i32 null %7 NEW_LINE %8 = load volatile * * i32 @g_743 NEW_LINE %9 = load * i32 %8 NEW_LINE ret * i32 %9 NEW_LINE }
define i32 @func_36 ( i32 %0 , * i8 %1 , i64 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i32 NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %0 %8 NEW_LINE store * i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE %9 = bitcast * STRUCT 1 i32 %4 to * i8 NEW_LINE %10 = bitcast * STRUCT 1 i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 %10 , i64 4 , i1 false ) NEW_LINE %11 = getelementptr inbounds STRUCT 1 i32 %4 , i32 0 , i32 0 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define * * STRUCT 1 ARR 3 6 x i8 @func_45 ( i32 %0 , i16 zeroext %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * * STRUCT 1 ARR 3 6 x i8 NEW_LINE store i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * * STRUCT 1 ARR 3 6 x i8 null %7 NEW_LINE %8 = load volatile * * i32 @g_1091 NEW_LINE store * i32 %4 %8 NEW_LINE %9 = load * * STRUCT 1 ARR 3 6 x i8 %7 NEW_LINE ret * * STRUCT 1 ARR 3 6 x i8 %9 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i64 0 %1 NEW_LINE store * i32 null %2 NEW_LINE store * i32 @g_5 %3 NEW_LINE store i32 6 %4 NEW_LINE %5 = load i64 %1 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = or i64 %8 , %5 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %6 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define zeroext i8 @func_12 ( i32 %0 , i32 %1 , * STRUCT 6 i8 i8 i32 i16 i8 i16 byval ( STRUCT 6 i8 i8 i32 i16 i8 i16 ) %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load * i32 @g_772 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i32 @g_1223 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = xor i32 %9 , %7 NEW_LINE store i32 %10 %8 NEW_LINE %11 = getelementptr inbounds STRUCT 6 i8 i8 i32 i16 i8 i16 %2 , i32 0 , i32 2 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE ret i8 %13 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE store i32 7 %1 NEW_LINE %2 = load i32 %1 NEW_LINE %3 = zext i32 %2 to i64 NEW_LINE %4 = icmp ne i64 6935445965185066580 , %3 NEW_LINE %5 = zext i1 %4 to i32 NEW_LINE %6 = call * i32 @func_2 ( i32 306781737 ) NEW_LINE %7 = load * * * * i32 @g_904 NEW_LINE %8 = load * * * i32 %7 NEW_LINE %9 = load * * i32 %8 NEW_LINE store * i32 %6 %9 NEW_LINE %10 = load * i64 @g_1114 NEW_LINE %11 = load volatile i64 %10 NEW_LINE ret i64 %11 NEW_LINE }
define zeroext i16 @func_29 ( * i8 %0 , * i8 %1 , i64 %2 , * i8 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i8 NEW_LINE store * i8 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE %9 = load i64 %7 NEW_LINE %10 = load * i32 @g_1002 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = and i64 %12 , %9 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE store i32 %14 %10 NEW_LINE %15 = load i64 %7 NEW_LINE %16 = trunc i64 %15 to i16 NEW_LINE ret i16 %16 NEW_LINE }
define signext i16 @func_24 ( i32 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 5 x ARR 3 5 x i32 @g_86 , i64 0 , i64 9 , i64 0 , i64 3 ) %5 NEW_LINE %6 = load * i32 %5 NEW_LINE %7 = load * * * * i32 @g_1162 NEW_LINE %8 = load volatile * * * i32 %7 NEW_LINE %9 = load * * i32 %8 NEW_LINE store volatile * i32 %6 %9 NEW_LINE %10 = load i16 %4 NEW_LINE ret i16 %10 NEW_LINE }
define i32 @func_55 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i8 NEW_LINE store * i32 %0 %2 NEW_LINE store i8 0 %3 NEW_LINE %4 = load i32 getelementptr inbounds ( ARR 3 8 x i32 @g_3 , i64 0 , i64 2 ) NEW_LINE %5 = trunc i32 %4 to i16 NEW_LINE %6 = load i32 @g_54 NEW_LINE %7 = trunc i32 %6 to i16 NEW_LINE %8 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %5 , i16 signext %7 ) NEW_LINE %9 = sext i16 %8 to i32 NEW_LINE %10 = load volatile * i32 @g_60 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i8 %3 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define * i32 @func_22 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca ARR 3 9 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE %5 = bitcast * ARR 3 9 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_22.l_24 to * i8 ) , i64 72 , i1 false ) NEW_LINE %6 = getelementptr inbounds ARR 3 9 x * i32 %3 , i64 0 , i64 4 NEW_LINE %7 = load * i32 %6 NEW_LINE ret * i32 %7 NEW_LINE }
define i32 @func_52 ( i64 %0 , i8 signext %1 , * * i32 %2 , i16 zeroext %3 , i64 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store * * i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 -1311584615 %11 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = add i32 %12 , 1 NEW_LINE store i32 %13 %11 NEW_LINE %14 = load i16 @g_154 NEW_LINE %15 = zext i16 %14 to i32 NEW_LINE ret i32 %15 NEW_LINE }
define i32 @func_39 ( i16 zeroext %0 , * i32 %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i8 NEW_LINE store i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE %10 = bitcast * STRUCT 1 i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_1390 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE %11 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define signext i8 @func_92 ( * i16 %0 , i32 %1 , * i16 %2 , i8 zeroext %3 , i8 signext %4 ) { NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i8 NEW_LINE store * i16 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE %11 = call zeroext i8 @safe_lshift_func_uint8_t_u_s ( i8 zeroext 110 , i32 0 ) NEW_LINE %12 = zext i8 %11 to i32 NEW_LINE %13 = load volatile * i32 @g_108 NEW_LINE store i32 %12 %13 NEW_LINE %14 = load i8 %10 NEW_LINE ret i8 %14 NEW_LINE }
define * * i32 @func_28 ( i32 %0 , i8 zeroext %1 , i64 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE %8 = load * * i32 @g_2266 NEW_LINE %9 = load * i32 %8 NEW_LINE %10 = load * * i32 @g_2266 NEW_LINE store * i32 %9 %10 NEW_LINE %11 = load * i32 %7 NEW_LINE %12 = load volatile * * i32 @g_3086 NEW_LINE store * i32 %11 %12 NEW_LINE ret * * i32 @g_1403 NEW_LINE }
define i16 @func_17 ( i16 signext %0 , i8 zeroext %1 , i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i16 NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %2 %8 NEW_LINE store i16 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE %9 = bitcast * STRUCT 1 i16 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * STRUCT 1 i16 @__const.func_17.l_1848 to * i8 ) , i64 2 , i1 false ) NEW_LINE %10 = getelementptr inbounds STRUCT 1 i16 %4 , i32 0 , i32 0 NEW_LINE %11 = load i16 %10 NEW_LINE ret i16 %11 NEW_LINE }
define i32 @func_53 ( i32 %0 , i64 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca STRUCT 2 i32 i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = bitcast * STRUCT 2 i32 i16 %5 to * i64 NEW_LINE store i64 %1 %10 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i8 -110 %9 NEW_LINE %11 = load i8 %9 NEW_LINE %12 = add i8 %11 , -1 NEW_LINE store i8 %12 %9 NEW_LINE %13 = getelementptr inbounds STRUCT 2 i32 i16 %5 , i32 0 , i32 0 NEW_LINE %14 = load i32 %13 NEW_LINE ret i32 %14 NEW_LINE }
define i32 @func_38 ( * i32 %0 , i8 signext %1 , * i8 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i8 NEW_LINE store * i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE %8 = bitcast * STRUCT 1 i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * STRUCT 1 i32 @__const.func_38.l_742 to * i8 ) , i64 4 , i1 false ) NEW_LINE store * i32 @g_191 @g_741 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i32 %4 , i32 0 , i32 0 NEW_LINE %10 = load i32 %9 NEW_LINE ret i32 %10 NEW_LINE }
define signext i16 @func_18 ( i8 signext %0 , * STRUCT 1 i32 %1 , * * STRUCT 1 i32 %2 , i32 %3 , * * STRUCT 1 i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * STRUCT 1 i32 NEW_LINE %8 = alloca * * STRUCT 1 i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * * STRUCT 1 i32 NEW_LINE store i8 %0 %6 NEW_LINE store * STRUCT 1 i32 %1 %7 NEW_LINE store * * STRUCT 1 i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * * STRUCT 1 i32 %4 %10 NEW_LINE %11 = load volatile i8 bitcast ( * STRUCT 1 i32 @g_156 to * i8 ) NEW_LINE %12 = sext i8 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define * * i32 @func_71 ( i64 %0 , i32 %1 , * i8 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_4 %9 NEW_LINE store * * i32 %9 %10 NEW_LINE %11 = load * * i32 getelementptr inbounds ( ARR 3 10 x * * i32 @g_84 , i64 0 , i64 6 ) NEW_LINE ret * * i32 %11 NEW_LINE }
define * i32 @func_33 ( i32 %0 , * i32 %1 , i32 %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 null %9 NEW_LINE %10 = load * i32 %6 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = or i64 %12 , -10 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE store i32 %14 %10 NEW_LINE %15 = load * i32 %9 NEW_LINE ret * i32 %15 NEW_LINE }
define i64 @func_36 ( * i16 %0 , * i16 %1 , * i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i16 %0 %5 NEW_LINE store * i16 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i32 -1 %9 NEW_LINE store i32 -1 %10 NEW_LINE %11 = load i32 %9 NEW_LINE %12 = load volatile * i32 @g_43 NEW_LINE store i32 %11 %12 NEW_LINE %13 = load i32 %10 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE ret i64 %14 NEW_LINE }
define * i32 @func_45 ( i64 %0 , * i32 %1 , i64 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %9 = load i64 %7 NEW_LINE %10 = load i64 %7 NEW_LINE %11 = or i64 %9 , %10 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE %13 = load * * * i32 @g_1345 NEW_LINE %14 = load * * i32 %13 NEW_LINE %15 = load * i32 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load * i32 %8 NEW_LINE ret * i32 %16 NEW_LINE }
define i32 @func_47 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 @g_27 %3 NEW_LINE store * * i32 null %4 NEW_LINE store * * i32 null %5 NEW_LINE store * * i32 %3 %6 NEW_LINE %7 = load * i32 %3 NEW_LINE %8 = load * * i32 %6 NEW_LINE store * i32 %7 %8 NEW_LINE %9 = load i64 @g_795 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE ret i32 %10 NEW_LINE }
define zeroext i16 @func_20 ( i16 zeroext %0 , i64 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 6 x i8 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = bitcast * ARR 3 6 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 getelementptr inbounds ( ARR 3 6 x i8 @__const.func_20.l_26 , i32 0 , i32 0 ) , i64 6 , i1 false ) NEW_LINE %8 = getelementptr inbounds ARR 3 6 x i8 %5 , i64 0 , i64 4 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i16 NEW_LINE ret i16 %10 NEW_LINE }
define signext i8 @func_26 ( i32 %0 , i64 %1 , i8 signext %2 , i64 %3 , * i8 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store * i32 @g_34 %11 NEW_LINE %12 = load i32 @g_8 NEW_LINE %13 = load * i32 %11 NEW_LINE store i32 %12 %13 NEW_LINE %14 = load * i32 %11 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * * i32 NEW_LINE store * i32 @g_3 %2 NEW_LINE store * * i32 %2 %3 NEW_LINE %4 = bitcast * STRUCT 1 i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %4 , * i8 bitcast ( * STRUCT 1 i32 @__const.func_1.l_5 to * i8 ) , i64 4 , i1 false ) NEW_LINE %5 = load * i32 %2 NEW_LINE %6 = load * * i32 %3 NEW_LINE store * i32 %5 %6 NEW_LINE %7 = getelementptr inbounds STRUCT 1 i32 %1 , i32 0 , i32 0 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define * i8 @func_54 ( i64 %0 , * i8 %1 , i8 zeroext %2 , i16 zeroext %3 , * i8 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca * i8 NEW_LINE store i64 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store i8 -1 %11 NEW_LINE store * i8 @g_135 %12 NEW_LINE %13 = load i8 %11 NEW_LINE %14 = add i8 %13 , -1 NEW_LINE store i8 %14 %11 NEW_LINE %15 = load * i8 %12 NEW_LINE ret * i8 %15 NEW_LINE }
define * i32 @func_53 ( i32 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * STRUCT 1 ARR 3 14 x i8 NEW_LINE %6 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * STRUCT 1 ARR 3 14 x i8 bitcast ( * STRUCT 14 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_203 to * STRUCT 1 ARR 3 14 x i8 ) %5 NEW_LINE store * i32 null %6 NEW_LINE %7 = load * STRUCT 1 ARR 3 14 x i8 %5 NEW_LINE store * STRUCT 1 ARR 3 14 x i8 %7 %5 NEW_LINE %8 = load * i32 %6 NEW_LINE ret * i32 %8 NEW_LINE }
define i32 @func_23 ( i32 %0 , i32 %1 , * i16 %2 , * i16 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i16 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store * i16 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i16 1 %11 NEW_LINE %12 = load i32 %10 NEW_LINE %13 = load i16 %11 NEW_LINE %14 = zext i16 %13 to i32 NEW_LINE %15 = or i32 %14 , %12 NEW_LINE %16 = trunc i32 %15 to i16 NEW_LINE store i16 %16 %11 NEW_LINE %17 = load i32 %6 NEW_LINE ret i32 %17 NEW_LINE }
define * i32 @func_57 ( * i32 %0 , i64 %1 , i64 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %11 = load volatile * * i8 @g_845 NEW_LINE %12 = icmp ne * * i8 %11 , null NEW_LINE %13 = zext i1 %12 to i32 NEW_LINE %14 = load * i32 %10 NEW_LINE store * i32 %14 %6 NEW_LINE %15 = load * i32 %6 NEW_LINE ret * i32 %15 NEW_LINE }
define signext i16 @func_32 ( * i32 %0 , i64 %1 , i16 signext %2 , * i32 %3 , i16 signext %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i16 NEW_LINE store * i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE %11 = load * i32 %6 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = or i64 %13 , 2485561418 NEW_LINE %15 = trunc i64 %14 to i32 NEW_LINE store i32 %15 %11 NEW_LINE %16 = load i64 %7 NEW_LINE %17 = trunc i64 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define * i32 @func_18 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 1 i64 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %2 NEW_LINE store * STRUCT 1 i64 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_168 to * STRUCT 1 i64 ) %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 10 x ARR 3 6 x i32 @g_529 , i64 0 , i64 0 , i64 9 , i64 4 ) %4 NEW_LINE %5 = load * STRUCT 1 i64 %3 NEW_LINE %6 = load volatile * * STRUCT 1 i64 @g_2725 NEW_LINE store * STRUCT 1 i64 %5 %6 NEW_LINE %7 = load * i32 %4 NEW_LINE ret * i32 %7 NEW_LINE }
define zeroext i8 @func_46 ( i16 signext %0 , i16 signext %1 , i16 signext %2 , i64 %3 , i16 signext %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * i32 NEW_LINE store i16 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE store * i32 @g_91 %11 NEW_LINE %12 = load * i32 %11 NEW_LINE %13 = load volatile * * i32 @g_1200 NEW_LINE store * i32 %12 %13 NEW_LINE %14 = load * i32 %11 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define i64 @func_93 ( i32 %0 ) { NEW_LINE %2 = alloca STRUCT 2 i32 i16 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * * * i32 @g_96 %4 NEW_LINE %5 = load * * i32 @g_96 NEW_LINE %6 = load * * * i32 %4 NEW_LINE store * * i32 %5 %6 NEW_LINE %7 = bitcast * STRUCT 2 i32 i16 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 getelementptr inbounds ( STRUCT 7 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 @g_100 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE %8 = bitcast * STRUCT 2 i32 i16 %2 to * i64 NEW_LINE %9 = load i64 %8 NEW_LINE ret i64 %9 NEW_LINE }
define zeroext i16 @func_14 ( i64 %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE store i64 %0 %3 NEW_LINE store i16 1 %4 NEW_LINE store i32 1 @g_180 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 @g_180 NEW_LINE %7 = icmp sge i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %13 NEW_LINE 8: NEW_LINE %9 = load i16 %4 NEW_LINE store i16 %9 %2 NEW_LINE br label %15 NEW_LINE 10: NEW_LINE %11 = load i32 @g_180 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE store i32 %12 @g_180 NEW_LINE br label %5 NEW_LINE 13: NEW_LINE %14 = load i16 %4 NEW_LINE store i16 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i16 %2 NEW_LINE ret i16 %16 NEW_LINE }
define * i32 @func_13 ( * i32 %0 , i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store i8 1 %7 NEW_LINE store * i32 @g_3 %8 NEW_LINE %9 = load i8 %7 NEW_LINE %10 = zext i8 %9 to i32 NEW_LINE %11 = load * * * i32 @g_313 NEW_LINE %12 = load * * i32 %11 NEW_LINE %13 = load * i32 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = xor i32 %14 , %10 NEW_LINE store i32 %15 %13 NEW_LINE %16 = load * i32 %8 NEW_LINE ret * i32 %16 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca ARR 3 9 x * i32 NEW_LINE %3 = alloca i32 NEW_LINE store * i32 null %1 NEW_LINE %4 = bitcast * ARR 3 9 x * i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %4 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_1.l_4 to * i8 ) , i64 72 , i1 false ) NEW_LINE %5 = load i64 @g_6 NEW_LINE %6 = add i64 %5 , -1 NEW_LINE store i64 %6 @g_6 NEW_LINE %7 = load i32 @g_5 NEW_LINE %8 = trunc i32 %7 to i8 NEW_LINE ret i8 %8 NEW_LINE }
define signext i16 @func_42 ( i8 signext %0 , i8 zeroext %1 , * i16 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE store i8 -4 %7 NEW_LINE store i32 343293883 %8 NEW_LINE %9 = load i8 %7 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = load i32 %8 NEW_LINE %12 = or i32 %11 , %10 NEW_LINE store i32 %12 %8 NEW_LINE %13 = load i64 getelementptr inbounds ( ARR 3 3 x i64 @g_92 , i64 0 , i64 0 ) NEW_LINE %14 = trunc i64 %13 to i16 NEW_LINE ret i16 %14 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 8 x * i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = bitcast * ARR 3 8 x * i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %3 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_1.l_2 to * i8 ) , i64 64 , i1 false ) NEW_LINE %4 = getelementptr inbounds ARR 3 8 x * i32 %1 , i64 0 , i64 2 NEW_LINE %5 = load * i32 %4 NEW_LINE %6 = load volatile * * i32 @g_4 NEW_LINE store * i32 %5 %6 NEW_LINE %7 = load i32 @g_3 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE ret i64 %8 NEW_LINE }
define i32 @func_2 ( i8 signext %0 , i64 %1 , i32 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i16 i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = bitcast * STRUCT 2 i16 i32 %6 to * i64 NEW_LINE store i64 %1 %11 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %4 %12 NEW_LINE store i8 %0 %8 NEW_LINE store i32 %2 %9 NEW_LINE store i32 %3 %10 NEW_LINE %13 = load i32 %9 NEW_LINE %14 = load * i32 @g_1348 NEW_LINE %15 = load volatile i32 %14 NEW_LINE %16 = and i32 %15 , %13 NEW_LINE store volatile i32 %16 %14 NEW_LINE %17 = load i32 %9 NEW_LINE ret i32 %17 NEW_LINE }
define i32 @func_32 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i32 @g_11 %5 NEW_LINE store * * i32 %5 %6 NEW_LINE %7 = load * * i32 %6 NEW_LINE store * i32 null %7 NEW_LINE %8 = load i152 bitcast ( * STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i64 @g_4 to * i152 ) NEW_LINE %9 = shl i152 %8 , 128 NEW_LINE %10 = ashr i152 %9 , 128 NEW_LINE %11 = trunc i152 %10 to i32 NEW_LINE ret i32 %11 NEW_LINE }
define * * i32 @func_61 ( i16 zeroext %0 , * * i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * %struct.S2 NEW_LINE %8 = alloca * * i32 NEW_LINE store i16 %0 %4 NEW_LINE store * * i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store * %struct.S2 bitcast ( * STRUCT 11 i32 i64 i8 i16 i8 i64 i8 i32 i16 i8 i8 @g_161 to * %struct.S2 ) %7 NEW_LINE store * * i32 @g_159 %8 NEW_LINE %9 = load * %struct.S2 %7 NEW_LINE %10 = load volatile * * %struct.S2 @g_162 NEW_LINE store * %struct.S2 %9 %10 NEW_LINE %11 = load * * i32 %8 NEW_LINE ret * * i32 %11 NEW_LINE }
define i32 @func_60 ( i8 signext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store i8 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_33 , i64 0 , i64 0 ) %5 NEW_LINE store * * i32 %5 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = load * * i32 %6 NEW_LINE store * i32 %7 %8 NEW_LINE %9 = load * i32 %4 NEW_LINE %10 = load * * i32 %6 NEW_LINE store * i32 %9 %10 NEW_LINE %11 = load i8 %3 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define i32 @func_39 ( i16 zeroext %0 , i32 %1 , i8 zeroext %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i16 %0 %7 NEW_LINE store i32 %1 %8 NEW_LINE store i8 %2 %9 NEW_LINE store i32 %3 %10 NEW_LINE store i32 %4 %11 NEW_LINE %12 = load * STRUCT 1 i32 @g_245 NEW_LINE %13 = bitcast * STRUCT 1 i32 %6 to * i8 NEW_LINE %14 = bitcast * STRUCT 1 i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 %14 , i64 4 , i1 false ) NEW_LINE %15 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE ret i32 %16 NEW_LINE }
define i32 @func_78 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca STRUCT 1 i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE %6 = bitcast * STRUCT 1 i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * STRUCT 1 i32 getelementptr inbounds ( ARR 3 8 x ARR 3 3 x STRUCT 1 i32 bitcast ( * ARR 3 8 x ARR 3 3 x STRUCT 2 i8 ARR 3 3 x i8 @g_62 to * ARR 3 8 x ARR 3 3 x STRUCT 1 i32 ) , i64 0 , i64 6 , i64 2 ) to * i8 ) , i64 4 , i1 false ) NEW_LINE %7 = getelementptr inbounds STRUCT 1 i32 %3 , i32 0 , i32 0 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define i64 @func_10 ( i64 %0 , i32 %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i64 NEW_LINE %6 = alloca STRUCT 1 i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = getelementptr inbounds STRUCT 1 i64 %6 , i32 0 , i32 0 NEW_LINE store i64 %0 %10 NEW_LINE store i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE %11 = bitcast * STRUCT 1 i64 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @__const.func_10.l_1437 to * i8 ) , i64 8 , i1 false ) NEW_LINE %12 = getelementptr inbounds STRUCT 1 i64 %5 , i32 0 , i32 0 NEW_LINE %13 = load i64 %12 NEW_LINE ret i64 %13 NEW_LINE }
define zeroext i8 @func_48 ( * i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i8 12 %7 NEW_LINE %8 = load i8 %7 NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = call * i32 @func_25 ( i32 %9 ) NEW_LINE %11 = call i32 @func_55 ( * i32 %10 ) NEW_LINE %12 = load volatile * i32 @g_63 NEW_LINE store i32 %11 %12 NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 8 x i32 @g_3 , i64 0 , i64 6 ) NEW_LINE %14 = trunc i32 %13 to i8 NEW_LINE ret i8 %14 NEW_LINE }
define signext i16 @func_18 ( * i32 %0 , i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i8 119 %7 NEW_LINE %8 = load * i8 @g_1478 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = call * i32 @func_22 ( i8 signext %9 ) NEW_LINE store * i32 %10 %6 NEW_LINE %11 = load * * * i32 @g_86 NEW_LINE %12 = load * * i32 %11 NEW_LINE store * i32 %5 %12 NEW_LINE store * i32 %5 %4 NEW_LINE %13 = load i8 %7 NEW_LINE %14 = sext i8 %13 to i16 NEW_LINE ret i16 %14 NEW_LINE }
define * * i32 @func_23 ( i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i32 @g_28 %5 NEW_LINE store * * i32 null %6 NEW_LINE %7 = load * i32 %5 NEW_LINE store i32 -5 %7 NEW_LINE %8 = load volatile * * i32 @g_30 NEW_LINE store * i32 %3 %8 NEW_LINE %9 = load i32 @g_17 NEW_LINE %10 = load * i32 @g_31 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load * * i32 %6 NEW_LINE ret * * i32 %11 NEW_LINE }
define signext i16 @func_4 ( i64 %0 , i16 zeroext %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca STRUCT 1 * i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = getelementptr inbounds STRUCT 1 * i8 %5 , i32 0 , i32 0 NEW_LINE store * i8 %3 %10 NEW_LINE store i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store i64 8934561991250884897 %9 NEW_LINE %11 = load i16 %7 NEW_LINE %12 = zext i16 %11 to i64 NEW_LINE %13 = load i64 %9 NEW_LINE %14 = and i64 %13 , %12 NEW_LINE store i64 %14 %9 NEW_LINE %15 = load i64 %9 NEW_LINE %16 = trunc i64 %15 to i16 NEW_LINE ret i16 %16 NEW_LINE }
define * i32 @func_2 ( * i32 %0 , i16 signext %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 8 x ARR 3 3 x * i32 @g_9 , i64 0 , i64 5 , i64 7 , i64 1 ) %7 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load * * i32 %7 NEW_LINE store * i32 %8 %9 NEW_LINE %10 = load volatile * * i32 @g_1461 NEW_LINE %11 = load * i32 %10 NEW_LINE ret * i32 %11 NEW_LINE }
define * i32 @func_64 ( * i32 %0 , i64 %1 , * i32 %2 , * * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca i8 NEW_LINE store * i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * * i32 %3 %8 NEW_LINE store i8 102 %9 NEW_LINE %10 = load i8 %9 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = load * i32 @g_291 NEW_LINE store i32 %11 %12 NEW_LINE %13 = load * i32 @g_30 NEW_LINE store i32 %11 %13 NEW_LINE %14 = load * i32 @g_30 NEW_LINE store i32 1 %14 NEW_LINE ret * i32 @g_99 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE %2 = alloca i64 NEW_LINE store i64 -3 %2 NEW_LINE store i32 0 @g_2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @g_2 NEW_LINE %5 = icmp sge i32 %4 , -15 NEW_LINE br i1 %5 , label %6 , label %12 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = trunc i64 %7 to i8 NEW_LINE store i8 %8 %1 NEW_LINE br label %15 NEW_LINE 9: NEW_LINE %10 = load i32 @g_2 NEW_LINE %11 = add nsw i32 %10 , -1 NEW_LINE store i32 %11 @g_2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load i32 @g_2 NEW_LINE %14 = trunc i32 %13 to i8 NEW_LINE store i8 %14 %1 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i8 %1 NEW_LINE ret i8 %16 NEW_LINE }
define i32 @func_56 ( * i32 %0 , * i32 %1 , i32 %2 , i16 signext %3 , i64 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca i64 NEW_LINE store * i32 %0 %7 NEW_LINE store * i32 %1 %8 NEW_LINE store i32 %2 %9 NEW_LINE store i16 %3 %10 NEW_LINE store i64 %4 %11 NEW_LINE %12 = bitcast * STRUCT 1 i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * STRUCT 1 i32 @__const.func_56.l_236 to * i8 ) , i64 4 , i1 false ) NEW_LINE %13 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE %14 = load i32 %13 NEW_LINE ret i32 %14 NEW_LINE }
define void @func_43 ( * STRUCT 9 i16 i32 i32 i8 i64 i32 i64 i16 i32 noalias sret %0 , i8 signext %1 , i16 signext %2 , i64 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE store i8 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i64 %3 %7 NEW_LINE store * i32 @g_85 %8 NEW_LINE %9 = load * i32 %8 NEW_LINE %10 = load * * i32 @g_79 NEW_LINE store * i32 %9 %10 NEW_LINE %11 = bitcast * STRUCT 9 i16 i32 i32 i8 i64 i32 i64 i16 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * STRUCT 12 i16 i32 i8 i8 i8 i8 i8 i64 i32 i64 i16 i32 @g_473 to * i8 ) , i64 37 , i1 false ) NEW_LINE ret void NEW_LINE }
define * i16 @func_61 ( * i32 %0 , * * i16 %1 , * * i16 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i16 NEW_LINE %7 = alloca * * i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * * i16 %1 %6 NEW_LINE store * * i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i16 0 %9 NEW_LINE store * i32 @g_70 %10 NEW_LINE %11 = load i16 %9 NEW_LINE %12 = zext i16 %11 to i32 NEW_LINE %13 = load * i32 %10 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = xor i32 %14 , %12 NEW_LINE store i32 %15 %13 NEW_LINE ret * i16 @g_42 NEW_LINE }
define zeroext i8 @func_36 ( * i8 %0 , i32 %1 , i8 zeroext %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i32 NEW_LINE store * i8 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i64 -3537175155061933662 %11 NEW_LINE store * i32 @g_4 %12 NEW_LINE %13 = load i64 %11 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE %15 = load * i32 %12 NEW_LINE store i32 %14 %15 NEW_LINE %16 = load i8 @g_28 NEW_LINE ret i8 %16 NEW_LINE }
define zeroext i8 @func_2 ( i64 %0 , * i8 %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca i64 NEW_LINE store i64 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 @g_106 %9 NEW_LINE store * * i32 null %10 NEW_LINE store i64 41401373771393564 %11 NEW_LINE %12 = load * i32 %9 NEW_LINE store * i32 %12 %9 NEW_LINE %13 = load i64 %11 NEW_LINE %14 = trunc i64 %13 to i8 NEW_LINE ret i8 %14 NEW_LINE }
define * i32 @func_6 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * STRUCT 1 i64 NEW_LINE %4 = alloca * * STRUCT 1 i64 NEW_LINE %5 = alloca * i32 NEW_LINE store i64 %0 %2 NEW_LINE store * STRUCT 1 i64 bitcast ( * STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @g_94 to * STRUCT 1 i64 ) %3 NEW_LINE store * * STRUCT 1 i64 getelementptr inbounds ( ARR 3 1 x * STRUCT 1 i64 @g_501 , i64 0 , i64 0 ) %4 NEW_LINE store * i32 null %5 NEW_LINE %6 = load * STRUCT 1 i64 %3 NEW_LINE %7 = load * * STRUCT 1 i64 %4 NEW_LINE store * STRUCT 1 i64 %6 %7 NEW_LINE %8 = load * i32 %5 NEW_LINE ret * i32 %8 NEW_LINE }
define * i8 @func_76 ( i16 %0 , i64 %1 , i16 signext %2 , * i8 %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = getelementptr inbounds STRUCT 1 i16 %6 , i32 0 , i32 0 NEW_LINE store i16 %0 %13 NEW_LINE store i64 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * i32 @g_7 %11 NEW_LINE store * * i32 @g_89 %12 NEW_LINE %14 = load * * i32 %12 NEW_LINE store * i32 @g_7 %14 NEW_LINE ret * i8 @g_49 NEW_LINE }
define zeroext i16 @func_75 ( * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %0 , * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %1 , i32 %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 NEW_LINE %7 = alloca * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE store * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %0 %6 NEW_LINE store * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %11 = load i32 %8 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE ret i16 %12 NEW_LINE }
define * * i32 @func_31 ( i64 %0 , i8 zeroext %1 , * * i32 %2 , i64 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * * i32 NEW_LINE store i64 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store * * i32 null %9 NEW_LINE %10 = load * * i32 @g_226 NEW_LINE %11 = load volatile * i32 %10 NEW_LINE %12 = load volatile i32 %11 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = xor i64 %13 , -2 NEW_LINE %15 = trunc i64 %14 to i32 NEW_LINE store volatile i32 %15 %11 NEW_LINE %16 = load * * i32 %9 NEW_LINE ret * * i32 %16 NEW_LINE }
define zeroext i8 @func_66 ( i32 %0 , i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * * i64 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * * * i64 null %7 NEW_LINE store i32 -1905058989 %8 NEW_LINE %9 = load volatile * * i64 @g_88 NEW_LINE %10 = load volatile * * * i64 @g_92 NEW_LINE store volatile * * i64 %9 %10 NEW_LINE %11 = load volatile * * i32 @g_93 NEW_LINE store * i32 @g_3 %11 NEW_LINE %12 = load i32 %8 NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE ret i8 %13 NEW_LINE }
define zeroext i16 @func_15 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca STRUCT 1 i24 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 8 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = bitcast * STRUCT 1 i24 %3 to * i32 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %0 %4 NEW_LINE %8 = bitcast * ARR 3 8 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 getelementptr inbounds ( ARR 3 8 x i8 @__const.func_15.l_1224 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE %9 = getelementptr inbounds ARR 3 8 x i8 %5 , i64 0 , i64 1 NEW_LINE %10 = load i8 %9 NEW_LINE %11 = zext i8 %10 to i16 NEW_LINE ret i16 %11 NEW_LINE }
define i32 @func_47 ( * STRUCT 2 i16 ARR 3 2 x i8 %0 , i32 %1 , * * i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * STRUCT 2 i16 ARR 3 2 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i16 NEW_LINE store * STRUCT 2 i16 ARR 3 2 x i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE %9 = load * * i32 %7 NEW_LINE %10 = load * i32 %9 NEW_LINE %11 = load * * i32 %7 NEW_LINE store * i32 %10 %11 NEW_LINE %12 = load * * * * * i64 @g_453 NEW_LINE store * * * * * i64 %12 @g_453 NEW_LINE %13 = load i8 @g_442 NEW_LINE %14 = zext i8 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define i32 @func_51 ( * i8 %0 , i32 %1 , i64 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE store * i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %9 = load * i32 @g_686 NEW_LINE %10 = load volatile * * i32 @g_687 NEW_LINE store * i32 %9 %10 NEW_LINE %11 = load i32 getelementptr inbounds ( STRUCT 6 i32 i64 i32 i64 i8 ARR 3 3 x i8 bitcast ( * STRUCT 11 i32 i64 i8 i8 i8 i8 i64 i8 i8 i8 i8 @g_273 to * STRUCT 6 i32 i64 i32 i64 i8 ARR 3 3 x i8 ) , i32 0 , i32 2 ) NEW_LINE %12 = shl i32 %11 , 1 NEW_LINE %13 = ashr i32 %12 , 1 NEW_LINE ret i32 %13 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE store i32 0 @g_3 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @g_3 NEW_LINE %4 = icmp sge i32 %3 , 17 NEW_LINE br i1 %4 , label %5 , label %13 NEW_LINE 5: NEW_LINE %6 = load volatile i32 @g_2 NEW_LINE %7 = trunc i32 %6 to i16 NEW_LINE store i16 %7 %1 NEW_LINE br label %16 NEW_LINE 8: NEW_LINE %9 = load i32 @g_3 NEW_LINE %10 = trunc i32 %9 to i16 NEW_LINE %11 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %10 , i16 signext 1 ) NEW_LINE %12 = sext i16 %11 to i32 NEW_LINE store i32 %12 @g_3 NEW_LINE br label %2 NEW_LINE 13: NEW_LINE %14 = load i32 @g_3 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE store i16 %15 %1 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i16 %1 NEW_LINE ret i16 %17 NEW_LINE }
define * i32 @func_12 ( * i32 %0 , * i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i32 -1443992547 %9 NEW_LINE store i64 1 %10 NEW_LINE %11 = load i32 %9 NEW_LINE %12 = add i32 %11 , -1 NEW_LINE store i32 %12 %9 NEW_LINE %13 = load i64 %10 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE %15 = load * i32 %5 NEW_LINE store i32 %14 %15 NEW_LINE %16 = load * i32 %8 NEW_LINE ret * i32 %16 NEW_LINE }
define * i32 @func_33 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 4 x * i32 NEW_LINE %7 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 1 %5 NEW_LINE %8 = bitcast * ARR 3 4 x * i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 4 x * i32 @__const.func_33.l_419 to * i8 ) , i64 32 , i1 false ) NEW_LINE %9 = load i32 %5 NEW_LINE store i32 %9 %5 NEW_LINE %10 = getelementptr inbounds ARR 3 4 x * i32 %6 , i64 0 , i64 0 NEW_LINE %11 = load * i32 %10 NEW_LINE ret * i32 %11 NEW_LINE }
define i32 @func_33 ( i32 %0 , * * i32 %1 , * i32 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i16 NEW_LINE store i32 %0 %6 NEW_LINE store * * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i16 -1 %11 NEW_LINE %12 = load i16 %11 NEW_LINE %13 = sext i16 %12 to i32 NEW_LINE %14 = load * * i32 %7 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = or i32 %16 , %13 NEW_LINE store i32 %17 %15 NEW_LINE %18 = load i16 %11 NEW_LINE %19 = sext i16 %18 to i32 NEW_LINE ret i32 %19 NEW_LINE }
define * i16 @func_73 ( i32 %0 , i16 signext %1 , i32 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i16 6 @g_97 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i16 @g_97 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 11 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE store * i16 @g_50 %4 NEW_LINE br label %17 NEW_LINE 13: NEW_LINE %14 = load i16 @g_97 NEW_LINE %15 = add i16 %14 , 1 NEW_LINE store i16 %15 @g_97 NEW_LINE br label %8 NEW_LINE 16: NEW_LINE store * i16 @g_50 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * i16 %4 NEW_LINE ret * i16 %18 NEW_LINE }
define void @func_50 ( * STRUCT 7 i32 i24 i32 i16 i32 i24 i32 noalias sret %0 , i32 %1 , i32 %2 , i8 signext %3 , * i32 %4 , * i32 %5 ) { NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * i32 %5 %11 NEW_LINE %12 = bitcast * STRUCT 7 i32 i24 i32 i16 i32 i24 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 getelementptr inbounds ( STRUCT 27 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_75 , i32 0 , i32 0 ) , i64 28 , i1 true ) NEW_LINE ret void NEW_LINE }
define * i32 @func_33 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 0 @g_381 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 @g_381 NEW_LINE %6 = icmp ult i32 %5 , 51 NEW_LINE br i1 %6 , label %7 , label %13 NEW_LINE 7: NEW_LINE %8 = load volatile * * i32 @g_125 NEW_LINE %9 = load * i32 %8 NEW_LINE store * i32 %9 %2 NEW_LINE br label %16 NEW_LINE 10: NEW_LINE %11 = load i32 @g_381 NEW_LINE %12 = add i32 %11 , 1 NEW_LINE store i32 %12 @g_381 NEW_LINE br label %4 NEW_LINE 13: NEW_LINE %14 = load volatile * * i32 @g_145 NEW_LINE %15 = load * i32 %14 NEW_LINE store * i32 %15 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load * i32 %2 NEW_LINE ret * i32 %17 NEW_LINE }
define i32 @func_50 ( * i32 %0 , * i32 %1 , i8 signext %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %3 %12 NEW_LINE store * i32 %0 %8 NEW_LINE store * i32 %1 %9 NEW_LINE store i8 %2 %10 NEW_LINE store * i32 %4 %11 NEW_LINE %13 = bitcast * STRUCT 1 i32 %6 to * i8 NEW_LINE %14 = bitcast * STRUCT 1 i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 %14 , i64 4 , i1 false ) NEW_LINE %15 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE ret i32 %16 NEW_LINE }
define i32 @func_81 ( i64 %0 , i8 zeroext %1 , i32 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 4 x i16 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %13 = bitcast * ARR 3 4 x i16 %11 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %13 , i8 0 , i64 8 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 4 x i16 %11 , i64 0 , i64 1 NEW_LINE %15 = load i16 %14 NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE ret i32 %16 NEW_LINE }
define i32 @func_15 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * * * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 @g_32 %3 NEW_LINE store * * i32 %3 %4 NEW_LINE store * * * i32 %4 %5 NEW_LINE %6 = load * i32 %2 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i32 %3 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = or i32 %9 , %7 NEW_LINE store i32 %10 %8 NEW_LINE %11 = load * * * i32 %5 NEW_LINE store * * i32 %3 %11 NEW_LINE %12 = load * * i32 %4 NEW_LINE %13 = load * i32 %12 NEW_LINE %14 = load i32 %13 NEW_LINE ret i32 %14 NEW_LINE }
define * i8 @func_24 ( * i8 %0 , i32 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca ARR 3 8 x * i8 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE %9 = bitcast * ARR 3 8 x * i8 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 8 x * i8 @__const.func_24.l_36 to * i8 ) , i64 64 , i1 false ) NEW_LINE %10 = getelementptr inbounds ARR 3 8 x * i8 %7 , i64 0 , i64 1 NEW_LINE %11 = load * i8 %10 NEW_LINE ret * i8 %11 NEW_LINE }
define i32 @func_39 ( * i32 %0 , * i32 %1 , * i32 %2 , i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE store * i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE %11 = load * i32 %7 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 10 x i32 @g_67 , i64 0 , i64 5 ) NEW_LINE %14 = xor i32 %13 , %12 NEW_LINE store i32 %14 getelementptr inbounds ( ARR 3 10 x i32 @g_67 , i64 0 , i64 5 ) NEW_LINE %15 = load volatile i32 getelementptr inbounds ( STRUCT 1 i32 @g_56 , i32 0 , i32 0 ) NEW_LINE ret i32 %15 NEW_LINE }
define * i64 @func_48 ( * i16 %0 , * i64 %1 , i8 zeroext %2 , * i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE store * i16 %0 %6 NEW_LINE store * i64 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store * i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_108 %11 NEW_LINE %12 = load * i32 %11 NEW_LINE %13 = load volatile * * i32 @g_980 NEW_LINE store * i32 %12 %13 NEW_LINE %14 = load * * * * i64 @g_866 NEW_LINE %15 = load * * * i64 %14 NEW_LINE %16 = load * * i64 %15 NEW_LINE %17 = load * i64 %16 NEW_LINE ret * i64 %17 NEW_LINE }
define * STRUCT 3 i8 i32 i8 @func_45 ( * i32 %0 , * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 %1 , i64 %2 , * STRUCT 3 i8 i32 i8 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * STRUCT 3 i8 i32 i8 NEW_LINE store * i32 %0 %5 NEW_LINE store * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store * STRUCT 3 i8 i32 i8 %3 %8 NEW_LINE ret * STRUCT 3 i8 i32 i8 getelementptr inbounds ( ARR 3 1 x STRUCT 3 i8 i32 i8 bitcast ( * ARR 3 1 x STRUCT 8 i8 ARR 3 3 x i8 i8 i8 i8 i8 i8 ARR 3 3 x i8 @g_27 to * ARR 3 1 x STRUCT 3 i8 i32 i8 ) , i64 0 , i64 0 ) NEW_LINE }
define zeroext i8 @func_45 ( i32 %0 , i16 signext %1 , i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca STRUCT 1 i16 NEW_LINE %8 = getelementptr inbounds STRUCT 1 i32 %4 , i32 0 , i32 0 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE %9 = bitcast * STRUCT 1 i16 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * STRUCT 1 i16 @__const.func_45.l_58 to * i8 ) , i64 2 , i1 false ) NEW_LINE %10 = bitcast * STRUCT 1 i16 %7 to * i8 NEW_LINE %11 = bitcast * STRUCT 1 i16 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 %11 , i64 2 , i1 false ) NEW_LINE %12 = load i16 %6 NEW_LINE %13 = trunc i16 %12 to i8 NEW_LINE ret i8 %13 NEW_LINE }
define * * i16 @func_43 ( * i16 %0 , * i16 %1 , i32 %2 , * * i16 %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i32 NEW_LINE store * i16 %0 %5 NEW_LINE store * i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * * i16 %3 %8 NEW_LINE store i8 53 %9 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_377 , i64 0 , i64 0 ) %10 NEW_LINE %11 = load i8 %9 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = load * i32 %10 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = or i32 %14 , %12 NEW_LINE store i32 %15 %13 NEW_LINE ret * * i16 @g_481 NEW_LINE }
define i64 @func_41 ( * i32 %0 , i64 %1 , * i32 %2 , * i32 %3 , i16 signext %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * STRUCT 1 i64 NEW_LINE %12 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE store * STRUCT 1 i64 @g_632 %11 NEW_LINE store i32 -144739816 %12 NEW_LINE %13 = load * STRUCT 1 i64 %11 NEW_LINE %14 = load volatile * * STRUCT 1 i64 @g_766 NEW_LINE store * STRUCT 1 i64 %13 %14 NEW_LINE %15 = load i32 %12 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE ret i64 %16 NEW_LINE }
define * i32 @func_39 ( i64 %0 , i32 %1 , * i8 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_61 , i64 0 , i64 5 ) %9 NEW_LINE store * * i32 %9 %10 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load * * i32 %10 NEW_LINE store * i32 %11 %12 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 5 x i32 @g_99 , i64 0 , i64 1 , i64 2 ) NEW_LINE }
define * i64 @func_64 ( i16 signext %0 , * i64 %1 , * * i16 %2 , i8 zeroext %3 , i64 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca * * i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i64 %1 %7 NEW_LINE store * * i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store * i32 @g_34 %11 NEW_LINE %12 = load i32 @g_34 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = and i64 %13 , -5 NEW_LINE %15 = trunc i64 %14 to i32 NEW_LINE store i32 %15 @g_34 NEW_LINE %16 = load * i32 %11 NEW_LINE %17 = load volatile * * i32 @g_75 NEW_LINE store * i32 %16 %17 NEW_LINE ret * i64 @g_19 NEW_LINE }
define zeroext i8 @func_49 ( * i64 %0 , i16 signext %1 , i32 %2 , * i64 %3 ) { NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store * i64 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i64 %3 %8 NEW_LINE store * i32 @g_60 %9 NEW_LINE store * * i32 %9 %10 NEW_LINE store * * i8 null @g_56 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load * * i32 %10 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load * * i32 %10 NEW_LINE %14 = load * i32 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define i64 @func_39 ( i64 %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store i64 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * * i32 null %5 NEW_LINE store * * i32 null %6 NEW_LINE store * * i32 @g_46 %7 NEW_LINE %8 = load i16 @g_18 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = load i16 %4 NEW_LINE %11 = sext i16 %10 to i64 NEW_LINE %12 = load * i32 @g_46 NEW_LINE %13 = call * i32 @func_42 ( i32 %9 , i64 %11 , * i32 %12 ) NEW_LINE %14 = load * * i32 %7 NEW_LINE store * i32 %13 %14 NEW_LINE %15 = load i64 %3 NEW_LINE ret i64 %15 NEW_LINE }
define * i32 @func_24 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 8 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE %6 = bitcast * ARR 3 8 x i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 8 x i32 @__const.func_24.l_27 to * i8 ) , i64 32 , i1 false ) NEW_LINE %7 = getelementptr inbounds ARR 3 8 x i32 %4 , i64 0 , i64 6 NEW_LINE store i32 6 %7 NEW_LINE %8 = load * i32 %2 NEW_LINE ret * i32 %8 NEW_LINE }
define signext i8 @func_5 ( i32 %0 , i64 %1 , i64 %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i8 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i32 0 @g_389 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_389 NEW_LINE %12 = icmp ule i32 %11 , 4 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE %14 = load i8 %9 NEW_LINE store i8 %14 %5 NEW_LINE br label %20 NEW_LINE 15: NEW_LINE %16 = load i32 @g_389 NEW_LINE %17 = add i32 %16 , 1 NEW_LINE store i32 %17 @g_389 NEW_LINE br label %10 NEW_LINE 18: NEW_LINE %19 = load i8 %9 NEW_LINE store i8 %19 %5 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i8 %5 NEW_LINE ret i8 %21 NEW_LINE }
define * i32 @func_47 ( * i32 %0 , * i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * STRUCT 1 i8 NEW_LINE %10 = alloca * * STRUCT 1 i8 NEW_LINE %11 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * STRUCT 1 i8 null %9 NEW_LINE store * * STRUCT 1 i8 %9 %10 NEW_LINE store * i32 null %11 NEW_LINE %12 = load * STRUCT 1 i8 %9 NEW_LINE %13 = load * * STRUCT 1 i8 %10 NEW_LINE store * STRUCT 1 i8 %12 %13 NEW_LINE %14 = load * i32 %11 NEW_LINE ret * i32 %14 NEW_LINE }
define i32 @func_6 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 -1 %4 NEW_LINE store i8 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i8 %3 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = icmp slt i32 %7 , 20 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %2 NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = load i8 %3 NEW_LINE %13 = zext i8 %12 to i16 NEW_LINE %14 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %13 , i16 zeroext 5 ) NEW_LINE %15 = trunc i16 %14 to i8 NEW_LINE store i8 %15 %3 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = load i32 @g_5 NEW_LINE store i32 %17 %2 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define * STRUCT 1 ARR 3 13 x i8 @func_60 ( i32 %0 , i32 %1 , i32 %2 , * STRUCT 1 ARR 3 13 x i8 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * STRUCT 1 ARR 3 13 x i8 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * STRUCT 1 ARR 3 13 x i8 %3 %8 NEW_LINE %9 = load * STRUCT 1 ARR 3 13 x i8 %8 NEW_LINE %10 = bitcast * STRUCT 1 ARR 3 13 x i8 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 getelementptr inbounds ( STRUCT 13 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_91 , i32 0 , i32 0 ) , * i8 %10 , i64 13 , i1 true ) NEW_LINE %11 = load * STRUCT 1 ARR 3 13 x i8 %8 NEW_LINE ret * STRUCT 1 ARR 3 13 x i8 %11 NEW_LINE }
define signext i16 @func_3 ( i32 %0 , i32 %1 , i32 %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE store i32 %0 %12 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_116 %11 NEW_LINE %13 = load i32 %10 NEW_LINE %14 = load * i32 %11 NEW_LINE store i32 %13 %14 NEW_LINE %15 = load * i32 @g_178 NEW_LINE %16 = load volatile i32 %15 NEW_LINE %17 = and i32 %16 , %13 NEW_LINE store volatile i32 %17 %15 NEW_LINE %18 = load i32 %7 NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE ret i16 %19 NEW_LINE }
define * i8 @func_35 ( * i8 %0 , i32 %1 , * i8 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * STRUCT 1 * i8 NEW_LINE %8 = alloca * * STRUCT 1 * i8 NEW_LINE %9 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE store * STRUCT 1 * i8 null %7 NEW_LINE store * * STRUCT 1 * i8 %7 %8 NEW_LINE store * i8 getelementptr inbounds ( STRUCT 3 i8 i8 i64 @g_202 , i32 0 , i32 1 ) %9 NEW_LINE %10 = load * STRUCT 1 * i8 %7 NEW_LINE %11 = load * * STRUCT 1 * i8 %8 NEW_LINE store * STRUCT 1 * i8 %10 %11 NEW_LINE %12 = load * i8 %9 NEW_LINE ret * i8 %12 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 6 x * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 @g_3 %1 NEW_LINE store i32 6 %2 NEW_LINE store * i32 %2 %3 NEW_LINE %7 = bitcast * ARR 3 6 x * i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 , i8 0 , i64 48 , i1 false ) NEW_LINE store i16 -26856 %5 NEW_LINE %8 = load i64 @g_8 NEW_LINE %9 = add i64 %8 , 1 NEW_LINE store i64 %9 @g_8 NEW_LINE %10 = load i32 @g_3 NEW_LINE ret i32 %10 NEW_LINE }
define zeroext i8 @func_21 ( i32 %0 , i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i32 %4 , i32 0 , i32 0 NEW_LINE store i32 %2 %9 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * i32 @g_117 %7 NEW_LINE store * * i32 %7 %8 NEW_LINE %10 = load * * * * i8 @g_1792 NEW_LINE %11 = load volatile * * * * * i8 @g_1796 NEW_LINE store * * * * i8 %10 %11 NEW_LINE %12 = load * i32 %7 NEW_LINE %13 = load * * i32 %8 NEW_LINE store * i32 %12 %13 NEW_LINE %14 = load * * i8 @g_1794 NEW_LINE %15 = load volatile * i8 %14 NEW_LINE %16 = load i8 %15 NEW_LINE ret i8 %16 NEW_LINE }
define i32 @func_21 ( * i32 %0 , i32 %1 , * i32 %2 , i16 signext %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i24 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = bitcast * STRUCT 1 i24 %6 to * i32 NEW_LINE store i32 %1 %13 NEW_LINE store * i32 %0 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * i32 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_344 to * i32 ) %11 NEW_LINE store i32 -2 %12 NEW_LINE %14 = load * i32 %8 NEW_LINE %15 = call * i32 @func_57 ( * i32 %14 ) NEW_LINE store * i32 %15 %11 NEW_LINE %16 = load i32 %12 NEW_LINE ret i32 %16 NEW_LINE }
define * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 @func_20 ( i32 %0 , i32 %1 , i32 %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 bitcast ( * STRUCT 2 i64 ARR 3 32 x i8 @g_697 to * i32 ) %9 NEW_LINE store * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 @g_518 %10 NEW_LINE %11 = load * i32 %9 NEW_LINE store * i32 %11 %9 NEW_LINE %12 = load * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 %10 NEW_LINE ret * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 %12 NEW_LINE }
define zeroext i8 @func_44 ( i8 signext %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i32 NEW_LINE store i8 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 3 x * i32 @g_15 , i64 0 , i64 2 ) %7 NEW_LINE store * i32 @g_67 %8 NEW_LINE %9 = load * * i32 %7 NEW_LINE store * i32 null %9 NEW_LINE %10 = load i8 %4 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = load * i32 %8 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = xor i32 %13 , %11 NEW_LINE store i32 %14 %12 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define i32 @func_5 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 2 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 2 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 2 x i32 %3 , i64 0 , i64 %10 NEW_LINE store i32 -1736352580 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 2 x i32 %3 , i64 0 , i64 1 NEW_LINE %17 = load i32 %16 NEW_LINE ret i32 %17 NEW_LINE }
define i32 @func_57 ( i8 zeroext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 294 %5 NEW_LINE store i32 7 %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 @g_32 %8 NEW_LINE %9 = load i16 %5 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE store i32 %10 %6 NEW_LINE %11 = load i16 %5 NEW_LINE %12 = sext i16 %11 to i32 NEW_LINE %13 = xor i32 %10 , %12 NEW_LINE %14 = load * i32 %8 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = and i32 %15 , %13 NEW_LINE store i32 %16 %14 NEW_LINE %17 = load * i32 %8 NEW_LINE %18 = load i32 %17 NEW_LINE ret i32 %18 NEW_LINE }
define i32 @func_79 ( i32 %0 , * i32 %1 , * * i32 %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 3 x ARR 3 6 x i32 @g_125 , i64 0 , i64 1 , i64 2 , i64 3 ) %9 NEW_LINE %10 = load * i32 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = xor i64 %12 , 2673670591 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE store i32 %14 %10 NEW_LINE %15 = load i16 %8 NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE ret i32 %16 NEW_LINE }
define STRUCT 2 i64 i64 @func_17 ( * i16 %0 , * * i16 %1 , * * i16 %2 ) { NEW_LINE %4 = alloca STRUCT 4 i32 i32 i24 i32 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * * i16 NEW_LINE %7 = alloca * * i16 NEW_LINE store * i16 %0 %5 NEW_LINE store * * i16 %1 %6 NEW_LINE store * * i16 %2 %7 NEW_LINE %8 = load * STRUCT 1 i16 @g_1616 NEW_LINE store * STRUCT 1 i16 %8 @g_1616 NEW_LINE %9 = bitcast * STRUCT 4 i32 i32 i24 i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( STRUCT 16 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_2796 , i32 0 , i32 0 ) , i64 16 , i1 false ) NEW_LINE %10 = bitcast * STRUCT 4 i32 i32 i24 i32 %4 to * STRUCT 2 i64 i64 NEW_LINE %11 = load STRUCT 2 i64 i64 %10 NEW_LINE ret STRUCT 2 i64 i64 %11 NEW_LINE }
define signext i16 @func_11 ( i32 %0 , i8 signext %1 , i8 signext %2 , i16 zeroext %3 , * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i8 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i8 -67 %11 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = load * i32 %10 NEW_LINE store i32 %13 %14 NEW_LINE %15 = load * i32 @g_65 NEW_LINE %16 = load volatile i32 %15 NEW_LINE %17 = xor i32 %16 , %13 NEW_LINE store volatile i32 %17 %15 NEW_LINE %18 = load i32 getelementptr inbounds ( ARR 3 10 x i32 @g_56 , i64 0 , i64 8 ) NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE ret i16 %19 NEW_LINE }
define * i32 @func_9 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * STRUCT 3 i16 i32 i64 NEW_LINE %4 = alloca * * STRUCT 3 i16 i32 i64 NEW_LINE %5 = alloca * i32 NEW_LINE store i64 %0 %2 NEW_LINE store * STRUCT 3 i16 i32 i64 getelementptr inbounds ( ARR 3 3 x ARR 3 8 x ARR 3 7 x STRUCT 3 i16 i32 i64 @g_620 , i64 0 , i64 1 , i64 5 , i64 6 ) %3 NEW_LINE store * * STRUCT 3 i16 i32 i64 null %4 NEW_LINE store * i32 @g_200 %5 NEW_LINE %6 = load * STRUCT 3 i16 i32 i64 %3 NEW_LINE store * STRUCT 3 i16 i32 i64 %6 %3 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = load volatile * * i32 @g_1788 NEW_LINE store * i32 %7 %8 NEW_LINE %9 = load * i32 %5 NEW_LINE ret * i32 %9 NEW_LINE }
define i32 @func_32 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i16 -20 @g_268 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i16 @g_268 NEW_LINE %8 = sext i16 %7 to i32 NEW_LINE %9 = icmp ne i32 %8 , -28 NEW_LINE br i1 %9 , label %10 , label %16 NEW_LINE 10: NEW_LINE %11 = load volatile * i32 @g_140 NEW_LINE %12 = load i32 %11 NEW_LINE store i32 %12 %3 NEW_LINE br label %19 NEW_LINE 13: NEW_LINE %14 = load i16 @g_268 NEW_LINE %15 = add i16 %14 , -1 NEW_LINE store i16 %15 @g_268 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load * i32 %5 NEW_LINE %18 = load i32 %17 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define * * i32 @func_142 ( * i8 %0 ) { NEW_LINE %2 = alloca * * i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * * i32 NEW_LINE store * i8 %0 %3 NEW_LINE store * i32 @g_63 %4 NEW_LINE store * * i32 %4 %5 NEW_LINE store i64 2 @g_124 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 @g_124 NEW_LINE %8 = icmp ule i64 %7 , 6 NEW_LINE br i1 %8 , label %9 , label %14 NEW_LINE 9: NEW_LINE %10 = load * * i32 @g_147 NEW_LINE store * * i32 %10 %2 NEW_LINE br label %15 NEW_LINE 11: NEW_LINE %12 = load i64 @g_124 NEW_LINE %13 = add i64 %12 , 1 NEW_LINE store i64 %13 @g_124 NEW_LINE br label %6 NEW_LINE 14: NEW_LINE store * * i32 @g_148 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load * * i32 %2 NEW_LINE ret * * i32 %16 NEW_LINE }
define i32 @func_29 ( i8 zeroext %0 , i32 %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %1 %11 NEW_LINE store i8 %0 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_2 %9 NEW_LINE store * * i32 @g_298 %10 NEW_LINE %12 = load * i32 %9 NEW_LINE %13 = load * * i32 %10 NEW_LINE store * i32 %12 %13 NEW_LINE %14 = load volatile * * i32 @g_328 NEW_LINE store * i32 %12 %14 NEW_LINE %15 = load * * i32 %10 NEW_LINE %16 = load * i32 %15 NEW_LINE %17 = load i32 %16 NEW_LINE ret i32 %17 NEW_LINE }
define i8 @func_10 ( i64 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i8 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i32 NEW_LINE store i64 %0 %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_103 , i64 0 , i64 4 ) %4 NEW_LINE %5 = load * i32 %4 NEW_LINE %6 = load * * * * i32 @g_1268 NEW_LINE %7 = load * * * i32 %6 NEW_LINE %8 = load * * i32 %7 NEW_LINE store * i32 %5 %8 NEW_LINE %9 = bitcast * STRUCT 1 i8 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( ARR 3 6 x ARR 3 1 x ARR 3 9 x STRUCT 1 i8 @g_1614 , i64 0 , i64 2 , i64 0 , i64 8 , i32 0 ) , i64 1 , i1 false ) NEW_LINE %10 = getelementptr inbounds STRUCT 1 i8 %2 , i32 0 , i32 0 NEW_LINE %11 = load i8 %10 NEW_LINE ret i8 %11 NEW_LINE }
define i32 @func_80 ( i32 %0 , * i16 %1 , * i16 %2 , i16 zeroext %3 , * i16 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca * i8 NEW_LINE %12 = alloca * * i8 NEW_LINE %13 = alloca * * * i8 NEW_LINE store i32 %0 %6 NEW_LINE store * i16 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i16 %4 %10 NEW_LINE store * i8 null %11 NEW_LINE store * * i8 %11 %12 NEW_LINE store * * * i8 %12 %13 NEW_LINE %14 = load * * * i8 %13 NEW_LINE store * * i8 null %14 NEW_LINE store * * i8 null @g_241 NEW_LINE %15 = load i32 @g_187 NEW_LINE ret i32 %15 NEW_LINE }
define signext i8 @func_44 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca ARR 3 7 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 7 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 7 x * i32 %3 , i64 0 , i64 %10 NEW_LINE store * i32 null %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i32 @g_51 NEW_LINE %17 = add i32 %16 , -1 NEW_LINE store i32 %17 @g_51 NEW_LINE %18 = load i8 %2 NEW_LINE ret i8 %18 NEW_LINE }
define * i8 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 * i8 NEW_LINE %2 = bitcast * STRUCT 1 * i8 %1 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %2 , i8 0 , i64 8 , i1 false ) NEW_LINE store i32 0 @g_3 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @g_3 NEW_LINE %5 = icmp eq i32 %4 , -20 NEW_LINE br i1 %5 , label %6 , label %12 NEW_LINE 6: NEW_LINE br label %13 NEW_LINE 7: NEW_LINE %8 = load i32 @g_3 NEW_LINE %9 = trunc i32 %8 to i16 NEW_LINE %10 = call signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %9 , i16 signext 6 ) NEW_LINE %11 = sext i16 %10 to i32 NEW_LINE store i32 %11 @g_3 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds STRUCT 1 * i8 %1 , i32 0 , i32 0 NEW_LINE %15 = load * i8 %14 NEW_LINE ret * i8 %15 NEW_LINE }
define signext i16 @func_71 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i64 -5849926012615711983 %5 NEW_LINE store * i16 null %6 NEW_LINE store * i32 @g_53 %7 NEW_LINE %8 = load * i16 %6 NEW_LINE %9 = call i32 @func_99 ( i8 signext 17 , * i16 %8 , i32 -65536 ) NEW_LINE %10 = load * i32 %7 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = or i32 %11 , %9 NEW_LINE store i32 %12 %10 NEW_LINE %13 = load * i32 %7 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE ret i16 %15 NEW_LINE }
define * i8 @func_12 ( i16 signext %0 , i16 zeroext %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE %10 = bitcast * STRUCT 1 * i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * STRUCT 1 * i8 getelementptr inbounds ( ARR 3 2 x ARR 3 8 x STRUCT 1 * i8 bitcast ( * ARR 3 2 x ARR 3 8 x STRUCT 2 i8 ARR 3 7 x i8 @g_447 to * ARR 3 2 x ARR 3 8 x STRUCT 1 * i8 ) , i64 0 , i64 0 , i64 4 ) to * i8 ) , i64 8 , i1 false ) NEW_LINE %11 = getelementptr inbounds STRUCT 1 * i8 %5 , i32 0 , i32 0 NEW_LINE %12 = load * i8 %11 NEW_LINE ret * i8 %12 NEW_LINE }
define * i32 @func_72 ( i64 %0 , * i32 %1 , * i8 %2 , * i32 %3 , * i16 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca * * * * i8 NEW_LINE %12 = alloca * i32 NEW_LINE store i64 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i16 %4 %10 NEW_LINE store * * * * i8 @g_95 %11 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 10 x i32 @g_53 , i64 0 , i64 1 ) %12 NEW_LINE %13 = load * * * i8 @g_95 NEW_LINE %14 = load * * * * i8 %11 NEW_LINE store * * * i8 %13 %14 NEW_LINE %15 = load * i32 %12 NEW_LINE ret * i32 %15 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 3 x i8 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp slt i32 %4 , 3 NEW_LINE br i1 %5 , label %6 , label %13 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 3 x i8 %1 , i64 0 , i64 %8 NEW_LINE store i8 -5 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 %2 NEW_LINE br label %3 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 3 x i8 %1 , i64 0 , i64 1 NEW_LINE %15 = load i8 %14 NEW_LINE %16 = add i8 %15 , 1 NEW_LINE store i8 %16 %14 NEW_LINE %17 = load i8 @g_5 NEW_LINE %18 = sext i8 %17 to i64 NEW_LINE ret i64 %18 NEW_LINE }
define i32 @func_6 ( i8 signext %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i8 NEW_LINE store i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i8 %4 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = icmp sge i32 %7 , 39 NEW_LINE br i1 %8 , label %9 , label %19 NEW_LINE 9: NEW_LINE %10 = load i8 @g_9 NEW_LINE %11 = icmp ne i8 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %19 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i8 %4 NEW_LINE %16 = zext i8 %15 to i64 NEW_LINE %17 = call i64 @safe_add_func_uint64_t_u_u ( i64 %16 , i64 6 ) NEW_LINE %18 = trunc i64 %17 to i8 NEW_LINE store i8 %18 %4 NEW_LINE br label %5 NEW_LINE 19: NEW_LINE %20 = load i8 %3 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE ret i32 %21 NEW_LINE }
define i32 @func_13 ( i32 %0 , i64 %1 , * i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 10 x i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i64 %4 , i32 0 , i32 0 NEW_LINE store i64 %1 %9 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %10 = bitcast * ARR 3 10 x i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 10 x i32 @__const.func_13.l_36 to * i8 ) , i64 40 , i1 false ) NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %7 , i64 0 , i64 4 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define * i32 @func_29 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_33 , i64 0 , i64 1 ) %6 NEW_LINE store i32 2 @g_334 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @g_334 NEW_LINE %9 = icmp sge i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load * i32 %6 NEW_LINE store * i32 %11 %3 NEW_LINE br label %17 NEW_LINE 12: NEW_LINE %13 = load i32 @g_334 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE store i32 %14 @g_334 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load * i32 %6 NEW_LINE store * i32 %16 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * i32 %3 NEW_LINE ret * i32 %18 NEW_LINE }
define void @func_90 ( * STRUCT 10 i32 i16 ARR 3 2 x i8 i32 i8 i16 i8 i32 i8 ARR 3 3 x i8 noalias sret %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %1 %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x ARR 3 1 x ARR 3 3 x i32 @g_4 , i64 0 , i64 0 , i64 0 , i64 1 ) %4 NEW_LINE %5 = load * i32 %4 NEW_LINE store * i32 %5 %3 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load volatile * * i32 @g_93 NEW_LINE store * i32 %6 %7 NEW_LINE %8 = bitcast * STRUCT 10 i32 i16 ARR 3 2 x i8 i32 i8 i16 i8 i32 i8 ARR 3 3 x i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * STRUCT 8 i32 i16 i32 i8 i8 i8 i32 i8 @g_95 to * i8 ) , i64 24 , i1 false ) NEW_LINE ret void NEW_LINE }
define i64 @func_2 ( i64 %0 , i32 %1 , i32 %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store i32 1272219222 %9 NEW_LINE store i32 446720372 %10 NEW_LINE %11 = load i32 %9 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i32 %9 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = call i64 @safe_sub_func_int64_t_s_s ( i64 %12 , i64 %14 ) NEW_LINE %16 = load i32 %10 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = and i64 %17 , %15 NEW_LINE %19 = trunc i64 %18 to i32 NEW_LINE store i32 %19 %10 NEW_LINE %20 = load i32 %10 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE ret i64 %21 NEW_LINE }
define signext i16 @func_61 ( * i32 %0 , i8 zeroext %1 , i8 signext %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 3 x ARR 3 10 x * i32 @g_532 , i64 0 , i64 6 , i64 0 , i64 6 ) %7 NEW_LINE %8 = load * * i32 %7 NEW_LINE store * i32 null %8 NEW_LINE %9 = load i8 %5 NEW_LINE %10 = zext i8 %9 to i32 NEW_LINE %11 = load * * i32 @g_372 NEW_LINE %12 = load volatile * i32 %11 NEW_LINE store volatile i32 %10 %12 NEW_LINE %13 = load * * i16 @g_114 NEW_LINE %14 = load * i16 %13 NEW_LINE %15 = load i16 %14 NEW_LINE ret i16 %15 NEW_LINE }
define * i32 @func_38 ( i16 signext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE store i16 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x ARR 3 3 x i32 @g_2 , i64 0 , i64 7 , i64 2 ) %3 NEW_LINE store * * i32 @g_84 %4 NEW_LINE %5 = load volatile * * i32 @g_91 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 8 x ARR 3 3 x i32 @g_2 to * i8 ) , i64 92 ) to * i32 ) %5 NEW_LINE %6 = load * * i32 %4 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 8 x ARR 3 3 x i32 @g_2 to * i8 ) , i64 92 ) to * i32 ) %6 NEW_LINE %7 = load * * i32 %4 NEW_LINE %8 = load * i32 %7 NEW_LINE ret * i32 %8 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i64 0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE %4 = trunc i64 %3 to i32 NEW_LINE %5 = load volatile * i32 @g_3 NEW_LINE store i32 %4 %5 NEW_LINE store i32 -17 @g_4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 @g_4 NEW_LINE %8 = icmp sgt i32 %7 , 14 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 @g_4 NEW_LINE store i32 %10 %1 NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = load i32 @g_4 NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE %14 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %13 , i8 zeroext 2 ) NEW_LINE %15 = zext i8 %14 to i32 NEW_LINE store i32 %15 @g_4 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load i32 @g_4 NEW_LINE store i32 %17 %1 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %1 NEW_LINE ret i32 %19 NEW_LINE }
define * * i32 @func_72 ( i16 zeroext %0 , i8 signext %1 , * i32 %2 , * * i32 %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE store i16 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * * i32 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x i32 @g_14 , i64 0 , i64 1 ) %9 NEW_LINE store * i32 @g_93 %10 NEW_LINE %11 = load * * i32 @g_88 NEW_LINE %12 = load * i32 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load * i32 %9 NEW_LINE store i32 %13 %14 NEW_LINE %15 = load * i32 %10 NEW_LINE store i32 %13 %15 NEW_LINE %16 = load * * i32 @g_94 NEW_LINE ret * * i32 %16 NEW_LINE }
define signext i16 @func_43 ( i64 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i8 NEW_LINE store i64 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 -26 @g_63 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i8 @g_63 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = icmp sle i32 %7 , -24 NEW_LINE br i1 %8 , label %9 , label %19 NEW_LINE 9: NEW_LINE %10 = load i8 %4 NEW_LINE %11 = icmp ne i8 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %19 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i8 @g_63 NEW_LINE %16 = sext i8 %15 to i64 NEW_LINE %17 = call i64 @safe_add_func_int64_t_s_s ( i64 %16 , i64 6 ) NEW_LINE %18 = trunc i64 %17 to i8 NEW_LINE store i8 %18 @g_63 NEW_LINE br label %5 NEW_LINE 19: NEW_LINE %20 = load i64 @g_83 NEW_LINE %21 = trunc i64 %20 to i16 NEW_LINE ret i16 %21 NEW_LINE }
define * i32 @func_63 ( i32 %0 , i8 zeroext %1 , i64 %2 , i8 signext %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 8 x * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %13 = bitcast * ARR 3 8 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_63.l_2210 to * i8 ) , i64 64 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 8 x * i32 %11 , i64 0 , i64 6 NEW_LINE %15 = load * i32 %14 NEW_LINE ret * i32 %15 NEW_LINE }
define i32 @func_56 ( * i32 %0 , * i8 %1 , * STRUCT 2 i8 i8 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * STRUCT 2 i8 i8 NEW_LINE %8 = alloca i8 NEW_LINE store * i32 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store * STRUCT 2 i8 i8 %2 %7 NEW_LINE store i32 -13 @g_113 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @g_113 NEW_LINE %11 = icmp ult i32 %10 , 55 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE store i8 -6 %8 NEW_LINE store i32 -6 %4 NEW_LINE br label %18 NEW_LINE 13: NEW_LINE %14 = load i32 @g_113 NEW_LINE %15 = add i32 %14 , 1 NEW_LINE store i32 %15 @g_113 NEW_LINE br label %9 NEW_LINE 16: NEW_LINE %17 = load i32 @g_3 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE ret i32 %19 NEW_LINE }
define i64 @func_29 ( * i8 %0 , i32 %1 , i8 signext %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * i8 @g_198 %7 NEW_LINE store i32 -1111005070 %8 NEW_LINE %9 = load * i8 %7 NEW_LINE %10 = load i8 %9 NEW_LINE %11 = add i8 %10 , -1 NEW_LINE store i8 %11 %9 NEW_LINE %12 = zext i8 %10 to i64 NEW_LINE %13 = load * i8 %4 NEW_LINE %14 = load i8 %13 NEW_LINE %15 = xor i64 %12 , 4 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE store i32 %16 %8 NEW_LINE %17 = load * i32 @g_155 NEW_LINE store i32 %16 %17 NEW_LINE %18 = load i8 %6 NEW_LINE %19 = sext i8 %18 to i64 NEW_LINE ret i64 %19 NEW_LINE }
define zeroext i16 @func_34 ( i8 signext %0 , i64 %1 , i8 signext %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store i8 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 null %9 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 5 x * i32 @g_250 , i64 0 , i64 1 ) %10 NEW_LINE %11 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext -27714 , i32 0 ) NEW_LINE %12 = sext i16 %11 to i64 NEW_LINE store i64 %12 @g_197 NEW_LINE %13 = load * i32 %9 NEW_LINE %14 = load * * i32 %10 NEW_LINE store * i32 %13 %14 NEW_LINE %15 = load i8 %7 NEW_LINE %16 = sext i8 %15 to i16 NEW_LINE ret i16 %16 NEW_LINE }
define i64 @func_62 ( i64 %0 , i64 %1 , i8 zeroext %2 , i64 %3 , * i8 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i8 NEW_LINE %12 = alloca i8 NEW_LINE store i64 %0 %7 NEW_LINE store i64 %1 %8 NEW_LINE store i8 %2 %9 NEW_LINE store i64 %3 %10 NEW_LINE store * i8 %4 %11 NEW_LINE store i8 -78 %12 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = zext i8 %13 to i32 NEW_LINE %15 = load volatile * i32 @g_77 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = and i32 %16 , %14 NEW_LINE store i32 %17 %15 NEW_LINE %18 = bitcast * STRUCT 1 i64 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 bitcast ( * STRUCT 1 i64 @g_53 to * i8 ) , i64 8 , i1 false ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 i64 %6 , i32 0 , i32 0 NEW_LINE %20 = load i64 %19 NEW_LINE ret i64 %20 NEW_LINE }
define i32 @func_3 ( i64 %0 , i8 signext %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store i64 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 8 x i32 @g_1457 , i64 0 , i64 0 , i64 5 ) %9 NEW_LINE store * * i32 null %10 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load volatile * * i32 @g_2161 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i8 %6 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = load * i32 @g_388 NEW_LINE store i32 %14 %15 NEW_LINE %16 = load i8 %6 NEW_LINE %17 = sext i8 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define i64 @func_16 ( i32 %0 , i8 %1 , i64 %2 , i8 %3 , i64 %4 , i32 %5 , i16 zeroext %6 ) { NEW_LINE %8 = alloca STRUCT 2 i8 i64 NEW_LINE %9 = alloca STRUCT 2 i8 i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i16 NEW_LINE %13 = bitcast * STRUCT 2 i8 i64 %8 to * STRUCT 2 i8 i64 NEW_LINE %14 = getelementptr inbounds STRUCT 2 i8 i64 %13 , i32 0 , i32 0 NEW_LINE store i8 %1 %14 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i8 i64 %13 , i32 0 , i32 1 NEW_LINE store i64 %2 %15 NEW_LINE %16 = bitcast * STRUCT 2 i8 i64 %9 to * STRUCT 2 i8 i64 NEW_LINE %17 = getelementptr inbounds STRUCT 2 i8 i64 %16 , i32 0 , i32 0 NEW_LINE store i8 %3 %17 NEW_LINE %18 = getelementptr inbounds STRUCT 2 i8 i64 %16 , i32 0 , i32 1 NEW_LINE store i64 %4 %18 NEW_LINE store i32 %0 %10 NEW_LINE store i32 %5 %11 NEW_LINE store i16 %6 %12 NEW_LINE %19 = load * i64 @g_559 NEW_LINE %20 = load i64 %19 NEW_LINE ret i64 %20 NEW_LINE }
define * i32 @func_50 ( * i16 %0 , i64 %1 , * i16 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca * i32 NEW_LINE store * i16 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i64 -3144545672636259758 %11 NEW_LINE store * * i32 @g_922 %12 NEW_LINE store * i32 @g_541 %13 NEW_LINE %14 = load i64 %11 NEW_LINE %15 = call * i32 @func_68 ( i64 %14 ) NEW_LINE %16 = load * * i32 %12 NEW_LINE store * i32 %15 %16 NEW_LINE %17 = load * i32 %13 NEW_LINE ret * i32 %17 NEW_LINE }
define zeroext i8 @func_18 ( i64 %0 , i64 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE store i64 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 @g_105 %9 NEW_LINE store volatile * i32 @g_105 %10 NEW_LINE store * i32 %7 %9 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load * i32 %9 NEW_LINE store i32 %12 %13 NEW_LINE %14 = load volatile * * i32 @g_696 NEW_LINE %15 = load volatile * i32 %14 NEW_LINE store volatile * i32 %15 %10 NEW_LINE %16 = load * * i32 @g_211 NEW_LINE store * i32 %7 %16 NEW_LINE %17 = load i16 @g_622 NEW_LINE %18 = trunc i16 %17 to i8 NEW_LINE ret i8 %18 NEW_LINE }
define zeroext i16 @func_42 ( * i8 %0 , i16 signext %1 , i32 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 4 %7 NEW_LINE %8 = load * * * i16 @g_1196 NEW_LINE %9 = load * * i16 %8 NEW_LINE %10 = load * i16 %9 NEW_LINE store i16 -18547 %10 NEW_LINE %11 = load i32 %7 NEW_LINE %12 = call zeroext i16 @safe_lshift_func_uint16_t_u_s ( i16 zeroext -18547 , i32 %11 ) NEW_LINE %13 = zext i16 %12 to i32 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp eq i32 %13 , %14 NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = load * i32 @g_665 NEW_LINE store i32 %16 %17 NEW_LINE %18 = load * * i16 @g_284 NEW_LINE %19 = load volatile * i16 %18 NEW_LINE %20 = load i16 %19 NEW_LINE ret i16 %20 NEW_LINE }
define * i32 @func_46 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 5 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x * i32 %3 , i64 0 , i64 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x i32 @g_36 , i64 0 , i64 0 ) %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x * i32 %3 , i64 0 , i64 0 NEW_LINE %17 = load * i32 %16 NEW_LINE ret * i32 %17 NEW_LINE }
define i16 @func_15 ( * * i8 %0 , i16 zeroext %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i16 NEW_LINE %6 = alloca * * i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca * * * * * i32 NEW_LINE store * * i8 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store * * * * * i32 @g_969 %10 NEW_LINE %11 = bitcast * STRUCT 1 i16 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %11 , i8 0 , i64 2 , i1 false ) NEW_LINE %12 = load * * * * i32 @g_969 NEW_LINE %13 = load * * * * * i32 %10 NEW_LINE store * * * * i32 %12 %13 NEW_LINE %14 = getelementptr inbounds STRUCT 1 i16 %5 , i32 0 , i32 0 NEW_LINE %15 = load i16 %14 NEW_LINE ret i16 %15 NEW_LINE }
define * i8 @func_46 ( i32 %0 , i16 zeroext %1 , * i8 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = getelementptr inbounds STRUCT 1 * i8 %6 , i32 0 , i32 0 NEW_LINE store * i8 %2 %14 NEW_LINE store i32 %0 %7 NEW_LINE store i16 %1 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i64 0 %11 NEW_LINE store * i32 @g_66 %12 NEW_LINE store * i8 null %13 NEW_LINE %15 = load i64 %11 NEW_LINE %16 = load * i32 %12 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = and i64 %18 , %15 NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE store i32 %20 %16 NEW_LINE %21 = load * i8 %13 NEW_LINE ret * i8 %21 NEW_LINE }
define i64 @func_121 ( i64 %0 , * i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 10 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * i32 @g_127 %7 NEW_LINE %10 = bitcast * ARR 3 10 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_121.l_128 to * i8 ) , i64 80 , i1 false ) NEW_LINE %11 = load volatile i8 @g_129 NEW_LINE %12 = add i8 %11 , 1 NEW_LINE store volatile i8 %12 @g_129 NEW_LINE %13 = load volatile i8 @g_129 NEW_LINE %14 = zext i8 %13 to i64 NEW_LINE ret i64 %14 NEW_LINE }
define i32 @func_60 ( * i32 %0 , i16 zeroext %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * STRUCT 1 i32 NEW_LINE %10 = alloca * STRUCT 1 i32 NEW_LINE %11 = alloca * * STRUCT 1 i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * STRUCT 1 i32 @g_494 %9 NEW_LINE store * STRUCT 1 i32 @g_494 %10 NEW_LINE store * * STRUCT 1 i32 %10 %11 NEW_LINE %12 = load * * STRUCT 1 i32 %11 NEW_LINE store * STRUCT 1 i32 @g_494 %12 NEW_LINE %13 = load volatile i32 getelementptr inbounds ( STRUCT 9 i8 i32 i32 i64 STRUCT 4 i8 i32 i8 i32 i8 i64 i32 STRUCT 4 i8 i32 i8 i32 @g_354 , i32 0 , i32 4 , i32 3 ) NEW_LINE ret i32 %13 NEW_LINE }
define * i64 @func_40 ( * i64 %0 , * i64 %1 ) { NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca * * * i8 NEW_LINE %6 = alloca * * i8 NEW_LINE store * i64 %0 %3 NEW_LINE store * i64 %1 %4 NEW_LINE store * * * i8 @g_423 %5 NEW_LINE store * * i8 null %6 NEW_LINE %7 = load volatile * i32 @g_299 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = and i64 %9 , 3104504922 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE store i32 %11 %7 NEW_LINE %12 = load volatile * * STRUCT 1 i32 @g_113 NEW_LINE %13 = load * STRUCT 1 i32 %12 NEW_LINE %14 = load * * i8 @g_423 NEW_LINE %15 = load * * * i8 %5 NEW_LINE store * * i8 %14 %15 NEW_LINE store * * i8 %14 %6 NEW_LINE %16 = load * i64 %3 NEW_LINE ret * i64 %16 NEW_LINE }
define i32 @func_90 ( i8 signext %0 , * i64 %1 , i16 signext %2 , * i64 %3 , * i8 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i16 ARR 3 2 x i8 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i64 NEW_LINE %11 = alloca * i8 NEW_LINE store i8 %0 %7 NEW_LINE store * i64 %1 %8 NEW_LINE store i16 %2 %9 NEW_LINE store * i64 %3 %10 NEW_LINE store * i8 %4 %11 NEW_LINE %12 = bitcast * STRUCT 2 i16 ARR 3 2 x i8 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 getelementptr inbounds ( ARR 3 1 x ARR 3 4 x ARR 3 8 x STRUCT 2 i16 ARR 3 2 x i8 @g_173 , i64 0 , i64 0 , i64 2 , i64 4 ) to * i8 ) , i64 4 , i1 false ) NEW_LINE %13 = bitcast * STRUCT 2 i16 ARR 3 2 x i8 %6 to * i32 NEW_LINE %14 = load i32 %13 NEW_LINE ret i32 %14 NEW_LINE }
define * i8 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 * i8 NEW_LINE %2 = alloca ARR 3 8 x STRUCT 1 * i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = bitcast * ARR 3 8 x STRUCT 1 * i8 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %4 , * i8 bitcast ( * ARR 3 8 x STRUCT 2 i32 ARR 3 4 x i8 @__const.func_1.l_2 to * i8 ) , i64 64 , i1 false ) NEW_LINE %5 = getelementptr inbounds ARR 3 8 x STRUCT 1 * i8 %2 , i64 0 , i64 5 NEW_LINE %6 = bitcast * STRUCT 1 * i8 %1 to * i8 NEW_LINE %7 = bitcast * STRUCT 1 * i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 %7 , i64 8 , i1 false ) NEW_LINE %8 = getelementptr inbounds STRUCT 1 * i8 %1 , i32 0 , i32 0 NEW_LINE %9 = load * i8 %8 NEW_LINE ret * i8 %9 NEW_LINE }
define * i64 @func_30 ( * i64 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE store * i64 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i64 -1433853415575249335 %6 NEW_LINE store i16 0 @g_93 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i16 @g_93 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = icmp slt i32 %9 , 49 NEW_LINE br i1 %10 , label %11 , label %16 NEW_LINE 11: NEW_LINE %12 = load * i64 %4 NEW_LINE store * i64 %12 %3 NEW_LINE br label %19 NEW_LINE 13: NEW_LINE %14 = load i16 @g_93 NEW_LINE %15 = add i16 %14 , 1 NEW_LINE store i16 %15 @g_93 NEW_LINE br label %7 NEW_LINE 16: NEW_LINE %17 = load i64 %6 NEW_LINE %18 = xor i64 %17 , -1 NEW_LINE store i64 %18 %6 NEW_LINE store * i64 @g_25 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load * i64 %3 NEW_LINE ret * i64 %20 NEW_LINE }
define * i64 @func_43 ( i16 signext %0 , i64 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca ARR 3 7 x * i64 NEW_LINE %11 = alloca i32 NEW_LINE store i16 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i8 -107 %9 NEW_LINE %12 = bitcast * ARR 3 7 x * i64 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 7 x * i64 @__const.func_43.l_422 to * i8 ) , i64 56 , i1 false ) NEW_LINE %13 = load i8 %9 NEW_LINE %14 = add i8 %13 , 1 NEW_LINE store i8 %14 %9 NEW_LINE %15 = getelementptr inbounds ARR 3 7 x * i64 %10 , i64 0 , i64 3 NEW_LINE %16 = load * i64 %15 NEW_LINE ret * i64 %16 NEW_LINE }
define * i32 @func_60 ( * i8 %0 , i32 %1 ) { NEW_LINE %3 = alloca STRUCT 1 * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = getelementptr inbounds STRUCT 1 * i8 %3 , i32 0 , i32 0 NEW_LINE store * i8 %0 %7 NEW_LINE store i32 %1 %4 NEW_LINE store * * i32 @g_44 %5 NEW_LINE store * i32 @g_16 %6 NEW_LINE %8 = bitcast * STRUCT 1 * i8 %3 to * i32 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * * i32 %5 NEW_LINE store * i32 %4 %10 NEW_LINE %11 = load * i32 %6 NEW_LINE %12 = icmp eq * i32 %4 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 false %2 , ARR 2 true %13 NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = load volatile * i32 @g_66 NEW_LINE store i32 %16 %17 NEW_LINE ret * i32 @g_67 NEW_LINE }
define * STRUCT 6 i8 i8 i32 i16 i8 i16 @func_47 ( * STRUCT 6 i8 i8 i32 i16 i8 i16 %0 , * STRUCT 6 i8 i8 i32 i16 i8 i16 %1 ) { NEW_LINE %3 = alloca * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %4 = alloca * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 %0 %3 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 %1 %4 NEW_LINE store * i32 @g_409 %5 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 null %6 NEW_LINE %7 = load * * i32 @g_544 NEW_LINE %8 = load * i32 %7 NEW_LINE store * i32 %8 %5 NEW_LINE %9 = load * * * i32 @g_543 NEW_LINE %10 = load * * i32 %9 NEW_LINE store * i32 %8 %10 NEW_LINE %11 = load * STRUCT 6 i8 i8 i32 i16 i8 i16 %6 NEW_LINE ret * STRUCT 6 i8 i8 i32 i16 i8 i16 %11 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 10 x i64 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp slt i32 %4 , 10 NEW_LINE br i1 %5 , label %6 , label %13 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i64 %1 , i64 0 , i64 %8 NEW_LINE store i64 -2197908805864129612 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 %2 NEW_LINE br label %3 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i64 %1 , i64 0 , i64 0 NEW_LINE %15 = load i64 %14 NEW_LINE %16 = add i64 %15 , -1 NEW_LINE store i64 %16 %14 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i64 %1 , i64 0 , i64 3 NEW_LINE %18 = load i64 %17 NEW_LINE ret i64 %18 NEW_LINE }
define * i32 @func_32 ( i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_89 to * i32 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_89 to * i32 ) NEW_LINE %7 = icmp slt i32 %6 , 16 NEW_LINE br i1 %7 , label %8 , label %13 NEW_LINE 8: NEW_LINE store * i32 @g_3 %4 NEW_LINE %9 = load * i32 %4 NEW_LINE store * i32 %9 %2 NEW_LINE br label %14 NEW_LINE 10: NEW_LINE %11 = load i32 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_89 to * i32 ) NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_89 to * i32 ) NEW_LINE br label %5 NEW_LINE 13: NEW_LINE store * i32 @g_3 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load * i32 %2 NEW_LINE ret * i32 %15 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca ARR 3 1 x * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 @g_4 %1 NEW_LINE store i32 844162778 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 1 x * i32 %2 , i64 0 , i64 %10 NEW_LINE store * i32 @g_4 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load volatile i64 @g_2 NEW_LINE %19 = trunc i64 %18 to i32 NEW_LINE ret i32 %19 NEW_LINE }
define i32 @func_45 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca ARR 3 5 x * * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE %7 = bitcast * ARR 3 5 x * * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 5 x * * i32 @__const.func_45.l_1023 to * i8 ) , i64 40 , i1 false ) NEW_LINE store * * i32 null %4 NEW_LINE store * * i32 @g_80 %5 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = trunc i64 %9 to i16 NEW_LINE %11 = call * i32 @func_47 ( i16 zeroext %10 ) NEW_LINE %12 = load * * i32 %5 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define * * i32 @func_34 ( i16 signext %0 , * * i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca i16 NEW_LINE store i16 %0 %3 NEW_LINE store * * i32 %1 %4 NEW_LINE store i8 0 @g_358 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i8 @g_358 NEW_LINE %8 = zext i8 %7 to i32 NEW_LINE %9 = icmp sge i32 %8 , 51 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE store i16 -22958 %5 NEW_LINE %11 = load i16 %3 NEW_LINE store i16 %11 %5 NEW_LINE %12 = load i16 %5 NEW_LINE %13 = icmp ne i16 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %16 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i8 @g_358 NEW_LINE %18 = add i8 %17 , 1 NEW_LINE store i8 %18 @g_358 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load * * * i32 @g_372 NEW_LINE %21 = load * * i32 %20 NEW_LINE ret * * i32 %21 NEW_LINE }
define * i32 @func_54 ( i8 signext %0 , i16 signext %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE store i8 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 bitcast ( * STRUCT 13 i64 i32 i16 i8 i8 i8 i8 i8 i32 i64 i32 i8 i8 @g_74 to * i8 ) , * i8 bitcast ( * STRUCT 13 i64 i32 i16 i8 i8 i8 i8 i8 i32 i64 i32 i8 i8 @g_73 to * i8 ) , i64 40 , i1 true ) NEW_LINE %8 = load volatile i32 getelementptr inbounds ( STRUCT 10 i64 i32 i16 i8 i16 i8 i32 i64 i32 i16 bitcast ( * STRUCT 13 i64 i32 i16 i8 i8 i8 i8 i8 i32 i64 i32 i8 i8 @g_73 to * STRUCT 10 i64 i32 i16 i8 i16 i8 i32 i64 i32 i16 ) , i32 0 , i32 1 ) NEW_LINE %9 = load volatile * i32 @g_75 NEW_LINE store volatile i32 %8 %9 NEW_LINE %10 = load * i32 %7 NEW_LINE ret * i32 %10 NEW_LINE }
define zeroext i8 @func_13 ( i32 %0 , * i32 %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp ne i32 %10 , 18 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load * i32 %6 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %7 NEW_LINE %20 = call i32 @safe_add_func_int32_t_s_s ( i32 %19 , i32 2 ) NEW_LINE store i32 %20 %7 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE ret i8 %23 NEW_LINE }
define * i32 @func_26 ( i16 signext %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 1 x ARR 3 7 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %10 = bitcast * ARR 3 1 x ARR 3 7 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 1 x ARR 3 7 x * i32 @__const.func_26.l_1022 to * i8 ) , i64 56 , i1 false ) NEW_LINE %11 = getelementptr inbounds ARR 3 1 x ARR 3 7 x * i32 %7 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds ARR 3 7 x * i32 %11 , i64 0 , i64 0 NEW_LINE %13 = load * i32 %12 NEW_LINE ret * i32 %13 NEW_LINE }
define zeroext i8 @func_7 ( i16 signext %0 , i32 %1 , i16 signext %2 , i8 zeroext %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i32 784287964 %10 NEW_LINE store i32 0 @g_52 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @g_52 NEW_LINE %13 = icmp sge i32 %12 , -15 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = load i32 %10 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE store i8 %16 %5 NEW_LINE br label %23 NEW_LINE 17: NEW_LINE %18 = load i32 @g_52 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @g_52 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE %21 = load i16 %6 NEW_LINE %22 = trunc i16 %21 to i8 NEW_LINE store i8 %22 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i8 %5 NEW_LINE ret i8 %24 NEW_LINE }
define zeroext i16 @func_59 ( i32 %0 , * i32 %1 , i8 zeroext %2 , * * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca ARR 3 7 x i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store * * i32 %3 %8 NEW_LINE %11 = bitcast * ARR 3 7 x i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 7 x i32 @__const.func_59.l_547 to * i8 ) , i64 28 , i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 7 x i32 %9 , i64 0 , i64 1 NEW_LINE %13 = load i32 %12 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE ret i16 %15 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca ARR 3 10 x * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 null %1 NEW_LINE %5 = bitcast * ARR 3 10 x * i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_1.l_3 to * i8 ) , i64 80 , i1 false ) NEW_LINE store i32 -3 %3 NEW_LINE %6 = load volatile i16 @g_5 NEW_LINE %7 = add i16 %6 , -1 NEW_LINE store volatile i16 %7 @g_5 NEW_LINE store i32 -3 %3 NEW_LINE %8 = load volatile i16 @g_5 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = load i32 @g_4 NEW_LINE %11 = xor i32 %10 , %9 NEW_LINE store i32 %11 @g_4 NEW_LINE %12 = load i32 @g_4 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE ret i16 %13 NEW_LINE }
define * i32 @func_16 ( * i32 %0 , * i32 %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 8 x i16 NEW_LINE %10 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %11 = bitcast * ARR 3 8 x i16 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 8 x i16 @__const.func_16.l_1611 to * i8 ) , i64 16 , i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 8 x i16 %9 , i64 0 , i64 2 NEW_LINE %13 = load i16 %12 NEW_LINE %14 = add i16 %13 , -1 NEW_LINE store i16 %14 %12 NEW_LINE %15 = load * * * i32 @g_207 NEW_LINE %16 = load * * i32 %15 NEW_LINE %17 = load * i32 %16 NEW_LINE ret * i32 %17 NEW_LINE }
define signext i16 @func_109 ( * i64 %0 ) { NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca * i32 NEW_LINE store * i64 %0 %2 NEW_LINE store * i32 @g_47 %3 NEW_LINE store i32 0 @g_79 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 @g_79 NEW_LINE %6 = icmp ne i32 %5 , 42 NEW_LINE br i1 %6 , label %7 , label %18 NEW_LINE 7: NEW_LINE %8 = load * i32 @g_49 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %12 NEW_LINE 11: NEW_LINE br label %18 NEW_LINE 12: NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_79 NEW_LINE %15 = trunc i32 %14 to i8 NEW_LINE %16 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %15 , i8 zeroext 7 ) NEW_LINE %17 = zext i8 %16 to i32 NEW_LINE store i32 %17 @g_79 NEW_LINE br label %4 NEW_LINE 18: NEW_LINE store * i32 null %3 NEW_LINE %19 = load volatile i64 @g_68 NEW_LINE %20 = trunc i64 %19 to i16 NEW_LINE ret i16 %20 NEW_LINE }
define * i32 @func_44 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i64 0 @g_96 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 @g_96 NEW_LINE %9 = icmp ne i64 %8 , 35 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE store * i32 null %6 NEW_LINE %11 = load * i32 %6 NEW_LINE store * i32 %11 %3 NEW_LINE br label %20 NEW_LINE 12: NEW_LINE %13 = load i64 @g_96 NEW_LINE %14 = trunc i64 %13 to i8 NEW_LINE %15 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %14 , i8 zeroext 5 ) NEW_LINE %16 = zext i8 %15 to i64 NEW_LINE store i64 %16 @g_96 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load * * i32 @g_283 NEW_LINE %19 = load * i32 %18 NEW_LINE store * i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load * i32 %3 NEW_LINE ret * i32 %21 NEW_LINE }
define zeroext i8 @func_4 ( i32 %0 , i8 zeroext %1 , i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 8 x * * i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 8 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 8 x * * i32 %7 , i64 0 , i64 %14 NEW_LINE store * * i32 null %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store volatile * i32 null @g_40 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE ret i8 %21 NEW_LINE }
define i64 @func_26 ( i8 zeroext %0 , * i8 %1 , i32 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i16 NEW_LINE store i8 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i16 1 %10 NEW_LINE store i8 0 %6 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i8 %6 NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = icmp slt i32 %13 , 45 NEW_LINE br i1 %14 , label %15 , label %21 NEW_LINE 15: NEW_LINE %16 = load i16 %10 NEW_LINE %17 = sext i16 %16 to i64 NEW_LINE store i64 %17 %5 NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i8 %6 NEW_LINE %20 = add i8 %19 , 1 NEW_LINE store i8 %20 %6 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = load i16 %10 NEW_LINE %23 = sext i16 %22 to i64 NEW_LINE store i64 %23 %5 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i64 %5 NEW_LINE ret i64 %25 NEW_LINE }
define signext i8 @func_37 ( i32 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i32 NEW_LINE %3 = alloca ARR 3 1 x * * STRUCT 1 i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = getelementptr inbounds STRUCT 1 i32 %2 , i32 0 , i32 0 NEW_LINE store i32 %0 %6 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = icmp slt i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 1 x * * STRUCT 1 i64 %3 , i64 0 , i64 %12 NEW_LINE store * * STRUCT 1 i64 @g_462 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %5 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load * STRUCT 1 i64 @g_462 NEW_LINE store * STRUCT 1 i64 %18 @g_462 NEW_LINE ret i8 0 NEW_LINE }
define signext i8 @func_26 ( * i32 %0 , i16 zeroext %1 , i8 zeroext %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i32 946835292 %10 NEW_LINE store i64 -17 @g_131 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 @g_131 NEW_LINE %13 = icmp ne i64 %12 , 8 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = load * i8 @g_346 NEW_LINE %16 = load volatile i8 %15 NEW_LINE store i8 %16 %5 NEW_LINE br label %23 NEW_LINE 17: NEW_LINE %18 = load i64 @g_131 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 @g_131 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE %21 = load i32 %10 NEW_LINE %22 = trunc i32 %21 to i8 NEW_LINE store i8 %22 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i8 %5 NEW_LINE ret i8 %24 NEW_LINE }
define i32 @func_15 ( i16 signext %0 , i16 zeroext %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE store i16 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * * i16 @g_416 %7 NEW_LINE store * i32 @g_914 %8 NEW_LINE store * * i32 %8 %9 NEW_LINE %10 = load * * i16 %7 NEW_LINE store * i16 %4 %10 NEW_LINE %11 = icmp eq * i16 %4 , %4 NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = icmp ult i64 %13 , 2 NEW_LINE %15 = zext i1 %14 to i32 NEW_LINE %16 = load * i32 %8 NEW_LINE %17 = load * * i32 %9 NEW_LINE store * i32 %16 %17 NEW_LINE %18 = load * * i32 %9 NEW_LINE %19 = load * i32 %18 NEW_LINE %20 = load i32 %19 NEW_LINE ret i32 %20 NEW_LINE }
define zeroext i8 @func_58 ( * * i32 %0 ) { NEW_LINE %2 = alloca * * i32 NEW_LINE %3 = alloca ARR 3 4 x ARR 3 3 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store * * i32 %0 %2 NEW_LINE %6 = bitcast * ARR 3 4 x ARR 3 3 x i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 4 x ARR 3 3 x i32 @__const.func_58.l_1682 to * i8 ) , i64 48 , i1 false ) NEW_LINE %7 = getelementptr inbounds ARR 3 4 x ARR 3 3 x i32 %3 , i64 0 , i64 1 NEW_LINE %8 = getelementptr inbounds ARR 3 3 x i32 %7 , i64 0 , i64 0 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE ret i8 %10 NEW_LINE }
define * * i16 @func_59 ( * i8 %0 ) { NEW_LINE %2 = alloca STRUCT 1 * i8 NEW_LINE %3 = alloca ARR 3 8 x i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = getelementptr inbounds STRUCT 1 * i8 %2 , i32 0 , i32 0 NEW_LINE store * i8 %0 %7 NEW_LINE %8 = bitcast * ARR 3 8 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 , i8 0 , i64 32 , i1 false ) NEW_LINE store * i32 @g_64 %4 NEW_LINE store * * i16 getelementptr inbounds ( ARR 3 4 x * i16 @g_23 , i64 0 , i64 0 ) %5 NEW_LINE %9 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 6 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = load * i32 %4 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = or i32 %12 , %10 NEW_LINE store i32 %13 %11 NEW_LINE %14 = load * * i16 %5 NEW_LINE ret * * i16 %14 NEW_LINE }
define void @func_18 ( * STRUCT 1 ARR 3 21 x i8 noalias sret %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i16 NEW_LINE store i32 %1 %3 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp ule i32 %6 , 6 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE store i16 18884 %4 NEW_LINE %9 = load i16 %4 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE %11 = load volatile * i32 @g_25 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = and i32 %12 , %10 NEW_LINE store i32 %13 %11 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE br label %5 NEW_LINE 17: NEW_LINE %18 = bitcast * STRUCT 1 ARR 3 21 x i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 getelementptr inbounds ( STRUCT 21 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_27 , i32 0 , i32 0 ) , i64 21 , i1 false ) NEW_LINE ret void NEW_LINE }
define i32 @func_16 ( i64 %0 , * i32 %1 , i64 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i24 i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = bitcast * STRUCT 2 i24 i16 %6 to * i64 NEW_LINE store i64 %2 %12 NEW_LINE store i64 %0 %7 NEW_LINE store * i32 %1 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i32 1 %11 NEW_LINE %13 = load volatile * STRUCT 2 i24 i16 @g_1856 NEW_LINE %14 = bitcast * STRUCT 2 i24 i16 %13 to * i8 NEW_LINE %15 = bitcast * STRUCT 2 i24 i16 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 %15 , i64 8 , i1 false ) NEW_LINE %16 = load volatile * * STRUCT 1 i64 @g_652 NEW_LINE %17 = load * STRUCT 1 i64 %16 NEW_LINE %18 = load * * %union.U3 @g_1417 NEW_LINE store * %union.U3 null %18 NEW_LINE %19 = load i32 %11 NEW_LINE ret i32 %19 NEW_LINE }
define * i32 @func_45 ( i8 zeroext %0 , * i32 %1 , i16 signext %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE store i8 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 -1481095428 %9 NEW_LINE store i32 1634573525 %10 NEW_LINE store * i32 @g_76 %11 NEW_LINE %12 = load i32 %9 NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 6 x ARR 3 2 x i32 @g_14 , i64 0 , i64 3 , i64 0 ) NEW_LINE %14 = trunc i32 %13 to i16 NEW_LINE %15 = call zeroext i16 @safe_mul_func_uint16_t_u_u ( i16 zeroext -8 , i16 zeroext %14 ) NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE %17 = icmp ne i32 %12 , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE store i32 %18 %10 NEW_LINE %19 = load * i32 %11 NEW_LINE ret * i32 %19 NEW_LINE }
define * * i16 @func_57 ( i16 zeroext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * * i16 NEW_LINE %7 = alloca * * i16 NEW_LINE store i16 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 1286558247 %5 NEW_LINE store * * i16 null %6 NEW_LINE store * * i16 @g_53 %7 NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i16 %3 NEW_LINE %10 = zext i16 %9 to i32 NEW_LINE %11 = call i32 @safe_add_func_int32_t_s_s ( i32 %8 , i32 %10 ) NEW_LINE %12 = load * * i16 %6 NEW_LINE %13 = icmp ne * * i16 %12 , null NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = and i32 %14 , %15 NEW_LINE %17 = load * * i32 @g_372 NEW_LINE %18 = load volatile * i32 %17 NEW_LINE store volatile i32 %16 %18 NEW_LINE %19 = load * * i16 %7 NEW_LINE ret * * i16 %19 NEW_LINE }
define * * i32 @func_21 ( i8 signext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * * STRUCT 1 * i8 NEW_LINE %7 = alloca * * i32 NEW_LINE store i8 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 -934462014 %5 NEW_LINE store * * STRUCT 1 * i8 null %6 NEW_LINE store * * i32 null %7 NEW_LINE store i32 1287067149 %5 NEW_LINE %8 = load i8 %3 NEW_LINE %9 = sext i8 %8 to i16 NEW_LINE %10 = call zeroext i16 @safe_mul_func_uint16_t_u_u ( i16 zeroext %9 , i16 zeroext -1 ) NEW_LINE %11 = zext i16 %10 to i32 NEW_LINE %12 = load * i32 @g_628 NEW_LINE store i32 %11 %12 NEW_LINE %13 = load * * STRUCT 1 * i8 %6 NEW_LINE %14 = load volatile * * * STRUCT 1 * i8 @g_2622 NEW_LINE store * * STRUCT 1 * i8 %13 %14 NEW_LINE %15 = load * * i32 %7 NEW_LINE ret * * i32 %15 NEW_LINE }
define * i32 @func_46 ( * * i8 %0 ) { NEW_LINE %2 = alloca * * i8 NEW_LINE %3 = alloca ARR 3 3 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE store * * i8 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 3 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 3 x * i32 %3 , i64 0 , i64 %10 NEW_LINE store * i32 @g_50 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 3 x * i32 %3 , i64 0 , i64 1 NEW_LINE %17 = load * i32 %16 NEW_LINE store * i32 %17 @g_51 NEW_LINE %18 = getelementptr inbounds ARR 3 3 x * i32 %3 , i64 0 , i64 1 NEW_LINE %19 = load * i32 %18 NEW_LINE ret * i32 %19 NEW_LINE }
define signext i16 @func_30 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca ARR 3 2 x ARR 3 6 x i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE %6 = bitcast * ARR 3 2 x ARR 3 6 x i16 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 2 x ARR 3 6 x i16 @__const.func_30.l_1898 to * i8 ) , i64 24 , i1 false ) NEW_LINE %7 = load volatile * * * i8 @g_1880 NEW_LINE %8 = load * * i8 %7 NEW_LINE %9 = load volatile * * * i8 @g_1897 NEW_LINE store * * i8 %8 %9 NEW_LINE %10 = getelementptr inbounds ARR 3 2 x ARR 3 6 x i16 %3 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds ARR 3 6 x i16 %10 , i64 0 , i64 0 NEW_LINE %12 = load i16 %11 NEW_LINE ret i16 %12 NEW_LINE }
define * i16 @func_65 ( i16 signext %0 , * i16 %1 , * i16 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store * i16 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 8 x i32 @g_95 , i64 0 , i64 3 , i64 6 ) %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 @g_98 %9 NEW_LINE %10 = load i16 %4 NEW_LINE %11 = trunc i16 %10 to i8 NEW_LINE %12 = call zeroext i8 @safe_div_func_uint8_t_u_u ( i8 zeroext %11 , i8 zeroext 2 ) NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = load * i32 %7 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = and i32 %15 , %13 NEW_LINE store i32 %16 %14 NEW_LINE %17 = load * i32 %9 NEW_LINE store i32 %16 %17 NEW_LINE ret * i16 @g_48 NEW_LINE }
define zeroext i8 @func_26 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca ARR 3 8 x * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * * * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE %7 = bitcast * ARR 3 8 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_26.l_30 to * i8 ) , i64 64 , i1 false ) NEW_LINE %8 = getelementptr inbounds ARR 3 8 x * i32 %3 , i64 0 , i64 5 NEW_LINE store * * i32 %8 %4 NEW_LINE store * * * i32 %4 %5 NEW_LINE %9 = load * * * i32 %5 NEW_LINE store * * i32 null %9 NEW_LINE %10 = load i64 %2 NEW_LINE %11 = trunc i64 %10 to i8 NEW_LINE ret i8 %11 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 7 x * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 @g_3 %1 NEW_LINE store * i32 @g_3 %2 NEW_LINE store * i32 @g_3 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 7 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 7 x * i32 %4 , i64 0 , i64 %11 NEW_LINE store * i32 @g_3 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load volatile i8 @g_9 NEW_LINE %18 = add i8 %17 , 1 NEW_LINE store volatile i8 %18 @g_9 NEW_LINE %19 = load i8 @g_7 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE ret i32 %20 NEW_LINE }
define * i32 @func_110 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 8 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i16 %0 %2 NEW_LINE store * i32 @g_114 %3 NEW_LINE store * i32 @g_114 %4 NEW_LINE store * i32 @g_114 %5 NEW_LINE store * i32 null %6 NEW_LINE store * i32 @g_114 %7 NEW_LINE %10 = bitcast * ARR 3 8 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_110.l_119 to * i8 ) , i64 64 , i1 false ) NEW_LINE %11 = load i8 @g_120 NEW_LINE %12 = add i8 %11 , -1 NEW_LINE store i8 %12 @g_120 NEW_LINE %13 = load * i32 %6 NEW_LINE ret * i32 %13 NEW_LINE }
define void @func_17 ( * STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 noalias sret %0 , i32 %1 , i8 signext %2 , i16 signext %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE store i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i32 %4 %9 NEW_LINE store i64 -1 %10 NEW_LINE store i32 151658468 %11 NEW_LINE %12 = load i64 %10 NEW_LINE %13 = load i32 %11 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = and i64 %14 , %12 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE store i32 %16 %11 NEW_LINE %17 = load * STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 @g_585 NEW_LINE %18 = bitcast * STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 %0 to * i8 NEW_LINE %19 = bitcast * STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 %17 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 %19 , i64 29 , i1 false ) NEW_LINE ret void NEW_LINE }
define void @func_20 ( * STRUCT 4 i32 i32 i64 ARR 3 6 x i8 noalias sret %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE store i16 %1 %3 NEW_LINE store i16 2 @g_7 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i16 @g_7 NEW_LINE %6 = zext i16 %5 to i32 NEW_LINE %7 = icmp sge i32 %6 , 37 NEW_LINE br i1 %7 , label %8 , label %13 NEW_LINE 8: NEW_LINE %9 = bitcast * STRUCT 4 i32 i32 i64 ARR 3 6 x i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * STRUCT 12 i32 i8 i8 i8 i8 i64 i8 i8 i8 i8 i8 i8 @g_1177 to * i8 ) , i64 22 , i1 false ) NEW_LINE br label %15 NEW_LINE 10: NEW_LINE %11 = load i16 @g_7 NEW_LINE %12 = add i16 %11 , 1 NEW_LINE store i16 %12 @g_7 NEW_LINE br label %4 NEW_LINE 13: NEW_LINE %14 = bitcast * STRUCT 4 i32 i32 i64 ARR 3 6 x i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * STRUCT 12 i32 i8 i8 i8 i8 i64 i8 i8 i8 i8 i8 i8 @g_1178 to * i8 ) , i64 22 , i1 false ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE ret void NEW_LINE }
define zeroext i16 @func_48 ( i64 %0 , i16 signext %1 , i64 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * * * * * i16 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * * * * * i16 getelementptr inbounds ( ARR 3 6 x * * * * i16 @g_700 , i64 0 , i64 4 ) %11 NEW_LINE store i32 1232926400 %12 NEW_LINE %13 = load * * * * i16 getelementptr inbounds ( ARR 3 6 x * * * * i16 @g_700 , i64 0 , i64 4 ) NEW_LINE %14 = load * * * * * i16 %11 NEW_LINE store * * * * i16 %13 %14 NEW_LINE %15 = load volatile * * * * * i16 @g_704 NEW_LINE store * * * * i16 %13 %15 NEW_LINE %16 = load i32 %12 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 6 x * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 -382583525 %1 NEW_LINE store * i32 @g_222 %2 NEW_LINE store * * i32 @g_792 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 6 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 6 x * i32 %3 , i64 0 , i64 %11 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_68 , i64 0 , i64 3 ) %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load * * i32 %4 NEW_LINE %18 = load * i32 %17 NEW_LINE %19 = load i32 %18 NEW_LINE ret i32 %19 NEW_LINE }
define * i32 @func_47 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca ARR 3 9 x * i32 NEW_LINE %7 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 -870941198 %3 NEW_LINE store * i32 @g_52 %4 NEW_LINE store * i32 @g_52 %5 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %7 NEW_LINE %10 = icmp slt i32 %9 , 9 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %7 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x * i32 %6 , i64 0 , i64 %13 NEW_LINE store * i32 null %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %7 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %7 NEW_LINE br label %8 NEW_LINE 18: NEW_LINE %19 = load i8 @g_55 NEW_LINE %20 = add i8 %19 , 1 NEW_LINE store i8 %20 @g_55 NEW_LINE ret * i32 @g_44 NEW_LINE }
define signext i8 @func_156 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 2 x ARR 3 7 x * i32 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE %7 = bitcast * ARR 3 2 x ARR 3 7 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 2 x ARR 3 7 x * i32 @__const.func_156.l_159 to * i8 ) , i64 112 , i1 false ) NEW_LINE store i8 -102 %4 NEW_LINE %8 = load i8 %4 NEW_LINE %9 = add i8 %8 , 1 NEW_LINE store i8 %9 %4 NEW_LINE %10 = load i8 @g_87 NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = load volatile i32 @g_3 NEW_LINE %13 = xor i32 %12 , %11 NEW_LINE store volatile i32 %13 @g_3 NEW_LINE %14 = load * i8 @g_13 NEW_LINE %15 = load i8 %14 NEW_LINE ret i8 %15 NEW_LINE }
define signext i8 @func_59 ( i64 %0 , * * i64 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * * i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 6 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store * * i64 %1 %4 NEW_LINE store * i32 null %5 NEW_LINE store * i32 @g_70 %6 NEW_LINE store * i32 null %7 NEW_LINE %10 = bitcast * ARR 3 6 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 6 x * i32 @__const.func_59.l_72 to * i8 ) , i64 48 , i1 false ) NEW_LINE %11 = load i32 @g_74 NEW_LINE %12 = add i32 %11 , -1 NEW_LINE store i32 %12 @g_74 NEW_LINE %13 = load i64 getelementptr inbounds ( ARR 3 7 x ARR 3 9 x i64 @g_36 , i64 0 , i64 1 , i64 7 ) NEW_LINE %14 = trunc i64 %13 to i8 NEW_LINE ret i8 %14 NEW_LINE }
define * * i8 @func_36 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 9 x * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * * i8 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 -1 %6 NEW_LINE store * * i8 @g_286 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 9 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 9 x * i32 %5 , i64 0 , i64 %14 NEW_LINE store * i32 null %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i64 %6 NEW_LINE %21 = add i64 %20 , -1 NEW_LINE store i64 %21 %6 NEW_LINE %22 = load * * i8 %7 NEW_LINE ret * * i8 %22 NEW_LINE }
define zeroext i8 @func_15 ( i32 %0 , * i16 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 NEW_LINE store i32 %0 %3 NEW_LINE store * i16 %1 %4 NEW_LINE store * i8 @g_73 %5 NEW_LINE %7 = load * * * i32 @g_2281 NEW_LINE %8 = load volatile * * i32 %7 NEW_LINE store volatile * i32 null %8 NEW_LINE %9 = load * * STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 @g_210 NEW_LINE %10 = load * STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 %9 NEW_LINE %11 = load * i8 %5 NEW_LINE call void @func_88 ( * STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 sret %6 , * i8 %11 ) NEW_LINE %12 = bitcast * STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 %10 to * i8 NEW_LINE %13 = bitcast * STRUCT 10 i32 i16 i64 i8 i32 i32 i8 i64 i16 i16 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 %13 , i64 48 , i1 true ) NEW_LINE %14 = load i32 %3 NEW_LINE %15 = trunc i32 %14 to i8 NEW_LINE ret i8 %15 NEW_LINE }
define * i32 @func_2 ( i8 zeroext %0 , * i32 %1 , * i32 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE store i8 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 null %9 NEW_LINE store i32 16 @g_511 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_511 NEW_LINE %12 = icmp ule i32 %11 , 55 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load volatile * * i32 @g_2890 NEW_LINE %15 = load volatile * i32 %14 NEW_LINE %16 = load volatile i32 %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %23 NEW_LINE 19: NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @g_511 NEW_LINE %22 = call i32 @safe_add_func_uint32_t_u_u ( i32 %21 , i32 2 ) NEW_LINE store i32 %22 @g_511 NEW_LINE br label %10 NEW_LINE 23: NEW_LINE %24 = load * i32 %9 NEW_LINE ret * i32 %24 NEW_LINE }
define i64 @func_96 ( * i8 %0 , i16 signext %1 , i16 zeroext %2 , * i16 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i16 NEW_LINE store * i8 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store * i16 %3 %8 NEW_LINE store i16 15 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i16 %6 NEW_LINE %11 = sext i16 %10 to i32 NEW_LINE %12 = icmp eq i32 %11 , -18 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load i16 getelementptr inbounds ( ARR 3 10 x i16 @g_69 , i64 0 , i64 7 ) NEW_LINE %15 = icmp ne i16 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %23 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i16 %6 NEW_LINE %20 = sext i16 %19 to i32 NEW_LINE %21 = call i32 @safe_sub_func_int32_t_s_s ( i32 %20 , i32 5 ) NEW_LINE %22 = trunc i32 %21 to i16 NEW_LINE store i16 %22 %6 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i64 @g_75 NEW_LINE ret i64 %24 NEW_LINE }
define zeroext i8 @func_38 ( * i8 %0 , i32 %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca ARR 3 4 x i16 NEW_LINE %10 = alloca i32 NEW_LINE store * i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store i32 0 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %10 NEW_LINE %13 = icmp slt i32 %12 , 4 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %10 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 4 x i16 %9 , i64 0 , i64 %16 NEW_LINE store i16 -1 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %10 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %10 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = getelementptr inbounds ARR 3 4 x i16 %9 , i64 0 , i64 2 NEW_LINE %23 = load i16 %22 NEW_LINE %24 = trunc i16 %23 to i8 NEW_LINE ret i8 %24 NEW_LINE }
define zeroext i16 @func_67 ( * i32 %0 , i32 %1 , i32 %2 , i32 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i16 NEW_LINE store * i32 %0 %7 NEW_LINE store i32 %1 %8 NEW_LINE store i32 %2 %9 NEW_LINE store i32 %3 %10 NEW_LINE store i16 %4 %11 NEW_LINE store i32 6 %10 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %10 NEW_LINE %14 = icmp eq i32 %13 , 8 NEW_LINE br i1 %14 , label %15 , label %21 NEW_LINE 15: NEW_LINE %16 = load i8 getelementptr inbounds ( ARR 3 2 x i8 @g_8 , i64 0 , i64 1 ) NEW_LINE %17 = sext i8 %16 to i16 NEW_LINE store i16 %17 %6 NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %10 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %10 NEW_LINE br label %12 NEW_LINE 21: NEW_LINE %22 = load i8 getelementptr inbounds ( STRUCT 2 i8 i8 @g_43 , i32 0 , i32 0 ) NEW_LINE %23 = sext i8 %22 to i16 NEW_LINE store i16 %23 %6 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i16 %6 NEW_LINE ret i16 %25 NEW_LINE }
define * i32 @func_30 ( i64 %0 , i32 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca ARR 3 1 x ARR 3 8 x * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE %11 = bitcast * ARR 3 1 x ARR 3 8 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 1 x ARR 3 8 x * i32 @__const.func_30.l_1335 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i8 -47 %8 NEW_LINE %12 = load i8 %8 NEW_LINE %13 = add i8 %12 , -1 NEW_LINE store i8 %13 %8 NEW_LINE %14 = getelementptr inbounds ARR 3 1 x ARR 3 8 x * i32 %7 , i64 0 , i64 0 NEW_LINE %15 = getelementptr inbounds ARR 3 8 x * i32 %14 , i64 0 , i64 6 NEW_LINE %16 = load * i32 %15 NEW_LINE ret * i32 %16 NEW_LINE }
define zeroext i16 @func_68 ( * i32 %0 , i32 %1 , i32 %2 , i16 signext %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i64 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i32 -1 %11 NEW_LINE store * i32 null %12 NEW_LINE store * i32 null %13 NEW_LINE store * i32 @g_1414 %14 NEW_LINE store * i64 @g_254 %15 NEW_LINE %16 = load * i32 %14 NEW_LINE %17 = load i32 %16 NEW_LINE store i32 %17 %16 NEW_LINE %18 = load * i32 %12 NEW_LINE %19 = load * * * i32 @g_529 NEW_LINE %20 = load * * i32 %19 NEW_LINE store * i32 %18 %20 NEW_LINE %21 = load i32 %8 NEW_LINE %22 = trunc i32 %21 to i16 NEW_LINE ret i16 %22 NEW_LINE }
define zeroext i8 @func_38 ( * i64 %0 , i32 %1 , i16 signext %2 , * i64 %3 ) { NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca ARR 3 3 x i64 NEW_LINE %10 = alloca i32 NEW_LINE store * i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store * i64 %3 %8 NEW_LINE store i32 0 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %10 NEW_LINE %13 = icmp slt i32 %12 , 3 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %10 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 3 x i64 %9 , i64 0 , i64 %16 NEW_LINE store i64 5996075216768692736 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %10 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %10 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = getelementptr inbounds ARR 3 3 x i64 %9 , i64 0 , i64 1 NEW_LINE %23 = load i64 %22 NEW_LINE %24 = trunc i64 %23 to i8 NEW_LINE ret i8 %24 NEW_LINE }
define * i8 @func_62 ( i32 %0 , i64 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 6 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i8 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * i32 @g_39 %7 NEW_LINE store * i32 @g_39 %8 NEW_LINE store * i32 @g_39 %9 NEW_LINE %14 = bitcast * ARR 3 6 x * i32 %10 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %14 , i8 0 , i64 48 , i1 false ) NEW_LINE store i32 0 %11 NEW_LINE store * i8 @g_68 %12 NEW_LINE %15 = load i32 %11 NEW_LINE %16 = add i32 %15 , 1 NEW_LINE store i32 %16 %11 NEW_LINE %17 = load * i8 %12 NEW_LINE ret * i8 %17 NEW_LINE }
define zeroext i8 @func_8 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 10 x i64 @g_1629 , i64 0 , i64 9 ) %5 NEW_LINE store i32 1328955645 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = zext i32 %7 to i64 NEW_LINE %9 = load * i64 %5 NEW_LINE store i64 %8 %9 NEW_LINE %10 = load i32 %6 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE %12 = xor i1 %11 , true NEW_LINE %13 = zext i1 %12 to i32 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = call i64 @safe_sub_func_uint64_t_u_u ( i64 %8 , i64 %14 ) NEW_LINE %16 = load * i32 @g_2064 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = and i64 %18 , %15 NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE store i32 %20 %16 NEW_LINE %21 = load volatile * * i32 @g_1127 NEW_LINE store * i32 %6 %21 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE ret i8 %23 NEW_LINE }
define i32 @func_102 ( * i64 %0 , i8 signext %1 , i16 signext %2 ) { NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE store * i64 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x ARR 3 9 x i32 @g_107 , i64 0 , i64 3 , i64 5 ) %7 NEW_LINE %8 = load i64 getelementptr inbounds ( ARR 3 10 x ARR 3 1 x i64 @g_54 , i64 0 , i64 0 , i64 0 ) NEW_LINE %9 = trunc i64 %8 to i32 NEW_LINE %10 = load * i32 %7 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i64 getelementptr inbounds ( ARR 3 10 x ARR 3 1 x i64 @g_54 , i64 0 , i64 7 , i64 0 ) NEW_LINE %12 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext 25482 , i16 signext -20925 ) NEW_LINE %13 = sext i16 %12 to i32 NEW_LINE %14 = load * i32 %7 NEW_LINE store i32 %13 %14 NEW_LINE %15 = load i8 @g_52 NEW_LINE %16 = sext i8 %15 to i32 NEW_LINE ret i32 %16 NEW_LINE }
define void @func_29 ( * STRUCT 5 i64 i8 i32 i16 i32 noalias sret %0 , i64 %1 , * STRUCT 5 i64 i8 i32 i16 i32 byval ( STRUCT 5 i64 i8 i32 i16 i32 ) %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE store i64 %1 %4 NEW_LINE store i8 5 @g_18 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i8 @g_18 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = icmp sgt i32 %7 , 20 NEW_LINE br i1 %8 , label %9 , label %14 NEW_LINE 9: NEW_LINE %10 = bitcast * STRUCT 5 i64 i8 i32 i16 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * STRUCT 5 i64 i8 i32 i16 i32 @__const.func_29.l_35 to * i8 ) , i64 24 , i1 false ) NEW_LINE br label %16 NEW_LINE 11: NEW_LINE %12 = load i8 @g_18 NEW_LINE %13 = add i8 %12 , 1 NEW_LINE store i8 %13 @g_18 NEW_LINE br label %5 NEW_LINE 14: NEW_LINE %15 = bitcast * STRUCT 5 i64 i8 i32 i16 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * STRUCT 5 i64 i8 i32 i16 i32 @g_36 to * i8 ) , i64 24 , i1 false ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE ret void NEW_LINE }
define zeroext i8 @func_63 ( i32 %0 , i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca STRUCT 2 i8 ARR 3 3 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = bitcast * STRUCT 2 i8 ARR 3 3 x i8 %5 to * i32 NEW_LINE store i32 %0 %10 NEW_LINE store i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 4 x ARR 3 10 x * i32 @g_54 , i64 0 , i64 0 , i64 4 ) %9 NEW_LINE %11 = load * i32 %8 NEW_LINE %12 = load * * i32 %9 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i32 bitcast ( * STRUCT 2 i24 i32 getelementptr inbounds ( ARR 3 4 x STRUCT 2 i24 i32 bitcast ( * ARR 3 4 x STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @g_404 to * ARR 3 4 x STRUCT 2 i24 i32 ) , i64 0 , i64 3 ) to * i32 ) NEW_LINE %14 = shl i32 %13 , 8 NEW_LINE %15 = ashr i32 %14 , 29 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define zeroext i16 @func_36 ( i16 signext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * * i32 NEW_LINE store i16 %0 %2 NEW_LINE store * i8 @g_20 %3 NEW_LINE store * i8 @g_40 %4 NEW_LINE store i32 -1 %5 NEW_LINE store * i8 @g_109 %6 NEW_LINE store * * i32 @g_712 %7 NEW_LINE %8 = load * i8 %3 NEW_LINE store * i8 null %4 NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE %10 = zext i1 %9 to i32 NEW_LINE %11 = call * i32 @func_46 ( * * i8 null ) NEW_LINE %12 = call zeroext i8 @func_44 ( * i32 %11 ) NEW_LINE %13 = load * i8 %6 NEW_LINE store i8 %12 %13 NEW_LINE %14 = call * i32 @func_41 ( i8 zeroext %12 , * * i8 %3 ) NEW_LINE %15 = load * * i32 %7 NEW_LINE store * i32 %14 %15 NEW_LINE %16 = load i16 %2 NEW_LINE ret i16 %16 NEW_LINE }
define signext i16 @func_35 ( * i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 10 x i8 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %9 = bitcast * ARR 3 10 x i8 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( ARR 3 10 x i8 @__const.func_35.l_3912 , i32 0 , i32 0 ) , i64 10 , i1 false ) NEW_LINE %10 = load * * * * i32 @g_1429 NEW_LINE %11 = load * * * i32 %10 NEW_LINE %12 = load volatile * * i32 %11 NEW_LINE %13 = load * * * * i32 @g_1429 NEW_LINE %14 = load * * * i32 %13 NEW_LINE store volatile * * i32 %12 %14 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i8 %7 , i64 0 , i64 0 NEW_LINE %16 = load i8 %15 NEW_LINE %17 = sext i8 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define i32 @func_44 ( * i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i16 NEW_LINE store * i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i16 -20784 %5 NEW_LINE %6 = load i64 %4 NEW_LINE %7 = trunc i64 %6 to i16 NEW_LINE %8 = call i32 @func_48 ( i16 signext %7 ) NEW_LINE %9 = load i16 %5 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE %11 = and i32 %10 , %8 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE store i16 %12 %5 NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 9 x ARR 3 2 x ARR 3 7 x i32 @g_5 , i64 0 , i64 1 , i64 0 , i64 4 ) NEW_LINE %14 = trunc i32 %13 to i16 NEW_LINE %15 = icmp eq * * i32 %3 , %3 NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE %18 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %14 , i16 zeroext %17 ) NEW_LINE %19 = zext i16 %18 to i32 NEW_LINE %20 = load volatile * i32 @g_77 NEW_LINE store i32 %19 %20 NEW_LINE %21 = load * i32 %3 NEW_LINE %22 = load i32 %21 NEW_LINE ret i32 %22 NEW_LINE }
define * i32 @func_31 ( i16 zeroext %0 , i32 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE store i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i64 8 %7 NEW_LINE %8 = load i64 @g_9 NEW_LINE %9 = load i64 %7 NEW_LINE %10 = xor i64 %9 , %8 NEW_LINE store i64 %10 %7 NEW_LINE %11 = trunc i64 %10 to i8 NEW_LINE %12 = call signext i8 @safe_unary_minus_func_int8_t_s ( i8 signext %11 ) NEW_LINE %13 = sext i8 %12 to i32 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %21 NEW_LINE 15: NEW_LINE %16 = load i64 @g_9 NEW_LINE %17 = trunc i64 %16 to i16 NEW_LINE %18 = call signext i16 @safe_div_func_int16_t_s_s ( i16 signext -5 , i16 signext %17 ) NEW_LINE %19 = sext i16 %18 to i32 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i1 ARR 2 false %3 , ARR 2 %20 %15 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE %24 = load volatile * i32 @g_52 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = and i32 %25 , %23 NEW_LINE store i32 %26 %24 NEW_LINE ret * i32 @g_3 NEW_LINE }
define * i32 @func_57 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i64 -5 %3 NEW_LINE store * i32 @g_84 %4 NEW_LINE %5 = load i64 %3 NEW_LINE %6 = trunc i64 %5 to i8 NEW_LINE %7 = call signext i8 @safe_lshift_func_int8_t_s_s ( i8 signext %6 , i32 6 ) NEW_LINE %8 = sext i8 %7 to i16 NEW_LINE %9 = call signext i16 @safe_mod_func_int16_t_s_s ( i16 signext 15076 , i16 signext %8 ) NEW_LINE %10 = call signext i16 @safe_unary_minus_func_int16_t_s ( i16 signext %9 ) NEW_LINE %11 = load * i32 %2 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load * * i32 @g_168 NEW_LINE %14 = load * i32 %13 NEW_LINE store i32 %12 %14 NEW_LINE %15 = load volatile * i32 @g_188 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i64 %3 NEW_LINE %17 = load * i32 @g_169 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = and i64 %19 , %16 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE store i32 %21 %17 NEW_LINE %22 = load * i32 %4 NEW_LINE ret * i32 %22 NEW_LINE }
define * STRUCT 4 i24 i16 i24 i24 @func_91 ( i32 %0 , i32 %1 , * i16 %2 , * i8 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca * * * i32 NEW_LINE %14 = alloca * STRUCT 4 i24 i16 i24 i24 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_136 %11 NEW_LINE store * * i32 %11 %12 NEW_LINE store * * * i32 %12 %13 NEW_LINE store * STRUCT 4 i24 i16 i24 i24 bitcast ( * STRUCT 15 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_883 to * STRUCT 4 i24 i16 i24 i24 ) %14 NEW_LINE %15 = load * * i32 %12 NEW_LINE %16 = load * * * i32 %13 NEW_LINE store * * i32 %15 %16 NEW_LINE %17 = load * STRUCT 4 i24 i16 i24 i24 %14 NEW_LINE ret * STRUCT 4 i24 i16 i24 i24 %17 NEW_LINE }
define signext i16 @func_1 ( ) { NEW_LINE %1 = alloca * * * * i16 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE store * * * * i16 getelementptr inbounds ( ARR 3 10 x ARR 3 5 x ARR 3 3 x * * * i16 @g_994 , i64 0 , i64 8 , i64 1 , i64 0 ) %1 NEW_LINE store * i32 @g_1592 %2 NEW_LINE store i32 392970967 %3 NEW_LINE %4 = call signext i16 @func_4 ( i32 -1 ) NEW_LINE %5 = load * * * * i16 %1 NEW_LINE %6 = icmp ne * * * * i16 null , %5 NEW_LINE %7 = zext i1 %6 to i32 NEW_LINE %8 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %4 , i32 %7 ) NEW_LINE %9 = sext i16 %8 to i32 NEW_LINE %10 = load * i32 %2 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = xor i32 %11 , %9 NEW_LINE store i32 %12 %10 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = xor i32 %13 , %12 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load * i32 %2 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define * i32 @func_55 ( * i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 8 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = bitcast * ARR 3 8 x * i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 , i8 0 , i64 64 , i1 false ) NEW_LINE %8 = getelementptr inbounds ARR 3 8 x * i32 %5 , i64 0 , i64 4 NEW_LINE %9 = load * i32 %8 NEW_LINE %10 = icmp ne * i32 @g_29 , %9 NEW_LINE %11 = zext i1 %10 to i32 NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = trunc i64 %13 to i16 NEW_LINE %15 = call zeroext i16 @safe_mod_func_uint16_t_u_u ( i16 zeroext %12 , i16 zeroext %14 ) NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE %17 = load i32 @g_90 NEW_LINE %18 = or i32 %17 , %16 NEW_LINE store i32 %18 @g_90 NEW_LINE ret * i32 @g_80 NEW_LINE }
define zeroext i8 @func_23 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i64 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 26 @g_26 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 @g_26 NEW_LINE %7 = icmp sgt i32 %6 , -22 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store * i32 @g_30 %4 NEW_LINE %9 = load * i32 %4 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE store i32 %12 %9 NEW_LINE %13 = load * i32 %4 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %23 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @g_26 NEW_LINE %20 = trunc i32 %19 to i8 NEW_LINE %21 = call zeroext i8 @safe_sub_func_uint8_t_u_u ( i8 zeroext %20 , i8 zeroext 1 ) NEW_LINE %22 = zext i8 %21 to i32 NEW_LINE store i32 %22 @g_26 NEW_LINE br label %5 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE ret i8 %25 NEW_LINE }
define i64 @func_51 ( * i16 %0 , * i16 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 2 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i16 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x * i32 %7 , i64 0 , i64 %14 NEW_LINE store * i32 @g_79 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 2 x * i32 %7 , i64 0 , i64 0 NEW_LINE %21 = load * i32 %20 NEW_LINE %22 = load volatile * * i32 @g_500 NEW_LINE store * i32 %21 %22 NEW_LINE %23 = load volatile i32 @g_245 NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE ret i64 %24 NEW_LINE }
define * i32 @func_86 ( i16 signext %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 @g_29 %7 NEW_LINE store i32 0 @g_93 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_93 NEW_LINE %12 = icmp ne i32 %11 , 20 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE store * i32 @g_29 %8 NEW_LINE store * * i32 %8 %9 NEW_LINE %14 = load * i32 %8 NEW_LINE %15 = load * * i32 %9 NEW_LINE store * i32 %14 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 @g_93 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE %19 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %18 , i16 zeroext 1 ) NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE store i32 %20 @g_93 NEW_LINE br label %10 NEW_LINE 21: NEW_LINE store * i32 @g_29 @g_99 NEW_LINE %22 = load * i32 %7 NEW_LINE ret * i32 %22 NEW_LINE }
define * * i8 @func_26 ( * i8 %0 , i64 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * * * i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * * * i64 @g_2042 %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 2 x i32 @g_106 , i64 0 , i64 1 , i64 1 ) %6 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 7 x * i32 @g_557 , i64 0 , i64 7 , i64 5 ) %7 NEW_LINE %8 = load * * * i64 %5 NEW_LINE store * * * i64 %8 %5 NEW_LINE %9 = load * i32 %6 NEW_LINE %10 = load * * i32 %7 NEW_LINE store * i32 %9 %10 NEW_LINE %11 = load volatile * * i32 @g_2550 NEW_LINE store * i32 %9 %11 NEW_LINE %12 = load volatile * * * * * i8 @g_250 NEW_LINE %13 = load * * * * i8 %12 NEW_LINE %14 = load * * * i8 %13 NEW_LINE %15 = load * * i8 %14 NEW_LINE ret * * i8 %15 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE store i32 -9 %1 NEW_LINE store i32 -13 @g_5 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @g_5 NEW_LINE %5 = icmp eq i32 %4 , -30 NEW_LINE br i1 %5 , label %6 , label %14 NEW_LINE 6: NEW_LINE %7 = load volatile i32 @g_2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %14 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @g_5 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @g_5 NEW_LINE br label %3 NEW_LINE 14: NEW_LINE store i32 -25 @g_5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @g_5 NEW_LINE %17 = icmp sgt i32 %16 , -26 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE store * i32 @g_5 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @g_5 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 @g_5 NEW_LINE br label %15 NEW_LINE 22: NEW_LINE %23 = load i32 %1 NEW_LINE %24 = trunc i32 %23 to i8 NEW_LINE ret i8 %24 NEW_LINE }
define i64 @func_42 ( * i8 %0 , * i8 %1 , i16 zeroext %2 , * i32 %3 , * i8 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i24 i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i8 NEW_LINE %12 = alloca * STRUCT 2 i24 i32 NEW_LINE store * i8 %0 %7 NEW_LINE store * i8 %1 %8 NEW_LINE store i16 %2 %9 NEW_LINE store * i32 %3 %10 NEW_LINE store * i8 %4 %11 NEW_LINE store * STRUCT 2 i24 i32 bitcast ( * STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @g_184 to * STRUCT 2 i24 i32 ) %12 NEW_LINE %13 = load * STRUCT 2 i24 i32 %12 NEW_LINE %14 = load volatile * * STRUCT 2 i24 i32 @g_2237 NEW_LINE store * STRUCT 2 i24 i32 %13 %14 NEW_LINE %15 = load volatile * * STRUCT 2 i24 i32 @g_2237 NEW_LINE %16 = load * STRUCT 2 i24 i32 %15 NEW_LINE %17 = bitcast * STRUCT 2 i24 i32 %6 to * i8 NEW_LINE %18 = bitcast * STRUCT 2 i24 i32 %16 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 %18 , i64 8 , i1 false ) NEW_LINE %19 = bitcast * STRUCT 2 i24 i32 %6 to * i64 NEW_LINE %20 = load i64 %19 NEW_LINE ret i64 %20 NEW_LINE }
define * i32 @func_7 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 6 x * * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE %10 = bitcast * ARR 3 6 x * * i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %10 , i8 0 , i64 48 , i1 false ) NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_63 , i64 0 , i64 0 ) %5 NEW_LINE store i32 -756831749 %6 NEW_LINE store i16 -2 %7 NEW_LINE store * i32 null %8 NEW_LINE %11 = load * i32 %3 NEW_LINE store * i32 %11 %5 NEW_LINE %12 = load i16 %7 NEW_LINE %13 = add i16 %12 , -1 NEW_LINE store i16 %13 %7 NEW_LINE %14 = load * i32 %8 NEW_LINE ret * i32 %14 NEW_LINE }
define * i32 @func_62 ( * i32 %0 , i8 zeroext %1 , * STRUCT 8 i8 i32 i32 i16 i32 i32 i32 i16 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * STRUCT 8 i8 i32 i32 i16 i32 i32 i32 i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store * STRUCT 8 i8 i32 i32 i16 i32 i32 i32 i16 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 8 i8 i32 i32 i16 i32 i32 i32 i16 bitcast ( * STRUCT 17 i8 ARR 3 3 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i32 i32 i32 i8 i8 @g_34 to * STRUCT 8 i8 i32 i32 i16 i32 i32 i32 i16 ) , i32 0 , i32 6 ) %7 NEW_LINE store * * i32 %7 %8 NEW_LINE %9 = load * i32 %4 NEW_LINE store * i32 %9 %4 NEW_LINE %10 = load * * i32 %8 NEW_LINE store * i32 %9 %10 NEW_LINE ret * i32 bitcast ( * i8 getelementptr ( i8 getelementptr inbounds ( ARR 3 6 x STRUCT 17 i8 ARR 3 3 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i32 i32 i32 i8 i8 @g_61 , i32 0 , i32 0 , i32 0 ) , i64 24 ) to * i32 ) NEW_LINE }
define signext i16 @func_24 ( i64 %0 , i8 signext %1 , * i32 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %7 NEW_LINE store i8 %1 %8 NEW_LINE store * i32 %2 %9 NEW_LINE store i32 %3 %10 NEW_LINE store * i32 %4 %11 NEW_LINE store i32 1188373073 %12 NEW_LINE store i32 0 @g_121 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_121 NEW_LINE %15 = icmp ult i32 %14 , 36 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i32 %12 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE store i16 %18 %6 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 @g_121 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE %22 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %21 , i8 zeroext 7 ) NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE store i32 %23 @g_121 NEW_LINE br label %13 NEW_LINE 24: NEW_LINE %25 = load i32 %12 NEW_LINE %26 = trunc i32 %25 to i16 NEW_LINE store i16 %26 %6 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i16 %6 NEW_LINE ret i16 %28 NEW_LINE }
define signext i8 @func_34 ( i64 %0 , i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store i8 4 @g_96 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i8 @g_96 NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = icmp sge i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %28 NEW_LINE 11: NEW_LINE %12 = load * * * i32 @g_211 NEW_LINE %13 = load volatile * * i32 %12 NEW_LINE %14 = load volatile * i32 %13 NEW_LINE %15 = load volatile i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %28 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = icmp ne i64 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE br label %28 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i8 @g_96 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = sub nsw i32 %25 , 1 NEW_LINE %27 = trunc i32 %26 to i8 NEW_LINE store i8 %27 @g_96 NEW_LINE br label %7 NEW_LINE 28: NEW_LINE %29 = load i64 %6 NEW_LINE %30 = trunc i64 %29 to i8 NEW_LINE ret i8 %30 NEW_LINE }
define i64 @func_64 ( * i32 %0 , * i8 %1 , i32 %2 , * * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 7 x i32 NEW_LINE %12 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %13 = bitcast * ARR 3 7 x i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 7 x i32 @__const.func_64.l_124 to * i8 ) , i64 28 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 7 x i32 %11 , i64 0 , i64 4 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load * i32 @g_49 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = and i32 %17 , %15 NEW_LINE store i32 %18 %16 NEW_LINE %19 = getelementptr inbounds ARR 3 7 x i32 %11 , i64 0 , i64 4 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE ret i64 %21 NEW_LINE }
define void @func_75 ( * STRUCT 6 i24 i24 i32 i32 i32 i8 noalias sret %0 , * i32 %1 , * i8 %2 , * i32 %3 , i32 %4 , * * i32 %5 ) { NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca i16 NEW_LINE store * i32 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * * i32 %5 %11 NEW_LINE store i16 -1 %12 NEW_LINE %13 = load i16 %12 NEW_LINE %14 = sext i16 %13 to i64 NEW_LINE %15 = and i64 %14 , 642402501 NEW_LINE %16 = trunc i64 %15 to i16 NEW_LINE store i16 %16 %12 NEW_LINE %17 = load i16 %12 NEW_LINE %18 = sext i16 %17 to i32 NEW_LINE %19 = load volatile * i32 @g_84 NEW_LINE store i32 %18 %19 NEW_LINE %20 = bitcast * STRUCT 6 i24 i24 i32 i32 i32 i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 getelementptr inbounds ( STRUCT 22 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 3 x i8 @g_86 , i32 0 , i32 0 ) , i64 24 , i1 false ) NEW_LINE ret void NEW_LINE }
define signext i16 @func_55 ( * i8 %0 , * * i32 %1 , * * i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 * i8 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca ARR 3 9 x i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = getelementptr inbounds STRUCT 1 * i8 %4 , i32 0 , i32 0 NEW_LINE store * i8 %0 %10 NEW_LINE store * * i32 %1 %5 NEW_LINE store * * i32 %2 %6 NEW_LINE %11 = bitcast * ARR 3 9 x i32 %7 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %11 , i8 0 , i64 36 , i1 false ) NEW_LINE store * i32 @g_34 %8 NEW_LINE %12 = call zeroext i16 @safe_rshift_func_uint16_t_u_s ( i16 zeroext 8 , i32 11 ) NEW_LINE %13 = load * i32 %8 NEW_LINE %14 = load * * * * i32 @g_452 NEW_LINE %15 = load volatile * * * i32 %14 NEW_LINE %16 = load volatile * * i32 %15 NEW_LINE store volatile * i32 %13 %16 NEW_LINE %17 = load * i32 %8 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE ret i16 %19 NEW_LINE }
define i64 @func_51 ( * i32 %0 , i32 %1 , i32 %2 , * i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_33 , i64 0 , i64 1 ) %11 NEW_LINE store * * i32 %11 %12 NEW_LINE %13 = load i64 @g_7 NEW_LINE %14 = load * i32 @g_32 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = and i64 %16 , 1359351603 NEW_LINE %18 = trunc i64 %17 to i32 NEW_LINE store i32 %18 %14 NEW_LINE %19 = load * i32 %11 NEW_LINE %20 = load * * i32 %12 NEW_LINE store * i32 %19 %20 NEW_LINE %21 = load volatile * * i32 @g_74 NEW_LINE store * i32 %19 %21 NEW_LINE %22 = load * i32 %11 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE ret i64 %24 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca * * i32 NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 @g_4 %1 NEW_LINE store * * i32 %1 %2 NEW_LINE store * * i32 null %3 NEW_LINE store i32 1062225860 %4 NEW_LINE %5 = load * * i32 %2 NEW_LINE store * i32 null %5 NEW_LINE %6 = load * * i32 %3 NEW_LINE %7 = load i32 @g_4 NEW_LINE %8 = load i32 @g_4 NEW_LINE %9 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext 15 , i32 %8 ) NEW_LINE %10 = load i32 %4 NEW_LINE %11 = trunc i32 %10 to i16 NEW_LINE %12 = load i32 @g_4 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE %14 = call i32 @func_5 ( * * i32 %6 , i32 %7 , i16 signext %11 , i16 signext %13 ) NEW_LINE %15 = load volatile * i32 @g_15 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = or i32 %16 , %14 NEW_LINE store i32 %17 %15 NEW_LINE %18 = load i32 getelementptr inbounds ( ARR 3 2 x i32 @g_16 , i64 0 , i64 0 ) NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE ret i64 %19 NEW_LINE }
define signext i8 @func_67 ( * i32 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i32 1 %6 NEW_LINE store i32 0 %7 NEW_LINE store i8 0 @g_426 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i8 @g_426 NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = icmp sle i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE store * * i32 @g_158 %8 NEW_LINE %14 = load * i32 %4 NEW_LINE %15 = load * * i32 %8 NEW_LINE store * i32 %14 %15 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = trunc i32 %16 to i8 NEW_LINE store i8 %17 %3 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i8 @g_426 NEW_LINE %20 = zext i8 %19 to i32 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE %22 = trunc i32 %21 to i8 NEW_LINE store i8 %22 @g_426 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %7 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE store i8 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i8 %3 NEW_LINE ret i8 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_38 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 7 x * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store * i32 @g_17 %3 NEW_LINE store * i32 @g_17 %4 NEW_LINE store i32 66889195 %5 NEW_LINE %9 = getelementptr inbounds ARR 3 7 x * i32 %6 , i64 0 , i64 0 NEW_LINE store * i32 %5 %9 NEW_LINE %10 = getelementptr inbounds * i32 %9 , i64 1 NEW_LINE store * i32 @g_17 %10 NEW_LINE %11 = getelementptr inbounds * i32 %10 , i64 1 NEW_LINE store * i32 %5 %11 NEW_LINE %12 = getelementptr inbounds * i32 %11 , i64 1 NEW_LINE store * i32 %5 %12 NEW_LINE %13 = getelementptr inbounds * i32 %12 , i64 1 NEW_LINE store * i32 @g_17 %13 NEW_LINE %14 = getelementptr inbounds * i32 %13 , i64 1 NEW_LINE store * i32 %5 %14 NEW_LINE %15 = getelementptr inbounds * i32 %14 , i64 1 NEW_LINE store * i32 %5 %15 NEW_LINE store i8 -28 %7 NEW_LINE %16 = load i8 %7 NEW_LINE %17 = add i8 %16 , -1 NEW_LINE store i8 %17 %7 NEW_LINE ret * i32 @g_17 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i8 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i8 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i8 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i16 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define * * i32 @func_88 ( i32 %0 , i64 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i8 0 @g_120 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i8 @g_120 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp slt i32 %12 , 25 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 9 x * i32 @g_102 , i64 0 , i64 0 , i64 8 ) %5 NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load i8 @g_120 NEW_LINE %17 = sext i8 %16 to i64 NEW_LINE %18 = call i64 @safe_add_func_uint64_t_u_u ( i64 %17 , i64 8 ) NEW_LINE %19 = trunc i64 %18 to i8 NEW_LINE store i8 %19 @g_120 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 9 x * i32 @g_102 , i64 0 , i64 0 , i64 8 ) %5 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load * * i32 %5 NEW_LINE ret * * i32 %22 NEW_LINE }
define zeroext i8 @func_79 ( i16 signext %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca ARR 3 2 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store i32 -7 %6 NEW_LINE store i64 -7 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x * i32 %5 , i64 0 , i64 %14 NEW_LINE store * i32 @g_34 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i64 %7 NEW_LINE %21 = add i64 %20 , -1 NEW_LINE store i64 %21 %7 NEW_LINE %22 = load i16 %3 NEW_LINE %23 = sext i16 %22 to i32 NEW_LINE %24 = load * i32 @g_74 NEW_LINE store i32 %23 %24 NEW_LINE %25 = load i16 %3 NEW_LINE %26 = trunc i16 %25 to i8 NEW_LINE ret i8 %26 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_12 ( i64 %0 , * i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i16 0 %9 NEW_LINE store i32 -4 %10 NEW_LINE %11 = load i16 %9 NEW_LINE %12 = add i16 %11 , 1 NEW_LINE store i16 %12 %9 NEW_LINE %13 = load i64 %5 NEW_LINE %14 = trunc i64 %13 to i8 NEW_LINE %15 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext 17 , i8 zeroext %14 ) NEW_LINE %16 = zext i8 %15 to i16 NEW_LINE %17 = call zeroext i16 @safe_unary_minus_func_uint16_t_u ( i16 zeroext %16 ) NEW_LINE %18 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext 12 , i32 5 ) NEW_LINE %19 = zext i8 %18 to i32 NEW_LINE %20 = call zeroext i16 @safe_lshift_func_uint16_t_u_u ( i16 zeroext %17 , i32 %19 ) NEW_LINE %21 = zext i16 %20 to i32 NEW_LINE %22 = load * i32 @g_879 NEW_LINE store i32 %21 %22 NEW_LINE store i32 %21 %10 NEW_LINE %23 = load * i32 %6 NEW_LINE ret * i32 %23 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i16 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_38 ( * i32 %0 , i16 signext %1 , i64 %2 , i16 zeroext %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca ARR 3 9 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * * i32 @g_221 %11 NEW_LINE %14 = bitcast * ARR 3 9 x * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_38.l_786 to * i8 ) , i64 72 , i1 false ) NEW_LINE %15 = load * i32 %10 NEW_LINE store * i32 %15 %10 NEW_LINE %16 = load * i32 %6 NEW_LINE %17 = load * * i32 %11 NEW_LINE store * i32 %16 %17 NEW_LINE %18 = getelementptr inbounds ARR 3 9 x * i32 %12 , i64 0 , i64 0 NEW_LINE %19 = load * i32 %18 NEW_LINE ret * i32 %19 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i16 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define i16 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i16 NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca STRUCT 10 i16 i16 i32 i32 i16 i64 i8 i8 i8 i64 NEW_LINE store i8 1 %2 NEW_LINE %4 = load i16 @g_4 NEW_LINE %5 = zext i16 %4 to i64 NEW_LINE call void @func_2 ( * STRUCT 10 i16 i16 i32 i32 i16 i64 i8 i8 i8 i64 sret %3 , i64 %5 ) NEW_LINE %6 = load i64 getelementptr inbounds ( STRUCT 10 i16 i16 i32 i32 i16 i64 i8 i8 i8 i64 bitcast ( * STRUCT 11 i16 i16 i32 i32 i8 i8 i64 i8 i8 i8 i64 @g_8 to * STRUCT 10 i16 i16 i32 i32 i16 i64 i8 i8 i8 i64 ) , i32 0 , i32 5 ) NEW_LINE %7 = icmp ne i64 %6 , 1 NEW_LINE %8 = zext i1 %7 to i32 NEW_LINE %9 = load volatile * i32 @g_10 NEW_LINE store i32 %8 %9 NEW_LINE %10 = bitcast * STRUCT 1 i16 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * STRUCT 1 i16 getelementptr inbounds ( ARR 3 8 x ARR 3 1 x ARR 3 2 x STRUCT 1 i16 @g_11 , i64 0 , i64 6 , i64 0 , i64 0 ) to * i8 ) , i64 2 , i1 false ) NEW_LINE %11 = getelementptr inbounds STRUCT 1 i16 %1 , i32 0 , i32 0 NEW_LINE %12 = load i16 %11 NEW_LINE ret i16 %12 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i16 @func_1 ( ) NEW_LINE %18 = load i32 @crc32_context NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = xor i64 %19 , 4294967295 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %21 , i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @func_56 ( * * i8 %0 , i64 %1 ) { NEW_LINE %3 = alloca * * i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca ARR 3 2 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store * * i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 @g_66 %5 NEW_LINE store * i32 @g_66 %6 NEW_LINE store i32 1 %7 NEW_LINE store i32 0 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %9 NEW_LINE %12 = icmp slt i32 %11 , 2 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %9 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 2 x * i32 %8 , i64 0 , i64 %15 NEW_LINE store * i32 %7 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %9 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %9 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load i8 @g_70 NEW_LINE %22 = add i8 %21 , -1 NEW_LINE store i8 %22 @g_70 NEW_LINE %23 = load * i32 %6 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = trunc i32 %24 to i16 NEW_LINE ret i16 %25 NEW_LINE }
define * i32 @func_24 ( i64 %0 , * i16 %1 , i16 zeroext %2 , i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca ARR 3 9 x * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store * i16 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %12 NEW_LINE %15 = icmp slt i32 %14 , 9 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i32 %12 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 9 x * i32 %11 , i64 0 , i64 %18 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 5 x i32 @g_659 , i64 0 , i64 0 , i64 1 ) %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %12 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %12 NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds ARR 3 9 x * i32 %11 , i64 0 , i64 4 NEW_LINE %25 = load * i32 %24 NEW_LINE ret * i32 %25 NEW_LINE }
define i64 @func_12 ( i16 zeroext %0 , i64 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 3 x ARR 3 10 x i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %8 = bitcast * ARR 3 3 x ARR 3 10 x i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 3 x ARR 3 10 x i32 @__const.func_12.l_2526 to * i8 ) , i64 120 , i1 false ) NEW_LINE %9 = getelementptr inbounds ARR 3 3 x ARR 3 10 x i32 %5 , i64 0 , i64 1 NEW_LINE %10 = getelementptr inbounds ARR 3 10 x i32 %9 , i64 0 , i64 6 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = zext i32 %11 to i64 NEW_LINE ret i64 %12 NEW_LINE }
define zeroext i8 @func_7 ( * i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 9 x i64 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 9 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 9 x i64 %7 , i64 0 , i64 %14 NEW_LINE store i64 -2310694177094926368 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i64 %7 , i64 0 , i64 5 NEW_LINE %21 = load i64 %20 NEW_LINE %22 = add i64 %21 , -1 NEW_LINE store i64 %22 %20 NEW_LINE %23 = getelementptr inbounds ARR 3 9 x i64 %7 , i64 0 , i64 1 NEW_LINE %24 = load i64 %23 NEW_LINE %25 = trunc i64 %24 to i8 NEW_LINE ret i8 %25 NEW_LINE }
define * STRUCT 4 %struct.S0 i32 i64 i32 @func_74 ( * i32 %0 , * * STRUCT 4 %struct.S0 i32 i64 i32 %1 , * i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * STRUCT 4 %struct.S0 i32 i64 i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca * STRUCT 4 %struct.S0 i32 i64 i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * * STRUCT 4 %struct.S0 i32 i64 i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i32 1 %9 NEW_LINE store * i32 @g_48 %10 NEW_LINE store * * i32 %10 %11 NEW_LINE store * STRUCT 4 %struct.S0 i32 i64 i32 getelementptr inbounds ( ARR 3 8 x STRUCT 4 %struct.S0 i32 i64 i32 @g_85 , i64 0 , i64 4 ) %12 NEW_LINE %13 = load i32 %9 NEW_LINE %14 = load * i32 %7 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = and i32 %15 , %13 NEW_LINE store i32 %16 %14 NEW_LINE %17 = load * i32 %7 NEW_LINE %18 = load * * i32 %11 NEW_LINE store * i32 %17 %18 NEW_LINE %19 = load * STRUCT 4 %struct.S0 i32 i64 i32 %12 NEW_LINE ret * STRUCT 4 %struct.S0 i32 i64 i32 %19 NEW_LINE }
define zeroext i8 @func_75 ( i64 %0 , * i16 %1 , i8 signext %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 10 x * * i32 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i16 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 @g_2 %9 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %11 NEW_LINE %14 = icmp slt i32 %13 , 10 NEW_LINE br i1 %14 , label %15 , label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %11 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x * * i32 %10 , i64 0 , i64 %17 NEW_LINE store * * i32 @g_86 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %11 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %11 NEW_LINE br label %12 NEW_LINE 22: NEW_LINE %23 = load * i32 %9 NEW_LINE %24 = load volatile * * i32 @g_85 NEW_LINE store * i32 %23 %24 NEW_LINE store volatile * i32 %23 @g_34 NEW_LINE %25 = load i64 @g_20 NEW_LINE %26 = trunc i64 %25 to i8 NEW_LINE ret i8 %26 NEW_LINE }
define signext i8 @func_106 ( i8 zeroext %0 , i16 zeroext %1 , * i64 %2 , i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * STRUCT 1 i32 NEW_LINE %12 = alloca * * STRUCT 1 i32 NEW_LINE store i8 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store * i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i16 19 @g_128 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i16 @g_128 NEW_LINE %15 = zext i16 %14 to i32 NEW_LINE %16 = icmp sge i32 %15 , 50 NEW_LINE br i1 %16 , label %17 , label %22 NEW_LINE 17: NEW_LINE store * STRUCT 1 i32 null %11 NEW_LINE store * * STRUCT 1 i32 %11 %12 NEW_LINE %18 = load * * STRUCT 1 i32 %12 NEW_LINE store * STRUCT 1 i32 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_289 to * STRUCT 1 i32 ) %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i16 @g_128 NEW_LINE %21 = add i16 %20 , 1 NEW_LINE store i16 %21 @g_128 NEW_LINE br label %13 NEW_LINE 22: NEW_LINE %23 = load i32 %9 NEW_LINE %24 = trunc i32 %23 to i8 NEW_LINE ret i8 %24 NEW_LINE }
define zeroext i8 @func_16 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 7 x i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = bitcast * ARR 3 7 x i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 7 x i32 @__const.func_16.l_321 to * i8 ) , i64 28 , i1 false ) NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 10 x ARR 3 7 x ARR 3 2 x i32 @g_218 , i64 0 , i64 2 , i64 2 , i64 1 ) NEW_LINE %9 = load i16 @g_59 NEW_LINE %10 = zext i16 %9 to i32 NEW_LINE %11 = icmp eq i32 %8 , %10 NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE %14 = call signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext %13 , i32 9 ) NEW_LINE %15 = sext i16 %14 to i32 NEW_LINE %16 = load * i32 @g_259 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = or i32 %17 , %15 NEW_LINE store i32 %18 %16 NEW_LINE %19 = getelementptr inbounds ARR 3 7 x i32 %5 , i64 0 , i64 3 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE ret i8 %21 NEW_LINE }
define i32 @func_6 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca STRUCT 9 i16 i16 i32 i8 %struct.S1 i32 i8 i64 i32 NEW_LINE store i32 %0 %2 NEW_LINE store i64 -1 %3 NEW_LINE %5 = bitcast * STRUCT 9 i16 i16 i32 i8 %struct.S1 i32 i8 i64 i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * STRUCT 9 i16 i16 i32 i8 %struct.S1 i32 i8 i64 i32 getelementptr inbounds ( ARR 3 8 x ARR 3 10 x STRUCT 9 i16 i16 i32 i8 %struct.S1 i32 i8 i64 i32 bitcast ( * ARR 3 8 x ARR 3 10 x STRUCT 9 i16 i16 i32 i8 STRUCT 16 i8 i8 i32 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i32 i8 i64 i32 @g_2014 to * ARR 3 8 x ARR 3 10 x STRUCT 9 i16 i16 i32 i8 %struct.S1 i32 i8 i64 i32 ) , i64 0 , i64 4 , i64 7 ) to * i8 ) , i64 56 , i1 true ) NEW_LINE %6 = load * i32 @g_180 NEW_LINE store i32 -1 %6 NEW_LINE %7 = load i32 bitcast ( * i24 getelementptr inbounds ( STRUCT 5 i32 i24 i32 i24 i24 bitcast ( * STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_843 to * STRUCT 5 i32 i24 i32 i24 i24 ) , i32 0 , i32 3 ) to * i32 ) NEW_LINE %8 = and i32 %7 , 8388607 NEW_LINE ret i32 %8 NEW_LINE }
define signext i8 @func_10 ( i64 %0 , i32 %1 , i16 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i16 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i16 %4 , i32 0 , i32 0 NEW_LINE store i16 %2 %9 NEW_LINE store i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 919483671 %7 NEW_LINE store i32 -4 %8 NEW_LINE %10 = load i64 %5 NEW_LINE %11 = trunc i64 %10 to i16 NEW_LINE %12 = load * i64 @g_2340 NEW_LINE store i64 -3036730344019821337 %12 NEW_LINE store i32 1712094439 %8 NEW_LINE %13 = call signext i16 @safe_rshift_func_int16_t_s_s ( i16 signext %11 , i32 0 ) NEW_LINE %14 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext 13591 , i16 signext %13 ) NEW_LINE %15 = sext i16 %14 to i32 NEW_LINE %16 = load * * * * i32 @g_2823 NEW_LINE %17 = load * * * i32 %16 NEW_LINE %18 = load * * i32 %17 NEW_LINE %19 = load * i32 %18 NEW_LINE store i32 %15 %19 NEW_LINE %20 = bitcast * STRUCT 1 i16 %4 to * i16 NEW_LINE %21 = load i16 %20 NEW_LINE %22 = trunc i16 %21 to i8 NEW_LINE ret i8 %22 NEW_LINE }
define * i32 @func_17 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 -5 %3 NEW_LINE store i32 -1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE store i32 %5 %4 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %14 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %14 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 @g_2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = icmp sle i64 79358228 , %17 NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE %20 = load i32 @g_2 NEW_LINE %21 = xor i32 %19 , %20 NEW_LINE %22 = icmp eq i32 %15 , %21 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = icmp eq i32 %23 , %24 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = load volatile * i32 @g_23 NEW_LINE store i32 %26 %27 NEW_LINE %28 = load * i32 %2 NEW_LINE ret * i32 %28 NEW_LINE }
define i32 @func_102 ( * i8 %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i8 0 @g_87 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i8 @g_87 NEW_LINE %9 = zext i8 %8 to i32 NEW_LINE %10 = icmp sle i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %26 NEW_LINE 11: NEW_LINE %12 = load i8 @g_87 NEW_LINE %13 = zext i8 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 2 x i32 @g_128 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i16 %5 NEW_LINE %20 = sext i16 %19 to i32 NEW_LINE store i32 %20 %3 NEW_LINE br label %29 NEW_LINE 21: NEW_LINE %22 = load i8 @g_87 NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE store i8 %25 @g_87 NEW_LINE br label %7 NEW_LINE 26: NEW_LINE %27 = load i64 getelementptr inbounds ( ARR 3 1 x i64 @g_263 , i64 0 , i64 0 ) NEW_LINE %28 = trunc i64 %27 to i32 NEW_LINE store i32 %28 %3 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE ret i32 %30 NEW_LINE }
define * i32 @func_77 ( i32 %0 , i32 %1 , * i8 %2 , i8 signext %3 , i8 signext %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca ARR 3 3 x * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE %14 = getelementptr inbounds ARR 3 3 x * i32 %11 , i64 0 , i64 2 NEW_LINE store * * i32 %14 %12 NEW_LINE store i32 0 %13 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %13 NEW_LINE %17 = icmp slt i32 %16 , 3 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %13 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 3 x * i32 %11 , i64 0 , i64 %20 NEW_LINE store * i32 @g_5 %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %13 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %13 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load * * i32 %12 NEW_LINE store * i32 @g_5 %26 NEW_LINE ret * i32 @g_5 NEW_LINE }
define i32 @func_57 ( i64 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i32 0 @g_10 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 @g_10 NEW_LINE %7 = icmp ule i32 %6 , 6 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE %9 = load i32 @g_10 NEW_LINE %10 = zext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 7 x i16 @g_75 , i64 0 , i64 %10 NEW_LINE %12 = load i16 %11 NEW_LINE %13 = icmp ne i16 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load i16 getelementptr inbounds ( ARR 3 1 x i16 @g_4 , i64 0 , i64 0 ) NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE store i32 %17 %2 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 @g_10 NEW_LINE %20 = add i32 %19 , 1 NEW_LINE store i32 %20 @g_10 NEW_LINE br label %5 NEW_LINE 21: NEW_LINE %22 = load i64 %3 NEW_LINE %23 = trunc i64 %22 to i32 NEW_LINE %24 = load volatile * i32 @g_334 NEW_LINE store i32 %23 %24 NEW_LINE %25 = load i64 getelementptr inbounds ( ARR 3 3 x i64 @g_210 , i64 0 , i64 2 ) NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE store i32 %26 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE ret i32 %28 NEW_LINE }
define * i8 @func_68 ( i8 zeroext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 2 x ARR 3 7 x * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %8 = bitcast * ARR 3 2 x ARR 3 7 x * i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 2 x ARR 3 7 x * i8 @__const.func_68.l_73 to * i8 ) , i64 112 , i1 false ) NEW_LINE %9 = getelementptr inbounds ARR 3 2 x ARR 3 7 x * i8 %5 , i64 0 , i64 1 NEW_LINE %10 = getelementptr inbounds ARR 3 7 x * i8 %9 , i64 0 , i64 0 NEW_LINE %11 = load * i8 %10 NEW_LINE ret * i8 %11 NEW_LINE }
define zeroext i16 @func_106 ( i32 %0 , i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x STRUCT 1 i32 @g_3 , i64 0 , i64 2 , i32 0 ) %9 NEW_LINE store * * i32 %9 %10 NEW_LINE store * i32 @g_29 @g_116 NEW_LINE %11 = load * i32 %9 NEW_LINE %12 = load * * i32 %10 NEW_LINE store * i32 %11 %12 NEW_LINE %13 = load i120 bitcast ( * ARR 3 15 x i8 getelementptr inbounds ( ARR 3 7 x STRUCT 3 i32 i64 ARR 3 15 x i8 bitcast ( * ARR 3 7 x STRUCT 20 i8 i8 i8 i8 i64 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_50 to * ARR 3 7 x STRUCT 3 i32 i64 ARR 3 15 x i8 ) , i64 0 , i64 4 , i32 2 ) to * i120 ) NEW_LINE %14 = shl i120 %13 , 53 NEW_LINE %15 = ashr i120 %14 , 108 NEW_LINE %16 = trunc i120 %15 to i32 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define void @func_22 ( * STRUCT 5 i16 i24 i32 i24 i24 noalias sret %0 , i32 %1 , * i32 %2 , i32 %3 , i8 signext %4 , i32 %5 ) { NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE %8 = alloca STRUCT 1 i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca * STRUCT 1 i32 NEW_LINE %13 = alloca * * STRUCT 1 i32 NEW_LINE %14 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %3 %14 NEW_LINE %15 = getelementptr inbounds STRUCT 1 i32 %8 , i32 0 , i32 0 NEW_LINE store i32 %5 %15 NEW_LINE store i32 %1 %9 NEW_LINE store * i32 %2 %10 NEW_LINE store i8 %4 %11 NEW_LINE store * STRUCT 1 i32 getelementptr inbounds ( ARR 3 8 x ARR 3 2 x STRUCT 1 i32 @g_524 , i64 0 , i64 5 , i64 1 ) %12 NEW_LINE store * * STRUCT 1 i32 null %13 NEW_LINE %16 = load * STRUCT 1 i32 %12 NEW_LINE store * STRUCT 1 i32 %16 %12 NEW_LINE %17 = bitcast * STRUCT 5 i16 i24 i32 i24 i24 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 getelementptr inbounds ( STRUCT 19 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_1338 , i32 0 , i32 0 ) , i64 20 , i1 false ) NEW_LINE ret void NEW_LINE }
define i32 @func_33 ( i16 signext %0 , i16 signext %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca ARR 3 4 x * * i16 NEW_LINE %8 = alloca * * * i16 NEW_LINE %9 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE %10 = bitcast * ARR 3 4 x * * i16 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 4 x * * i16 @__const.func_33.l_1481 to * i8 ) , i64 32 , i1 false ) NEW_LINE store * * * i16 @g_177 %8 NEW_LINE %11 = getelementptr inbounds ARR 3 4 x * * i16 %7 , i64 0 , i64 2 NEW_LINE %12 = load * * i16 %11 NEW_LINE %13 = load * * * i16 %8 NEW_LINE store * * i16 %12 %13 NEW_LINE %14 = load * * * i16 @g_1459 NEW_LINE %15 = load * * i16 %14 NEW_LINE %16 = icmp eq * * i16 %12 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE %18 = load volatile * i32 @g_1483 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = or i32 %19 , %17 NEW_LINE store i32 %20 %18 NEW_LINE %21 = load i16 %4 NEW_LINE %22 = sext i16 %21 to i32 NEW_LINE ret i32 %22 NEW_LINE }
define * i32 @func_38 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE store i32 %0 %2 NEW_LINE store * * i32 null %3 NEW_LINE store * i32 @g_36 %4 NEW_LINE store * * i32 %4 %5 NEW_LINE store * i32 null %6 NEW_LINE store * * i32 %6 %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 @g_47 %9 NEW_LINE %10 = load * * i32 %5 NEW_LINE store * i32 null %10 NEW_LINE %11 = load * * i32 %7 NEW_LINE store * i32 null %11 NEW_LINE %12 = load * * i32 %5 NEW_LINE %13 = load * i32 %12 NEW_LINE %14 = load * * i32 %5 NEW_LINE store * i32 %13 %14 NEW_LINE %15 = load i32 @g_36 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = xor i32 %15 , %16 NEW_LINE %18 = load * i32 %9 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = xor i32 %19 , %17 NEW_LINE store i32 %20 %18 NEW_LINE ret * i32 @g_47 NEW_LINE }
define i32 @func_114 ( * i16 %0 , * i16 %1 , i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 1 x * i32 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store * i16 %0 %5 NEW_LINE store * i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * i32 null %9 NEW_LINE %15 = bitcast * ARR 3 4 x ARR 3 1 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 4 x ARR 3 1 x * i32 @__const.func_114.l_138 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i16 -24218 %11 NEW_LINE store i32 1 %12 NEW_LINE %16 = load i32 %12 NEW_LINE %17 = add i32 %16 , -1 NEW_LINE store i32 %17 %12 NEW_LINE %18 = load i16 getelementptr inbounds ( ARR 3 2 x ARR 3 6 x i16 @g_113 , i64 0 , i64 0 , i64 1 ) NEW_LINE %19 = sext i16 %18 to i32 NEW_LINE ret i32 %19 NEW_LINE }
define * STRUCT 1 ARR 3 3 x i8 @func_28 ( i24 %0 , * STRUCT 1 ARR 3 3 x i8 %1 , i32 %2 , i24 %3 ) { NEW_LINE %5 = alloca STRUCT 1 ARR 3 3 x i8 NEW_LINE %6 = alloca i24 NEW_LINE %7 = alloca STRUCT 1 ARR 3 3 x i8 NEW_LINE %8 = alloca i24 NEW_LINE %9 = alloca * STRUCT 1 ARR 3 3 x i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * STRUCT 1 ARR 3 3 x i8 NEW_LINE %12 = getelementptr inbounds STRUCT 1 ARR 3 3 x i8 %5 , i32 0 , i32 0 NEW_LINE store i24 %0 %6 NEW_LINE %13 = bitcast * i24 %6 to * i8 NEW_LINE %14 = bitcast * ARR 3 3 x i8 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 %13 , i64 3 , i1 false ) NEW_LINE %15 = getelementptr inbounds STRUCT 1 ARR 3 3 x i8 %7 , i32 0 , i32 0 NEW_LINE store i24 %3 %8 NEW_LINE %16 = bitcast * i24 %8 to * i8 NEW_LINE %17 = bitcast * ARR 3 3 x i8 %15 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 %16 , i64 3 , i1 false ) NEW_LINE store * STRUCT 1 ARR 3 3 x i8 %1 %9 NEW_LINE store i32 %2 %10 NEW_LINE store * STRUCT 1 ARR 3 3 x i8 bitcast ( * STRUCT 3 i8 i8 i8 @g_13 to * STRUCT 1 ARR 3 3 x i8 ) %11 NEW_LINE %18 = load * STRUCT 1 ARR 3 3 x i8 %11 NEW_LINE ret * STRUCT 1 ARR 3 3 x i8 %18 NEW_LINE }
define i32 @func_10 ( i64 %0 , i64 %1 , i32 %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i24 i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 NEW_LINE %12 = alloca i32 NEW_LINE %13 = bitcast * STRUCT 2 i24 i16 %6 to * i64 NEW_LINE store i64 %1 %13 NEW_LINE store i64 %0 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 bitcast ( * STRUCT 21 i8 i8 i32 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 @g_2113 to * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 ) %11 NEW_LINE store i32 99581738 %12 NEW_LINE %14 = load * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 @g_2008 NEW_LINE %15 = icmp ne * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 bitcast ( * STRUCT 21 i8 i8 i32 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 @g_2113 to * STRUCT 7 i16 i32 i32 i32 i16 i32 i24 ) , %14 NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = load * i32 @g_76 NEW_LINE store i32 %16 %17 NEW_LINE %18 = load i32 %12 NEW_LINE ret i32 %18 NEW_LINE }
define i64 @func_68 ( i64 %0 , i32 %1 , i16 zeroext %2 , i64 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca ARR 3 5 x i16 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i16 0 %8 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i16 %8 NEW_LINE %14 = zext i16 %13 to i32 NEW_LINE %15 = icmp sgt i32 %14 , 11 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = bitcast * ARR 3 5 x i16 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 5 x i16 @__const.func_68.l_907 to * i8 ) , i64 10 , i1 false ) NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i16 %10 , i64 0 , i64 0 NEW_LINE %19 = load i16 %18 NEW_LINE %20 = sext i16 %19 to i64 NEW_LINE store i64 %20 %5 NEW_LINE br label %26 NEW_LINE 21: NEW_LINE %22 = load i16 %8 NEW_LINE %23 = add i16 %22 , 1 NEW_LINE store i16 %23 %8 NEW_LINE br label %12 NEW_LINE 24: NEW_LINE %25 = load i64 %6 NEW_LINE store i64 %25 %5 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i64 %5 NEW_LINE ret i64 %27 NEW_LINE }
define i32 @func_85 ( i16 signext %0 , i64 %1 , * i32 %2 , i16 zeroext %3 , i64 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE store i16 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i32 1 %11 NEW_LINE store i64 8689145560771314833 %12 NEW_LINE store i64 -3 %13 NEW_LINE %14 = load i32 %11 NEW_LINE %15 = trunc i32 %14 to i8 NEW_LINE %16 = load i32 %11 NEW_LINE %17 = trunc i32 %16 to i8 NEW_LINE %18 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %17 , i8 signext -7 ) NEW_LINE %19 = sext i8 %18 to i64 NEW_LINE %20 = load i64 %12 NEW_LINE %21 = icmp eq i64 %19 , %20 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE %24 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %15 , i8 signext %23 ) NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = xor i32 %25 , -1 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE store i64 %27 @g_102 NEW_LINE %28 = load i64 %13 NEW_LINE %29 = trunc i64 %28 to i32 NEW_LINE ret i32 %29 NEW_LINE }
define i32 @func_11 ( * i32 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i64 NEW_LINE store * i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i64 -5843677481542460775 %5 NEW_LINE store i32 0 getelementptr inbounds ( STRUCT 9 i32 i8 i16 i16 i32 i32 i16 i32 i8 @g_1302 , i32 0 , i32 0 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 getelementptr inbounds ( STRUCT 9 i32 i8 i16 i16 i32 i32 i16 i32 i8 @g_1302 , i32 0 , i32 0 ) NEW_LINE %8 = icmp ult i32 %7 , 5 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 getelementptr inbounds ( STRUCT 9 i32 i8 i16 i16 i32 i32 i16 i32 i8 @g_1302 , i32 0 , i32 0 ) NEW_LINE %11 = zext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x i32 @g_1293 , i64 0 , i64 %11 NEW_LINE store i32 1 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 getelementptr inbounds ( STRUCT 9 i32 i8 i16 i16 i32 i32 i16 i32 i8 @g_1302 , i32 0 , i32 0 ) NEW_LINE %15 = add i32 %14 , 1 NEW_LINE store i32 %15 getelementptr inbounds ( STRUCT 9 i32 i8 i16 i16 i32 i32 i16 i32 i8 @g_1302 , i32 0 , i32 0 ) NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load i64 %5 NEW_LINE %18 = trunc i64 %17 to i32 NEW_LINE ret i32 %18 NEW_LINE }
define * i64 @func_36 ( * i8 %0 , * i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 3 x ARR 3 3 x * i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i64 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 @g_57 %7 NEW_LINE store * i32 @g_57 %8 NEW_LINE %15 = bitcast * ARR 3 3 x ARR 3 3 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 3 x ARR 3 3 x * i32 @__const.func_36.l_795 to * i8 ) , i64 72 , i1 false ) NEW_LINE store i8 1 %10 NEW_LINE store i64 -6127613679334106215 %11 NEW_LINE store * i64 %11 %12 NEW_LINE %16 = load volatile i16 @g_798 NEW_LINE %17 = add i16 %16 , -1 NEW_LINE store volatile i16 %17 @g_798 NEW_LINE ret * i64 @g_126 NEW_LINE }
define * i32 @func_43 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca ARR 3 6 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i32 NEW_LINE store i64 %0 %2 NEW_LINE %6 = bitcast * ARR 3 6 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 6 x * i32 @__const.func_43.l_52 to * i8 ) , i64 48 , i1 false ) NEW_LINE store i32 0 @g_48 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @g_48 NEW_LINE %9 = icmp eq i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 8 x * i32 @g_47 , i64 0 , i64 5 ) %5 NEW_LINE %11 = load * * i32 %5 NEW_LINE store * i32 @g_2 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_48 NEW_LINE %14 = trunc i32 %13 to i8 NEW_LINE %15 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %14 , i8 signext 8 ) NEW_LINE %16 = sext i8 %15 to i32 NEW_LINE store i32 %16 @g_48 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 6 x * i32 %3 , i64 0 , i64 1 NEW_LINE %19 = load * i32 %18 NEW_LINE ret * i32 %19 NEW_LINE }
define signext i16 @func_64 ( i32 %0 , * * i8 %1 , i32 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca ARR 3 3 x ARR 3 2 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store * * i8 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store i16 1 %9 NEW_LINE %13 = bitcast * ARR 3 3 x ARR 3 2 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 3 x ARR 3 2 x * i32 @__const.func_64.l_75 to * i8 ) , i64 48 , i1 false ) NEW_LINE %14 = load i16 %9 NEW_LINE %15 = sext i16 %14 to i32 NEW_LINE %16 = load volatile * i32 @g_73 NEW_LINE store i32 %15 %16 NEW_LINE %17 = getelementptr inbounds ARR 3 3 x ARR 3 2 x * i32 %10 , i64 0 , i64 1 NEW_LINE %18 = getelementptr inbounds ARR 3 2 x * i32 %17 , i64 0 , i64 1 NEW_LINE store * i32 @g_74 %18 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = trunc i32 %19 to i16 NEW_LINE ret i16 %20 NEW_LINE }
define i64 @func_23 ( i32 %0 , i64 %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 8 x i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 null %10 NEW_LINE store * i32 null %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %12 NEW_LINE %15 = icmp slt i32 %14 , 8 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i32 %12 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 8 x i32 %9 , i64 0 , i64 %18 NEW_LINE store i32 1 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %12 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %12 NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds ARR 3 8 x i32 %9 , i64 0 , i64 4 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = load volatile * i32 @g_1771 NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE ret i64 %28 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call * i8 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 * i8 %7 , i32 0 , i32 0 NEW_LINE store * i8 %18 %19 NEW_LINE %20 = load i32 @crc32_context NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE %22 = xor i64 %21 , 4294967295 NEW_LINE %23 = trunc i64 %22 to i32 NEW_LINE %24 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %23 , i32 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_59 ( i64 %0 , * i32 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 6 x ARR 3 6 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %8 = bitcast * ARR 3 6 x ARR 3 6 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 6 x ARR 3 6 x * i32 @__const.func_59.l_64 to * i8 ) , i64 288 , i1 false ) NEW_LINE %9 = load i32 @g_4 NEW_LINE store i32 %9 @g_65 NEW_LINE %10 = getelementptr inbounds ARR 3 6 x ARR 3 6 x * i32 %5 , i64 0 , i64 1 NEW_LINE %11 = getelementptr inbounds ARR 3 6 x * i32 %10 , i64 0 , i64 4 NEW_LINE %12 = load * i32 %11 NEW_LINE ret * i32 %12 NEW_LINE }
define i32 @func_77 ( i64 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i32 NEW_LINE store i64 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store i8 122 %5 NEW_LINE store i8 0 @g_180 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i8 @g_180 NEW_LINE %9 = zext i8 %8 to i32 NEW_LINE %10 = icmp eq i32 %9 , 22 NEW_LINE br i1 %10 , label %11 , label %31 NEW_LINE 11: NEW_LINE store * i32 @g_734 %6 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load * * i32 @g_1224 NEW_LINE %14 = load * i32 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = zext i32 %15 to i64 NEW_LINE %17 = and i64 %16 , %12 NEW_LINE %18 = trunc i64 %17 to i32 NEW_LINE store i32 %18 %14 NEW_LINE %19 = load i8 %5 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE %21 = load * i32 %6 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = xor i32 %22 , %20 NEW_LINE store i32 %23 %21 NEW_LINE %24 = load i8 %5 NEW_LINE %25 = icmp ne i8 %24 , 0 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE br label %28 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i8 @g_180 NEW_LINE %30 = add i8 %29 , 1 NEW_LINE store i8 %30 @g_180 NEW_LINE br label %7 NEW_LINE 31: NEW_LINE %32 = load i8 %5 NEW_LINE %33 = sext i8 %32 to i32 NEW_LINE ret i32 %33 NEW_LINE }
define signext i16 @func_60 ( i8 zeroext %0 , i32 %1 , * i64 %2 , i16 signext %3 , * i64 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i64 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * * i32 NEW_LINE store i8 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i64 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i64 %4 %10 NEW_LINE store i16 22392 %11 NEW_LINE store * i32 @g_82 %12 NEW_LINE store * * i32 %12 %13 NEW_LINE store * i32 @g_82 %14 NEW_LINE store * * i32 %14 %15 NEW_LINE %16 = load * * i64 @g_76 NEW_LINE %17 = load i16 @g_78 NEW_LINE %18 = sext i16 %17 to i32 NEW_LINE %19 = load i16 %11 NEW_LINE %20 = trunc i16 %19 to i8 NEW_LINE %21 = call * i32 @func_72 ( * * i64 %16 , i32 %18 , i8 zeroext %20 ) NEW_LINE %22 = load * * i32 %13 NEW_LINE store * i32 %21 %22 NEW_LINE %23 = load * * i32 %15 NEW_LINE store * i32 %21 %23 NEW_LINE %24 = load i64 getelementptr inbounds ( ARR 3 2 x i64 @g_9 , i64 0 , i64 0 ) NEW_LINE %25 = trunc i64 %24 to i16 NEW_LINE ret i16 %25 NEW_LINE }
define i32 @func_95 ( i64 %0 , i64 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i16 NEW_LINE %11 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %3 %11 NEW_LINE store i64 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i16 -20047 %9 NEW_LINE %12 = load * i32 @g_49 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = xor i64 %14 , 873644141 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE store i32 %16 %12 NEW_LINE store i64 -17 @g_106 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 @g_106 NEW_LINE %19 = icmp ne i64 %18 , 46 NEW_LINE br i1 %19 , label %20 , label %28 NEW_LINE 20: NEW_LINE store i16 -24439 %10 NEW_LINE %21 = load i16 %10 NEW_LINE %22 = add i16 %21 , 1 NEW_LINE store i16 %22 %10 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 @g_106 NEW_LINE %25 = trunc i64 %24 to i8 NEW_LINE %26 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %25 , i8 signext 7 ) NEW_LINE %27 = sext i8 %26 to i64 NEW_LINE store i64 %27 @g_106 NEW_LINE br label %17 NEW_LINE 28: NEW_LINE %29 = load i16 %9 NEW_LINE %30 = zext i16 %29 to i32 NEW_LINE ret i32 %30 NEW_LINE }
define signext i16 @func_16 ( i32 %0 , * STRUCT 4 i32 i24 i32 i32 %1 , i32 %2 , * * STRUCT 4 i32 i24 i32 i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * STRUCT 4 i32 i24 i32 i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * * STRUCT 4 i32 i24 i32 i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store * STRUCT 4 i32 i24 i32 i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * * STRUCT 4 i32 i24 i32 i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i64 -3 %11 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 4 x i64 @g_1394 , i64 0 , i64 3 ) %12 NEW_LINE store i32 987525384 %13 NEW_LINE %14 = load i64 %11 NEW_LINE %15 = load * i64 %12 NEW_LINE %16 = load i64 %15 NEW_LINE %17 = or i64 %16 , %14 NEW_LINE store i64 %17 %15 NEW_LINE %18 = load * * i64 @g_1791 NEW_LINE %19 = load volatile * i64 %18 NEW_LINE %20 = load volatile i64 %19 NEW_LINE %21 = xor i64 %17 , %20 NEW_LINE %22 = load i32 %13 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = xor i64 %23 , %21 NEW_LINE %25 = trunc i64 %24 to i32 NEW_LINE store i32 %25 %13 NEW_LINE %26 = load i32 %10 NEW_LINE %27 = trunc i32 %26 to i16 NEW_LINE ret i16 %27 NEW_LINE }
define i32 @func_8 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 1 x ARR 3 2 x STRUCT 1 i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %8 = bitcast * ARR 3 1 x ARR 3 2 x STRUCT 1 i8 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 , i8 0 , i64 2 , i1 false ) NEW_LINE %9 = load * STRUCT 1 i8 @g_171 NEW_LINE %10 = getelementptr inbounds ARR 3 1 x ARR 3 2 x STRUCT 1 i8 %5 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds ARR 3 2 x STRUCT 1 i8 %10 , i64 0 , i64 1 NEW_LINE %12 = bitcast * STRUCT 1 i8 %9 to * i8 NEW_LINE %13 = bitcast * STRUCT 1 i8 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 %13 , i64 1 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 1 x ARR 3 2 x STRUCT 1 i8 %5 , i64 0 , i64 0 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x STRUCT 1 i8 %14 , i64 0 , i64 1 NEW_LINE %16 = bitcast * STRUCT 1 i8 %15 to * i8 NEW_LINE %17 = load i8 %16 NEW_LINE %18 = shl i8 %17 , 6 NEW_LINE %19 = ashr i8 %18 , 6 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE ret i32 %20 NEW_LINE }
define i24 @func_60 ( i64 %0 , i8 signext %1 , i32 %2 , i64 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca STRUCT 1 STRUCT 1 ARR 3 3 x i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * * i32 NEW_LINE %14 = alloca i24 NEW_LINE store i64 %0 %7 NEW_LINE store i8 %1 %8 NEW_LINE store i32 %2 %9 NEW_LINE store i64 %3 %10 NEW_LINE store i16 %4 %11 NEW_LINE store * i32 @g_9 %12 NEW_LINE store * * i32 %12 %13 NEW_LINE %15 = load * * i32 %13 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x i32 @g_78 , i64 0 , i64 0 ) %15 NEW_LINE %16 = bitcast * STRUCT 1 STRUCT 1 ARR 3 3 x i8 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 getelementptr inbounds ( STRUCT 1 STRUCT 3 i8 i8 i8 @g_86 , i32 0 , i32 0 , i32 0 ) , i64 3 , i1 false ) NEW_LINE %17 = getelementptr inbounds STRUCT 1 STRUCT 1 ARR 3 3 x i8 %6 , i32 0 , i32 0 NEW_LINE %18 = getelementptr inbounds STRUCT 1 ARR 3 3 x i8 %17 , i32 0 , i32 0 NEW_LINE %19 = bitcast * i24 %14 to * i8 NEW_LINE %20 = bitcast * ARR 3 3 x i8 %18 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 %20 , i64 3 , i1 false ) NEW_LINE %21 = load i24 %14 NEW_LINE ret i24 %21 NEW_LINE }
define zeroext i8 @func_60 ( i32 %0 , i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 8 x i64 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %9 = bitcast * ARR 3 8 x i64 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 8 x i64 @__const.func_60.l_102 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i64 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %5 NEW_LINE %12 = icmp slt i64 %11 , 8 NEW_LINE br i1 %12 , label %13 , label %19 NEW_LINE 13: NEW_LINE %14 = load i64 %5 NEW_LINE %15 = getelementptr inbounds ARR 3 8 x i64 %7 , i64 0 , i64 %14 NEW_LINE store i64 -1 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 %5 NEW_LINE %18 = add nsw i64 %17 , 1 NEW_LINE store i64 %18 %5 NEW_LINE br label %10 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 8 x i64 %7 , i64 0 , i64 5 NEW_LINE %21 = load i64 %20 NEW_LINE %22 = trunc i64 %21 to i8 NEW_LINE ret i8 %22 NEW_LINE }
define signext i16 @func_64 ( i64 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca ARR 3 4 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %8 = bitcast * ARR 3 4 x i8 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 , i8 0 , i64 4 , i1 false ) NEW_LINE store i32 -4 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 4 x i8 %5 , i64 0 , i64 3 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = load * i32 @g_78 NEW_LINE %14 = load volatile i32 %13 NEW_LINE %15 = and i32 %14 , %12 NEW_LINE store volatile i32 %15 %13 NEW_LINE %16 = load i64 %3 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = or i64 %18 , %16 NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE store i32 %20 %6 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 8 x i32 @g_19 , i64 0 , i64 0 , i64 0 , i64 6 ) NEW_LINE %26 = trunc i32 %25 to i16 NEW_LINE ret i16 %26 NEW_LINE }
define i32 @func_37 ( i32 %0 , i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE store i32 %0 %12 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 7 %9 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %9 NEW_LINE %15 = icmp eq i32 %14 , 32 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE store * i32 @g_2 %10 NEW_LINE store * * i32 %10 %11 NEW_LINE %17 = load * * i32 %11 NEW_LINE store * i32 null %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %9 NEW_LINE %20 = trunc i32 %19 to i16 NEW_LINE %21 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %20 , i16 zeroext 2 ) NEW_LINE %22 = zext i16 %21 to i32 NEW_LINE store i32 %22 %9 NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = bitcast * STRUCT 1 i32 %5 to * i8 NEW_LINE %25 = bitcast * STRUCT 1 i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %24 , * i8 %25 , i64 4 , i1 false ) NEW_LINE %26 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE %27 = load i32 %26 NEW_LINE ret i32 %27 NEW_LINE }
define i32 @func_11 ( i64 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * * * * i16 NEW_LINE %6 = getelementptr inbounds STRUCT 1 i64 %2 , i32 0 , i32 0 NEW_LINE store i64 %0 %6 NEW_LINE store i64 -5794080395356954955 %3 NEW_LINE store * * i32 @g_2555 %4 NEW_LINE store * * * * i16 @g_279 %5 NEW_LINE %7 = bitcast * STRUCT 1 i64 %2 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE store i64 %9 %3 NEW_LINE %10 = bitcast * STRUCT 1 i64 %2 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = load * * i32 %4 NEW_LINE %13 = icmp eq * * i32 null , %12 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = and i32 %11 , %14 NEW_LINE %16 = load * * * * i16 %5 NEW_LINE %17 = icmp eq * * * * i16 null , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = icmp ne i32 %15 , %18 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = load * * i32 %4 NEW_LINE %22 = load * i32 %21 NEW_LINE store i32 %20 %22 NEW_LINE %23 = load * * i32 %4 NEW_LINE %24 = load * i32 %23 NEW_LINE %25 = load i32 %24 NEW_LINE ret i32 %25 NEW_LINE }
define * i32 @func_67 ( i64 %0 , * i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 6 x * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %13 = bitcast * ARR 3 6 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 6 x * i32 @__const.func_67.l_491 to * i8 ) , i64 48 , i1 false ) NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 7 x ARR 3 6 x * i32 @g_179 , i64 0 , i64 0 , i64 3 , i64 2 ) %10 NEW_LINE store * i32 @g_435 %11 NEW_LINE %14 = getelementptr inbounds ARR 3 6 x * i32 %9 , i64 0 , i64 4 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = load * * i32 %10 NEW_LINE store * i32 %15 %16 NEW_LINE %17 = load * i32 %6 NEW_LINE %18 = load * * i32 %10 NEW_LINE store * i32 %17 %18 NEW_LINE %19 = load * i32 %11 NEW_LINE ret * i32 %19 NEW_LINE }
define void @func_34 ( * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 noalias sret %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE store i32 %1 %3 NEW_LINE store i64 2 getelementptr inbounds ( STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_516 , i32 0 , i32 3 ) NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i64 getelementptr inbounds ( STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_516 , i32 0 , i32 3 ) NEW_LINE %6 = icmp uge i64 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = bitcast * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 getelementptr inbounds ( ARR 3 3 x STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_2385 , i64 0 , i64 1 ) to * i8 ) , i64 22 , i1 false ) NEW_LINE br label %14 NEW_LINE 9: NEW_LINE %10 = load i64 getelementptr inbounds ( STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_516 , i32 0 , i32 3 ) NEW_LINE %11 = add i64 %10 , 1 NEW_LINE store i64 %11 getelementptr inbounds ( STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_516 , i32 0 , i32 3 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE %13 = bitcast * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * STRUCT 7 i32 i16 i16 i64 i8 i32 i8 @g_2386 to * i8 ) , i64 22 , i1 false ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE ret void NEW_LINE }
define signext i16 @func_46 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 4 x * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 @g_51 %3 NEW_LINE %7 = bitcast * ARR 3 4 x * i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 4 x * i32 @__const.func_46.l_52 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i32 -1424271520 %5 NEW_LINE %8 = load i8 @g_34 NEW_LINE %9 = zext i8 %8 to i16 NEW_LINE %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_u ( i16 zeroext %9 , i32 3 ) NEW_LINE %11 = zext i16 %10 to i32 NEW_LINE %12 = load * i32 %3 NEW_LINE store i32 %11 %12 NEW_LINE store i32 %11 @g_53 NEW_LINE %13 = load * i32 %3 NEW_LINE store i32 -1 %13 NEW_LINE %14 = load i32 @g_53 NEW_LINE %15 = or i32 %14 , -1 NEW_LINE store i32 %15 @g_53 NEW_LINE %16 = load i32 getelementptr inbounds ( ARR 3 3 x ARR 3 1 x ARR 3 3 x i32 @g_4 , i64 0 , i64 0 , i64 0 , i64 1 ) NEW_LINE %17 = load i32 %5 NEW_LINE %18 = or i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i8 %2 NEW_LINE %20 = zext i8 %19 to i16 NEW_LINE ret i16 %20 NEW_LINE }
define zeroext i8 @func_85 ( i64 %0 , * i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca ARR 3 3 x * i32 NEW_LINE %13 = alloca i16 NEW_LINE %14 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 -4 %9 NEW_LINE store * i32 null %10 NEW_LINE store i32 -1546877883 %11 NEW_LINE store i16 24227 %13 NEW_LINE store i32 0 %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %14 NEW_LINE %17 = icmp slt i32 %16 , 3 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %14 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 3 x * i32 %12 , i64 0 , i64 %20 NEW_LINE store * i32 %11 %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %14 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %14 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i32 @g_966 NEW_LINE %27 = add i32 %26 , -1 NEW_LINE store i32 %27 @g_966 NEW_LINE %28 = load i16 %13 NEW_LINE %29 = trunc i16 %28 to i8 NEW_LINE ret i8 %29 NEW_LINE }
define i32 @func_11 ( * i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 3 %4 NEW_LINE store i8 0 @g_63 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i8 @g_63 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = icmp slt i32 %7 , 4 NEW_LINE br i1 %8 , label %9 , label %18 NEW_LINE 9: NEW_LINE %10 = load i8 @g_63 NEW_LINE %11 = sext i8 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 4 x i32 @g_64 , i64 0 , i64 %11 NEW_LINE store volatile i32 1925081506 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i8 @g_63 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE %17 = trunc i32 %16 to i8 NEW_LINE store i8 %17 @g_63 NEW_LINE br label %5 NEW_LINE 18: NEW_LINE store i8 19 @g_198 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i8 @g_198 NEW_LINE %21 = zext i8 %20 to i32 NEW_LINE %22 = icmp slt i32 %21 , 59 NEW_LINE br i1 %22 , label %23 , label %29 NEW_LINE 23: NEW_LINE %24 = load * i32 %3 NEW_LINE %25 = load i32 %24 NEW_LINE store i32 %25 %2 NEW_LINE br label %31 NEW_LINE 26: NEW_LINE %27 = load i8 @g_198 NEW_LINE %28 = add i8 %27 , 1 NEW_LINE store i8 %28 @g_198 NEW_LINE br label %19 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE store i32 %30 %2 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE ret i32 %32 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 7 x ARR 3 1 x i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 7 NEW_LINE br i1 %6 , label %7 , label %25 NEW_LINE 7: NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %21 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 7 x ARR 3 1 x i32 %1 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 1 x i32 %14 , i64 0 , i64 %16 NEW_LINE store i32 0 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %8 NEW_LINE 21: NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %2 NEW_LINE br label %4 NEW_LINE 25: NEW_LINE %26 = getelementptr inbounds ARR 3 7 x ARR 3 1 x i32 %1 , i64 0 , i64 3 NEW_LINE %27 = getelementptr inbounds ARR 3 1 x i32 %26 , i64 0 , i64 0 NEW_LINE %28 = load i32 %27 NEW_LINE ret i32 %28 NEW_LINE }
define i32 @func_31 ( * i64 %0 , i8 zeroext %1 , i8 zeroext %2 , * i64 %3 , i8 signext %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i8 NEW_LINE %12 = alloca i32 NEW_LINE store * i64 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store * i64 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i8 @g_476 %11 NEW_LINE store i32 1432175485 %12 NEW_LINE %13 = load * i8 %11 NEW_LINE %14 = icmp eq * i8 null , %13 NEW_LINE %15 = zext i1 %14 to i32 NEW_LINE %16 = load i8 %8 NEW_LINE %17 = call signext i8 @safe_mod_func_int8_t_s_s ( i8 signext -65 , i8 signext %16 ) NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = load i32 %12 NEW_LINE %20 = trunc i32 %19 to i16 NEW_LINE %21 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext 32256 , i16 signext %20 ) NEW_LINE %22 = sext i16 %21 to i32 NEW_LINE %23 = icmp sge i32 %18 , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE %26 = load * i8 @g_179 NEW_LINE store i8 %25 %26 NEW_LINE %27 = zext i8 %25 to i32 NEW_LINE %28 = or i32 %15 , %27 NEW_LINE %29 = load volatile * i32 @g_1501 NEW_LINE store i32 %28 %29 NEW_LINE %30 = load i32 %12 NEW_LINE ret i32 %30 NEW_LINE }
define zeroext i8 @func_30 ( * i16 %0 , * i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca ARR 3 2 x i32 NEW_LINE %11 = alloca i32 NEW_LINE store * i16 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * * i32 @g_210 %9 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %11 NEW_LINE %14 = icmp slt i32 %13 , 2 NEW_LINE br i1 %14 , label %15 , label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %11 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 2 x i32 %10 , i64 0 , i64 %17 NEW_LINE store i32 -3 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %11 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %11 NEW_LINE br label %12 NEW_LINE 22: NEW_LINE %23 = load * i32 %6 NEW_LINE %24 = load * * i32 %9 NEW_LINE store * i32 %23 %24 NEW_LINE %25 = getelementptr inbounds ARR 3 2 x i32 %10 , i64 0 , i64 1 NEW_LINE store i32 -1 %25 NEW_LINE %26 = getelementptr inbounds ARR 3 2 x i32 %10 , i64 0 , i64 1 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = trunc i32 %27 to i8 NEW_LINE ret i8 %28 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 0 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_5~00" , i64 0 , i64 0 ) , i32 %18 ) NEW_LINE %19 = load i32 @crc32_context NEW_LINE %20 = zext i32 %19 to i64 NEW_LINE %21 = xor i64 %20 , 4294967295 NEW_LINE %22 = trunc i64 %21 to i32 NEW_LINE %23 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %22 , i32 %23 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i16 @func_28 ( * * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 5 x ARR 3 5 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %8 = bitcast * ARR 3 5 x ARR 3 5 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 getelementptr inbounds ( ARR 3 5 x ARR 3 5 x i8 @__const.func_28.l_49 , i32 0 , i32 0 , i32 0 ) , i64 25 , i1 false ) NEW_LINE %9 = getelementptr inbounds ARR 3 5 x ARR 3 5 x i8 %5 , i64 0 , i64 4 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i8 %9 , i64 0 , i64 2 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = zext i8 %11 to i32 NEW_LINE %13 = load * i32 %4 NEW_LINE store i32 %12 %13 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x ARR 3 5 x i8 %5 , i64 0 , i64 4 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i8 %14 , i64 0 , i64 3 NEW_LINE %16 = load i8 %15 NEW_LINE %17 = zext i8 %16 to i16 NEW_LINE ret i16 %17 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i64 @g_2 NEW_LINE %19 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %18 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %19 ) NEW_LINE %20 = load i32 @crc32_context NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE %22 = xor i64 %21 , 4294967295 NEW_LINE %23 = trunc i64 %22 to i32 NEW_LINE %24 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %23 , i32 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_19 ( * i32 %0 , * i32 %1 , * i8 %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * * i8 NEW_LINE %12 = alloca * * i8 NEW_LINE %13 = alloca * * * i8 NEW_LINE %14 = alloca * * * i8 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * * i8 null %11 NEW_LINE store * * i8 @g_714 %12 NEW_LINE store * * * i8 null %13 NEW_LINE store * * * i8 %12 %14 NEW_LINE store i32 1642557414 %15 NEW_LINE store * i32 %15 %16 NEW_LINE %17 = load * * i8 %11 NEW_LINE store * * i8 %17 %11 NEW_LINE %18 = load * * i8 %12 NEW_LINE %19 = load * * * i8 %14 NEW_LINE store * * i8 %18 %19 NEW_LINE %20 = icmp ne * * i8 %17 , %18 NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE %22 = load i32 %15 NEW_LINE %23 = or i32 %22 , %21 NEW_LINE store i32 %23 %15 NEW_LINE %24 = load * i32 %9 NEW_LINE ret * i32 %24 NEW_LINE }
define * i16 @func_41 ( * * i16 %0 ) { NEW_LINE %2 = alloca * * i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i16 NEW_LINE store * * i16 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store * i32 null %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_377 , i64 0 , i64 1 ) %5 NEW_LINE store * i16 @g_35 %6 NEW_LINE store i8 0 @g_370 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i8 @g_370 NEW_LINE %9 = zext i8 %8 to i32 NEW_LINE %10 = icmp slt i32 %9 , 2 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i8 @g_370 NEW_LINE %13 = zext i8 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 2 x * i32 @g_205 , i64 0 , i64 %13 NEW_LINE store * i32 @g_64 %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i8 @g_370 NEW_LINE %17 = zext i8 %16 to i32 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE %19 = trunc i32 %18 to i8 NEW_LINE store i8 %19 @g_370 NEW_LINE br label %7 NEW_LINE 20: NEW_LINE %21 = load * i32 %5 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = or i64 %23 , -1 NEW_LINE %25 = trunc i64 %24 to i32 NEW_LINE store i32 %25 %21 NEW_LINE %26 = load * i16 %6 NEW_LINE ret * i16 %26 NEW_LINE }
define void @func_67 ( * STRUCT 1 STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 noalias sret %0 , * i16 %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca ARR 3 10 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE store * i16 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store i8 %3 %7 NEW_LINE store * i32 @g_81 %8 NEW_LINE store * * i32 %8 %9 NEW_LINE %12 = bitcast * ARR 3 10 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_67.l_83 to * i8 ) , i64 80 , i1 false ) NEW_LINE %13 = load * i32 %8 NEW_LINE %14 = load * * i32 %9 NEW_LINE store * i32 %13 %14 NEW_LINE %15 = load volatile i8 @g_85 NEW_LINE %16 = add i8 %15 , 1 NEW_LINE store volatile i8 %16 @g_85 NEW_LINE %17 = bitcast * STRUCT 1 STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * STRUCT 2 STRUCT 5 i32 i64 i32 i32 i16 ARR 3 50 x i8 @g_88 to * i8 ) , i64 72 , i1 false ) NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i64 @g_2 NEW_LINE %19 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %18 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %19 ) NEW_LINE %20 = load i32 @crc32_context NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE %22 = xor i64 %21 , 4294967295 NEW_LINE %23 = trunc i64 %22 to i32 NEW_LINE %24 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %23 , i32 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i64 @g_3 NEW_LINE %19 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %18 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %19 ) NEW_LINE %20 = load i32 @crc32_context NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE %22 = xor i64 %21 , 4294967295 NEW_LINE %23 = trunc i64 %22 to i32 NEW_LINE %24 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %23 , i32 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define i64 @func_29 ( * i64 %0 , i64 %1 , * * STRUCT 1 i32 %2 , i32 %3 , * i64 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * * STRUCT 1 i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i64 NEW_LINE %12 = alloca i16 NEW_LINE %13 = alloca i64 NEW_LINE store * i64 %0 %7 NEW_LINE store i64 %1 %8 NEW_LINE store * * STRUCT 1 i32 %2 %9 NEW_LINE store i32 %3 %10 NEW_LINE store * i64 %4 %11 NEW_LINE store i16 2170 %12 NEW_LINE %14 = load i16 %12 NEW_LINE %15 = sext i16 %14 to i32 NEW_LINE %16 = load volatile i8 getelementptr inbounds ( STRUCT 6 i8 i32 i32 i16 ARR 3 3 x i8 i16 bitcast ( * STRUCT 8 i8 i32 i32 i16 i8 i8 i8 i16 @g_1841 to * STRUCT 6 i8 i32 i32 i16 ARR 3 3 x i8 i16 ) , i32 0 , i32 0 ) NEW_LINE %17 = zext i8 %16 to i64 NEW_LINE %18 = icmp ugt i64 0 , %17 NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE %20 = xor i32 %15 , %19 NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE store i64 -7323507837400413802 %13 NEW_LINE %23 = load i64 %13 NEW_LINE store i64 %23 %6 NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load * i64 %11 NEW_LINE %26 = load i64 %25 NEW_LINE store i64 %26 %6 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %6 NEW_LINE ret i64 %28 NEW_LINE }
define i32 @func_5 ( i32 %0 , * i32 %1 , * i32 %2 , i64 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i32 -1 %11 NEW_LINE store i32 610576956 %12 NEW_LINE %13 = load i32 %11 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %20 , label %15 NEW_LINE 15: NEW_LINE %16 = load * i64 @g_524 NEW_LINE %17 = load i64 %16 NEW_LINE %18 = xor i64 2 , %17 NEW_LINE %19 = icmp ne i64 %18 , 0 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = phi i1 ARR 2 true %5 , ARR 2 %19 %15 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = load i32 %11 NEW_LINE store i32 %24 %12 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = call i64 @safe_add_func_uint64_t_u_u ( i64 %23 , i64 %25 ) NEW_LINE %27 = load * i32 %8 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = xor i64 %29 , %26 NEW_LINE %31 = trunc i64 %30 to i32 NEW_LINE store i32 %31 %27 NEW_LINE %32 = load * i32 %10 NEW_LINE %33 = load i32 %32 NEW_LINE ret i32 %33 NEW_LINE }
define * i32 @func_43 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 10 x ARR 3 1 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store * i32 @g_47 %3 NEW_LINE store i32 -1862707128 %4 NEW_LINE store * i32 @g_47 %5 NEW_LINE store * i32 null %6 NEW_LINE store i32 832172764 %7 NEW_LINE store * i32 %4 %8 NEW_LINE %12 = bitcast * ARR 3 10 x ARR 3 1 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 10 x ARR 3 1 x * i32 @__const.func_43.l_54 to * i8 ) , i64 80 , i1 false ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load volatile * i32 @g_46 NEW_LINE store i32 %13 %14 NEW_LINE %15 = load i8 @g_55 NEW_LINE %16 = add i8 %15 , -1 NEW_LINE store i8 %16 @g_55 NEW_LINE ret * i32 @g_4 NEW_LINE }
define i64 @func_25 ( i16 zeroext %0 ) { NEW_LINE %2 = alloca STRUCT 3 i32 i8 i8 NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca ARR 3 3 x * * i16 NEW_LINE %5 = alloca * * * i16 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE %7 = getelementptr inbounds ARR 3 3 x * * i16 %4 , i64 0 , i64 0 NEW_LINE store * * * i16 %7 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %6 NEW_LINE %10 = icmp slt i32 %9 , 3 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 3 x * * i16 %4 , i64 0 , i64 %13 NEW_LINE store * * i16 @g_270 %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %6 NEW_LINE br label %8 NEW_LINE 18: NEW_LINE %19 = getelementptr inbounds ARR 3 3 x * * i16 %4 , i64 0 , i64 0 NEW_LINE %20 = load * * i16 %19 NEW_LINE %21 = load * * * i16 %5 NEW_LINE store * * i16 %20 %21 NEW_LINE %22 = bitcast * STRUCT 3 i32 i8 i8 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %22 , * i8 bitcast ( * STRUCT 3 i32 i8 i8 @g_1118 to * i8 ) , i64 8 , i1 false ) NEW_LINE %23 = bitcast * STRUCT 3 i32 i8 i8 %2 to * i64 NEW_LINE %24 = load i64 %23 NEW_LINE ret i64 %24 NEW_LINE }
define zeroext i16 @func_26 ( i32 %0 , * i64 %1 , * i64 %2 , i64 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 2 x * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store * i64 %1 %7 NEW_LINE store * i64 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * * i32 @g_4 %12 NEW_LINE store i32 0 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %13 NEW_LINE %16 = icmp slt i32 %15 , 2 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %13 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 2 x * i32 %11 , i64 0 , i64 %19 NEW_LINE store * i32 null %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %13 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %13 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 2 x * i32 %11 , i64 0 , i64 1 NEW_LINE store * i32 null %25 NEW_LINE %26 = load * i32 %10 NEW_LINE %27 = load * * i32 %12 NEW_LINE store * i32 %26 %27 NEW_LINE %28 = load i64 %9 NEW_LINE %29 = trunc i64 %28 to i16 NEW_LINE ret i16 %29 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i8 @g_2 NEW_LINE %19 = sext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define * * * i32 @func_68 ( * * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca ARR 3 5 x i32 NEW_LINE %7 = alloca * * * i32 NEW_LINE %8 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i8 -9 %5 NEW_LINE store * * * i32 @g_299 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 5 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 %14 NEW_LINE store i32 291167732 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load * * i32 %3 NEW_LINE %21 = load * i32 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE store i8 %23 %5 NEW_LINE %24 = sext i8 %23 to i32 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 3 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = or i32 %26 , %24 NEW_LINE store i32 %27 %25 NEW_LINE %28 = load * * * i32 %7 NEW_LINE ret * * * i32 %28 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i8 @g_5 NEW_LINE %19 = sext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_5~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i8 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i16 @g_2 NEW_LINE %19 = sext i16 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define void @func_25 ( * STRUCT 7 i64 i32 i32 i8 i32 i16 i64 noalias sret %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i32 NEW_LINE store i16 %1 %3 NEW_LINE store i8 30 %4 NEW_LINE store * i32 bitcast ( * STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 getelementptr inbounds ( ARR 3 7 x STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 bitcast ( * ARR 3 7 x STRUCT 2 i64 ARR 3 32 x i8 @g_29 to * ARR 3 7 x STRUCT 1 STRUCT 7 i64 i32 i32 i8 i32 i16 i64 ) , i64 0 , i64 3 ) to * i32 ) %5 NEW_LINE %6 = load i8 %4 NEW_LINE %7 = zext i8 %6 to i32 NEW_LINE %8 = load i8 %4 NEW_LINE %9 = zext i8 %8 to i32 NEW_LINE %10 = call zeroext i8 @func_31 ( i32 %9 ) NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = and i32 %7 , %11 NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE %14 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext -7 , i8 zeroext %13 ) NEW_LINE %15 = zext i8 %14 to i64 NEW_LINE %16 = load i64 @g_33 NEW_LINE %17 = and i64 %16 , %15 NEW_LINE store i64 %17 @g_33 NEW_LINE %18 = trunc i64 %17 to i32 NEW_LINE %19 = load * i32 %5 NEW_LINE store i32 %18 %19 NEW_LINE %20 = bitcast * STRUCT 7 i64 i32 i32 i8 i32 i16 i64 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * STRUCT 7 i64 i32 i32 i8 i32 i16 i64 @g_35 to * i8 ) , i64 40 , i1 false ) NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i8 @g_2 NEW_LINE %19 = zext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = zext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i8 @g_3 NEW_LINE %19 = zext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i8 @func_40 ( i64 %0 , i16 zeroext %1 , * i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 2 x ARR 3 2 x ARR 3 1 x * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE %12 = bitcast * ARR 3 2 x ARR 3 2 x ARR 3 1 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 2 x ARR 3 2 x ARR 3 1 x * i32 @__const.func_40.l_47 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i8 -1 %8 NEW_LINE %13 = getelementptr inbounds ARR 3 2 x ARR 3 2 x ARR 3 1 x * i32 %7 , i64 0 , i64 0 NEW_LINE %14 = getelementptr inbounds ARR 3 2 x ARR 3 1 x * i32 %13 , i64 0 , i64 1 NEW_LINE %15 = getelementptr inbounds ARR 3 1 x * i32 %14 , i64 0 , i64 0 NEW_LINE %16 = load * i32 %15 NEW_LINE %17 = load i32 @g_7 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = call i32 @func_44 ( * i32 %16 , i64 %18 ) NEW_LINE %20 = load volatile * i32 @g_77 NEW_LINE store i32 %19 %20 NEW_LINE %21 = load i8 %8 NEW_LINE ret i8 %21 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i16 @func_1 ( ) NEW_LINE %18 = load i8 @g_2 NEW_LINE %19 = zext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_4~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i16 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_4~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define * STRUCT 1 * i8 @func_79 ( i32 %0 , i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i8 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * i8 @g_111 %7 NEW_LINE %8 = load * i32 %6 NEW_LINE store i32 1 %8 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE %11 = load * i8 %7 NEW_LINE store i8 %10 %11 NEW_LINE %12 = zext i8 %10 to i32 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp eq i32 %12 , %13 NEW_LINE %15 = zext i1 %14 to i32 NEW_LINE %16 = trunc i32 %15 to i8 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE %19 = load i16 @g_97 NEW_LINE %20 = call zeroext i16 @safe_mul_func_uint16_t_u_u ( i16 zeroext %18 , i16 zeroext %19 ) NEW_LINE %21 = trunc i16 %20 to i8 NEW_LINE %22 = call zeroext i8 @safe_sub_func_uint8_t_u_u ( i8 zeroext %16 , i8 zeroext %21 ) NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE %24 = load i32 @g_72 NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = icmp sle i64 %25 , 3377640731823698830 NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = icmp sgt i32 %23 , %27 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = load * i32 %6 NEW_LINE store i32 %29 %30 NEW_LINE %31 = load * STRUCT 1 * i8 @g_114 NEW_LINE ret * STRUCT 1 * i8 %31 NEW_LINE }
define * i32 @func_4 ( i32 %0 , i64 %1 , i8 zeroext %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 9 x ARR 3 3 x * * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_1035 %9 NEW_LINE %13 = bitcast * ARR 3 9 x ARR 3 3 x * * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 9 x ARR 3 3 x * * i32 @__const.func_4.l_2043 to * i8 ) , i64 216 , i1 false ) NEW_LINE %14 = load * i32 %9 NEW_LINE %15 = load volatile * * i32 @g_1721 NEW_LINE store * i32 %14 %15 NEW_LINE %16 = load * i32 %8 NEW_LINE ret * i32 %16 NEW_LINE }
define * * i32 @func_43 ( * * * i32 %0 , i64 %1 , i32 %2 , * * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca * * * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 10 x * i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca i16 NEW_LINE %14 = alloca i32 NEW_LINE store * * * i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i8 -81 %12 NEW_LINE store i16 5 %13 NEW_LINE store i32 0 %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %14 NEW_LINE %17 = icmp slt i32 %16 , 10 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %14 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x * i32 %11 , i64 0 , i64 %20 NEW_LINE store * i32 null %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %14 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %14 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i16 %13 NEW_LINE %27 = add i16 %26 , 1 NEW_LINE store i16 %27 %13 NEW_LINE ret * * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x ARR 3 7 x * i32 @g_60 , i64 0 , i64 3 , i64 6 , i64 4 ) NEW_LINE }
define * i32 @func_2 ( * i32 %0 , i8 signext %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_63 , i64 0 , i64 0 ) %9 NEW_LINE store i64 0 getelementptr inbounds ( STRUCT 3 i16 i64 i64 @g_204 , i32 0 , i32 1 ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 getelementptr inbounds ( STRUCT 3 i16 i64 i64 @g_204 , i32 0 , i32 1 ) NEW_LINE %12 = icmp sgt i64 %11 , -26 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load * i32 @g_147 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %24 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i64 getelementptr inbounds ( STRUCT 3 i16 i64 i64 @g_204 , i32 0 , i32 1 ) NEW_LINE %21 = trunc i64 %20 to i8 NEW_LINE %22 = call zeroext i8 @safe_sub_func_uint8_t_u_u ( i8 zeroext %21 , i8 zeroext 2 ) NEW_LINE %23 = zext i8 %22 to i64 NEW_LINE store i64 %23 getelementptr inbounds ( STRUCT 3 i16 i64 i64 @g_204 , i32 0 , i32 1 ) NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load * i32 %9 NEW_LINE ret * i32 %25 NEW_LINE }
define signext i16 @func_20 ( i32 %0 , i32 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_108 , i64 0 , i64 0 ) %7 NEW_LINE %8 = load * i32 %7 NEW_LINE %9 = load * i32 %7 NEW_LINE %10 = icmp eq * i32 %8 , %9 NEW_LINE %11 = zext i1 %10 to i32 NEW_LINE %12 = load * * * * i32 @g_782 NEW_LINE %13 = load * * * i32 %12 NEW_LINE %14 = load * * i32 %13 NEW_LINE store * i32 %5 %14 NEW_LINE store * i32 %5 %7 NEW_LINE store i32 0 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp ne i32 %16 , 20 NEW_LINE br i1 %17 , label %18 , label %29 NEW_LINE 18: NEW_LINE %19 = load * i32 %7 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE br label %29 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = trunc i32 %25 to i16 NEW_LINE %27 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %26 , i16 zeroext 4 ) NEW_LINE %28 = zext i16 %27 to i32 NEW_LINE store i32 %28 %5 NEW_LINE br label %15 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = trunc i32 %30 to i16 NEW_LINE ret i16 %31 NEW_LINE }
define * i32 @func_28 ( * i32 %0 , i32 %1 , * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca ARR 3 9 x * i32 NEW_LINE %14 = alloca i16 NEW_LINE %15 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 7 x i32 @g_63 , i64 0 , i64 0 , i64 5 ) %9 NEW_LINE store * i32 @g_1102 %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 @g_1102 %12 NEW_LINE %16 = bitcast * ARR 3 9 x * i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_28.l_1522 to * i8 ) , i64 72 , i1 false ) NEW_LINE store i16 -20340 %14 NEW_LINE %17 = load i16 %14 NEW_LINE %18 = add i16 %17 , 1 NEW_LINE store i16 %18 %14 NEW_LINE %19 = load * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 7 x * i32 @g_1526 , i64 0 , i64 0 , i64 5 ) NEW_LINE ret * i32 %19 NEW_LINE }
define zeroext i8 @func_76 ( i64 %0 , * i32 %1 , i8 signext %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * * STRUCT 1 * i8 NEW_LINE %11 = alloca * * * STRUCT 1 * i8 NEW_LINE %12 = alloca * * * * STRUCT 1 * i8 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i8 -74 %9 NEW_LINE store * * STRUCT 1 * i8 getelementptr inbounds ( ARR 3 4 x ARR 3 3 x * STRUCT 1 * i8 @g_429 , i64 0 , i64 2 , i64 1 ) %10 NEW_LINE store * * * STRUCT 1 * i8 %10 %11 NEW_LINE store * * * * STRUCT 1 * i8 %11 %12 NEW_LINE store i32 -15 @g_1003 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_1003 NEW_LINE %15 = icmp sgt i32 %14 , -19 NEW_LINE br i1 %15 , label %16 , label %20 NEW_LINE 16: NEW_LINE store i8 0 %9 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 @g_1003 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @g_1003 NEW_LINE br label %13 NEW_LINE 20: NEW_LINE %21 = load * * * * STRUCT 1 * i8 %12 NEW_LINE store * * * * STRUCT 1 * i8 %21 %12 NEW_LINE %22 = load i8 %9 NEW_LINE ret i8 %22 NEW_LINE }
define * i32 @func_40 ( * i32 %0 , i16 signext %1 , i64 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 @g_189 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE store i8 -13 @g_209 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i8 @g_209 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = icmp slt i32 %14 , -18 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = load volatile * * * i32 @g_282 NEW_LINE %18 = load * * i32 %17 NEW_LINE %19 = load * i32 %18 NEW_LINE store * i32 %19 %5 NEW_LINE br label %32 NEW_LINE 20: NEW_LINE %21 = load i8 @g_209 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE %23 = call i32 @safe_sub_func_uint32_t_u_u ( i32 %22 , i32 4 ) NEW_LINE %24 = trunc i32 %23 to i8 NEW_LINE store i8 %24 @g_209 NEW_LINE br label %12 NEW_LINE 25: NEW_LINE %26 = load * * i32 @g_283 NEW_LINE store * i32 null %26 NEW_LINE %27 = load i8 @g_209 NEW_LINE %28 = icmp ne i8 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %30 NEW_LINE 29: NEW_LINE br label %11 NEW_LINE 30: NEW_LINE %31 = load * i32 %10 NEW_LINE store * i32 %31 %5 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load * i32 %5 NEW_LINE ret * i32 %33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call zeroext i16 @func_1 ( ) NEW_LINE %19 = load i32 @g_5 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = load i32 %7 NEW_LINE call void @transparent_crc ( i64 %20 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_5~00" , i64 0 , i64 0 ) , i32 %21 ) NEW_LINE %22 = load i32 @crc32_context NEW_LINE %23 = zext i32 %22 to i64 NEW_LINE %24 = xor i64 %23 , 4294967295 NEW_LINE %25 = trunc i64 %24 to i32 NEW_LINE %26 = load i32 %7 NEW_LINE call void @platform_main_end ( i32 %25 , i32 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_2 ( i8 signext %0 , i64 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 8 x ARR 3 6 x i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %9 = bitcast * ARR 3 8 x ARR 3 6 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( ARR 3 8 x ARR 3 6 x i8 @__const.func_2.l_2544 , i32 0 , i32 0 , i32 0 ) , i64 48 , i1 false ) NEW_LINE store * i32 @g_214 %6 NEW_LINE %10 = getelementptr inbounds ARR 3 8 x ARR 3 6 x i8 %5 , i64 0 , i64 3 NEW_LINE %11 = getelementptr inbounds ARR 3 6 x i8 %10 , i64 0 , i64 0 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = load * i32 @g_216 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = and i32 %15 , %13 NEW_LINE store i32 %16 %14 NEW_LINE %17 = load * i32 %6 NEW_LINE ret * i32 %17 NEW_LINE }
define zeroext i8 @func_5 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca ARR 3 9 x * i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca * * i64 NEW_LINE store i64 %0 %2 NEW_LINE store i64 -8 %3 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 2 x i64 @g_9 , i64 0 , i64 0 ) %4 NEW_LINE %9 = bitcast * ARR 3 9 x * i64 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %9 , i8 0 , i64 72 , i1 false ) NEW_LINE store i64 8 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp eq i64 %11 , 5 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE store * i64 getelementptr inbounds ( ARR 3 2 x i64 @g_9 , i64 0 , i64 0 ) %7 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x * i64 %5 , i64 0 , i64 0 NEW_LINE store * * i64 %14 %8 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 %2 NEW_LINE %17 = add nsw i64 %16 , -1 NEW_LINE store i64 %17 %2 NEW_LINE br label %10 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = trunc i64 %19 to i8 NEW_LINE ret i8 %20 NEW_LINE }
define i32 @func_94 ( * * i32 %0 , * * i32 %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 3 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store * * i32 %1 %4 NEW_LINE store * i32 @g_76 %5 NEW_LINE store * i32 @g_5 %6 NEW_LINE store * i32 @g_76 %7 NEW_LINE store * i32 @g_76 %8 NEW_LINE store * i32 @g_5 %9 NEW_LINE store i32 -753239620 %10 NEW_LINE store * i32 %10 %11 NEW_LINE store i32 0 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %13 NEW_LINE %16 = icmp slt i32 %15 , 3 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %13 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 3 x * i32 %12 , i64 0 , i64 %19 NEW_LINE store * i32 @g_76 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %13 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %13 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = load i32 @g_112 NEW_LINE %26 = add i32 %25 , 1 NEW_LINE store i32 %26 @g_112 NEW_LINE %27 = load i32 @g_110 NEW_LINE ret i32 %27 NEW_LINE }
define zeroext i16 @func_18 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * * * i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i32 null %6 NEW_LINE store * * i32 %6 %7 NEW_LINE store * * * i32 %7 %8 NEW_LINE %9 = load * * * i32 %8 NEW_LINE %10 = icmp eq * * * i32 null , %9 NEW_LINE %11 = zext i1 %10 to i32 NEW_LINE %12 = load * i32 @g_878 NEW_LINE store i32 %11 %12 NEW_LINE store i32 0 @g_1569 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_1569 NEW_LINE %15 = icmp eq i32 %14 , 56 NEW_LINE br i1 %15 , label %16 , label %27 NEW_LINE 16: NEW_LINE %17 = load volatile * * * * i16 @g_1151 NEW_LINE %18 = load volatile * * * i16 %17 NEW_LINE %19 = load volatile * * i16 %18 NEW_LINE %20 = load * i16 %19 NEW_LINE %21 = load i16 %20 NEW_LINE store i16 %21 %3 NEW_LINE br label %30 NEW_LINE 22: NEW_LINE %23 = load i32 @g_1569 NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = call i64 @safe_add_func_uint64_t_u_u ( i64 %24 , i64 8 ) NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE store i32 %26 @g_1569 NEW_LINE br label %13 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = trunc i32 %28 to i16 NEW_LINE store i16 %29 %3 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i16 %3 NEW_LINE ret i16 %31 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %8 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 2 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load * * i8 %5 NEW_LINE %13 = getelementptr inbounds * i8 %12 , i64 1 NEW_LINE %14 = load * i8 %13 NEW_LINE %15 = call i32 @strcmp ( * i8 %14 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE store i32 1 %8 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %19 = call i64 @func_1 ( ) NEW_LINE %20 = load volatile i32 @g_3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %8 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %8 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_2 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 3 x * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 1 i32 @g_282 , i32 0 , i32 0 ) %3 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 1 i32 @g_541 , i32 0 , i32 0 ) %4 NEW_LINE store i64 0 %6 NEW_LINE store i32 1023720040 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 3 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 3 x * i32 %5 , i64 0 , i64 %14 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 1 i32 @g_117 , i32 0 , i32 0 ) %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i64 %6 NEW_LINE %21 = add i64 %20 , 1 NEW_LINE store i64 %21 %6 NEW_LINE %22 = load i32 %7 NEW_LINE %23 = add i32 %22 , -1 NEW_LINE store i32 %23 %7 NEW_LINE %24 = getelementptr inbounds ARR 3 3 x * i32 %5 , i64 0 , i64 1 NEW_LINE %25 = load * i32 %24 NEW_LINE ret * i32 %25 NEW_LINE }
define zeroext i8 @func_11 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca STRUCT 1 i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * STRUCT 1 i64 NEW_LINE %6 = alloca * * STRUCT 1 i64 NEW_LINE %7 = alloca ARR 3 3 x i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i64 %3 , i32 0 , i32 0 NEW_LINE store i64 %0 %9 NEW_LINE store i32 %1 %4 NEW_LINE store * STRUCT 1 i64 null %5 NEW_LINE store * * STRUCT 1 i64 @g_962 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %8 NEW_LINE %12 = icmp slt i32 %11 , 3 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %8 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 3 x i8 %7 , i64 0 , i64 %15 NEW_LINE store i8 82 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %8 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %8 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load * i32 @g_381 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = or i64 %23 , 2112885738 NEW_LINE %25 = trunc i64 %24 to i32 NEW_LINE store i32 %25 %21 NEW_LINE %26 = load * STRUCT 1 i64 %5 NEW_LINE %27 = load * * STRUCT 1 i64 %6 NEW_LINE store * STRUCT 1 i64 %26 %27 NEW_LINE %28 = getelementptr inbounds ARR 3 3 x i8 %7 , i64 0 , i64 0 NEW_LINE %29 = load i8 %28 NEW_LINE ret i8 %29 NEW_LINE }
define signext i8 @func_39 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 7 x * * * i16 NEW_LINE %4 = alloca ARR 3 4 x * * i16 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 7 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 7 x * * * i16 %3 , i64 0 , i64 %11 NEW_LINE store * * * i16 @g_312 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE store i32 0 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = icmp slt i32 %18 , 4 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 4 x * * i16 %4 , i64 0 , i64 %22 NEW_LINE store * * i16 @g_313 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE %28 = getelementptr inbounds ARR 3 4 x * * i16 %4 , i64 0 , i64 0 NEW_LINE store * * i16 @g_313 %28 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE ret i8 %30 NEW_LINE }
define * i32 @func_61 ( i64 %0 , * i8 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 7 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE store i32 -4 %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 1 x ARR 3 5 x i32 @g_159 , i64 0 , i64 4 , i64 0 , i64 2 ) %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 1 x ARR 3 5 x i32 @g_159 , i64 0 , i64 2 , i64 0 , i64 2 ) %7 NEW_LINE store * i32 @g_51 %8 NEW_LINE %11 = bitcast * ARR 3 7 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_61.l_1431 to * i8 ) , i64 56 , i1 false ) NEW_LINE %12 = load i64 @g_1432 NEW_LINE %13 = add i64 %12 , 1 NEW_LINE store i64 %13 @g_1432 NEW_LINE %14 = getelementptr inbounds ARR 3 7 x * i32 %9 , i64 0 , i64 3 NEW_LINE store * i32 null %14 NEW_LINE %15 = getelementptr inbounds ARR 3 7 x * i32 %9 , i64 0 , i64 3 NEW_LINE %16 = load * i32 %15 NEW_LINE ret * i32 %16 NEW_LINE }
define * i32 @func_10 ( i64 %0 , i64 %1 , i64 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = getelementptr inbounds STRUCT 1 i64 %4 , i32 0 , i32 0 NEW_LINE store i64 %0 %9 NEW_LINE store i64 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE store i64 3441236583812274562 %7 NEW_LINE store * i32 @g_176 %8 NEW_LINE %10 = load i64 %7 NEW_LINE %11 = load * * * i32 @g_1163 NEW_LINE %12 = load * * i32 %11 NEW_LINE %13 = load * i32 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = or i64 %15 , %10 NEW_LINE %17 = trunc i64 %16 to i32 NEW_LINE store i32 %17 %13 NEW_LINE %18 = load i32 @g_750 NEW_LINE %19 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext -25920 , i16 zeroext -1 ) NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE %21 = call i32 @safe_div_func_int32_t_s_s ( i32 %17 , i32 %20 ) NEW_LINE %22 = bitcast * STRUCT 1 i64 %4 to * i32 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = and i32 %21 , 131071 NEW_LINE %25 = and i32 %23 , -131072 NEW_LINE %26 = or i32 %25 , %24 NEW_LINE store i32 %26 %22 NEW_LINE %27 = shl i32 %24 , 15 NEW_LINE %28 = ashr i32 %27 , 15 NEW_LINE %29 = load * * i32 @g_39 NEW_LINE %30 = load * i32 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = xor i32 %31 , 0 NEW_LINE store i32 %32 %30 NEW_LINE %33 = load * i32 %8 NEW_LINE ret * i32 %33 NEW_LINE }
define i64 @func_8 ( i8 signext %0 , i32 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 7 x * i32 NEW_LINE %11 = alloca ARR 3 6 x i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 null %9 NEW_LINE %14 = bitcast * ARR 3 6 x i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 6 x i32 @__const.func_8.l_1062 to * i8 ) , i64 24 , i1 false ) NEW_LINE store i8 4 %12 NEW_LINE store i32 0 %13 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %13 NEW_LINE %17 = icmp slt i32 %16 , 7 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %13 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 7 x * i32 %10 , i64 0 , i64 %20 NEW_LINE store * i32 null %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %13 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %13 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i8 %12 NEW_LINE %27 = add i8 %26 , 1 NEW_LINE store i8 %27 %12 NEW_LINE %28 = load volatile * i64 @g_155 NEW_LINE %29 = load i64 %28 NEW_LINE ret i64 %29 NEW_LINE }
define signext i8 @func_66 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE %3 = alloca ARR 3 6 x ARR 3 6 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i16 %0 %2 NEW_LINE %7 = bitcast * ARR 3 6 x ARR 3 6 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 6 x ARR 3 6 x * i32 @__const.func_66.l_70 to * i8 ) , i64 288 , i1 false ) NEW_LINE store i32 8 %4 NEW_LINE %8 = load i16 getelementptr inbounds ( ARR 3 10 x i16 @g_69 , i64 0 , i64 1 ) NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = or i32 %10 , %9 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i16 getelementptr inbounds ( ARR 3 10 x i16 @g_69 , i64 0 , i64 1 ) NEW_LINE %13 = trunc i16 %12 to i8 NEW_LINE ret i8 %13 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 9 x * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 @g_6 %1 NEW_LINE store * i32 @g_6 %2 NEW_LINE store * i32 @g_6 %3 NEW_LINE store * i32 @g_6 %4 NEW_LINE store * i32 @g_6 %5 NEW_LINE store i32 748470593 %6 NEW_LINE store i8 -74 %8 NEW_LINE store i32 0 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %9 NEW_LINE %12 = icmp slt i32 %11 , 9 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %9 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 9 x * i32 %7 , i64 0 , i64 %15 NEW_LINE store * i32 @g_6 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %9 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %9 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load i32 @g_2 NEW_LINE %22 = add i32 %21 , -1 NEW_LINE store i32 %22 @g_2 NEW_LINE %23 = load i32 getelementptr inbounds ( ARR 3 8 x i32 @g_13 , i64 0 , i64 4 ) NEW_LINE %24 = add i32 %23 , 1 NEW_LINE store i32 %24 getelementptr inbounds ( ARR 3 8 x i32 @g_13 , i64 0 , i64 4 ) NEW_LINE %25 = load i8 %8 NEW_LINE %26 = zext i8 %25 to i32 NEW_LINE ret i32 %26 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 10 x ARR 3 4 x * i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = bitcast * ARR 3 10 x ARR 3 4 x * i32 %1 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 , i8 0 , i64 320 , i1 false ) NEW_LINE %5 = load i8 @g_4 NEW_LINE %6 = add i8 %5 , 1 NEW_LINE store i8 %6 @g_4 NEW_LINE %7 = load i32 @g_3 NEW_LINE %8 = trunc i32 %7 to i8 NEW_LINE ret i8 %8 NEW_LINE }
define void @func_50 ( * STRUCT 3 i16 i64 i16 noalias sret %0 , * i16 %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca * * i64 NEW_LINE store * i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 %3 %7 NEW_LINE store * i64 @g_418 %8 NEW_LINE store * * i64 %8 %9 NEW_LINE store i16 -4 @g_38 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i16 @g_38 NEW_LINE %12 = sext i16 %11 to i32 NEW_LINE %13 = icmp sle i32 %12 , -19 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = bitcast * STRUCT 3 i16 i64 i16 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 getelementptr inbounds ( STRUCT 5 i8 i8 i64 i8 i8 @g_1634 , i32 0 , i32 0 ) , i64 24 , i1 false ) NEW_LINE br label %25 NEW_LINE 16: NEW_LINE %17 = load i16 @g_38 NEW_LINE %18 = sext i16 %17 to i32 NEW_LINE %19 = call i32 @safe_sub_func_uint32_t_u_u ( i32 %18 , i32 2 ) NEW_LINE %20 = trunc i32 %19 to i16 NEW_LINE store i16 %20 @g_38 NEW_LINE br label %10 NEW_LINE 21: NEW_LINE %22 = load * * i64 %9 NEW_LINE %23 = load volatile * * * i64 @g_1638 NEW_LINE store * * i64 %22 %23 NEW_LINE %24 = bitcast * STRUCT 3 i16 i64 i16 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %24 , * i8 getelementptr inbounds ( STRUCT 5 i8 i8 i64 i8 i8 @g_1641 , i32 0 , i32 0 ) , i64 24 , i1 false ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE ret void NEW_LINE }
define zeroext i16 @func_34 ( * i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca ARR 3 5 x * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i64 1 %7 NEW_LINE store i64 -819431124997417497 %9 NEW_LINE store i32 651022698 %10 NEW_LINE store i32 -1 %11 NEW_LINE store i32 192887528 %12 NEW_LINE store i64 -7766221449084369417 %13 NEW_LINE store i32 0 %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %14 NEW_LINE %17 = icmp slt i32 %16 , 5 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %14 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x * i32 %8 , i64 0 , i64 %20 NEW_LINE store * i32 @g_27 %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %14 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %14 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i64 %13 NEW_LINE %27 = add i64 %26 , 1 NEW_LINE store i64 %27 %13 NEW_LINE %28 = load i32 @g_7 NEW_LINE %29 = trunc i32 %28 to i16 NEW_LINE ret i16 %29 NEW_LINE }
define i32 @func_17 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 2 x i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x ARR 3 4 x ARR 3 10 x i32 @g_270 , i64 0 , i64 3 , i64 3 , i64 2 ) %3 NEW_LINE store i32 -729144697 %4 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = icmp slt i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 2 x i32 %5 , i64 0 , i64 %12 NEW_LINE store i32 -1973046531 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %6 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load * i32 %3 NEW_LINE store i32 %18 %19 NEW_LINE store i32 1706802862 %4 NEW_LINE %20 = getelementptr inbounds ARR 3 2 x i32 %5 , i64 0 , i64 0 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = xor i32 %21 , 1706802862 NEW_LINE store i32 %22 %20 NEW_LINE %23 = load i32 getelementptr inbounds ( ARR 3 6 x ARR 3 5 x ARR 3 3 x i32 @g_102 , i64 0 , i64 0 , i64 4 , i64 2 ) NEW_LINE ret i32 %23 NEW_LINE }
define zeroext i8 @func_30 ( * i8 %0 , * i8 %1 , i8 zeroext %2 , * i8 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca ARR 3 2 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i8 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store i32 0 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %10 NEW_LINE %13 = icmp slt i32 %12 , 2 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %10 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 2 x * i32 %9 , i64 0 , i64 %16 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 5 x ARR 3 2 x i32 @g_118 , i64 0 , i64 0 , i64 4 , i64 1 ) %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %10 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %10 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext -1 , i32 2 ) NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE %24 = load volatile * i32 @g_82 NEW_LINE store i32 %23 %24 NEW_LINE %25 = load volatile i16 bitcast ( * STRUCT 3 i8 i8 ARR 3 6 x i8 @g_148 to * i16 ) NEW_LINE %26 = shl i16 %25 , 5 NEW_LINE %27 = ashr i16 %26 , 5 NEW_LINE %28 = sext i16 %27 to i32 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE ret i8 %29 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call i32 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %18 %19 NEW_LINE %20 = load i32 @g_3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @func_45 ( i8 signext %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca ARR 3 10 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE %8 = bitcast * ARR 3 10 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_45.l_644 to * i8 ) , i64 80 , i1 false ) NEW_LINE store i8 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i8 %3 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = icmp sge i32 %11 , 12 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE store * * i32 @g_4 %7 NEW_LINE %14 = load i8 %3 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = call * i32 @func_53 ( i32 %15 ) NEW_LINE %17 = load * * i32 %7 NEW_LINE store * i32 %16 %17 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x * i32 %5 , i64 0 , i64 5 NEW_LINE %19 = load * i32 %18 NEW_LINE %20 = load * * i32 %7 NEW_LINE store * i32 %19 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i8 %3 NEW_LINE %23 = add i8 %22 , 1 NEW_LINE store i8 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i8 %3 NEW_LINE %26 = sext i8 %25 to i16 NEW_LINE ret i16 %26 NEW_LINE }
define * i32 @func_2 ( i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * * * * i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * * * i32 NEW_LINE %8 = alloca * * * * * i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * * * * * i16 @g_1809 %5 NEW_LINE store * i32 @g_31 %6 NEW_LINE %9 = load volatile * * i32 @g_3019 NEW_LINE %10 = load * i32 %9 NEW_LINE store volatile i32 -4 %10 NEW_LINE store i32 0 @g_404 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @g_404 NEW_LINE %13 = icmp sgt i32 %12 , 2 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE store * * * * i32 null %7 NEW_LINE store * * * * * i32 %7 %8 NEW_LINE store * * * * * i32 null %8 NEW_LINE store * * * * * i32 null @g_3489 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @g_404 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = call i64 @safe_add_func_int64_t_s_s ( i64 %17 , i64 8 ) NEW_LINE %19 = trunc i64 %18 to i32 NEW_LINE store i32 %19 @g_404 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE %21 = load * i32 %6 NEW_LINE store i32 1 %21 NEW_LINE %22 = load * i32 @g_3020 NEW_LINE store volatile i32 1 %22 NEW_LINE %23 = load * i32 %6 NEW_LINE ret * i32 %23 NEW_LINE }
define i64 @func_60 ( * i32 %0 , * i32 %1 , i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca ARR 3 8 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i64 %2 %6 NEW_LINE %10 = bitcast * ARR 3 8 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_60.l_1250 to * i8 ) , i64 64 , i1 false ) NEW_LINE store volatile i16 8887 @g_1251 NEW_LINE store i16 0 @g_972 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i16 @g_972 NEW_LINE %13 = zext i16 %12 to i32 NEW_LINE %14 = icmp sle i32 %13 , 7 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE store i8 -1 %9 NEW_LINE %16 = load * i32 %5 NEW_LINE %17 = icmp ne * i32 null , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = load i8 %9 NEW_LINE %20 = zext i8 %19 to i32 NEW_LINE %21 = or i32 %20 , %18 NEW_LINE %22 = trunc i32 %21 to i8 NEW_LINE store i8 %22 %9 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i16 @g_972 NEW_LINE %25 = zext i16 %24 to i32 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE %27 = trunc i32 %26 to i16 NEW_LINE store i16 %27 @g_972 NEW_LINE br label %11 NEW_LINE 28: NEW_LINE %29 = load i64 %6 NEW_LINE ret i64 %29 NEW_LINE }
define i32 @func_46 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 700109518 %4 NEW_LINE store * i32 @g_64 %5 NEW_LINE %6 = load i16 @g_39 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = icmp eq * i32 null , %7 NEW_LINE %9 = zext i1 %8 to i32 NEW_LINE %10 = load i8 %3 NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = load i8 %3 NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = load * i32 %5 NEW_LINE store i32 %13 %14 NEW_LINE %15 = call * i16 @func_65 ( i32 %11 , i32 %13 ) NEW_LINE %16 = call * i32 @func_58 ( i32 700109518 , i32 %9 , * i16 %15 ) NEW_LINE store * i32 %16 @g_94 NEW_LINE store i16 0 @g_55 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i16 @g_55 NEW_LINE %19 = sext i16 %18 to i32 NEW_LINE %20 = icmp sgt i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %29 NEW_LINE 21: NEW_LINE %22 = load * i32 %5 NEW_LINE %23 = load i32 %22 NEW_LINE store i32 %23 %2 NEW_LINE br label %32 NEW_LINE 24: NEW_LINE %25 = load i16 @g_55 NEW_LINE %26 = trunc i16 %25 to i8 NEW_LINE %27 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %26 , i8 zeroext 8 ) NEW_LINE %28 = zext i8 %27 to i16 NEW_LINE store i16 %28 @g_55 NEW_LINE br label %17 NEW_LINE 29: NEW_LINE %30 = load i8 %3 NEW_LINE %31 = zext i8 %30 to i32 NEW_LINE store i32 %31 %2 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE ret i32 %33 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i16 NEW_LINE store i64 -5624658507097749596 %1 NEW_LINE store * i8 null %2 NEW_LINE store i32 0 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 6 x i32 @g_2 , i64 0 , i64 2 , i64 2 , i64 3 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 6 x i32 @g_2 , i64 0 , i64 2 , i64 2 , i64 3 ) NEW_LINE %9 = icmp eq i32 %8 , -28 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE store i64 2 %3 NEW_LINE store * i8 null %4 NEW_LINE store * i8 null %5 NEW_LINE store i16 1 %6 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 6 x i32 @g_2 , i64 0 , i64 2 , i64 2 , i64 3 ) NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 6 x i32 @g_2 , i64 0 , i64 2 , i64 2 , i64 3 ) NEW_LINE br label %7 NEW_LINE 14: NEW_LINE %15 = load volatile i32 getelementptr inbounds ( STRUCT 7 i64 i32 i32 i8 i32 i16 i64 @g_474 , i32 0 , i32 2 ) NEW_LINE ret i32 %15 NEW_LINE }
define * i16 @func_20 ( i32 %0 , i8 signext %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca ARR 3 2 x * i16 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x * i16 %7 , i64 0 , i64 %14 NEW_LINE store * i16 @g_72 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i16 -3 @g_72 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i16 @g_72 NEW_LINE %22 = zext i16 %21 to i32 NEW_LINE %23 = icmp sle i32 %22 , 9 NEW_LINE br i1 %23 , label %24 , label %32 NEW_LINE 24: NEW_LINE %25 = load i32 @g_826 NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE br label %32 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i16 @g_72 NEW_LINE %31 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %30 , i16 zeroext 5 ) NEW_LINE store i16 %31 @g_72 NEW_LINE br label %20 NEW_LINE 32: NEW_LINE %33 = getelementptr inbounds ARR 3 2 x * i16 %7 , i64 0 , i64 0 NEW_LINE %34 = load * i16 %33 NEW_LINE ret * i16 %34 NEW_LINE }
define i64 @func_25 ( i8 zeroext %0 , i8 signext %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca ARR 3 10 x i16 NEW_LINE %8 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store i8 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 10 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i16 %7 , i64 0 , i64 %14 NEW_LINE store i16 -14986 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i8 0 %6 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i8 %6 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE %23 = icmp slt i32 %22 , 10 NEW_LINE br i1 %23 , label %24 , label %33 NEW_LINE 24: NEW_LINE %25 = load i8 %6 NEW_LINE %26 = sext i8 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i16 %7 , i64 0 , i64 %26 NEW_LINE store i16 -3 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i8 %6 NEW_LINE %30 = sext i8 %29 to i32 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE %32 = trunc i32 %31 to i8 NEW_LINE store i8 %32 %6 NEW_LINE br label %20 NEW_LINE 33: NEW_LINE %34 = getelementptr inbounds ARR 3 10 x i16 %7 , i64 0 , i64 0 NEW_LINE %35 = load i16 %34 NEW_LINE %36 = sext i16 %35 to i64 NEW_LINE ret i64 %36 NEW_LINE }
define * i32 @func_75 ( i32 %0 , * i32 %1 , i16 signext %2 , i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca ARR 3 8 x * i32 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE store i32 %0 %19 NEW_LINE store * i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store * i32 @g_53 %11 NEW_LINE store * i32 @g_53 %12 NEW_LINE store * i32 @g_53 %13 NEW_LINE %20 = bitcast * ARR 3 8 x * i32 %14 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_75.l_92 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i64 0 %15 NEW_LINE store i32 -2 %16 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x ARR 3 5 x i32 @g_8 , i64 0 , i64 3 , i64 0 , i64 2 ) %17 NEW_LINE %21 = load i32 %16 NEW_LINE %22 = add i32 %21 , 1 NEW_LINE store i32 %22 %16 NEW_LINE %23 = load * i32 %17 NEW_LINE ret * i32 %23 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 2 i64 ARR 3 24 x i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE call void @func_1 ( * STRUCT 2 i64 ARR 3 24 x i8 sret %7 ) NEW_LINE %18 = load i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 31 x i8 @g_2 , i32 0 , i32 0 ) NEW_LINE %19 = zext i8 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2.f0~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @crc32_context NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = xor i64 %22 , 4294967295 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %24 , i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i8 @func_50 ( * i32 %0 , i32 %1 , * i32 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i32 0 %9 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %9 NEW_LINE %13 = icmp ult i32 %12 , 7 NEW_LINE br i1 %13 , label %14 , label %32 NEW_LINE 14: NEW_LINE store i32 0 @g_17 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @g_17 NEW_LINE %17 = icmp ult i32 %16 , 8 NEW_LINE br i1 %17 , label %18 , label %28 NEW_LINE 18: NEW_LINE %19 = load i32 %9 NEW_LINE %20 = zext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 7 x ARR 3 8 x i32 @g_96 , i64 0 , i64 %20 NEW_LINE %22 = load i32 @g_17 NEW_LINE %23 = zext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 8 x i32 %21 , i64 0 , i64 %23 NEW_LINE store i32 1705689434 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @g_17 NEW_LINE %27 = add i32 %26 , 1 NEW_LINE store i32 %27 @g_17 NEW_LINE br label %15 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %9 NEW_LINE %31 = add i32 %30 , 1 NEW_LINE store i32 %31 %9 NEW_LINE br label %11 NEW_LINE 32: NEW_LINE %33 = load i32 getelementptr inbounds ( ARR 3 7 x ARR 3 7 x ARR 3 5 x i32 @g_10 , i64 0 , i64 4 , i64 2 , i64 4 ) NEW_LINE %34 = trunc i32 %33 to i8 NEW_LINE ret i8 %34 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call i32 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %18 %19 NEW_LINE %20 = load i32 getelementptr inbounds ( STRUCT 1 i32 @g_2 , i32 0 , i32 0 ) NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2.f0~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @func_36 ( i32 %0 , i32 %1 , i64 %2 , * * i32 %3 , * * i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store * * i32 %3 %9 NEW_LINE store * * i32 %4 %10 NEW_LINE store i32 -1 %11 NEW_LINE store i32 17 %6 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp ult i32 %14 , 15 NEW_LINE br i1 %15 , label %16 , label %37 NEW_LINE 16: NEW_LINE store * i32 @g_57 %12 NEW_LINE %17 = load i32 %11 NEW_LINE %18 = load * i32 %12 NEW_LINE store i32 %17 %18 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = zext i32 %19 to i64 NEW_LINE %21 = icmp slt i64 137 , %20 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = xor i32 %22 , -1 NEW_LINE %24 = load * i32 %12 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE br i1 %26 , label %28 , label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %16 , ARR 2 true %27 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE %31 = icmp ne i32 %23 , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = load * i32 %12 NEW_LINE store i32 %32 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add i32 %35 , -1 NEW_LINE store i32 %36 %6 NEW_LINE br label %13 NEW_LINE 37: NEW_LINE %38 = load i32 @g_8 NEW_LINE ret i32 %38 NEW_LINE }
define signext i8 @func_54 ( * i64 %0 , i64 %1 , i32 %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca ARR 3 1 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = getelementptr inbounds STRUCT 1 i32 %6 , i32 0 , i32 0 NEW_LINE store i32 %2 %14 NEW_LINE %15 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %4 %15 NEW_LINE store * i64 %0 %8 NEW_LINE store i64 %1 %9 NEW_LINE store i64 %3 %10 NEW_LINE store i32 6 %11 NEW_LINE store i32 0 %13 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %13 NEW_LINE %18 = icmp slt i32 %17 , 1 NEW_LINE br i1 %18 , label %19 , label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %13 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1 x * i32 %12 , i64 0 , i64 %21 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_693 , i64 0 , i64 1 ) %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %13 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %13 NEW_LINE br label %16 NEW_LINE 26: NEW_LINE %27 = bitcast * STRUCT 1 i32 %6 to * i32 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = load i32 @g_484 NEW_LINE %30 = or i32 %29 , %28 NEW_LINE store i32 %30 @g_484 NEW_LINE %31 = load i16 @g_1969 NEW_LINE %32 = add i16 %31 , -1 NEW_LINE store i16 %32 @g_1969 NEW_LINE %33 = bitcast * STRUCT 1 i32 %7 to * i32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = trunc i32 %34 to i8 NEW_LINE ret i8 %35 NEW_LINE }
define * i32 @func_83 ( * STRUCT 4 i32 i24 i32 i32 %0 , * STRUCT 4 i32 i24 i32 i32 %1 , i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * STRUCT 4 i32 i24 i32 i32 NEW_LINE %6 = alloca * STRUCT 4 i32 i24 i32 i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * * i32 NEW_LINE store * STRUCT 4 i32 i24 i32 i32 %0 %5 NEW_LINE store * STRUCT 4 i32 i24 i32 i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store * * i32 @g_357 %9 NEW_LINE %10 = load i16 getelementptr inbounds ( ARR 3 2 x ARR 3 6 x i16 @g_113 , i64 0 , i64 0 , i64 1 ) NEW_LINE %11 = sext i16 %10 to i64 NEW_LINE %12 = and i64 %11 , 0 NEW_LINE %13 = load i32 %7 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = and i64 %14 , %12 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE store i32 %16 %7 NEW_LINE %17 = load * * i32 %9 NEW_LINE store * i32 %7 %17 NEW_LINE %18 = load * * i32 %9 NEW_LINE store * i32 @g_54 %18 NEW_LINE store i32 20 @g_60 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @g_60 NEW_LINE %21 = icmp eq i32 %20 , 17 NEW_LINE br i1 %21 , label %22 , label %28 NEW_LINE 22: NEW_LINE %23 = load * * i32 %9 NEW_LINE store * i32 %7 %23 NEW_LINE %24 = load * * i32 %9 NEW_LINE store * i32 @g_6 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @g_60 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 @g_60 NEW_LINE br label %19 NEW_LINE 28: NEW_LINE ret * i32 @g_6 NEW_LINE }
define * i32 @func_62 ( i32 %0 , i8 zeroext %1 , i32 %2 , * i64 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca * * * i32 NEW_LINE %10 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i64 %3 %8 NEW_LINE store * * * i32 @g_156 %9 NEW_LINE store * i32 @g_139 %10 NEW_LINE %11 = load i8 getelementptr inbounds ( ARR 3 10 x ARR 3 5 x i8 @g_76 , i64 0 , i64 8 , i64 0 ) NEW_LINE %12 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext 1 , i8 signext %11 ) NEW_LINE %13 = sext i8 %12 to i16 NEW_LINE store i16 %13 @g_171 NEW_LINE %14 = load * * i32 @g_156 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE %18 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %13 , i16 signext %17 ) NEW_LINE %19 = sext i16 %18 to i64 NEW_LINE %20 = load * i64 %8 NEW_LINE %21 = load i64 %20 NEW_LINE %22 = icmp sle i64 %19 , %21 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE %24 = load * i32 %10 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = xor i32 %25 , %23 NEW_LINE store i32 %26 %24 NEW_LINE %27 = load * * i32 @g_156 NEW_LINE %28 = load * i32 %27 NEW_LINE %29 = load * * * i32 @g_155 NEW_LINE %30 = load * * i32 %29 NEW_LINE store * i32 %28 %30 NEW_LINE %31 = load * * i32 @g_156 NEW_LINE %32 = load * i32 %31 NEW_LINE ret * i32 %32 NEW_LINE }
define i32 @func_17 ( * * i32 %0 , i32 %1 , i32 %2 , i8 zeroext %3 , i8 signext %4 ) { NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i16 NEW_LINE %12 = alloca STRUCT 1 i8 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca i16 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca * i64 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca * * i32 NEW_LINE %19 = alloca i8 NEW_LINE store * * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i16 @g_163 %11 NEW_LINE %20 = bitcast * STRUCT 1 i8 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 getelementptr inbounds ( STRUCT 1 i8 @__const.func_17.l_1048 , i32 0 , i32 0 ) , i64 1 , i1 false ) NEW_LINE store * i8 getelementptr inbounds ( STRUCT 1 i8 @g_656 , i32 0 , i32 0 ) %13 NEW_LINE store i16 -2013 %14 NEW_LINE store i16 0 %15 NEW_LINE store * i64 @g_333 %16 NEW_LINE store i32 1931423996 %17 NEW_LINE store * * i32 @g_1067 %18 NEW_LINE store i8 0 %19 NEW_LINE %21 = load volatile * i32 @g_1046 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = and i32 %22 , 1 NEW_LINE store i32 %23 %21 NEW_LINE %24 = load volatile * i32 @g_1067 NEW_LINE %25 = load * * i32 %18 NEW_LINE store volatile * i32 %24 %25 NEW_LINE %26 = load i8 %19 NEW_LINE %27 = zext i8 %26 to i32 NEW_LINE ret i32 %27 NEW_LINE }
define * i8 @func_48 ( * i8 %0 , i16 zeroext %1 , i8 zeroext %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE store * i8 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i8 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i8 %7 NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = icmp slt i32 %11 , 6 NEW_LINE br i1 %12 , label %13 , label %36 NEW_LINE 13: NEW_LINE store i16 0 %6 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i16 %6 NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE %17 = icmp slt i32 %16 , 8 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE %19 = load i8 %7 NEW_LINE %20 = zext i8 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 6 x ARR 3 8 x i8 @g_18 , i64 0 , i64 %20 NEW_LINE %22 = load i16 %6 NEW_LINE %23 = zext i16 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 8 x i8 %21 , i64 0 , i64 %23 NEW_LINE store i8 1 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i16 %6 NEW_LINE %27 = zext i16 %26 to i32 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE %29 = trunc i32 %28 to i16 NEW_LINE store i16 %29 %6 NEW_LINE br label %14 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i8 %7 NEW_LINE %33 = zext i8 %32 to i32 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE %35 = trunc i32 %34 to i8 NEW_LINE store i8 %35 %7 NEW_LINE br label %9 NEW_LINE 36: NEW_LINE ret * i8 getelementptr inbounds ( ARR 3 6 x ARR 3 8 x i8 @g_18 , i64 0 , i64 0 , i64 1 ) NEW_LINE }
define zeroext i8 @func_11 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i64 6 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE store i32 0 @g_15 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_15 NEW_LINE %15 = icmp sgt i32 %14 , 18 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE store * i32 null %6 NEW_LINE store * i32 @g_20 %7 NEW_LINE store * i32 @g_20 %8 NEW_LINE store * i32 @g_20 %9 NEW_LINE store * i32 null %10 NEW_LINE store * i32 @g_20 %11 NEW_LINE %17 = load i64 %5 NEW_LINE %18 = add i64 %17 , -1 NEW_LINE store i64 %18 %5 NEW_LINE %19 = load i64 %5 NEW_LINE %20 = icmp ne i64 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE br label %12 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @g_15 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = call i64 @safe_add_func_int64_t_s_s ( i64 %25 , i64 7 ) NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE store i32 %27 @g_15 NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load * i32 @g_14 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = load * i32 %3 NEW_LINE store i32 %30 %31 NEW_LINE %32 = load i64 %5 NEW_LINE %33 = trunc i64 %32 to i8 NEW_LINE ret i8 %33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call * i8 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 * i8 %7 , i32 0 , i32 0 NEW_LINE store * i8 %18 %19 NEW_LINE %20 = load i32 getelementptr inbounds ( STRUCT 2 i32 ARR 3 4 x i8 @g_2 , i32 0 , i32 0 ) NEW_LINE %21 = zext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2.f0~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i64 @g_8 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_8~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i16 @func_20 ( i16 signext %0 , * i8 %1 , * i8 %2 , i8 zeroext %3 , * i8 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca ARR 3 2 x ARR 3 2 x ARR 3 8 x i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE %15 = bitcast * ARR 3 2 x ARR 3 2 x ARR 3 8 x i8 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 getelementptr inbounds ( ARR 3 2 x ARR 3 2 x ARR 3 8 x i8 @__const.func_20.l_1249 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 32 , i1 false ) NEW_LINE %16 = getelementptr inbounds ARR 3 2 x ARR 3 2 x ARR 3 8 x i8 %11 , i64 0 , i64 1 NEW_LINE %17 = getelementptr inbounds ARR 3 2 x ARR 3 8 x i8 %16 , i64 0 , i64 0 NEW_LINE %18 = getelementptr inbounds ARR 3 8 x i8 %17 , i64 0 , i64 3 NEW_LINE %19 = load i8 %18 NEW_LINE %20 = sext i8 %19 to i16 NEW_LINE ret i16 %20 NEW_LINE }
define i64 @func_45 ( i32 %0 , * i8 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = load * i64 @g_281 NEW_LINE %11 = load volatile i64 %10 NEW_LINE store i64 %11 %3 NEW_LINE br label %33 NEW_LINE 12: NEW_LINE store i32 1863103725 %6 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = add i32 %16 , -1 NEW_LINE store i32 %17 %6 NEW_LINE br label %29 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %24 , label %21 NEW_LINE 21: NEW_LINE %22 = call i32 @safe_mod_func_int32_t_s_s ( i32 -4 , i32 8 ) NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i1 ARR 2 true %18 , ARR 2 %23 %21 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = load i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 5 x i32 @g_646 to * i8 ) , i64 16 ) to * i32 ) NEW_LINE %28 = xor i32 %27 , %26 NEW_LINE store i32 %28 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 5 x i32 @g_646 to * i8 ) , i64 16 ) to * i32 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = zext i32 %31 to i64 NEW_LINE store i64 %32 %3 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i64 %3 NEW_LINE ret i64 %34 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca ARR 3 3 x ARR 3 1 x * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 @g_3 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %6 , 3 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %22 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 3 x ARR 3 1 x * i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1 x * i32 %15 , i64 0 , i64 %17 NEW_LINE store * i32 @g_3 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %9 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %5 NEW_LINE 26: NEW_LINE %27 = load i32 getelementptr inbounds ( ARR 3 2 x ARR 3 2 x i32 @g_5 , i64 0 , i64 0 , i64 0 ) NEW_LINE %28 = add i32 %27 , -1 NEW_LINE store i32 %28 getelementptr inbounds ( ARR 3 2 x ARR 3 2 x i32 @g_5 , i64 0 , i64 0 , i64 0 ) NEW_LINE %29 = load * i32 %1 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE ret i8 %31 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load volatile i64 @g_2 NEW_LINE %19 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %18 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %19 ) NEW_LINE %20 = load i32 @g_4 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_4~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @crc32_context NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 4294967295 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE %27 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %26 , i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i16 @func_72 ( i32 %0 , * i8 %1 , i32 %2 , * i64 %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE store i32 %0 %6 NEW_LINE store * i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i64 %3 %9 NEW_LINE store i32 1 %10 NEW_LINE store i16 0 @g_167 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i16 @g_167 NEW_LINE %14 = zext i16 %13 to i32 NEW_LINE %15 = icmp sge i32 %14 , 31 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE store i64 1 %11 NEW_LINE store i64 -5 @g_39 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 @g_39 NEW_LINE %19 = icmp ugt i64 %18 , 28 NEW_LINE br i1 %19 , label %20 , label %28 NEW_LINE 20: NEW_LINE %21 = load i64 %11 NEW_LINE %22 = trunc i64 %21 to i16 NEW_LINE store i16 %22 %5 NEW_LINE br label %37 NEW_LINE 23: NEW_LINE %24 = load i64 @g_39 NEW_LINE %25 = trunc i64 %24 to i16 NEW_LINE %26 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %25 , i16 zeroext 6 ) NEW_LINE %27 = zext i16 %26 to i64 NEW_LINE store i64 %27 @g_39 NEW_LINE br label %17 NEW_LINE 28: NEW_LINE %29 = load i64 %11 NEW_LINE %30 = trunc i64 %29 to i16 NEW_LINE store i16 %30 %5 NEW_LINE br label %37 NEW_LINE 31: NEW_LINE %32 = load i16 @g_167 NEW_LINE %33 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %32 , i16 zeroext 3 ) NEW_LINE store i16 %33 @g_167 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load i32 %10 NEW_LINE %36 = trunc i32 %35 to i16 NEW_LINE store i16 %36 %5 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i16 %5 NEW_LINE ret i16 %38 NEW_LINE }
define i32 @func_2 ( i32 %0 , * STRUCT 1 i192 byval ( STRUCT 1 i192 ) %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 10 x i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 -481229050 %4 NEW_LINE %7 = bitcast * ARR 3 10 x i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 , i8 0 , i64 40 , i1 false ) NEW_LINE %8 = bitcast * i8 %7 to * ARR 3 10 x i32 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 0 NEW_LINE store i32 206941711 %9 NEW_LINE %10 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 1 NEW_LINE store i32 206941711 %10 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 3 NEW_LINE store i32 2 %11 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 5 NEW_LINE store i32 206941711 %12 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 6 NEW_LINE store i32 206941711 %13 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %8 , i32 0 , i32 8 NEW_LINE store i32 2 %14 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = and i64 %16 , 1 NEW_LINE %18 = trunc i64 %17 to i32 NEW_LINE store i32 %18 %4 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp eq i32 %18 , %19 NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 9 NEW_LINE store i32 %21 %22 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 3 NEW_LINE %24 = load i32 %23 NEW_LINE ret i32 %24 NEW_LINE }
define * i32 @func_93 ( i64 %0 , * * i32 %1 , * STRUCT 2 i8 i64 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * STRUCT 2 i8 i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 9 x ARR 3 6 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * * i32 %1 %6 NEW_LINE store * STRUCT 2 i8 i64 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %12 = bitcast * ARR 3 9 x ARR 3 6 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 9 x ARR 3 6 x * i32 @__const.func_93.l_110 to * i8 ) , i64 432 , i1 false ) NEW_LINE %13 = load i64 @g_112 NEW_LINE %14 = add i64 %13 , -1 NEW_LINE store i64 %14 @g_112 NEW_LINE %15 = load * * i32 %6 NEW_LINE %16 = load * i32 %15 NEW_LINE ret * i32 %16 NEW_LINE }
define i64 @func_70 ( * * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca ARR 3 7 x ARR 3 5 x * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_20 %5 NEW_LINE %9 = bitcast * ARR 3 7 x ARR 3 5 x * i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 7 x ARR 3 5 x * i32 @__const.func_70.l_90 to * i8 ) , i64 280 , i1 false ) NEW_LINE %10 = load * i32 %5 NEW_LINE %11 = load * * i32 %3 NEW_LINE store * i32 %10 %11 NEW_LINE %12 = load * * i32 %3 NEW_LINE %13 = load * i32 %12 NEW_LINE %14 = getelementptr inbounds ARR 3 7 x ARR 3 5 x * i32 %6 , i64 0 , i64 3 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x * i32 %14 , i64 0 , i64 4 NEW_LINE store * i32 %13 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE ret i64 %17 NEW_LINE }
define STRUCT 2 i8 i64 @func_23 ( i64 %0 , i8 %1 , i64 %2 , i16 signext %3 , i8 zeroext %4 , i32 %5 ) { NEW_LINE %7 = alloca STRUCT 2 i8 i64 NEW_LINE %8 = alloca STRUCT 2 i8 i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = bitcast * STRUCT 2 i8 i64 %8 to * STRUCT 2 i8 i64 NEW_LINE %14 = getelementptr inbounds STRUCT 2 i8 i64 %13 , i32 0 , i32 0 NEW_LINE store i8 %1 %14 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i8 i64 %13 , i32 0 , i32 1 NEW_LINE store i64 %2 %15 NEW_LINE store i64 %0 %9 NEW_LINE store i16 %3 %10 NEW_LINE store i8 %4 %11 NEW_LINE store i32 %5 %12 NEW_LINE store i8 27 @g_496 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i8 @g_496 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = icmp sgt i32 %18 , -29 NEW_LINE br i1 %19 , label %20 , label %29 NEW_LINE 20: NEW_LINE %21 = load * i32 @g_77 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE br label %29 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i8 @g_496 NEW_LINE %28 = add i8 %27 , -1 NEW_LINE store i8 %28 @g_496 NEW_LINE br label %16 NEW_LINE 29: NEW_LINE %30 = load * * i32 @g_76 NEW_LINE %31 = load * i32 %30 NEW_LINE %32 = load * * i32 @g_76 NEW_LINE store * i32 %31 %32 NEW_LINE %33 = bitcast * STRUCT 2 i8 i64 %7 to * i8 NEW_LINE %34 = bitcast * STRUCT 2 i8 i64 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %33 , * i8 %34 , i64 16 , i1 false ) NEW_LINE %35 = bitcast * STRUCT 2 i8 i64 %7 to * STRUCT 2 i8 i64 NEW_LINE %36 = load STRUCT 2 i8 i64 %35 NEW_LINE ret STRUCT 2 i8 i64 %36 NEW_LINE }
define * i32 @func_20 ( i32 %0 , i16 zeroext %1 , i16 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca ARR 3 1 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1 x * i32 %7 , i64 0 , i64 %14 NEW_LINE store * i32 @g_25 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i8 getelementptr inbounds ( ARR 3 2 x ARR 3 7 x ARR 3 1 x i8 @g_26 , i64 0 , i64 1 , i64 5 , i64 0 ) NEW_LINE %21 = add i8 %20 , -1 NEW_LINE store i8 %21 getelementptr inbounds ( ARR 3 2 x ARR 3 7 x ARR 3 1 x i8 @g_26 , i64 0 , i64 1 , i64 5 , i64 0 ) NEW_LINE %22 = getelementptr inbounds ARR 3 1 x * i32 %7 , i64 0 , i64 0 NEW_LINE %23 = load * i32 %22 NEW_LINE %24 = call i64 @func_29 ( * i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = icmp sgt i64 %24 , %26 NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE store i32 %28 @g_277 NEW_LINE %29 = getelementptr inbounds ARR 3 1 x * i32 %7 , i64 0 , i64 0 NEW_LINE %30 = load * i32 %29 NEW_LINE ret * i32 %30 NEW_LINE }
define i32 @func_10 ( * i8 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i32 NEW_LINE store * i8 %0 %3 NEW_LINE store * i32 @g_61 %4 NEW_LINE %5 = load * i32 %4 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = xor i64 %7 , 953246649 NEW_LINE %9 = trunc i64 %8 to i32 NEW_LINE store i32 %9 %5 NEW_LINE store i8 0 @g_314 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i8 @g_314 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp sle i32 %12 , 3 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = bitcast * STRUCT 1 i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 getelementptr inbounds ( STRUCT 3 i8 i8 ARR 3 2 x i8 @g_851 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE br label %23 NEW_LINE 16: NEW_LINE %17 = load i8 @g_314 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE %20 = trunc i32 %19 to i8 NEW_LINE store i8 %20 @g_314 NEW_LINE br label %10 NEW_LINE 21: NEW_LINE %22 = bitcast * STRUCT 1 i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %22 , * i8 bitcast ( * STRUCT 1 i32 getelementptr inbounds ( ARR 3 3 x ARR 3 6 x ARR 3 5 x STRUCT 1 i32 bitcast ( * ARR 3 3 x ARR 3 6 x ARR 3 5 x STRUCT 3 i8 i8 ARR 3 2 x i8 @g_852 to * ARR 3 3 x ARR 3 6 x ARR 3 5 x STRUCT 1 i32 ) , i64 0 , i64 1 , i64 0 , i64 4 ) to * i8 ) , i64 4 , i1 false ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds STRUCT 1 i32 %2 , i32 0 , i32 0 NEW_LINE %25 = load i32 %24 NEW_LINE ret i32 %25 NEW_LINE }
define signext i8 @func_57 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 4 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 @g_85 %3 NEW_LINE store i32 -1983932411 %4 NEW_LINE %7 = load * i32 %3 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = xor i64 %9 , -1 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE store i32 %11 %7 NEW_LINE store i32 0 @g_83 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_83 NEW_LINE %14 = icmp ne i32 %13 , 48 NEW_LINE br i1 %14 , label %15 , label %34 NEW_LINE 15: NEW_LINE store i32 0 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = icmp slt i32 %17 , 4 NEW_LINE br i1 %18 , label %19 , label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 4 x * i32 %5 , i64 0 , i64 %21 NEW_LINE store * i32 @g_85 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %6 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %6 NEW_LINE br label %16 NEW_LINE 26: NEW_LINE %27 = load i64 @g_92 NEW_LINE %28 = add i64 %27 , -1 NEW_LINE store i64 %28 @g_92 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 @g_83 NEW_LINE %31 = trunc i32 %30 to i16 NEW_LINE %32 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %31 , i16 signext 3 ) NEW_LINE %33 = sext i16 %32 to i32 NEW_LINE store i32 %33 @g_83 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load i64 @g_92 NEW_LINE %36 = trunc i64 %35 to i8 NEW_LINE ret i8 %36 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @g_5 NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_5~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @crc32_context NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = xor i64 %25 , 4294967295 NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE %28 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %27 , i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i64 NEW_LINE store i32 0 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x i32 @g_2 , i64 0 , i64 2 , i64 4 ) NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x i32 @g_2 , i64 0 , i64 2 , i64 4 ) NEW_LINE %4 = icmp sgt i32 %3 , 22 NEW_LINE br i1 %4 , label %5 , label %18 NEW_LINE 5: NEW_LINE store i32 0 @g_7 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 @g_7 NEW_LINE %8 = icmp sgt i32 %7 , -11 NEW_LINE br i1 %8 , label %9 , label %14 NEW_LINE 9: NEW_LINE %10 = bitcast * STRUCT 1 i64 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_10 to * i8 ) , i64 8 , i1 false ) NEW_LINE br label %20 NEW_LINE 11: NEW_LINE %12 = load i32 @g_7 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @g_7 NEW_LINE br label %6 NEW_LINE 14: NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x i32 @g_2 , i64 0 , i64 2 , i64 4 ) NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x i32 @g_2 , i64 0 , i64 2 , i64 4 ) NEW_LINE br label %2 NEW_LINE 18: NEW_LINE %19 = bitcast * STRUCT 1 i64 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_11 to * i8 ) , i64 8 , i1 false ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds STRUCT 1 i64 %1 , i32 0 , i32 0 NEW_LINE %22 = load i64 %21 NEW_LINE ret i64 %22 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 9 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 20 @g_2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_2 NEW_LINE %12 = icmp slt i32 %11 , 8 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE store * i32 @g_6 %2 NEW_LINE store * i32 @g_6 %3 NEW_LINE store * i32 null %4 NEW_LINE store * i32 null %5 NEW_LINE store * i32 @g_6 %6 NEW_LINE store * i32 null %7 NEW_LINE %14 = bitcast * ARR 3 9 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_1.l_12 to * i8 ) , i64 72 , i1 false ) NEW_LINE %15 = load volatile i16 getelementptr inbounds ( ARR 3 1 x i16 @g_13 , i64 0 , i64 0 ) NEW_LINE %16 = add i16 %15 , -1 NEW_LINE store volatile i16 %16 getelementptr inbounds ( ARR 3 1 x i16 @g_13 , i64 0 , i64 0 ) NEW_LINE %17 = load i32 @g_6 NEW_LINE store i32 %17 %1 NEW_LINE br label %23 NEW_LINE 18: NEW_LINE %19 = load i32 @g_2 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 @g_2 NEW_LINE br label %10 NEW_LINE 21: NEW_LINE %22 = load i32 @g_2 NEW_LINE store i32 %22 %1 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i8 @g_4 NEW_LINE %22 = zext i8 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_4~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @crc32_context NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = xor i64 %25 , 4294967295 NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE %28 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %27 , i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i16 @g_20 NEW_LINE %22 = zext i16 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.4:g_20~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @crc32_context NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = xor i64 %25 , 4294967295 NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE %28 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %27 , i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @func_10 ( i16 zeroext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE store i16 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i64 -4511594155430067444 %5 NEW_LINE %8 = load i64 %5 NEW_LINE %9 = load * i32 @g_93 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = or i64 %11 , %8 NEW_LINE %13 = trunc i64 %12 to i32 NEW_LINE store i32 %13 %9 NEW_LINE store i16 0 @g_591 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i16 @g_591 NEW_LINE %16 = zext i16 %15 to i32 NEW_LINE %17 = icmp ne i32 %16 , 6 NEW_LINE br i1 %17 , label %18 , label %31 NEW_LINE 18: NEW_LINE store i8 7 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 7 x ARR 3 3 x i32 @g_416 , i64 0 , i64 5 , i64 6 , i64 1 ) %7 NEW_LINE %19 = load i8 %6 NEW_LINE %20 = icmp ne i8 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE br label %31 NEW_LINE 22: NEW_LINE %23 = load i64 %5 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE %25 = load * i32 @g_93 NEW_LINE store i32 %24 %25 NEW_LINE store * i32 null %7 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i16 @g_591 NEW_LINE %28 = trunc i16 %27 to i8 NEW_LINE %29 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %28 , i8 signext 6 ) NEW_LINE %30 = sext i8 %29 to i16 NEW_LINE store i16 %30 @g_591 NEW_LINE br label %14 NEW_LINE 31: NEW_LINE %32 = load i64 %5 NEW_LINE %33 = trunc i64 %32 to i32 NEW_LINE ret i32 %33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i16 @func_1 ( ) NEW_LINE %18 = load i32 @g_4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_4~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load volatile i16 @g_5 NEW_LINE %22 = zext i16 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_5~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @crc32_context NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = xor i64 %25 , 4294967295 NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE %28 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %27 , i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @func_50 ( i32 %0 , i32 %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 7 x * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i16 -27503 %7 NEW_LINE store i32 0 @g_6 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @g_6 NEW_LINE %15 = icmp sle i32 %14 , -9 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE store * i32 @g_4 %8 NEW_LINE store i32 -1933123428 %9 NEW_LINE store * i32 @g_4 %10 NEW_LINE %17 = bitcast * ARR 3 7 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_50.l_79 to * i8 ) , i64 56 , i1 false ) NEW_LINE %18 = load i16 %7 NEW_LINE %19 = add i16 %18 , 1 NEW_LINE store i16 %19 %7 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @g_6 NEW_LINE %22 = trunc i32 %21 to i16 NEW_LINE %23 = call signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %22 , i16 signext 4 ) NEW_LINE %24 = sext i16 %23 to i32 NEW_LINE store i32 %24 @g_6 NEW_LINE br label %13 NEW_LINE 25: NEW_LINE %26 = load volatile i8 getelementptr inbounds ( ARR 3 10 x ARR 3 4 x STRUCT 10 i32 i8 i32 i32 i64 i16 i32 i16 i64 i8 @g_71 , i64 0 , i64 1 , i64 2 , i32 1 ) NEW_LINE %27 = zext i8 %26 to i16 NEW_LINE ret i16 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i16 @func_1 ( ) NEW_LINE %18 = load volatile i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @g_3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_3~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @crc32_context NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = xor i64 %25 , 4294967295 NEW_LINE %27 = trunc i64 %26 to i32 NEW_LINE %28 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %27 , i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define * i8 @func_46 ( i32 %0 , * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca ARR 3 1 x * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %6 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1 x * i8 %5 , i64 0 , i64 %14 NEW_LINE store * i8 @g_282 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %6 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i32 0 @g_87 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @g_87 NEW_LINE %22 = icmp ne i32 %21 , -12 NEW_LINE br i1 %22 , label %23 , label %33 NEW_LINE 23: NEW_LINE store * i32 null %7 NEW_LINE store * i32 @g_730 %8 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load * i32 %8 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = and i32 %26 , %24 NEW_LINE store i32 %27 %25 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 @g_87 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE %31 = call zeroext i8 @safe_sub_func_uint8_t_u_u ( i8 zeroext %30 , i8 zeroext 6 ) NEW_LINE %32 = zext i8 %31 to i32 NEW_LINE store i32 %32 @g_87 NEW_LINE br label %20 NEW_LINE 33: NEW_LINE %34 = getelementptr inbounds ARR 3 1 x * i8 %5 , i64 0 , i64 0 NEW_LINE %35 = load * i8 %34 NEW_LINE ret * i8 %35 NEW_LINE }
define signext i8 @func_56 ( i32 %0 ) { NEW_LINE %2 = alloca STRUCT 1 i24 NEW_LINE %3 = alloca ARR 3 8 x * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 NEW_LINE %4 = alloca * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = bitcast * STRUCT 1 i24 %2 to * i32 NEW_LINE store i32 %0 %6 NEW_LINE %7 = getelementptr inbounds ARR 3 8 x * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %3 , i64 0 , i64 0 NEW_LINE store * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %7 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp slt i32 %9 , 8 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 8 x * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %3 , i64 0 , i64 %13 NEW_LINE store * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 getelementptr inbounds ( ARR 3 1 x STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 bitcast ( * ARR 3 1 x STRUCT 12 i16 i32 i64 i8 i8 i8 i8 i32 i8 i8 i8 i64 @g_61 to * ARR 3 1 x STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 ) , i64 0 , i64 0 ) %14 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %5 NEW_LINE br label %8 NEW_LINE 18: NEW_LINE %19 = load * * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 %4 NEW_LINE store * STRUCT 9 i16 i32 i64 i32 i32 i8 i8 i8 i64 null %19 NEW_LINE %20 = bitcast * STRUCT 1 i24 %2 to * i8 NEW_LINE %21 = load i8 %20 NEW_LINE ret i8 %21 NEW_LINE }
define signext i16 @func_59 ( i32 %0 , i8 signext %1 , i64 %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 3 x ARR 3 1 x ARR 3 4 x i64 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %15 = bitcast * ARR 3 3 x ARR 3 1 x ARR 3 4 x i64 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 3 x ARR 3 1 x ARR 3 4 x i64 @__const.func_59.l_65 to * i8 ) , i64 96 , i1 false ) NEW_LINE %16 = getelementptr inbounds ARR 3 3 x ARR 3 1 x ARR 3 4 x i64 %11 , i64 0 , i64 0 NEW_LINE %17 = getelementptr inbounds ARR 3 1 x ARR 3 4 x i64 %16 , i64 0 , i64 0 NEW_LINE %18 = getelementptr inbounds ARR 3 4 x i64 %17 , i64 0 , i64 1 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE %21 = load volatile * i32 @g_66 NEW_LINE store i32 %20 %21 NEW_LINE %22 = load volatile i32 @g_13 NEW_LINE %23 = trunc i32 %22 to i16 NEW_LINE ret i16 %23 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca * i32 NEW_LINE store i8 57 %1 NEW_LINE store * i64 @g_7 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 6 x i32 @g_11 , i64 0 , i64 2 , i64 2 ) %3 NEW_LINE %4 = load i8 %1 NEW_LINE %5 = zext i8 %4 to i32 NEW_LINE %6 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext -62 , i32 %5 ) NEW_LINE %7 = sext i8 %6 to i64 NEW_LINE %8 = call i64 @safe_unary_minus_func_uint64_t_u ( i64 %7 ) NEW_LINE %9 = icmp ult i64 5 , %8 NEW_LINE %10 = zext i1 %9 to i32 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = load * i64 %2 NEW_LINE %13 = load i64 %12 NEW_LINE %14 = and i64 %13 , %11 NEW_LINE store i64 %14 %12 NEW_LINE %15 = load i8 %1 NEW_LINE %16 = icmp ne i8 %15 , 0 NEW_LINE %17 = xor i1 %16 , true NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = and i64 %14 , %19 NEW_LINE %21 = load volatile i64 @g_9 NEW_LINE %22 = icmp ne i64 %21 , 0 NEW_LINE br i1 %22 , label %24 , label %23 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i1 ARR 2 true %0 , ARR 2 false %23 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = and i64 %20 , %27 NEW_LINE %29 = load * i32 %3 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = xor i64 %31 , %28 NEW_LINE %33 = trunc i64 %32 to i32 NEW_LINE store i32 %33 %29 NEW_LINE %34 = load * i32 %3 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = trunc i32 %35 to i8 NEW_LINE ret i8 %36 NEW_LINE }
define STRUCT 2 i64 i32 @func_7 ( i32 %0 , i8 signext %1 , i64 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 3 i8 i32 i16 NEW_LINE %7 = alloca STRUCT 3 i8 i32 i16 NEW_LINE %8 = alloca STRUCT 2 i64 i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca STRUCT 2 i64 i32 NEW_LINE %14 = getelementptr inbounds STRUCT 2 i64 i32 %8 , i32 0 , i32 0 NEW_LINE store i64 %2 %14 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i64 i32 %8 , i32 0 , i32 1 NEW_LINE store i32 %3 %15 NEW_LINE %16 = bitcast * STRUCT 3 i8 i32 i16 %7 to * i8 NEW_LINE %17 = bitcast * STRUCT 2 i64 i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 %17 , i64 12 , i1 false ) NEW_LINE store i32 %0 %9 NEW_LINE store i8 %1 %10 NEW_LINE store i32 %4 %11 NEW_LINE store i32 808403302 %12 NEW_LINE %18 = load volatile * i16 @g_807 NEW_LINE %19 = load i16 %18 NEW_LINE %20 = add i16 %19 , 1 NEW_LINE store i16 %20 %18 NEW_LINE %21 = getelementptr inbounds STRUCT 3 i8 i32 i16 %7 , i32 0 , i32 1 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = and i32 %22 , 536870911 NEW_LINE %24 = trunc i32 %23 to i16 NEW_LINE %25 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %19 , i16 zeroext %24 ) NEW_LINE %26 = zext i16 %25 to i32 NEW_LINE store i32 %26 %12 NEW_LINE %27 = bitcast * STRUCT 3 i8 i32 i16 %6 to * i8 NEW_LINE %28 = bitcast * STRUCT 3 i8 i32 i16 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %27 , * i8 %28 , i64 12 , i1 false ) NEW_LINE %29 = bitcast * STRUCT 2 i64 i32 %13 to * i8 NEW_LINE %30 = bitcast * STRUCT 3 i8 i32 i16 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %29 , * i8 %30 , i64 12 , i1 false ) NEW_LINE %31 = load STRUCT 2 i64 i32 %13 NEW_LINE ret STRUCT 2 i64 i32 %31 NEW_LINE }
define zeroext i16 @func_33 ( i64 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i32 0 %7 NEW_LINE store i8 0 @g_512 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i8 @g_512 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp sle i32 %12 , 3 NEW_LINE br i1 %13 , label %14 , label %36 NEW_LINE 14: NEW_LINE store * i32 @g_483 %8 NEW_LINE store i16 16 @g_211 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i16 @g_211 NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE %18 = icmp sle i32 %17 , -12 NEW_LINE br i1 %18 , label %19 , label %28 NEW_LINE 19: NEW_LINE store * i32 @g_101 %9 NEW_LINE %20 = load * i32 %8 NEW_LINE store * i32 %20 %9 NEW_LINE %21 = load i32 %7 NEW_LINE %22 = load * i32 %8 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = or i32 %23 , %21 NEW_LINE store i32 %24 %22 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i16 @g_211 NEW_LINE %27 = call signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %26 , i16 signext 1 ) NEW_LINE store i16 %27 @g_211 NEW_LINE br label %15 NEW_LINE 28: NEW_LINE %29 = load i32 %7 NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE br label %36 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i8 @g_512 NEW_LINE %35 = add i8 %34 , 1 NEW_LINE store i8 %35 @g_512 NEW_LINE br label %10 NEW_LINE 36: NEW_LINE %37 = load * i16 @g_452 NEW_LINE %38 = load i16 %37 NEW_LINE ret i16 %38 NEW_LINE }
define i32 @func_60 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 4 x * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %11 = bitcast * ARR 3 4 x * i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 4 x * i8 @__const.func_60.l_869 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i32 462498471 %6 NEW_LINE store * i32 @g_163 %7 NEW_LINE store * i8 null %8 NEW_LINE store * i8 @g_103 %9 NEW_LINE %12 = load * i32 %3 NEW_LINE %13 = load volatile * * i32 @g_874 NEW_LINE store * i32 %12 %13 NEW_LINE store i64 0 @g_346 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 @g_346 NEW_LINE %16 = icmp ult i64 %15 , 7 NEW_LINE br i1 %16 , label %17 , label %23 NEW_LINE 17: NEW_LINE %18 = load i64 @g_346 NEW_LINE %19 = getelementptr inbounds ARR 3 7 x * i32 @g_145 , i64 0 , i64 %18 NEW_LINE store volatile * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 6 x i32 @g_146 , i64 0 , i64 1 , i64 3 ) %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 @g_346 NEW_LINE %22 = add i64 %21 , 1 NEW_LINE store i64 %22 @g_346 NEW_LINE br label %14 NEW_LINE 23: NEW_LINE %24 = load * i32 %7 NEW_LINE %25 = load i32 %24 NEW_LINE ret i32 %25 NEW_LINE }
define i64 @func_24 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 5 x ARR 3 2 x ARR 3 1 x i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE %7 = bitcast * ARR 3 5 x ARR 3 2 x ARR 3 1 x i64 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 5 x ARR 3 2 x ARR 3 1 x i64 @__const.func_24.l_1024 to * i8 ) , i64 80 , i1 false ) NEW_LINE %8 = getelementptr inbounds ARR 3 5 x ARR 3 2 x ARR 3 1 x i64 %3 , i64 0 , i64 1 NEW_LINE %9 = getelementptr inbounds ARR 3 2 x ARR 3 1 x i64 %8 , i64 0 , i64 0 NEW_LINE %10 = getelementptr inbounds ARR 3 1 x i64 %9 , i64 0 , i64 0 NEW_LINE %11 = load i64 %10 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE %13 = load * i32 @g_30 NEW_LINE store i32 %12 %13 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x ARR 3 2 x ARR 3 1 x i64 %3 , i64 0 , i64 4 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x ARR 3 1 x i64 %14 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 1 x i64 %15 , i64 0 , i64 0 NEW_LINE %17 = load i64 %16 NEW_LINE ret i64 %17 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE %2 = alloca * STRUCT 1 i16 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * * STRUCT 1 i16 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * STRUCT 1 i16 NEW_LINE %7 = alloca i32 NEW_LINE store * STRUCT 1 i16 @g_3 %2 NEW_LINE store i32 -605400541 %3 NEW_LINE store * * STRUCT 1 i16 @g_51 %4 NEW_LINE store i64 6311843811868214205 %5 NEW_LINE store * STRUCT 1 i16 @g_52 %6 NEW_LINE %8 = load * STRUCT 1 i16 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = call * STRUCT 1 i16 @func_4 ( i64 %10 ) NEW_LINE %12 = load * * STRUCT 1 i16 %4 NEW_LINE store * STRUCT 1 i16 %11 %12 NEW_LINE %13 = icmp ne * STRUCT 1 i16 %8 , %11 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = load * STRUCT 1 i16 %6 NEW_LINE %16 = load volatile * * STRUCT 1 i16 @g_1509 NEW_LINE store * STRUCT 1 i16 %15 %16 NEW_LINE store i64 0 @g_12 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 @g_12 NEW_LINE %19 = icmp ule i64 %18 , 3 NEW_LINE br i1 %19 , label %20 , label %28 NEW_LINE 20: NEW_LINE %21 = load i64 @g_12 NEW_LINE %22 = getelementptr inbounds ARR 3 4 x i64 @g_76 , i64 0 , i64 %21 NEW_LINE %23 = load i64 %22 NEW_LINE %24 = trunc i64 %23 to i8 NEW_LINE store i8 %24 %1 NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i64 @g_12 NEW_LINE %27 = add i64 %26 , 1 NEW_LINE store i64 %27 @g_12 NEW_LINE br label %17 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE store i8 %30 %1 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i8 %1 NEW_LINE ret i8 %32 NEW_LINE }
define signext i16 @func_30 ( * i32 %0 , i16 zeroext %1 , i8 zeroext %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca ARR 3 7 x * i32 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i32 NEW_LINE %20 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %3 %20 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store * i32 null %9 NEW_LINE store * i32 null %10 NEW_LINE store * i32 bitcast ( * STRUCT 1 i64 @g_1918 to * i32 ) %11 NEW_LINE store i32 -2081765647 %12 NEW_LINE store * i32 @g_3349 %13 NEW_LINE store * i32 null %14 NEW_LINE store * i32 %12 %15 NEW_LINE store * i32 @g_1636 %16 NEW_LINE %21 = bitcast * ARR 3 7 x * i32 %17 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_30.l_3826 to * i8 ) , i64 56 , i1 false ) NEW_LINE store i64 -2922099857250991938 %18 NEW_LINE %22 = load i64 %18 NEW_LINE %23 = add i64 %22 , 1 NEW_LINE store i64 %23 %18 NEW_LINE %24 = load * i16 @g_1356 NEW_LINE %25 = load i16 %24 NEW_LINE ret i16 %25 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 3 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i64 3195276581134316609 %1 NEW_LINE store i32 20 @g_3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_3 NEW_LINE %12 = icmp eq i32 %11 , -24 NEW_LINE br i1 %12 , label %13 , label %30 NEW_LINE 13: NEW_LINE store * i32 @g_7 %2 NEW_LINE store * i32 null %3 NEW_LINE store * i32 @g_7 %4 NEW_LINE store * i32 null %5 NEW_LINE store * i32 @g_7 %6 NEW_LINE store * i32 @g_7 %7 NEW_LINE store i32 0 %9 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %9 NEW_LINE %16 = icmp slt i32 %15 , 3 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %9 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 3 x * i32 %8 , i64 0 , i64 %19 NEW_LINE store * i32 null %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %9 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %9 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = load i64 %1 NEW_LINE %26 = add i64 %25 , -1 NEW_LINE store i64 %26 %1 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 @g_3 NEW_LINE %29 = call i32 @safe_sub_func_int32_t_s_s ( i32 %28 , i32 6 ) NEW_LINE store i32 %29 @g_3 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i32 @g_3 NEW_LINE ret i32 %31 NEW_LINE }
define * i8 @func_13 ( i8 signext %0 , * i8 %1 , * i8 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca ARR 3 7 x * i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca i8 NEW_LINE %17 = alloca i16 NEW_LINE %18 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_64 , i64 0 , i64 0 ) %9 NEW_LINE store * i32 @g_1113 %10 NEW_LINE store i32 0 %11 NEW_LINE store * i32 %11 %12 NEW_LINE %19 = bitcast * ARR 3 7 x * i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_13.l_1362 to * i8 ) , i64 56 , i1 false ) NEW_LINE store i32 1 %14 NEW_LINE store i16 1 %15 NEW_LINE store i8 -108 %16 NEW_LINE store i16 -22133 %17 NEW_LINE %20 = load i16 %17 NEW_LINE %21 = add i16 %20 , 1 NEW_LINE store i16 %21 %17 NEW_LINE %22 = load volatile * * i32 @g_1369 NEW_LINE store * i32 %11 %22 NEW_LINE %23 = load * * i8 @g_153 NEW_LINE %24 = load * i8 %23 NEW_LINE ret * i8 %24 NEW_LINE }
define signext i8 @func_4 ( i64 %0 , i16 signext %1 , i64 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i8 NEW_LINE store i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i8 -43 %10 NEW_LINE store i32 9 getelementptr inbounds ( STRUCT 5 i16 i32 i32 i32 i8 bitcast ( * STRUCT 6 i8 i8 i32 i32 i32 i8 @g_480 to * STRUCT 5 i16 i32 i32 i32 i8 ) , i32 0 , i32 2 ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 getelementptr inbounds ( STRUCT 5 i16 i32 i32 i32 i8 bitcast ( * STRUCT 6 i8 i8 i32 i32 i32 i8 @g_480 to * STRUCT 5 i16 i32 i32 i32 i8 ) , i32 0 , i32 2 ) NEW_LINE %13 = icmp eq i32 %12 , -6 NEW_LINE br i1 %13 , label %14 , label %19 NEW_LINE 14: NEW_LINE %15 = load i8 %10 NEW_LINE store i8 %15 %5 NEW_LINE br label %21 NEW_LINE 16: NEW_LINE %17 = load i32 getelementptr inbounds ( STRUCT 5 i16 i32 i32 i32 i8 bitcast ( * STRUCT 6 i8 i8 i32 i32 i32 i8 @g_480 to * STRUCT 5 i16 i32 i32 i32 i8 ) , i32 0 , i32 2 ) NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 getelementptr inbounds ( STRUCT 5 i16 i32 i32 i32 i8 bitcast ( * STRUCT 6 i8 i8 i32 i32 i32 i8 @g_480 to * STRUCT 5 i16 i32 i32 i32 i8 ) , i32 0 , i32 2 ) NEW_LINE br label %11 NEW_LINE 19: NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 getelementptr inbounds ( STRUCT 6 i8 i8 i32 i32 i32 i8 @g_2164 , i32 0 , i32 0 ) , * i8 getelementptr inbounds ( STRUCT 6 i8 i8 i32 i32 i32 i8 @g_2163 , i32 0 , i32 0 ) , i64 20 , i1 true ) NEW_LINE %20 = load i8 %10 NEW_LINE store i8 %20 %5 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i8 %5 NEW_LINE ret i8 %22 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %9 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load * * i8 %5 NEW_LINE %14 = getelementptr inbounds * i8 %13 , i64 1 NEW_LINE %15 = load * i8 %14 NEW_LINE %16 = call i32 @strcmp ( * i8 %15 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 1 %9 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %20 = call i32 @func_1 ( ) NEW_LINE %21 = load i32 @g_3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i32 %9 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i16 @g_20 NEW_LINE %25 = sext i16 %24 to i64 NEW_LINE %26 = load i32 %9 NEW_LINE call void @transparent_crc ( i64 %25 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.4:g_20~00" , i64 0 , i64 0 ) , i32 %26 ) NEW_LINE %27 = load i32 @crc32_context NEW_LINE %28 = zext i32 %27 to i64 NEW_LINE %29 = xor i64 %28 , 4294967295 NEW_LINE %30 = trunc i64 %29 to i32 NEW_LINE %31 = load i32 %9 NEW_LINE call void @platform_main_end ( i32 %30 , i32 %31 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_73 ( * * i32 %0 , * i32 %1 , * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca * i32 NEW_LINE store * * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i8 1 %9 NEW_LINE store i32 -1451762920 %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 null %12 NEW_LINE store i64 -3934128136490140264 %13 NEW_LINE store * i32 @g_2 %14 NEW_LINE %15 = load i32 %8 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = load i32 @g_65 NEW_LINE %18 = zext i32 %17 to i64 NEW_LINE %19 = call i64 @safe_mod_func_int64_t_s_s ( i64 %16 , i64 %18 ) NEW_LINE %20 = trunc i64 %19 to i16 NEW_LINE %21 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %20 , i32 11 ) NEW_LINE %22 = sext i16 %21 to i32 NEW_LINE %23 = load i8 %9 NEW_LINE %24 = zext i8 %23 to i32 NEW_LINE %25 = icmp sgt i32 %22 , %24 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = load volatile * i32 @g_257 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = xor i32 %28 , %26 NEW_LINE store i32 %29 %27 NEW_LINE %30 = load i8 %9 NEW_LINE %31 = zext i8 %30 to i64 NEW_LINE %32 = call i64 @safe_unary_minus_func_uint64_t_u ( i64 %31 ) NEW_LINE %33 = trunc i64 %32 to i32 NEW_LINE store i32 %33 %10 NEW_LINE %34 = load i64 %13 NEW_LINE %35 = add i64 %34 , -1 NEW_LINE store i64 %35 %13 NEW_LINE %36 = load * i32 %14 NEW_LINE ret * i32 %36 NEW_LINE }
define i32 @func_2 ( i16 signext %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca ARR 3 4 x i16 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = icmp slt i32 %8 , 4 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 4 x i16 %5 , i64 0 , i64 %12 NEW_LINE store i16 -1 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %6 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 4 x i16 %5 , i64 0 , i64 2 NEW_LINE %19 = load i16 %18 NEW_LINE %20 = sext i16 %19 to i32 NEW_LINE %21 = getelementptr inbounds ARR 3 4 x i16 %5 , i64 0 , i64 2 NEW_LINE %22 = load i16 %21 NEW_LINE %23 = call signext i16 @safe_rshift_func_int16_t_s_s ( i16 signext %22 , i32 13 ) NEW_LINE %24 = trunc i16 %23 to i8 NEW_LINE %25 = load * * i8 @g_826 NEW_LINE %26 = load * i8 %25 NEW_LINE store i8 %24 %26 NEW_LINE %27 = sext i8 %24 to i32 NEW_LINE %28 = getelementptr inbounds ARR 3 4 x i16 %5 , i64 0 , i64 2 NEW_LINE %29 = load i16 %28 NEW_LINE %30 = sext i16 %29 to i32 NEW_LINE %31 = icmp sle i32 %27 , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = icmp ne i32 %20 , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = load * i32 @g_1438 NEW_LINE store i32 %34 %35 NEW_LINE %36 = getelementptr inbounds ARR 3 4 x i16 %5 , i64 0 , i64 3 NEW_LINE %37 = load i16 %36 NEW_LINE %38 = sext i16 %37 to i32 NEW_LINE ret i32 %38 NEW_LINE }
define * i16 @func_36 ( i64 %0 , * i32 %1 , * i32 %2 , i32 %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca ARR 3 1 x i32 NEW_LINE %12 = alloca * i16 NEW_LINE %13 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i16 null %12 NEW_LINE store i32 0 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %13 NEW_LINE %16 = icmp slt i32 %15 , 1 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %13 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1 x i32 %11 , i64 0 , i64 %19 NEW_LINE store i32 1 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %13 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %13 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE store i32 0 @g_230 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @g_230 NEW_LINE %27 = icmp ult i32 %26 , 10 NEW_LINE br i1 %27 , label %28 , label %35 NEW_LINE 28: NEW_LINE %29 = load i32 @g_230 NEW_LINE %30 = zext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 10 x i8 @g_128 , i64 0 , i64 %30 NEW_LINE store volatile i8 1 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @g_230 NEW_LINE %34 = add i32 %33 , 1 NEW_LINE store i32 %34 @g_230 NEW_LINE br label %25 NEW_LINE 35: NEW_LINE %36 = getelementptr inbounds ARR 3 1 x i32 %11 , i64 0 , i64 0 NEW_LINE %37 = load i32 %36 NEW_LINE %38 = add i32 %37 , 1 NEW_LINE store i32 %38 %36 NEW_LINE %39 = load * i16 %12 NEW_LINE ret * i16 %39 NEW_LINE }
define zeroext i16 @func_54 ( i16 zeroext %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 7 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store * i8 getelementptr inbounds ( ARR 3 4 x ARR 3 7 x ARR 3 2 x i8 @g_385 , i64 0 , i64 1 , i64 4 , i64 1 ) %7 NEW_LINE store i32 1 %8 NEW_LINE %11 = bitcast * ARR 3 7 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_54.l_799 to * i8 ) , i64 56 , i1 false ) NEW_LINE %12 = load * i64 @g_418 NEW_LINE store i64 -6394658158288869251 %12 NEW_LINE %13 = load * i8 %7 NEW_LINE store i8 -1 %13 NEW_LINE %14 = load i32 %8 NEW_LINE %15 = trunc i32 %14 to i8 NEW_LINE %16 = call signext i8 @safe_div_func_int8_t_s_s ( i8 signext -1 , i8 signext %15 ) NEW_LINE %17 = sext i8 %16 to i32 NEW_LINE %18 = load i32 bitcast ( * STRUCT 4 i8 i8 i8 i8 @g_229 to * i32 ) NEW_LINE %19 = and i32 %17 , 33554431 NEW_LINE %20 = and i32 %18 , -33554432 NEW_LINE %21 = or i32 %20 , %19 NEW_LINE store i32 %21 bitcast ( * STRUCT 4 i8 i8 i8 i8 @g_229 to * i32 ) NEW_LINE %22 = shl i32 %19 , 7 NEW_LINE %23 = ashr i32 %22 , 7 NEW_LINE %24 = load i16 %4 NEW_LINE ret i16 %24 NEW_LINE }
define zeroext i16 @func_34 ( * i32 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * * * * i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * * * * i16 null %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 2 x ARR 3 6 x i32 @g_386 , i64 0 , i64 1 , i64 1 , i64 2 ) %6 NEW_LINE store * * i32 @g_2014 %7 NEW_LINE %8 = load * * * * i16 %5 NEW_LINE %9 = load volatile * * * * * i16 @g_1459 NEW_LINE %10 = load * * * * i16 %9 NEW_LINE %11 = icmp ne * * * * i16 %8 , %10 NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE %13 = load * i32 %6 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = and i32 %14 , %12 NEW_LINE store i32 %15 %13 NEW_LINE store i32 4 @g_1681 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 @g_1681 NEW_LINE %18 = icmp slt i32 %17 , 12 NEW_LINE br i1 %18 , label %19 , label %30 NEW_LINE 19: NEW_LINE %20 = load * i32 %6 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE br label %30 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @g_1681 NEW_LINE %27 = trunc i32 %26 to i8 NEW_LINE %28 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %27 , i8 zeroext 1 ) NEW_LINE %29 = zext i8 %28 to i32 NEW_LINE store i32 %29 @g_1681 NEW_LINE br label %16 NEW_LINE 30: NEW_LINE %31 = load * i32 %3 NEW_LINE %32 = load * * i32 %7 NEW_LINE store * i32 %31 %32 NEW_LINE %33 = load i16 %4 NEW_LINE ret i16 %33 NEW_LINE }
define * i32 @func_25 ( i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 7 x ARR 3 2 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_3 , i64 0 , i64 1 ) %4 NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ult i32 %9 , 36 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = bitcast * ARR 3 7 x ARR 3 2 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 7 x ARR 3 2 x * i32 @__const.func_25.l_36 to * i8 ) , i64 112 , i1 false ) NEW_LINE %13 = getelementptr inbounds ARR 3 7 x ARR 3 2 x * i32 %5 , i64 0 , i64 1 NEW_LINE %14 = getelementptr inbounds ARR 3 2 x * i32 %13 , i64 0 , i64 0 NEW_LINE %15 = load * i32 %14 NEW_LINE store * i32 %15 %2 NEW_LINE br label %21 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = call i32 @safe_add_func_uint32_t_u_u ( i32 %17 , i32 5 ) NEW_LINE store i32 %18 %3 NEW_LINE br label %8 NEW_LINE 19: NEW_LINE %20 = load * i32 %4 NEW_LINE store * i32 %20 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load * i32 %2 NEW_LINE ret * i32 %22 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE %2 = alloca ARR 3 6 x * i32 NEW_LINE %3 = alloca i32 NEW_LINE store i64 7 %1 NEW_LINE store i32 0 @g_3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 @g_3 NEW_LINE %6 = icmp slt i32 %5 , 8 NEW_LINE br i1 %6 , label %7 , label %17 NEW_LINE 7: NEW_LINE %8 = bitcast * ARR 3 6 x * i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 , i8 0 , i64 48 , i1 false ) NEW_LINE %9 = bitcast * i8 %8 to * ARR 3 6 x * i32 NEW_LINE %10 = getelementptr inbounds ARR 3 6 x * i32 %9 , i32 0 , i32 0 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_7 to * i8 ) , i64 28 ) to * i32 ) %10 NEW_LINE %11 = getelementptr inbounds ARR 3 6 x * i32 %9 , i32 0 , i32 1 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_7 to * i8 ) , i64 28 ) to * i32 ) %11 NEW_LINE %12 = getelementptr inbounds ARR 3 6 x * i32 %9 , i32 0 , i32 3 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_7 to * i8 ) , i64 28 ) to * i32 ) %12 NEW_LINE %13 = getelementptr inbounds ARR 3 6 x * i32 %9 , i32 0 , i32 4 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_7 to * i8 ) , i64 28 ) to * i32 ) %13 NEW_LINE store volatile i32 1 @g_2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @g_3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 @g_3 NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i64 %1 NEW_LINE %19 = trunc i64 %18 to i8 NEW_LINE ret i8 %19 NEW_LINE }
define zeroext i8 @func_51 ( * i32 %0 , * i32 %1 , * i64 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca ARR 3 7 x i16 NEW_LINE %14 = alloca i32 NEW_LINE store * i32 %0 %7 NEW_LINE store * i32 %1 %8 NEW_LINE store * i64 %2 %9 NEW_LINE store * i32 %3 %10 NEW_LINE store * i32 %4 %11 NEW_LINE store i32 1 %12 NEW_LINE store i32 0 @g_19 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @g_19 NEW_LINE %17 = icmp eq i32 %16 , -9 NEW_LINE br i1 %17 , label %18 , label %36 NEW_LINE 18: NEW_LINE store i32 0 %14 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %14 NEW_LINE %21 = icmp slt i32 %20 , 7 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %14 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 7 x i16 %13 , i64 0 , i64 %24 NEW_LINE store i16 4557 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %14 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %14 NEW_LINE br label %19 NEW_LINE 29: NEW_LINE %30 = getelementptr inbounds ARR 3 7 x i16 %13 , i64 0 , i64 1 NEW_LINE %31 = load i16 %30 NEW_LINE %32 = trunc i16 %31 to i8 NEW_LINE store i8 %32 %6 NEW_LINE br label %39 NEW_LINE 33: NEW_LINE %34 = load i32 @g_19 NEW_LINE %35 = call i32 @safe_sub_func_int32_t_s_s ( i32 %34 , i32 4 ) NEW_LINE store i32 %35 @g_19 NEW_LINE br label %15 NEW_LINE 36: NEW_LINE %37 = load i32 %12 NEW_LINE %38 = trunc i32 %37 to i8 NEW_LINE store i8 %38 %6 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE %40 = load i8 %6 NEW_LINE ret i8 %40 NEW_LINE }
define * i32 @func_27 ( * i32 %0 , * i64 %1 , * i32 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca ARR 3 2 x * i32 NEW_LINE %10 = alloca ARR 3 8 x i64 NEW_LINE %11 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i64 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE %12 = bitcast * ARR 3 8 x i64 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 8 x i64 @__const.func_27.l_40 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 0 %11 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %11 NEW_LINE %15 = icmp slt i32 %14 , 2 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i32 %11 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 2 x * i32 %9 , i64 0 , i64 %18 NEW_LINE store * i32 null %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %11 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %11 NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds ARR 3 8 x i64 %10 , i64 0 , i64 1 NEW_LINE %25 = load i64 %24 NEW_LINE %26 = and i64 %25 , 1439990372 NEW_LINE store i64 %26 %24 NEW_LINE %27 = getelementptr inbounds ARR 3 2 x * i32 %9 , i64 0 , i64 0 NEW_LINE %28 = load * i32 %27 NEW_LINE ret * i32 %28 NEW_LINE }
define * i8 @func_61 ( i64 %0 , i8 zeroext %1 , i64 %2 , * i8 %3 , * i8 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca * i16 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store * i16 @g_37 %11 NEW_LINE store i32 375632720 %12 NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 7 x i32 @g_50 , i64 0 , i64 1 ) NEW_LINE %14 = trunc i32 %13 to i16 NEW_LINE %15 = load i64 %8 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE %17 = call signext i16 @safe_lshift_func_int16_t_s_u ( i16 signext %14 , i32 %16 ) NEW_LINE %18 = trunc i16 %17 to i8 NEW_LINE %19 = load i32 getelementptr inbounds ( ARR 3 7 x i32 @g_50 , i64 0 , i64 5 ) NEW_LINE %20 = load i32 getelementptr inbounds ( ARR 3 7 x i32 @g_50 , i64 0 , i64 0 ) NEW_LINE %21 = or i32 %19 , %20 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i64 %6 NEW_LINE %24 = load i8 @g_33 NEW_LINE %25 = sext i8 %24 to i64 NEW_LINE %26 = call i64 @safe_div_func_int64_t_s_s ( i64 %23 , i64 %25 ) NEW_LINE %27 = load * i16 %11 NEW_LINE %28 = icmp ne * i16 %27 , null NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = call i64 @safe_add_func_int64_t_s_s ( i64 %22 , i64 %30 ) NEW_LINE %32 = trunc i64 %31 to i8 NEW_LINE %33 = call zeroext i8 @safe_div_func_uint8_t_u_u ( i8 zeroext %18 , i8 zeroext %32 ) NEW_LINE %34 = zext i8 %33 to i32 NEW_LINE %35 = load i32 %12 NEW_LINE %36 = xor i32 %35 , %34 NEW_LINE store i32 %36 %12 NEW_LINE ret * i8 @g_33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call * i8 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 * i8 %7 , i32 0 , i32 0 NEW_LINE store * i8 %18 %19 NEW_LINE %20 = load volatile i32 @g_2 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @g_3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %24 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_3~00" , i64 0 , i64 0 ) , i32 %25 ) NEW_LINE %26 = load i32 @crc32_context NEW_LINE %27 = zext i32 %26 to i64 NEW_LINE %28 = xor i64 %27 , 4294967295 NEW_LINE %29 = trunc i64 %28 to i32 NEW_LINE %30 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %29 , i32 %30 ) NEW_LINE ret i32 0 NEW_LINE }
define i64 @func_60 ( i32 %0 , i32 %1 , i8 zeroext %2 , * i8 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i8 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i64 0 @g_39 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 @g_39 NEW_LINE %12 = icmp sle i64 %11 , -15 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load volatile i32 @g_4 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %25 NEW_LINE 17: NEW_LINE %18 = load i64 @g_69 NEW_LINE %19 = icmp ne i64 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %21 NEW_LINE 20: NEW_LINE br label %22 NEW_LINE 21: NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i64 @g_39 NEW_LINE %24 = add nsw i64 %23 , -1 NEW_LINE store i64 %24 @g_39 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE store i64 11 @g_41 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i64 @g_41 NEW_LINE %28 = icmp sge i64 %27 , -27 NEW_LINE br i1 %28 , label %29 , label %34 NEW_LINE 29: NEW_LINE %30 = bitcast * STRUCT 1 i64 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * STRUCT 1 i64 @g_91 to * i8 ) , i64 8 , i1 false ) NEW_LINE br label %36 NEW_LINE 31: NEW_LINE %32 = load i64 @g_41 NEW_LINE %33 = add nsw i64 %32 , -1 NEW_LINE store i64 %33 @g_41 NEW_LINE br label %26 NEW_LINE 34: NEW_LINE %35 = bitcast * STRUCT 1 i64 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %35 , * i8 bitcast ( * STRUCT 1 i64 @g_91 to * i8 ) , i64 8 , i1 false ) NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = getelementptr inbounds STRUCT 1 i64 %5 , i32 0 , i32 0 NEW_LINE %38 = load i64 %37 NEW_LINE ret i64 %38 NEW_LINE }
define * * i32 @func_95 ( i8 %0 , * i8 %1 , * * i32 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 4 x ARR 3 1 x * i32 NEW_LINE %10 = alloca ARR 3 6 x i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = getelementptr inbounds STRUCT 1 i8 %4 , i32 0 , i32 0 NEW_LINE store i8 %0 %13 NEW_LINE store * i8 %1 %5 NEW_LINE store * * i32 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 6 x i32 @g_3 , i64 0 , i64 0 , i64 2 ) %7 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 6 x i32 @g_3 , i64 0 , i64 0 , i64 2 ) %8 NEW_LINE %14 = bitcast * ARR 3 4 x ARR 3 1 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 4 x ARR 3 1 x * i32 @__const.func_95.l_106 to * i8 ) , i64 32 , i1 false ) NEW_LINE %15 = bitcast * ARR 3 6 x i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 6 x i32 @__const.func_95.l_107 to * i8 ) , i64 24 , i1 false ) NEW_LINE %16 = getelementptr inbounds ARR 3 6 x i32 %10 , i64 0 , i64 4 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = add i32 %17 , -1 NEW_LINE store i32 %18 %16 NEW_LINE %19 = load * * i32 %6 NEW_LINE ret * * i32 %19 NEW_LINE }
define i32 @func_43 ( i8 signext %0 , i64 %1 , i16 zeroext %2 , i32 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 4 x ARR 3 4 x * * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i8 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE store * i32 null %11 NEW_LINE store i32 0 %13 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %13 NEW_LINE %17 = icmp slt i32 %16 , 4 NEW_LINE br i1 %17 , label %18 , label %36 NEW_LINE 18: NEW_LINE store i32 0 %14 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %14 NEW_LINE %21 = icmp slt i32 %20 , 4 NEW_LINE br i1 %21 , label %22 , label %32 NEW_LINE 22: NEW_LINE %23 = load i32 %13 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 4 x ARR 3 4 x * * i32 %12 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %14 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 4 x * * i32 %25 , i64 0 , i64 %27 NEW_LINE store * * i32 null %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %14 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %14 NEW_LINE br label %19 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %13 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %13 NEW_LINE br label %15 NEW_LINE 36: NEW_LINE %37 = load * i32 %11 NEW_LINE %38 = load volatile * * i32 @g_857 NEW_LINE store * i32 %37 %38 NEW_LINE %39 = load * i32 @g_577 NEW_LINE %40 = load i32 %39 NEW_LINE ret i32 %40 NEW_LINE }
define * i32 @func_70 ( i16 signext %0 , i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i8 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca * i8 NEW_LINE store i16 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 3 %7 NEW_LINE store i32 465538476 %8 NEW_LINE store i8 19 @g_69 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i8 @g_69 NEW_LINE %19 = sext i8 %18 to i32 NEW_LINE %20 = icmp slt i32 %19 , 13 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE store i32 0 %9 NEW_LINE store * i8 @g_69 %10 NEW_LINE store i64 -1485743864725626624 %11 NEW_LINE store * i8 @g_101 %12 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 2 i32 ARR 3 4 x i8 @g_44 , i32 0 , i32 0 ) %13 NEW_LINE store i64 170060663413375049 %14 NEW_LINE store i16 -9 %15 NEW_LINE store * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_44 to * i8 ) %16 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i8 @g_69 NEW_LINE %24 = sext i8 %23 to i16 NEW_LINE %25 = call signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %24 , i16 signext 3 ) NEW_LINE %26 = trunc i16 %25 to i8 NEW_LINE store i8 %26 @g_69 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE %28 = load i32 %6 NEW_LINE %29 = call i32 @safe_unary_minus_func_uint32_t_u ( i32 %28 ) NEW_LINE %30 = load volatile * i32 @g_139 NEW_LINE store i32 %29 %30 NEW_LINE ret * i32 @g_4 NEW_LINE }
define * i8 @func_47 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 NEW_LINE %6 = alloca * * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 NEW_LINE %7 = alloca ARR 3 2 x * i8 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i8 1 %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x i32 @g_190 , i64 0 , i64 2 ) %4 NEW_LINE store * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 bitcast ( * STRUCT 23 i8 i8 i32 i8 ARR 3 3 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_1282 to * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 ) %5 NEW_LINE store * * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 %5 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x * i8 %7 , i64 0 , i64 %14 NEW_LINE store * i8 @g_192 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load * i32 %4 NEW_LINE store i32 1 %20 NEW_LINE %21 = load * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 %5 NEW_LINE %22 = load * * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 %6 NEW_LINE store * STRUCT 8 i16 i32 i8 i32 i32 i32 i24 i16 %21 %22 NEW_LINE %23 = getelementptr inbounds ARR 3 2 x * i8 %7 , i64 0 , i64 1 NEW_LINE %24 = load * i8 %23 NEW_LINE ret * i8 %24 NEW_LINE }
define zeroext i8 @func_12 ( i64 %0 , * STRUCT 4 i32 i16 i8 %struct.S1 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * STRUCT 4 i32 i16 i8 %struct.S1 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 2 x ARR 3 5 x ARR 3 1 x * i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store * STRUCT 4 i32 i16 i8 %struct.S1 %1 %4 NEW_LINE store i32 2007090786 %5 NEW_LINE store i32 3 %6 NEW_LINE store * i32 getelementptr inbounds ( %struct.S1 bitcast ( * STRUCT 7 i32 i32 i32 i8 i8 i8 i64 @g_91 to * %struct.S1 ) , i32 0 , i32 2 ) %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 null %9 NEW_LINE %15 = bitcast * ARR 3 2 x ARR 3 5 x ARR 3 1 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 2 x ARR 3 5 x ARR 3 1 x * i32 @__const.func_12.l_2451 to * i8 ) , i64 80 , i1 false ) NEW_LINE store i64 4435155826232086927 %11 NEW_LINE %16 = load i64 %11 NEW_LINE %17 = add i64 %16 , -1 NEW_LINE store i64 %17 %11 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = trunc i64 %18 to i8 NEW_LINE ret i8 %19 NEW_LINE }
define i64 @func_42 ( i8 signext %0 , i8 signext %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 3 x ARR 3 4 x * i32 NEW_LINE %12 = alloca ARR 3 3 x ARR 3 10 x i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i32 @g_324 %9 NEW_LINE store * i32 @g_98 %10 NEW_LINE %15 = bitcast * ARR 3 3 x ARR 3 4 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 3 x ARR 3 4 x * i32 @__const.func_42.l_501 to * i8 ) , i64 96 , i1 false ) NEW_LINE %16 = bitcast * ARR 3 3 x ARR 3 10 x i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 3 x ARR 3 10 x i32 @__const.func_42.l_502 to * i8 ) , i64 120 , i1 false ) NEW_LINE %17 = load i16 @g_504 NEW_LINE %18 = add i16 %17 , 1 NEW_LINE store i16 %18 @g_504 NEW_LINE %19 = load i64 @g_201 NEW_LINE ret i64 %19 NEW_LINE }
define signext i8 @func_39 ( * i32 %0 , i32 %1 , * i8 %2 , i64 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca STRUCT 1 i64 NEW_LINE %13 = alloca * STRUCT 1 i64 NEW_LINE store * i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store * i32 @g_12 %9 NEW_LINE store * * i32 %9 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_122 , i64 0 , i64 1 ) %11 NEW_LINE %14 = bitcast * STRUCT 1 i64 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 getelementptr inbounds ( STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @__const.func_39.l_123 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE store * STRUCT 1 i64 bitcast ( * STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @g_94 to * STRUCT 1 i64 ) %13 NEW_LINE %15 = load * i32 %9 NEW_LINE %16 = load * * i32 %10 NEW_LINE store * i32 %15 %16 NEW_LINE %17 = load * * i32 %10 NEW_LINE %18 = load * i32 %17 NEW_LINE %19 = load * * i32 %10 NEW_LINE store * i32 %18 %19 NEW_LINE %20 = load * i32 %11 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = or i64 %22 , 1 NEW_LINE %24 = trunc i64 %23 to i32 NEW_LINE store i32 %24 %20 NEW_LINE %25 = load * STRUCT 1 i64 %13 NEW_LINE %26 = bitcast * STRUCT 1 i64 %25 to * i8 NEW_LINE %27 = bitcast * STRUCT 1 i64 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %26 , * i8 %27 , i64 8 , i1 false ) NEW_LINE %28 = load i32 %6 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE ret i8 %29 NEW_LINE }
define * i8 @func_43 ( * i8 %0 , i8 zeroext %1 , i64 %2 , * i64 %3 , i16 zeroext %4 ) { NEW_LINE %6 = alloca STRUCT 1 * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i64 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * * i32 NEW_LINE %14 = alloca * * i32 NEW_LINE %15 = alloca * * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE store * i8 %0 %7 NEW_LINE store i8 %1 %8 NEW_LINE store i64 %2 %9 NEW_LINE store * i64 %3 %10 NEW_LINE store i16 %4 %11 NEW_LINE store * i32 @g_317 %12 NEW_LINE store * * i32 null %13 NEW_LINE store * * i32 null %14 NEW_LINE store * * i32 @g_91 %15 NEW_LINE store * i32 @g_25 %16 NEW_LINE store * i32 @g_170 %17 NEW_LINE %18 = load * i32 %12 NEW_LINE %19 = load * * i32 %15 NEW_LINE store * i32 %18 %19 NEW_LINE %20 = load volatile * * * * i16 @g_904 NEW_LINE %21 = load * * * i16 %20 NEW_LINE %22 = load * * i16 %21 NEW_LINE %23 = icmp ne * * i16 null , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = load * i32 @g_91 NEW_LINE store i32 %24 %25 NEW_LINE %26 = load * i32 %16 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = or i32 %27 , %24 NEW_LINE store i32 %28 %26 NEW_LINE %29 = load * i32 %17 NEW_LINE store i32 %28 %29 NEW_LINE %30 = bitcast * STRUCT 1 * i8 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * STRUCT 1 * i8 @g_1265 to * i8 ) , i64 8 , i1 false ) NEW_LINE %31 = getelementptr inbounds STRUCT 1 * i8 %6 , i32 0 , i32 0 NEW_LINE %32 = load * i8 %31 NEW_LINE ret * i8 %32 NEW_LINE }
define i64 @func_8 ( * i32 %0 ) { NEW_LINE %2 = alloca STRUCT 2 i24 i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i16 NEW_LINE store * i32 %0 %3 NEW_LINE %5 = bitcast * STRUCT 2 i24 i16 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 getelementptr inbounds ( STRUCT 5 i8 i8 i8 i16 ARR 3 2 x i8 @__const.func_8.l_1945 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE store i64 -17 getelementptr inbounds ( STRUCT 3 %struct.S0 i16 i64 bitcast ( * STRUCT 3 STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i16 i64 @g_253 to * STRUCT 3 %struct.S0 i16 i64 ) , i32 0 , i32 2 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 getelementptr inbounds ( STRUCT 3 %struct.S0 i16 i64 bitcast ( * STRUCT 3 STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i16 i64 @g_253 to * STRUCT 3 %struct.S0 i16 i64 ) , i32 0 , i32 2 ) NEW_LINE %8 = icmp ult i64 %7 , 16 NEW_LINE br i1 %8 , label %9 , label %14 NEW_LINE 9: NEW_LINE store * * i16 @g_1189 %4 NEW_LINE %10 = load * * i16 %4 NEW_LINE store * * i16 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 getelementptr inbounds ( STRUCT 3 %struct.S0 i16 i64 bitcast ( * STRUCT 3 STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i16 i64 @g_253 to * STRUCT 3 %struct.S0 i16 i64 ) , i32 0 , i32 2 ) NEW_LINE %13 = add i64 %12 , 1 NEW_LINE store i64 %13 getelementptr inbounds ( STRUCT 3 %struct.S0 i16 i64 bitcast ( * STRUCT 3 STRUCT 20 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i16 i64 @g_253 to * STRUCT 3 %struct.S0 i16 i64 ) , i32 0 , i32 2 ) NEW_LINE br label %6 NEW_LINE 14: NEW_LINE %15 = bitcast * STRUCT 2 i24 i16 %2 to * i64 NEW_LINE %16 = load i64 %15 NEW_LINE ret i64 %16 NEW_LINE }
define i32 @func_81 ( i32 %0 ) { NEW_LINE %2 = alloca STRUCT 2 i16 ARR 3 2 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i64 0 %4 NEW_LINE store * i32 bitcast ( * STRUCT 1 * i8 @g_85 to * i32 ) %5 NEW_LINE store * i32 null %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 bitcast ( * STRUCT 1 * i8 @g_85 to * i32 ) %8 NEW_LINE store * i32 bitcast ( * STRUCT 1 * i8 @g_85 to * i32 ) %9 NEW_LINE store * i32 bitcast ( * STRUCT 1 * i8 @g_85 to * i32 ) %10 NEW_LINE store i32 3 %11 NEW_LINE store * i32 null %12 NEW_LINE store * i32 %11 %13 NEW_LINE store i32 1 %14 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = trunc i64 %15 to i16 NEW_LINE %17 = call signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext %16 , i32 2 ) NEW_LINE %18 = sext i16 %17 to i32 NEW_LINE %19 = load volatile i32 @g_35 NEW_LINE %20 = xor i32 %19 , %18 NEW_LINE store volatile i32 %20 @g_35 NEW_LINE %21 = load i32 %14 NEW_LINE %22 = add i32 %21 , -1 NEW_LINE store i32 %22 %14 NEW_LINE %23 = bitcast * STRUCT 2 i16 ARR 3 2 x i8 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %23 , * i8 getelementptr inbounds ( STRUCT 3 i8 i8 ARR 3 2 x i8 @g_105 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE %24 = bitcast * STRUCT 2 i16 ARR 3 2 x i8 %2 to * i32 NEW_LINE %25 = load i32 %24 NEW_LINE ret i32 %25 NEW_LINE }
define signext i16 @func_55 ( * i16 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 5 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i16 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i8 0 %5 NEW_LINE store i32 -1 %6 NEW_LINE store i32 4 @g_355 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @g_355 NEW_LINE %11 = icmp ule i32 %10 , 50 NEW_LINE br i1 %11 , label %12 , label %35 NEW_LINE 12: NEW_LINE %13 = bitcast * ARR 3 5 x * i32 %7 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %13 , i8 0 , i64 40 , i1 false ) NEW_LINE %14 = load i8 %4 NEW_LINE store i8 %14 %5 NEW_LINE %15 = load i8 %4 NEW_LINE %16 = zext i8 %15 to i32 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %22 , label %18 NEW_LINE 18: NEW_LINE %19 = load i8 %4 NEW_LINE %20 = zext i8 %19 to i32 NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = phi i1 ARR 2 true %12 , ARR 2 %21 %18 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = call i32 @safe_div_func_uint32_t_u_u ( i32 %24 , i32 1 ) NEW_LINE %26 = load i32 %6 NEW_LINE %27 = or i32 %26 , %25 NEW_LINE store i32 %27 %6 NEW_LINE %28 = load i8 %4 NEW_LINE %29 = icmp ne i8 %28 , 0 NEW_LINE br i1 %29 , label %30 , label %31 NEW_LINE 30: NEW_LINE br label %32 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @g_355 NEW_LINE %34 = call i32 @safe_add_func_uint32_t_u_u ( i32 %33 , i32 8 ) NEW_LINE store i32 %34 @g_355 NEW_LINE br label %9 NEW_LINE 35: NEW_LINE %36 = load i8 %4 NEW_LINE %37 = zext i8 %36 to i16 NEW_LINE ret i16 %37 NEW_LINE }
define * i32 @func_62 ( i8 zeroext %0 , i64 %1 , * * i32 %2 , * * i32 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca ARR 3 4 x * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * * i32 %2 %7 NEW_LINE store * * i32 %3 %8 NEW_LINE store i32 -1297855496 %9 NEW_LINE store * i16 @g_76 %10 NEW_LINE %13 = bitcast * ARR 3 4 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 4 x * i32 @__const.func_62.l_78 to * i8 ) , i64 32 , i1 false ) NEW_LINE %14 = load i32 %9 NEW_LINE %15 = load * i16 %10 NEW_LINE %16 = load i16 %15 NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE %18 = and i32 %17 , %14 NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE store i16 %19 %15 NEW_LINE %20 = load i32 @g_2 NEW_LINE %21 = getelementptr inbounds ARR 3 4 x * i32 %11 , i64 0 , i64 0 NEW_LINE %22 = load * i32 %21 NEW_LINE %23 = icmp eq * i32 %22 , null NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = xor i32 %24 , -1 NEW_LINE %26 = load i32 @g_2 NEW_LINE %27 = load i8 @g_79 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = or i32 %28 , %26 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE store i8 %30 @g_79 NEW_LINE %31 = sext i8 %30 to i64 NEW_LINE store i64 %31 getelementptr inbounds ( ARR 3 8 x i64 @g_80 , i64 0 , i64 2 ) NEW_LINE %32 = getelementptr inbounds ARR 3 4 x * i32 %11 , i64 0 , i64 1 NEW_LINE %33 = load * i32 %32 NEW_LINE ret * i32 %33 NEW_LINE }
define i64 @func_21 ( * i16 %0 , * i16 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 1 x ARR 3 3 x i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i16 %0 %4 NEW_LINE store * i16 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x i32 @g_30 , i64 0 , i64 0 ) %7 NEW_LINE store i32 0 %9 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %9 NEW_LINE %13 = icmp slt i32 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %32 NEW_LINE 14: NEW_LINE store i32 0 %10 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %10 NEW_LINE %17 = icmp slt i32 %16 , 3 NEW_LINE br i1 %17 , label %18 , label %28 NEW_LINE 18: NEW_LINE %19 = load i32 %9 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 1 x ARR 3 3 x i32 %8 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %10 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 3 x i32 %21 , i64 0 , i64 %23 NEW_LINE store i32 -950896557 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %10 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %10 NEW_LINE br label %15 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %9 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %9 NEW_LINE br label %11 NEW_LINE 32: NEW_LINE %33 = getelementptr inbounds ARR 3 1 x ARR 3 3 x i32 %8 , i64 0 , i64 0 NEW_LINE %34 = getelementptr inbounds ARR 3 3 x i32 %33 , i64 0 , i64 0 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = add i32 %35 , -1 NEW_LINE store i32 %36 %34 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = sext i32 %37 to i64 NEW_LINE ret i64 %38 NEW_LINE }
define i32 @func_44 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE store i32 %0 %2 NEW_LINE store * i8 @g_31 %3 NEW_LINE store i32 2 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 5 x i32 @g_99 , i64 0 , i64 7 , i64 2 ) %5 NEW_LINE %6 = call signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext 2 , i32 11 ) NEW_LINE %7 = sext i16 %6 to i32 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %10 , label %9 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = phi i1 ARR 2 true %1 , ARR 2 true %9 NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE %13 = trunc i32 %12 to i16 NEW_LINE %14 = load volatile i32 @g_3 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE %16 = call signext i16 @safe_div_func_int16_t_s_s ( i16 signext %13 , i16 signext %15 ) NEW_LINE %17 = load * i8 %3 NEW_LINE %18 = call signext i16 @func_52 ( i16 zeroext %16 , * i8 %17 ) NEW_LINE %19 = load * * * i16 @g_418 NEW_LINE %20 = load * * i16 %19 NEW_LINE %21 = load * i16 %20 NEW_LINE store i16 %18 %21 NEW_LINE %22 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %18 , i32 0 ) NEW_LINE %23 = trunc i16 %22 to i8 NEW_LINE %24 = call zeroext i8 @safe_lshift_func_uint8_t_u_s ( i8 zeroext %23 , i32 2 ) NEW_LINE %25 = zext i8 %24 to i16 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = trunc i32 %26 to i16 NEW_LINE %28 = call signext i16 @safe_mod_func_int16_t_s_s ( i16 signext %25 , i16 signext %27 ) NEW_LINE %29 = sext i16 %28 to i32 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = icmp ne i32 %29 , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = load * i32 %5 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = and i32 %34 , %32 NEW_LINE store i32 %35 %33 NEW_LINE %36 = load i32 %2 NEW_LINE ret i32 %36 NEW_LINE }
define signext i8 @func_47 ( * i64 %0 ) { NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * * i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca STRUCT 2 i32 i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE store * i64 %0 %2 NEW_LINE store i64 1 %3 NEW_LINE store * * i64 @g_22 %4 NEW_LINE store i32 -317273764 %5 NEW_LINE %9 = bitcast * STRUCT 2 i32 i8 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( STRUCT 6 i8 i8 i8 i8 i8 ARR 3 3 x i8 @__const.func_47.l_373 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE store * i32 @g_375 %7 NEW_LINE store * * i32 null %8 NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load * i32 @g_59 NEW_LINE %13 = icmp eq * i32 null , %12 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = load * * i64 %4 NEW_LINE %16 = call * i64 @func_60 ( * * i64 %15 ) NEW_LINE %17 = call i32 @func_56 ( i32 %14 , * i64 %16 ) NEW_LINE store i32 %17 %5 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = xor i64 %18 , 1686507692258931438 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = load * i32 %7 NEW_LINE %23 = bitcast * STRUCT 2 i32 i8 %6 to * i64 NEW_LINE %24 = load i64 %23 NEW_LINE %25 = call * i32 @func_50 ( i64 %11 , i32 %17 , i32 %21 , i64 %24 , * i32 %22 ) NEW_LINE store * i32 %25 %7 NEW_LINE store * i32 null %7 NEW_LINE %26 = load i64 getelementptr inbounds ( ARR 3 4 x i64 @g_182 , i64 0 , i64 0 ) NEW_LINE %27 = trunc i64 %26 to i8 NEW_LINE ret i8 %27 NEW_LINE }
define * i32 @func_48 ( i32 %0 , * i8 %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store i16 -1 %9 NEW_LINE store i32 28 @g_62 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @g_62 NEW_LINE %20 = icmp ne i32 %19 , 49 NEW_LINE br i1 %20 , label %21 , label %40 NEW_LINE 21: NEW_LINE store i8 1 %10 NEW_LINE store * i32 @g_70 %11 NEW_LINE store * i32 @g_70 %12 NEW_LINE store i32 -10 %13 NEW_LINE store i32 1330455037 %14 NEW_LINE store * i32 @g_70 %15 NEW_LINE store * i32 %14 %16 NEW_LINE store * i32 @g_70 %17 NEW_LINE %22 = load i64 %7 NEW_LINE %23 = load i64 %7 NEW_LINE %24 = load i32 @g_27 NEW_LINE %25 = zext i32 %24 to i64 NEW_LINE %26 = icmp sle i64 %23 , %25 NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = load volatile * i32 @g_69 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = or i32 %29 , %27 NEW_LINE store i32 %30 %28 NEW_LINE %31 = load i16 %9 NEW_LINE %32 = add i16 %31 , 1 NEW_LINE store i16 %32 %9 NEW_LINE %33 = load i8 %8 NEW_LINE %34 = icmp ne i8 %33 , 0 NEW_LINE br i1 %34 , label %35 , label %36 NEW_LINE 35: NEW_LINE br label %40 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 @g_62 NEW_LINE %39 = add i32 %38 , 1 NEW_LINE store i32 %39 @g_62 NEW_LINE br label %18 NEW_LINE 40: NEW_LINE ret * i32 @g_62 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 8 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i16 -4 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x i32 @g_103 , i64 0 , i64 2 ) %3 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x i32 @g_103 , i64 0 , i64 1 ) %4 NEW_LINE %8 = bitcast * ARR 3 8 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_1.l_2501 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 9 %6 NEW_LINE %9 = load i16 %2 NEW_LINE %10 = zext i16 %9 to i32 NEW_LINE %11 = call * i32 @func_2 ( i32 %10 ) NEW_LINE %12 = load * * i32 @g_70 NEW_LINE store * i32 %11 %12 NEW_LINE store i64 0 @g_31 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 @g_31 NEW_LINE %15 = icmp eq i64 %14 , -18 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load * i32 @g_619 NEW_LINE %18 = load i32 %17 NEW_LINE store i32 %18 %1 NEW_LINE br label %29 NEW_LINE 19: NEW_LINE %20 = load i64 @g_31 NEW_LINE %21 = trunc i64 %20 to i32 NEW_LINE %22 = call i32 @safe_sub_func_int32_t_s_s ( i32 %21 , i32 3 ) NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE store i64 %23 @g_31 NEW_LINE br label %13 NEW_LINE 24: NEW_LINE %25 = load i32 %6 NEW_LINE %26 = add i32 %25 , 1 NEW_LINE store i32 %26 %6 NEW_LINE %27 = load * i32 %4 NEW_LINE %28 = load i32 %27 NEW_LINE store i32 %28 %1 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %1 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i64 @func_1 ( ) NEW_LINE %18 = load i64 @g_2 NEW_LINE %19 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %18 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %19 ) NEW_LINE %20 = load i32 @g_5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_5~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i8 @g_9 NEW_LINE %24 = zext i8 %23 to i64 NEW_LINE %25 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %24 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.5:g_9~00" , i64 0 , i64 0 ) , i32 %25 ) NEW_LINE %26 = load i32 @crc32_context NEW_LINE %27 = zext i32 %26 to i64 NEW_LINE %28 = xor i64 %27 , 4294967295 NEW_LINE %29 = trunc i64 %28 to i32 NEW_LINE %30 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %29 , i32 %30 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i8 @func_63 ( * * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 3 x * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca ARR 3 2 x i8 NEW_LINE %8 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 -30655 %6 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = icmp slt i32 %10 , 3 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 3 x * i32 %5 , i64 0 , i64 %14 NEW_LINE store * i32 @g_309 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i32 0 %8 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %8 NEW_LINE %22 = icmp slt i32 %21 , 2 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %8 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 2 x i8 %7 , i64 0 , i64 %25 NEW_LINE store i8 -8 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %8 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %8 NEW_LINE br label %20 NEW_LINE 30: NEW_LINE %31 = load * i32 @g_221 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = load i16 %6 NEW_LINE %34 = sext i16 %33 to i32 NEW_LINE %35 = and i32 %34 , %32 NEW_LINE %36 = trunc i32 %35 to i16 NEW_LINE store i16 %36 %6 NEW_LINE %37 = sext i16 %36 to i32 NEW_LINE %38 = load * * i32 %3 NEW_LINE %39 = load * i32 %38 NEW_LINE store i32 %37 %39 NEW_LINE %40 = getelementptr inbounds ARR 3 2 x i8 %7 , i64 0 , i64 1 NEW_LINE %41 = load i8 %40 NEW_LINE ret i8 %41 NEW_LINE }
define * i32 @func_42 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 6 x ARR 3 8 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store * i32 @g_41 %3 NEW_LINE store * i32 @g_41 %4 NEW_LINE store * i32 null %5 NEW_LINE store * i32 null %6 NEW_LINE %10 = bitcast * ARR 3 6 x ARR 3 8 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 6 x ARR 3 8 x * i32 @__const.func_42.l_49 to * i8 ) , i64 384 , i1 false ) NEW_LINE %11 = load i32 @g_53 NEW_LINE %12 = add i32 %11 , 1 NEW_LINE store i32 %12 @g_53 NEW_LINE %13 = getelementptr inbounds ARR 3 6 x ARR 3 8 x * i32 %7 , i64 0 , i64 3 NEW_LINE %14 = getelementptr inbounds ARR 3 8 x * i32 %13 , i64 0 , i64 0 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = icmp ne * i32 %15 , %2 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE store i32 %17 %2 NEW_LINE %18 = load * i32 @g_56 NEW_LINE ret * i32 %18 NEW_LINE }
define signext i8 @func_63 ( * i16 %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca STRUCT 1 ARR 3 14 x i8 NEW_LINE %5 = alloca * i32 NEW_LINE store * i16 %0 %3 NEW_LINE %6 = bitcast * STRUCT 1 ARR 3 14 x i8 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 getelementptr inbounds ( STRUCT 14 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 @__const.func_63.l_142 , i32 0 , i32 0 ) , i64 14 , i1 false ) NEW_LINE store * i32 @g_2 %5 NEW_LINE %7 = load * i32 @g_108 NEW_LINE store i32 0 %7 NEW_LINE %8 = bitcast * STRUCT 1 ARR 3 14 x i8 %4 to * i112 NEW_LINE %9 = load i112 %8 NEW_LINE %10 = lshr i112 %9 , 38 NEW_LINE %11 = and i112 %10 , 1048575 NEW_LINE %12 = trunc i112 %11 to i32 NEW_LINE %13 = load * i32 @g_108 NEW_LINE store i32 %12 %13 NEW_LINE store i32 -12 @g_104 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @g_104 NEW_LINE %16 = icmp sle i32 %15 , -11 NEW_LINE br i1 %16 , label %17 , label %27 NEW_LINE 17: NEW_LINE %18 = bitcast * STRUCT 1 ARR 3 14 x i8 %4 to * i112 NEW_LINE %19 = load i112 %18 NEW_LINE %20 = shl i112 %19 , 105 NEW_LINE %21 = ashr i112 %20 , 105 NEW_LINE %22 = trunc i112 %21 to i32 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE store i8 %23 %2 NEW_LINE br label %33 NEW_LINE 24: NEW_LINE %25 = load i32 @g_104 NEW_LINE %26 = call i32 @safe_add_func_uint32_t_u_u ( i32 %25 , i32 8 ) NEW_LINE store i32 %26 @g_104 NEW_LINE br label %14 NEW_LINE 27: NEW_LINE %28 = load * i32 %5 NEW_LINE %29 = load volatile * * i32 @g_147 NEW_LINE store * i32 %28 %29 NEW_LINE %30 = load * i32 %5 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = trunc i32 %31 to i8 NEW_LINE store i8 %32 %2 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i8 %2 NEW_LINE ret i8 %34 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call zeroext i8 @func_1 ( ) NEW_LINE %18 = load volatile i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @g_5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_5~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i64 @g_6 NEW_LINE %25 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %24 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.5:g_6~00" , i64 0 , i64 0 ) , i32 %25 ) NEW_LINE %26 = load i32 @crc32_context NEW_LINE %27 = zext i32 %26 to i64 NEW_LINE %28 = xor i64 %27 , 4294967295 NEW_LINE %29 = trunc i64 %28 to i32 NEW_LINE %30 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %29 , i32 %30 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @func_16 ( * i32 %0 , i8 zeroext %1 , i16 zeroext %2 , i64 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * * i16 NEW_LINE %13 = alloca * i16 NEW_LINE %14 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store i64 8 %9 NEW_LINE store i32 0 %10 NEW_LINE store * i32 @g_5 %11 NEW_LINE store i64 -19 @g_118 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 @g_118 NEW_LINE %17 = icmp ule i64 %16 , 17 NEW_LINE br i1 %17 , label %18 , label %28 NEW_LINE 18: NEW_LINE store * * i16 getelementptr inbounds ( ARR 3 10 x ARR 3 3 x ARR 3 3 x * i16 @g_391 , i64 0 , i64 6 , i64 0 , i64 2 ) %12 NEW_LINE store * i16 null %13 NEW_LINE store i32 1 %14 NEW_LINE %19 = load i64 %9 NEW_LINE %20 = trunc i64 %19 to i16 NEW_LINE store i16 %20 %7 NEW_LINE %21 = call zeroext i16 @safe_rshift_func_uint16_t_u_u ( i16 zeroext %20 , i32 4 ) NEW_LINE %22 = zext i16 %21 to i32 NEW_LINE %23 = load * * i16 %12 NEW_LINE store * i16 @g_147 %23 NEW_LINE %24 = xor i32 %22 , 1 NEW_LINE store i32 %24 %14 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i64 @g_118 NEW_LINE %27 = add i64 %26 , 1 NEW_LINE store i64 %27 @g_118 NEW_LINE br label %15 NEW_LINE 28: NEW_LINE %29 = load i64 %9 NEW_LINE %30 = load i32 %10 NEW_LINE %31 = load * i32 %11 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = or i32 %32 , %30 NEW_LINE store i32 %33 %31 NEW_LINE %34 = load volatile * i32 @g_52 NEW_LINE %35 = load i32 %34 NEW_LINE ret i32 %35 NEW_LINE }
define zeroext i16 @func_16 ( i8 signext %0 , i64 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 1 x ARR 3 6 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %8 = bitcast * ARR 3 1 x ARR 3 6 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 getelementptr inbounds ( ARR 3 1 x ARR 3 6 x i8 @__const.func_16.l_21 , i32 0 , i32 0 , i32 0 ) , i64 6 , i1 false ) NEW_LINE store i8 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i8 %3 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = icmp slt i32 %11 , 1 NEW_LINE br i1 %12 , label %13 , label %32 NEW_LINE 13: NEW_LINE store i64 0 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %4 NEW_LINE %16 = icmp slt i64 %15 , 6 NEW_LINE br i1 %16 , label %17 , label %26 NEW_LINE 17: NEW_LINE %18 = load i8 %3 NEW_LINE %19 = sext i8 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1 x ARR 3 6 x i8 %5 , i64 0 , i64 %19 NEW_LINE %21 = load i64 %4 NEW_LINE %22 = getelementptr inbounds ARR 3 6 x i8 %20 , i64 0 , i64 %21 NEW_LINE store i8 -1 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = add nsw i64 %24 , 1 NEW_LINE store i64 %25 %4 NEW_LINE br label %14 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i8 %3 NEW_LINE %29 = sext i8 %28 to i32 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE store i8 %31 %3 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE %33 = getelementptr inbounds ARR 3 1 x ARR 3 6 x i8 %5 , i64 0 , i64 0 NEW_LINE %34 = getelementptr inbounds ARR 3 6 x i8 %33 , i64 0 , i64 2 NEW_LINE %35 = load i8 %34 NEW_LINE %36 = zext i8 %35 to i16 NEW_LINE ret i16 %36 NEW_LINE }
define i64 @func_35 ( i32 %0 , * i8 %1 , * i8 %2 , i64 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 7 x * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store i8 55 %9 NEW_LINE store i32 -2069389049 %10 NEW_LINE %13 = load i8 %9 NEW_LINE %14 = add i8 %13 , 1 NEW_LINE store i8 %14 %9 NEW_LINE store i8 0 @g_11 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i8 @g_11 NEW_LINE %17 = sext i8 %16 to i32 NEW_LINE %18 = icmp slt i32 %17 , -29 NEW_LINE br i1 %18 , label %19 , label %39 NEW_LINE 19: NEW_LINE store i32 0 %12 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %12 NEW_LINE %22 = icmp slt i32 %21 , 7 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %12 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 7 x * i32 %11 , i64 0 , i64 %25 NEW_LINE store * i32 @g_2 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %12 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %12 NEW_LINE br label %20 NEW_LINE 30: NEW_LINE %31 = load i8 %9 NEW_LINE %32 = zext i8 %31 to i32 NEW_LINE store i32 %32 %10 NEW_LINE %33 = getelementptr inbounds ARR 3 7 x * i32 %11 , i64 0 , i64 0 NEW_LINE %34 = load * i32 %33 NEW_LINE %35 = getelementptr inbounds ARR 3 7 x * i32 %11 , i64 0 , i64 3 NEW_LINE store * i32 %34 %35 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i8 @g_11 NEW_LINE %38 = add i8 %37 , -1 NEW_LINE store i8 %38 @g_11 NEW_LINE br label %15 NEW_LINE 39: NEW_LINE %40 = load i32 %5 NEW_LINE %41 = zext i32 %40 to i64 NEW_LINE ret i64 %41 NEW_LINE }
define i32 @func_44 ( i32 %0 , i64 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 2 x * i32 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 4 x * * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %13 = bitcast * ARR 3 4 x ARR 3 4 x * * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 4 x ARR 3 4 x * * i32 @__const.func_44.l_94 to * i8 ) , i64 128 , i1 false ) NEW_LINE store i32 0 %11 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %11 NEW_LINE %16 = icmp slt i32 %15 , 2 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %11 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 2 x * i32 %9 , i64 0 , i64 %19 NEW_LINE store * i32 null %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %11 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %11 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 2 x * i32 %9 , i64 0 , i64 0 NEW_LINE %26 = load * i32 %25 NEW_LINE store * i32 %26 @g_74 NEW_LINE %27 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 8 x i32 @g_19 , i64 0 , i64 0 , i64 5 , i64 3 ) NEW_LINE ret i32 %27 NEW_LINE }
define i32 @func_68 ( i8 zeroext %0 , i8 signext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca ARR 3 1 x i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * i32 @g_62 %6 NEW_LINE store * * i32 %6 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %8 NEW_LINE %13 = icmp slt i32 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %8 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 1 x i64 %5 , i64 0 , i64 %16 NEW_LINE store i64 -1788890261661563667 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %8 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %8 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE store i16 0 @g_40 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i16 @g_40 NEW_LINE %24 = sext i16 %23 to i32 NEW_LINE %25 = icmp sge i32 %24 , 0 NEW_LINE br i1 %25 , label %26 , label %38 NEW_LINE 26: NEW_LINE store * i32 @g_62 %9 NEW_LINE %27 = load i16 @g_40 NEW_LINE %28 = sext i16 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 1 x i64 %5 , i64 0 , i64 %28 NEW_LINE %30 = load i64 %29 NEW_LINE %31 = trunc i64 %30 to i32 NEW_LINE %32 = load * i32 %9 NEW_LINE store i32 %31 %32 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i16 @g_40 NEW_LINE %35 = sext i16 %34 to i32 NEW_LINE %36 = sub nsw i32 %35 , 1 NEW_LINE %37 = trunc i32 %36 to i16 NEW_LINE store i16 %37 @g_40 NEW_LINE br label %22 NEW_LINE 38: NEW_LINE %39 = load * i32 %6 NEW_LINE %40 = load * * i32 %7 NEW_LINE store * i32 %39 %40 NEW_LINE %41 = load i8 %4 NEW_LINE %42 = sext i8 %41 to i32 NEW_LINE ret i32 %42 NEW_LINE }
define * i32 @func_43 ( i32 %0 , * i32 %1 , i16 signext %2 , * i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 3 x ARR 3 5 x i16 NEW_LINE %10 = alloca ARR 3 4 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %13 = bitcast * ARR 3 3 x ARR 3 5 x i16 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 3 x ARR 3 5 x i16 @__const.func_43.l_478 to * i8 ) , i64 30 , i1 false ) NEW_LINE store i32 0 %11 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %11 NEW_LINE %16 = icmp slt i32 %15 , 4 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %11 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 4 x * i32 %10 , i64 0 , i64 %19 NEW_LINE store * i32 @g_365 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %11 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %11 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 3 x ARR 3 5 x i16 %9 , i64 0 , i64 0 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i16 %25 , i64 0 , i64 0 NEW_LINE %27 = load i16 %26 NEW_LINE %28 = sext i16 %27 to i32 NEW_LINE %29 = load * i32 %8 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = or i32 %30 , %28 NEW_LINE store i32 %31 %29 NEW_LINE %32 = getelementptr inbounds ARR 3 4 x * i32 %10 , i64 0 , i64 3 NEW_LINE %33 = load * i32 %32 NEW_LINE ret * i32 %33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load volatile i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_2~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i32 @g_3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_3~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load i32 @g_7 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %25 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.5:g_7~00" , i64 0 , i64 0 ) , i32 %26 ) NEW_LINE %27 = load i32 @crc32_context NEW_LINE %28 = zext i32 %27 to i64 NEW_LINE %29 = xor i64 %28 , 4294967295 NEW_LINE %30 = trunc i64 %29 to i32 NEW_LINE %31 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %30 , i32 %31 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_22 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 -1217519898 %4 NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = xor i32 %11 , %10 NEW_LINE store i32 %12 %5 NEW_LINE %13 = load volatile * i32 @g_29 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = and i32 %14 , %12 NEW_LINE store i32 %15 %13 NEW_LINE %16 = load * i32 %3 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store * i32 @g_4 %2 NEW_LINE br label %38 NEW_LINE 20: NEW_LINE store i32 1 %6 NEW_LINE store i32 -22 %5 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp slt i32 %22 , 21 NEW_LINE br i1 %23 , label %24 , label %30 NEW_LINE 24: NEW_LINE store * i8 null %7 NEW_LINE store * i8 bitcast ( * STRUCT 2 i32 ARR 3 4 x i8 @g_44 to * i8 ) %8 NEW_LINE store * i32 @g_115 %9 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = trunc i32 %26 to i16 NEW_LINE %28 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %27 , i16 signext 1 ) NEW_LINE %29 = sext i16 %28 to i32 NEW_LINE store i32 %29 %5 NEW_LINE br label %21 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load * i32 %3 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = load volatile * i32 @g_1806 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = and i32 %35 , %33 NEW_LINE store i32 %36 %34 NEW_LINE %37 = load * i32 %3 NEW_LINE store * i32 %37 %2 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = load * i32 %2 NEW_LINE ret * i32 %39 NEW_LINE }
define * i32 @func_29 ( i32 %0 , * i32 %1 , i32 %2 , i64 %3 , * i16 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store * i16 %4 %10 NEW_LINE store i8 -31 %11 NEW_LINE store * i32 @g_397 %12 NEW_LINE %13 = load i64 %9 NEW_LINE %14 = load i8 %11 NEW_LINE %15 = load i16 getelementptr inbounds ( ARR 3 8 x ARR 3 6 x ARR 3 5 x i16 @g_1309 , i64 0 , i64 0 , i64 1 , i64 3 ) NEW_LINE %16 = zext i16 %15 to i64 NEW_LINE %17 = and i64 %16 , 6 NEW_LINE %18 = trunc i64 %17 to i8 NEW_LINE %19 = call zeroext i8 @safe_mul_func_uint8_t_u_u ( i8 zeroext %14 , i8 zeroext %18 ) NEW_LINE %20 = zext i8 %19 to i32 NEW_LINE %21 = load * i32 @g_616 NEW_LINE %22 = load volatile i32 %21 NEW_LINE %23 = icmp ne i32 %20 , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = load * i8 @g_1920 NEW_LINE %26 = load i8 %25 NEW_LINE %27 = sext i8 %26 to i64 NEW_LINE %28 = icmp ne i64 -1 , %27 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = icmp sgt i64 %30 , 0 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = load * i32 %7 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = or i32 %32 , %34 NEW_LINE %36 = load i64 %9 NEW_LINE %37 = icmp eq i64 4 , %36 NEW_LINE %38 = zext i1 %37 to i32 NEW_LINE %39 = load i32 %6 NEW_LINE %40 = or i32 %39 , 1 NEW_LINE store i32 %40 %6 NEW_LINE %41 = load * i32 %12 NEW_LINE ret * i32 %41 NEW_LINE }
define i32 @func_16 ( i64 %0 , * i32 %1 , * i8 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca ARR 3 2 x ARR 3 2 x * i32 NEW_LINE %15 = alloca i8 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE store i32 1 %7 NEW_LINE store * i32 @g_34 %8 NEW_LINE store * i32 @g_34 %9 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x ARR 3 10 x i32 @g_81 , i64 0 , i64 2 , i64 0 , i64 7 ) %10 NEW_LINE store i32 -1 %11 NEW_LINE store * i32 %11 %12 NEW_LINE store i32 -1 %13 NEW_LINE %18 = getelementptr inbounds ARR 3 2 x ARR 3 2 x * i32 %14 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 2 x * i32 %18 , i64 0 , i64 0 NEW_LINE store * i32 %11 %19 NEW_LINE %20 = getelementptr inbounds * i32 %19 , i64 1 NEW_LINE store * i32 %11 %20 NEW_LINE %21 = getelementptr inbounds ARR 3 2 x * i32 %18 , i64 1 NEW_LINE %22 = getelementptr inbounds ARR 3 2 x * i32 %21 , i64 0 , i64 0 NEW_LINE store * i32 %11 %22 NEW_LINE %23 = getelementptr inbounds * i32 %22 , i64 1 NEW_LINE store * i32 %11 %23 NEW_LINE store i8 -103 %15 NEW_LINE %24 = load * * * i32 @g_458 NEW_LINE %25 = load * * i32 %24 NEW_LINE store * i32 null %25 NEW_LINE %26 = load i8 %15 NEW_LINE %27 = add i8 %26 , 1 NEW_LINE store i8 %27 %15 NEW_LINE %28 = load * i32 %5 NEW_LINE %29 = load i32 %28 NEW_LINE ret i32 %29 NEW_LINE }
define zeroext i8 @func_1 ( ) { NEW_LINE %1 = alloca * STRUCT 1 ARR 3 3 x i8 NEW_LINE %2 = alloca STRUCT 4 i32 i64 i16 i16 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca ARR 3 8 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * STRUCT 1 ARR 3 3 x i8 NEW_LINE %8 = alloca * i32 NEW_LINE store * STRUCT 1 ARR 3 3 x i8 bitcast ( * STRUCT 3 i8 i8 i8 @g_13 to * STRUCT 1 ARR 3 3 x i8 ) %1 NEW_LINE %9 = bitcast * STRUCT 4 i32 i64 i16 i16 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * STRUCT 5 i32 i64 i8 i8 i16 @__const.func_1.l_755 to * i8 ) , i64 24 , i1 false ) NEW_LINE store * i8 @g_1322 %3 NEW_LINE %10 = bitcast * ARR 3 8 x i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 8 x i32 @__const.func_1.l_1378 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i32 0 @g_3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @g_3 NEW_LINE %13 = icmp eq i32 %12 , -26 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE store i64 3525023047432473785 %6 NEW_LINE store * STRUCT 1 ARR 3 3 x i8 null %7 NEW_LINE store * i32 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_380 to * i32 ) %8 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @g_3 NEW_LINE %17 = call i32 @safe_sub_func_uint32_t_u_u ( i32 %16 , i32 8 ) NEW_LINE store i32 %17 @g_3 NEW_LINE br label %11 NEW_LINE 18: NEW_LINE %19 = getelementptr inbounds STRUCT 4 i32 i64 i16 i16 %2 , i32 0 , i32 1 NEW_LINE %20 = load i64 %19 NEW_LINE %21 = trunc i64 %20 to i8 NEW_LINE ret i8 %21 NEW_LINE }
define zeroext i16 @func_19 ( i64 %0 , i16 signext %1 , i32 %2 , i64 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca ARR 3 5 x ARR 3 4 x * * * * * i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %2 %12 NEW_LINE store i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %3 %8 NEW_LINE %13 = bitcast * ARR 3 5 x ARR 3 4 x * * * * * i64 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 5 x ARR 3 4 x * * * * * i64 @__const.func_19.l_1282 to * i8 ) , i64 160 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 5 x ARR 3 4 x * * * * * i64 %9 , i64 0 , i64 1 NEW_LINE %15 = getelementptr inbounds ARR 3 4 x * * * * * i64 %14 , i64 0 , i64 3 NEW_LINE %16 = load * * * * * i64 %15 NEW_LINE %17 = getelementptr inbounds ARR 3 5 x ARR 3 4 x * * * * * i64 %9 , i64 0 , i64 1 NEW_LINE %18 = getelementptr inbounds ARR 3 4 x * * * * * i64 %17 , i64 0 , i64 1 NEW_LINE store * * * * * i64 %16 %18 NEW_LINE %19 = bitcast * STRUCT 1 i32 %5 to * i32 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = trunc i32 %20 to i16 NEW_LINE ret i16 %21 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca STRUCT 1 i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call i32 @func_1 ( ) NEW_LINE %19 = getelementptr inbounds STRUCT 1 i32 %7 , i32 0 , i32 0 NEW_LINE store i32 %18 %19 NEW_LINE %20 = load i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_2 , i32 0 , i32 0 ) NEW_LINE %21 = sext i8 %20 to i64 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2.f0~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_2 , i32 0 , i32 0 ) NEW_LINE %24 = sext i8 %23 to i64 NEW_LINE %25 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %24 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.4:g_2.f3~00" , i64 0 , i64 0 ) , i32 %25 ) NEW_LINE %26 = load i32 @crc32_context NEW_LINE %27 = zext i32 %26 to i64 NEW_LINE %28 = xor i64 %27 , 4294967295 NEW_LINE %29 = trunc i64 %28 to i32 NEW_LINE %30 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %29 , i32 %30 ) NEW_LINE ret i32 0 NEW_LINE }
define * i64 @func_41 ( i32 %0 , i32 %1 , i8 signext %2 , i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca ARR 3 7 x * * i32 NEW_LINE %11 = alloca * * * i64 NEW_LINE %12 = alloca * * * * i64 NEW_LINE %13 = alloca * * * i64 NEW_LINE %14 = alloca * * * * i64 NEW_LINE %15 = alloca * i64 NEW_LINE %16 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * * i32 null %9 NEW_LINE %17 = bitcast * ARR 3 7 x * * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 7 x * * i32 @__const.func_41.l_958 to * i8 ) , i64 56 , i1 false ) NEW_LINE store * * * i64 getelementptr inbounds ( ARR 3 4 x ARR 3 1 x ARR 3 6 x * * i64 @g_579 , i64 0 , i64 2 , i64 0 , i64 4 ) %11 NEW_LINE store * * * * i64 %11 %12 NEW_LINE store * * * i64 getelementptr inbounds ( ARR 3 4 x ARR 3 1 x ARR 3 6 x * * i64 @g_579 , i64 0 , i64 2 , i64 0 , i64 4 ) %13 NEW_LINE store * * * * i64 %13 %14 NEW_LINE store * i64 @g_67 %15 NEW_LINE %18 = load volatile * * i32 @g_357 NEW_LINE store * i32 %5 %18 NEW_LINE %19 = load * * * i64 %11 NEW_LINE %20 = load * * * * i64 %12 NEW_LINE store * * * i64 %19 %20 NEW_LINE %21 = load * * * * i64 %14 NEW_LINE store * * * i64 %19 %21 NEW_LINE %22 = load * i64 %15 NEW_LINE ret * i64 %22 NEW_LINE }
define * i8 @func_10 ( * i8 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 10 x ARR 3 3 x * * i64 NEW_LINE %6 = alloca * * * i64 NEW_LINE %7 = alloca * * i64 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %11 = bitcast * ARR 3 10 x ARR 3 3 x * * i64 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 10 x ARR 3 3 x * * i64 @__const.func_10.l_2705 to * i8 ) , i64 240 , i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 10 x ARR 3 3 x * * i64 %5 , i64 0 , i64 8 NEW_LINE %13 = getelementptr inbounds ARR 3 3 x * * i64 %12 , i64 0 , i64 1 NEW_LINE store * * * i64 %13 %6 NEW_LINE store * * i64 null %7 NEW_LINE store * i8 @g_14 %8 NEW_LINE %14 = load * * * i64 %6 NEW_LINE store * * i64 @g_127 %14 NEW_LINE %15 = load * * i64 @g_526 NEW_LINE %16 = load * i64 %15 NEW_LINE store i64 0 %16 NEW_LINE %17 = call zeroext i16 @safe_lshift_func_uint16_t_u_u ( i16 zeroext 0 , i32 1 ) NEW_LINE %18 = zext i16 %17 to i32 NEW_LINE %19 = load * i32 @g_2198 NEW_LINE store i32 %18 %19 NEW_LINE %20 = load * i8 %8 NEW_LINE ret * i8 %20 NEW_LINE }
define i32 @func_2 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 2 x i16 NEW_LINE %4 = alloca ARR 3 8 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 2 x i16 %3 , i64 0 , i64 %11 NEW_LINE store i16 8 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE store i32 0 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = icmp slt i32 %18 , 8 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 8 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 1 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE %28 = getelementptr inbounds ARR 3 2 x i16 %3 , i64 0 , i64 1 NEW_LINE %29 = load i16 %28 NEW_LINE %30 = trunc i16 %29 to i8 NEW_LINE %31 = getelementptr inbounds ARR 3 2 x i16 %3 , i64 0 , i64 1 NEW_LINE %32 = load i16 %31 NEW_LINE %33 = sext i16 %32 to i64 NEW_LINE %34 = load i32 %2 NEW_LINE %35 = zext i32 %34 to i64 NEW_LINE %36 = call i64 @safe_sub_func_int64_t_s_s ( i64 %33 , i64 %35 ) NEW_LINE %37 = trunc i64 %36 to i8 NEW_LINE %38 = call signext i8 @safe_div_func_int8_t_s_s ( i8 signext %30 , i8 signext %37 ) NEW_LINE %39 = sext i8 %38 to i32 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x i32 %4 , i64 0 , i64 0 NEW_LINE %41 = load i32 %40 NEW_LINE %42 = and i32 %41 , %39 NEW_LINE store i32 %42 %40 NEW_LINE %43 = load i32 %2 NEW_LINE ret i32 %43 NEW_LINE }
define void @func_12 ( * STRUCT 7 i8 i16 i16 i16 i8 i32 i32 noalias sret %0 , i64 %1 , i8 zeroext %2 , i8 signext %3 , i16 signext %4 , * i32 %5 ) { NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 9 x STRUCT 7 i8 i16 i16 i16 i8 i32 i32 NEW_LINE %13 = alloca i32 NEW_LINE store i64 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE store * i32 %5 %11 NEW_LINE %14 = bitcast * ARR 3 9 x STRUCT 7 i8 i16 i16 i16 i8 i32 i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 getelementptr inbounds ( ARR 3 9 x STRUCT 7 i8 i16 i16 i16 i8 i32 i32 @__const.func_12.l_2288 , i32 0 , i32 0 , i32 0 ) , i64 144 , i1 false ) NEW_LINE %15 = getelementptr inbounds ARR 3 9 x STRUCT 7 i8 i16 i16 i16 i8 i32 i32 %12 , i64 0 , i64 8 NEW_LINE %16 = bitcast * STRUCT 7 i8 i16 i16 i16 i8 i32 i32 %0 to * i8 NEW_LINE %17 = bitcast * STRUCT 7 i8 i16 i16 i16 i8 i32 i32 %15 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 %17 , i64 16 , i1 false ) NEW_LINE ret void NEW_LINE }
define signext i16 @func_90 ( * i64 %0 , i64 %1 , i32 %2 , * i16 %3 , * i64 %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca * i64 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca ARR 3 8 x * i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca * * i32 NEW_LINE %19 = alloca i32 NEW_LINE store * i64 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i16 %3 %9 NEW_LINE store * i64 %4 %10 NEW_LINE store i32 1388489544 %11 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 7 x ARR 3 10 x i32 @g_75 , i64 0 , i64 0 , i64 3 , i64 5 ) %12 NEW_LINE store i32 0 %13 NEW_LINE store * i32 %13 %14 NEW_LINE %20 = bitcast * ARR 3 8 x * i32 %15 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_90.l_106 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 1010384094 %16 NEW_LINE store i64 -9209212656302781535 %17 NEW_LINE store * * i32 null %18 NEW_LINE %21 = load i64 %17 NEW_LINE %22 = add i64 %21 , -1 NEW_LINE store i64 %22 %17 NEW_LINE %23 = load volatile * * i32 @g_114 NEW_LINE store * i32 %13 %23 NEW_LINE %24 = load i16 getelementptr inbounds ( ARR 3 6 x i16 @g_72 , i64 0 , i64 0 ) NEW_LINE ret i16 %24 NEW_LINE }
define i64 @func_88 ( * i32 %0 , * i16 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca ARR 3 6 x ARR 3 3 x ARR 3 1 x i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i16 %1 %4 NEW_LINE %9 = bitcast * ARR 3 6 x ARR 3 3 x ARR 3 1 x i64 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 6 x ARR 3 3 x ARR 3 1 x i64 @__const.func_88.l_91 to * i8 ) , i64 144 , i1 false ) NEW_LINE %10 = getelementptr inbounds ARR 3 6 x ARR 3 3 x ARR 3 1 x i64 %5 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds ARR 3 3 x ARR 3 1 x i64 %10 , i64 0 , i64 2 NEW_LINE %12 = getelementptr inbounds ARR 3 1 x i64 %11 , i64 0 , i64 0 NEW_LINE %13 = load i64 %12 NEW_LINE %14 = add i64 %13 , -1 NEW_LINE store i64 %14 %12 NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = load * i32 %3 NEW_LINE store i32 %16 %17 NEW_LINE %18 = getelementptr inbounds ARR 3 6 x ARR 3 3 x ARR 3 1 x i64 %5 , i64 0 , i64 1 NEW_LINE %19 = getelementptr inbounds ARR 3 3 x ARR 3 1 x i64 %18 , i64 0 , i64 2 NEW_LINE %20 = getelementptr inbounds ARR 3 1 x i64 %19 , i64 0 , i64 0 NEW_LINE %21 = load i64 %20 NEW_LINE ret i64 %21 NEW_LINE }
define * i32 @func_17 ( * i32 %0 , i16 zeroext %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca * * i16 NEW_LINE %11 = alloca * * * i16 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i16 getelementptr inbounds ( ARR 3 6 x ARR 3 1 x ARR 3 8 x i16 @g_497 , i64 0 , i64 1 , i64 0 , i64 3 ) %9 NEW_LINE store * * i16 %9 %10 NEW_LINE store * * * i16 %10 %11 NEW_LINE store i32 -1042703991 %12 NEW_LINE store i32 783234065 %13 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 3 x i32 @g_667 , i64 0 , i64 2 ) %14 NEW_LINE %15 = load * * * i16 %11 NEW_LINE %16 = load * * * i16 @g_698 NEW_LINE %17 = icmp ne * * * i16 %15 , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = load * * * i16 %11 NEW_LINE %20 = load * * i16 %19 NEW_LINE %21 = load * i16 %20 NEW_LINE %22 = load i16 %21 NEW_LINE %23 = add i16 %22 , 1 NEW_LINE store i16 %23 %21 NEW_LINE %24 = zext i16 %23 to i32 NEW_LINE %25 = icmp sge i32 %18 , %24 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = load i8 @g_692 NEW_LINE %28 = zext i8 %27 to i32 NEW_LINE %29 = or i32 %28 , %26 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE store i8 %30 @g_692 NEW_LINE %31 = call zeroext i8 @safe_rshift_func_uint8_t_u_s ( i8 zeroext %30 , i32 0 ) NEW_LINE %32 = zext i8 %31 to i32 NEW_LINE %33 = load * i32 %8 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = or i32 %34 , %32 NEW_LINE store i32 %35 %33 NEW_LINE %36 = load * i32 %14 NEW_LINE store i32 %35 %36 NEW_LINE %37 = load * i32 %5 NEW_LINE ret * i32 %37 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca STRUCT 1 i32 NEW_LINE store i32 22 @g_2 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @g_2 NEW_LINE %4 = icmp ne i32 %3 , 29 NEW_LINE br i1 %4 , label %5 , label %34 NEW_LINE 5: NEW_LINE %6 = bitcast * STRUCT 1 i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @__const.func_1.l_3443 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE %7 = load * i8 @g_9 NEW_LINE %8 = call * i8 @func_7 ( * i8 %7 ) NEW_LINE %9 = call i32 @func_5 ( * i8 %8 ) NEW_LINE %10 = load * * * i32 @g_1185 NEW_LINE %11 = load * * i32 %10 NEW_LINE %12 = load * i32 %11 NEW_LINE store i32 %9 %12 NEW_LINE store i8 0 @g_10 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i8 @g_10 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = icmp slt i32 %15 , -19 NEW_LINE br i1 %16 , label %17 , label %30 NEW_LINE 17: NEW_LINE %18 = load * * * i32 @g_1185 NEW_LINE %19 = load * * i32 %18 NEW_LINE %20 = load * i32 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE br label %30 NEW_LINE 24: NEW_LINE br label %36 NEW_LINE 25: NEW_LINE %26 = load i8 @g_10 NEW_LINE %27 = sext i8 %26 to i16 NEW_LINE %28 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %27 , i16 zeroext 6 ) NEW_LINE %29 = trunc i16 %28 to i8 NEW_LINE store i8 %29 @g_10 NEW_LINE br label %13 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 @g_2 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 @g_2 NEW_LINE br label %2 NEW_LINE 34: NEW_LINE %35 = bitcast * STRUCT 1 i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %35 , * i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_3444 , i32 0 , i32 0 ) , i64 4 , i1 false ) NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = getelementptr inbounds STRUCT 1 i32 %1 , i32 0 , i32 0 NEW_LINE %38 = load i32 %37 NEW_LINE ret i32 %38 NEW_LINE }
define void @func_2 ( * STRUCT 4 i8 i8 i64 i32 noalias sret %0 , i32 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i16 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %1 %3 NEW_LINE store * i32 null %4 NEW_LINE store * * i32 null %5 NEW_LINE store * * i32 %4 %6 NEW_LINE %14 = load * i32 %4 NEW_LINE store * i32 %14 getelementptr inbounds ( ARR 3 1 x * i32 @g_7 , i64 0 , i64 0 ) NEW_LINE %15 = load * * i32 %6 NEW_LINE store * i32 %14 %15 NEW_LINE store i32 -21 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp ule i32 %17 , 43 NEW_LINE br i1 %18 , label %19 , label %31 NEW_LINE 19: NEW_LINE store * i32 null %7 NEW_LINE store i8 -111 %8 NEW_LINE store i32 0 @g_13 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @g_13 NEW_LINE %22 = icmp sle i32 %21 , 6 NEW_LINE br i1 %22 , label %23 , label %27 NEW_LINE 23: NEW_LINE store i16 -2955 %9 NEW_LINE store * * i32 null %10 NEW_LINE store * i32 @g_1087 %11 NEW_LINE store i16 -24752 %12 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 @g_13 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 @g_13 NEW_LINE br label %20 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %16 NEW_LINE 31: NEW_LINE %32 = bitcast * STRUCT 4 i8 i8 i64 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %32 , * i8 getelementptr inbounds ( STRUCT 4 i8 i8 i64 i32 @g_3621 , i32 0 , i32 0 ) , i64 14 , i1 false ) NEW_LINE ret void NEW_LINE }
define i32 @func_33 ( i8 signext %0 , i32 %1 , * i32 %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 5 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * STRUCT 1 i64 NEW_LINE %15 = alloca * * STRUCT 1 i64 NEW_LINE %16 = alloca * * i32 NEW_LINE %17 = alloca i32 NEW_LINE store i8 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_122 , i64 0 , i64 1 ) %11 NEW_LINE store i32 1976701695 %13 NEW_LINE store * STRUCT 1 i64 bitcast ( * STRUCT 8 i8 i8 i8 i8 i8 i8 i8 i8 @g_94 to * STRUCT 1 i64 ) %14 NEW_LINE store * * STRUCT 1 i64 null %15 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x * i32 %12 , i64 0 , i64 1 NEW_LINE store * * i32 %18 %16 NEW_LINE store i32 0 %17 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %17 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %17 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x * i32 %12 , i64 0 , i64 %24 NEW_LINE store * i32 null %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %17 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %17 NEW_LINE br label %19 NEW_LINE 29: NEW_LINE %30 = load i32 %13 NEW_LINE %31 = add i32 %30 , -1 NEW_LINE store i32 %31 %13 NEW_LINE %32 = load * STRUCT 1 i64 %14 NEW_LINE store * STRUCT 1 i64 %32 %14 NEW_LINE %33 = load * * i32 %16 NEW_LINE store * i32 @g_12 %33 NEW_LINE store * i32 @g_12 @g_133 NEW_LINE %34 = load * i32 @g_133 NEW_LINE %35 = load i32 %34 NEW_LINE ret i32 %35 NEW_LINE }
define * i8 @func_35 ( * i8 %0 , i64 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 7 x i8 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 @g_39 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %7 NEW_LINE %12 = icmp slt i32 %11 , 7 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 7 x i8 %5 , i64 0 , i64 %15 NEW_LINE store i8 0 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %7 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %7 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE store i64 2 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i64 %4 NEW_LINE %23 = icmp sle i64 %22 , 6 NEW_LINE br i1 %23 , label %24 , label %37 NEW_LINE 24: NEW_LINE store i32 6 @g_39 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @g_39 NEW_LINE %27 = icmp sge i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %33 NEW_LINE 28: NEW_LINE store * i32 @g_39 %8 NEW_LINE store * * i32 %8 %9 NEW_LINE %29 = load * * i32 %9 NEW_LINE store * i32 @g_3 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 @g_39 NEW_LINE %32 = sub nsw i32 %31 , 1 NEW_LINE store i32 %32 @g_39 NEW_LINE br label %25 NEW_LINE 33: NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i64 %4 NEW_LINE %36 = add nsw i64 %35 , 1 NEW_LINE store i64 %36 %4 NEW_LINE br label %21 NEW_LINE 37: NEW_LINE %38 = getelementptr inbounds ARR 3 7 x i8 %5 , i64 0 , i64 2 NEW_LINE %39 = load i8 %38 NEW_LINE %40 = zext i8 %39 to i32 NEW_LINE %41 = load * i32 %6 NEW_LINE store i32 %40 %41 NEW_LINE %42 = load * i8 %3 NEW_LINE ret * i8 %42 NEW_LINE }
define void @func_1 ( * STRUCT 5 i32 i24 i24 i24 i16 noalias sret %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 4 x ARR 3 6 x * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 1384828491 %2 NEW_LINE %8 = bitcast * ARR 3 4 x ARR 3 6 x * i8 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 4 x ARR 3 6 x * i8 @__const.func_1.l_9 to * i8 ) , i64 192 , i1 false ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %16 NEW_LINE 11: NEW_LINE store i32 -2077259559 %6 NEW_LINE store * i32 %2 %7 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = load * i32 %7 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = xor i32 %14 , %12 NEW_LINE store i32 %15 %13 NEW_LINE br label %24 NEW_LINE 16: NEW_LINE %17 = load * i8 @g_7 NEW_LINE %18 = getelementptr inbounds ARR 3 4 x ARR 3 6 x * i8 %3 , i64 0 , i64 2 NEW_LINE %19 = getelementptr inbounds ARR 3 6 x * i8 %18 , i64 0 , i64 1 NEW_LINE %20 = load * i8 %19 NEW_LINE %21 = icmp eq * i8 %17 , %20 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = load volatile * i32 @g_11 NEW_LINE store i32 %22 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = bitcast * STRUCT 5 i32 i24 i24 i24 i16 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %25 , * i8 getelementptr inbounds ( STRUCT 19 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 @g_12 , i32 0 , i32 0 ) , i64 20 , i1 false ) NEW_LINE ret void NEW_LINE }
define * i32 @func_60 ( * * i32 %0 , i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca ARR 3 3 x ARR 3 5 x ARR 3 4 x * i32 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca i16 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store * * i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i32 223189363 %9 NEW_LINE %16 = bitcast * ARR 3 3 x ARR 3 5 x ARR 3 4 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 3 x ARR 3 5 x ARR 3 4 x * i32 @__const.func_60.l_292 to * i8 ) , i64 480 , i1 false ) NEW_LINE store i16 9869 %11 NEW_LINE store i16 -1 %12 NEW_LINE %17 = load i16 %12 NEW_LINE %18 = add i16 %17 , -1 NEW_LINE store i16 %18 %12 NEW_LINE %19 = load * * i32 %5 NEW_LINE %20 = load * i32 %19 NEW_LINE ret * i32 %20 NEW_LINE }
define i32 @func_27 ( i64 %0 , i32 %1 , i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * STRUCT 1 i32 NEW_LINE %10 = alloca ARR 3 9 x * * STRUCT 1 i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE store i32 %1 %13 NEW_LINE store i64 %0 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * STRUCT 1 i32 getelementptr inbounds ( ARR 3 5 x STRUCT 1 i32 bitcast ( * ARR 3 5 x STRUCT 2 i16 ARR 3 2 x i8 @g_59 to * ARR 3 5 x STRUCT 1 i32 ) , i64 0 , i64 2 ) %9 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x * * STRUCT 1 i32 %10 , i64 0 , i64 0 NEW_LINE store * * STRUCT 1 i32 %9 %14 NEW_LINE %15 = getelementptr inbounds * * STRUCT 1 i32 %14 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %15 NEW_LINE %16 = getelementptr inbounds * * STRUCT 1 i32 %15 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %16 NEW_LINE %17 = getelementptr inbounds * * STRUCT 1 i32 %16 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %17 NEW_LINE %18 = getelementptr inbounds * * STRUCT 1 i32 %17 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %18 NEW_LINE %19 = getelementptr inbounds * * STRUCT 1 i32 %18 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %19 NEW_LINE %20 = getelementptr inbounds * * STRUCT 1 i32 %19 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %20 NEW_LINE %21 = getelementptr inbounds * * STRUCT 1 i32 %20 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %21 NEW_LINE %22 = getelementptr inbounds * * STRUCT 1 i32 %21 , i64 1 NEW_LINE store * * STRUCT 1 i32 %9 %22 NEW_LINE store i32 1300745596 %11 NEW_LINE store * STRUCT 1 i32 null getelementptr inbounds ( ARR 3 4 x ARR 3 2 x ARR 3 2 x * STRUCT 1 i32 @g_68 , i64 0 , i64 2 , i64 0 , i64 0 ) NEW_LINE %23 = load i32 %11 NEW_LINE ret i32 %23 NEW_LINE }
define * i8 @func_63 ( * * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i8 NEW_LINE store * * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 @g_28 %6 NEW_LINE store * * i32 %6 %7 NEW_LINE store * i8 @g_10 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE store i32 -1 @g_28 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_28 NEW_LINE %12 = icmp sge i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE store * i8 @g_10 %3 NEW_LINE br label %41 NEW_LINE 14: NEW_LINE %15 = load i32 @g_28 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 @g_28 NEW_LINE br label %10 NEW_LINE 17: NEW_LINE %18 = load * * i32 %7 NEW_LINE store * i32 @g_28 %18 NEW_LINE store i32 0 @g_28 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @g_28 NEW_LINE %21 = icmp slt i32 %20 , 7 NEW_LINE br i1 %21 , label %22 , label %39 NEW_LINE 22: NEW_LINE %23 = load i32 @g_28 NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %26 NEW_LINE 25: NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load * i32 @g_29 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = icmp ne i32 %28 , 0 NEW_LINE br i1 %29 , label %30 , label %31 NEW_LINE 30: NEW_LINE br label %39 NEW_LINE 31: NEW_LINE %32 = load volatile * * i8 @g_74 NEW_LINE %33 = load volatile * * * i8 @g_76 NEW_LINE store volatile * * i8 %32 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 @g_28 NEW_LINE %36 = trunc i32 %35 to i16 NEW_LINE %37 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %36 , i16 signext 5 ) NEW_LINE %38 = sext i16 %37 to i32 NEW_LINE store i32 %38 @g_28 NEW_LINE br label %19 NEW_LINE 39: NEW_LINE %40 = load * i8 %8 NEW_LINE store * i8 %40 %3 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load * i8 %3 NEW_LINE ret * i8 %42 NEW_LINE }
define * i32 @func_52 ( * i32 %0 , * i32 %1 , * i32 %2 , i64 %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i16 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca ARR 3 7 x * i32 NEW_LINE %15 = alloca ARR 3 8 x * i32 NEW_LINE %16 = alloca * * i32 NEW_LINE %17 = alloca * * i32 NEW_LINE %18 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i16 @g_348 %11 NEW_LINE store i32 -1942938147 %12 NEW_LINE store i32 1 %13 NEW_LINE %19 = bitcast * ARR 3 7 x * i32 %14 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_52.l_863 to * i8 ) , i64 56 , i1 false ) NEW_LINE %20 = bitcast * ARR 3 8 x * i32 %15 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %20 , i8 0 , i64 64 , i1 false ) NEW_LINE store * * i32 null %16 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 4 x ARR 3 3 x * i32 @g_176 , i64 0 , i64 0 , i64 0 ) %17 NEW_LINE %21 = load * i32 %7 NEW_LINE %22 = load * * i32 %17 NEW_LINE store * i32 %21 %22 NEW_LINE %23 = load volatile * * i32 @g_867 NEW_LINE store * i32 %21 %23 NEW_LINE %24 = load volatile * * i32 @g_867 NEW_LINE %25 = load * i32 %24 NEW_LINE ret * i32 %25 NEW_LINE }
define i64 @func_44 ( i16 zeroext %0 , * i32 %1 , * i32 %2 , i16 zeroext %3 , * i8 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * * i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i8 %4 %10 NEW_LINE store i32 -26 @g_503 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @g_503 NEW_LINE %16 = icmp ne i32 %15 , 14 NEW_LINE br i1 %16 , label %17 , label %41 NEW_LINE 17: NEW_LINE store i32 173329988 %11 NEW_LINE store i8 0 @g_87 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i8 @g_87 NEW_LINE %20 = zext i8 %19 to i32 NEW_LINE %21 = icmp eq i32 %20 , 31 NEW_LINE br i1 %21 , label %22 , label %28 NEW_LINE 22: NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x i32 @g_535 , i64 0 , i64 3 ) %12 NEW_LINE store * * i32 @g_251 %13 NEW_LINE %23 = load * i32 %12 NEW_LINE %24 = load * * i32 %13 NEW_LINE store * i32 %23 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i8 @g_87 NEW_LINE %27 = add i8 %26 , 1 NEW_LINE store i8 %27 @g_87 NEW_LINE br label %18 NEW_LINE 28: NEW_LINE %29 = load i32 %11 NEW_LINE %30 = load * i32 %7 NEW_LINE store i32 %29 %30 NEW_LINE %31 = load * i32 %7 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = icmp ne i32 %32 , 0 NEW_LINE br i1 %33 , label %34 , label %35 NEW_LINE 34: NEW_LINE br label %36 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 @g_503 NEW_LINE %38 = trunc i32 %37 to i16 NEW_LINE %39 = call signext i16 @safe_add_func_int16_t_s_s ( i16 signext %38 , i16 signext 5 ) NEW_LINE %40 = sext i16 %39 to i32 NEW_LINE store i32 %40 @g_503 NEW_LINE br label %14 NEW_LINE 41: NEW_LINE %42 = load * * i64 @g_839 NEW_LINE %43 = load * i64 %42 NEW_LINE %44 = load i64 %43 NEW_LINE ret i64 %44 NEW_LINE }
define * * i16 @func_40 ( * * i16 %0 ) { NEW_LINE %2 = alloca * * i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 5 x * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i32 NEW_LINE store * * i16 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( STRUCT 7 i64 i32 i64 i24 i32 i8 i16 bitcast ( * STRUCT 9 i64 i32 i64 i8 i8 i8 i32 i8 i16 @g_440 to * STRUCT 7 i64 i32 i64 i24 i32 i8 i16 ) , i32 0 , i32 1 ) %3 NEW_LINE %7 = bitcast * ARR 3 5 x * i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 , i8 0 , i64 40 , i1 false ) NEW_LINE %8 = bitcast * i8 %7 to * ARR 3 5 x * i32 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x * i32 %8 , i32 0 , i32 0 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_193 to * i8 ) , i64 16 ) to * i32 ) %9 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x * i32 %8 , i32 0 , i32 1 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_193 to * i8 ) , i64 16 ) to * i32 ) %10 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x * i32 %8 , i32 0 , i32 2 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_193 to * i8 ) , i64 16 ) to * i32 ) %11 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x * i32 %8 , i32 0 , i32 3 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_193 to * i8 ) , i64 16 ) to * i32 ) %12 NEW_LINE %13 = getelementptr inbounds ARR 3 5 x * i32 %8 , i32 0 , i32 4 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 10 x i32 @g_193 to * i8 ) , i64 16 ) to * i32 ) %13 NEW_LINE store i16 -4200 %5 NEW_LINE %14 = load i16 %5 NEW_LINE %15 = add i16 %14 , -1 NEW_LINE store i16 %15 %5 NEW_LINE ret * * i16 getelementptr inbounds ( ARR 3 4 x * i16 @g_23 , i64 0 , i64 0 ) NEW_LINE }
define * i8 @func_47 ( i32 %0 , i64 %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i64 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca STRUCT 2 i64 i32 NEW_LINE store i32 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store * i64 @g_62 %9 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x ARR 3 7 x ARR 3 4 x i32 @g_70 , i64 0 , i64 2 , i64 3 , i64 0 ) %10 NEW_LINE store * i32 @g_219 %11 NEW_LINE %13 = load i8 @g_20 NEW_LINE %14 = load i64 %6 NEW_LINE %15 = load i8 @g_16 NEW_LINE %16 = sext i8 %15 to i64 NEW_LINE %17 = load * i64 %9 NEW_LINE store i64 %16 %17 NEW_LINE store * i32 %5 @g_67 NEW_LINE %18 = icmp eq * i32 %5 , %5 NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = load * i64 getelementptr inbounds ( ARR 3 3 x * i64 @g_68 , i64 0 , i64 1 ) NEW_LINE %22 = load * i32 %10 NEW_LINE store i32 1935618467 %22 NEW_LINE %23 = call * i8 @func_63 ( i64 %20 , * i64 %21 , i32 1935618467 ) NEW_LINE %24 = bitcast * STRUCT 2 i64 i32 %12 to * i8 NEW_LINE %25 = bitcast * STRUCT 3 i32 i32 i32 bitcast ( * STRUCT 9 i32 i8 i8 i8 i8 i8 i8 i8 i8 @g_89 to * STRUCT 3 i32 i32 i32 ) to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %24 , * i8 %25 , i64 12 , i1 false ) NEW_LINE %26 = getelementptr inbounds STRUCT 2 i64 i32 %12 , i32 0 , i32 0 NEW_LINE %27 = load i64 %26 NEW_LINE %28 = getelementptr inbounds STRUCT 2 i64 i32 %12 , i32 0 , i32 1 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call * i32 @func_55 ( i8 signext %13 , i64 %16 , * i8 %23 , * i8 @g_20 , i64 %27 , i32 %29 ) NEW_LINE store * i32 %30 %11 NEW_LINE %31 = load * i8 %8 NEW_LINE ret * i8 %31 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i64 NEW_LINE store i32 -387616869 %1 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 2 x i64 @g_9 , i64 0 , i64 0 ) %2 NEW_LINE %3 = load i32 %1 NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE %5 = load volatile i8 @g_7 NEW_LINE %6 = load i32 %1 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = load * i64 %2 NEW_LINE store i64 %7 %8 NEW_LINE %9 = call zeroext i8 @func_5 ( i64 %7 ) NEW_LINE %10 = call signext i8 @safe_sub_func_int8_t_s_s ( i8 signext %4 , i8 signext %9 ) NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = load * * * * i32 @g_1405 NEW_LINE %13 = load * * * i32 %12 NEW_LINE %14 = load * * i32 %13 NEW_LINE %15 = load * i32 %14 NEW_LINE store i32 %11 %15 NEW_LINE store i8 0 @g_129 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i8 @g_129 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = icmp slt i32 %18 , 8 NEW_LINE br i1 %19 , label %20 , label %43 NEW_LINE 20: NEW_LINE store i8 0 @g_682 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i8 @g_682 NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE %24 = icmp slt i32 %23 , 6 NEW_LINE br i1 %24 , label %25 , label %37 NEW_LINE 25: NEW_LINE %26 = load i8 @g_129 NEW_LINE %27 = sext i8 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 8 x ARR 3 6 x * i8 @g_1123 , i64 0 , i64 %27 NEW_LINE %29 = load i8 @g_682 NEW_LINE %30 = zext i8 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 6 x * i8 %28 , i64 0 , i64 %30 NEW_LINE store * i8 @g_1151 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i8 @g_682 NEW_LINE %34 = zext i8 %33 to i32 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE %36 = trunc i32 %35 to i8 NEW_LINE store i8 %36 @g_682 NEW_LINE br label %21 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = load i8 @g_129 NEW_LINE %40 = sext i8 %39 to i32 NEW_LINE %41 = add nsw i32 %40 , 1 NEW_LINE %42 = trunc i32 %41 to i8 NEW_LINE store i8 %42 @g_129 NEW_LINE br label %16 NEW_LINE 43: NEW_LINE ret i32 -4913 NEW_LINE }
define i64 @func_14 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 4 x i64 @g_53 , i64 0 , i64 1 ) %4 NEW_LINE store i32 -1 %5 NEW_LINE %6 = load i8 %2 NEW_LINE %7 = load i32 getelementptr inbounds ( ARR 3 7 x i32 @g_70 , i64 0 , i64 3 ) NEW_LINE %8 = call zeroext i16 @safe_lshift_func_uint16_t_u_u ( i16 zeroext 0 , i32 7 ) NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = load i8 %2 NEW_LINE %11 = zext i8 %10 to i32 NEW_LINE %12 = call i32 @safe_sub_func_int32_t_s_s ( i32 0 , i32 %11 ) NEW_LINE %13 = call i32 @safe_div_func_uint32_t_u_u ( i32 %9 , i32 %12 ) NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE %15 = xor i1 %14 , true NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = load i8 %2 NEW_LINE %18 = zext i8 %17 to i32 NEW_LINE %19 = load volatile i32 getelementptr inbounds ( ARR 3 5 x i32 @g_335 , i64 0 , i64 2 ) NEW_LINE %20 = load * i64 %4 NEW_LINE store * i64 %20 @g_337 NEW_LINE %21 = load * i64 %4 NEW_LINE %22 = icmp ne * i64 %20 , %21 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE %24 = icmp ult i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = icmp uge i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = or i32 %19 , %27 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE %30 = call zeroext i8 @safe_lshift_func_uint8_t_u_s ( i8 zeroext %29 , i32 0 ) NEW_LINE %31 = zext i8 %30 to i32 NEW_LINE %32 = xor i32 %18 , %31 NEW_LINE %33 = icmp sge i32 %16 , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = load * i32 @g_259 NEW_LINE store i32 %34 %35 NEW_LINE %36 = load i8 %2 NEW_LINE %37 = zext i8 %36 to i32 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = or i32 %38 , %37 NEW_LINE store i32 %39 %5 NEW_LINE %40 = load volatile i8 @g_279 NEW_LINE %41 = zext i8 %40 to i64 NEW_LINE ret i64 %41 NEW_LINE }
define * i32 @func_56 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store i32 -554212744 %4 NEW_LINE %8 = load * i32 %3 NEW_LINE %9 = load volatile * * i32 @g_954 NEW_LINE store * i32 %8 %9 NEW_LINE store i64 27 @g_173 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 @g_173 NEW_LINE %12 = icmp sgt i64 %11 , 4 NEW_LINE br i1 %12 , label %13 , label %28 NEW_LINE 13: NEW_LINE store i16 -16175 %5 NEW_LINE %14 = load i8 %2 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = load i16 %5 NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE %18 = xor i32 %17 , %15 NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE store i16 %19 %5 NEW_LINE %20 = sext i16 %19 to i32 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = and i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 @g_173 NEW_LINE %25 = trunc i64 %24 to i8 NEW_LINE %26 = call signext i8 @safe_sub_func_int8_t_s_s ( i8 signext %25 , i8 signext 3 ) NEW_LINE %27 = sext i8 %26 to i64 NEW_LINE store i64 %27 @g_173 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE store i8 0 @g_679 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i8 @g_679 NEW_LINE %31 = zext i8 %30 to i32 NEW_LINE %32 = icmp sle i32 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %46 NEW_LINE 33: NEW_LINE store i8 -5 %6 NEW_LINE %34 = load i8 %6 NEW_LINE %35 = zext i8 %34 to i32 NEW_LINE %36 = load i8 @g_679 NEW_LINE %37 = zext i8 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 1 x i32 @g_926 , i64 0 , i64 %37 NEW_LINE %39 = load i32 %38 NEW_LINE %40 = and i32 %39 , %35 NEW_LINE store i32 %40 %38 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i8 @g_679 NEW_LINE %43 = zext i8 %42 to i32 NEW_LINE %44 = add nsw i32 %43 , 1 NEW_LINE %45 = trunc i32 %44 to i8 NEW_LINE store i8 %45 @g_679 NEW_LINE br label %29 NEW_LINE 46: NEW_LINE %47 = load * i32 %3 NEW_LINE ret * i32 %47 NEW_LINE }
define zeroext i8 @func_41 ( i32 %0 , * i8 %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 4 x i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca * i32 NEW_LINE store i32 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store * i8 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store i32 -1 %9 NEW_LINE %14 = bitcast * ARR 3 4 x ARR 3 4 x i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 4 x ARR 3 4 x i32 @__const.func_41.l_1628 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 -1 %5 NEW_LINE store i64 11 @g_476 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 @g_476 NEW_LINE %17 = icmp sgt i64 %16 , -6 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE store * i32 @g_1597 %13 NEW_LINE %19 = getelementptr inbounds ARR 3 4 x ARR 3 4 x i32 %10 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 4 x i32 %19 , i64 0 , i64 0 NEW_LINE store i32 0 %20 NEW_LINE %21 = load volatile * i32 @g_1629 NEW_LINE store i32 0 %21 NEW_LINE %22 = load * i32 %13 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = xor i64 %24 , 3402064252 NEW_LINE %26 = trunc i64 %25 to i32 NEW_LINE store i32 %26 %22 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 @g_476 NEW_LINE %29 = add nsw i64 %28 , -1 NEW_LINE store i64 %29 @g_476 NEW_LINE br label %15 NEW_LINE 30: NEW_LINE ret i8 -1 NEW_LINE }
define signext i8 @func_96 ( i32 %0 , i32 %1 , i32 %2 , * i8 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca ARR 3 6 x * i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i8 %3 %8 NEW_LINE store * i32 @g_69 %9 NEW_LINE store * i32 @g_69 %10 NEW_LINE store * i32 @g_69 %11 NEW_LINE store i8 0 %12 NEW_LINE store * i32 @g_69 %13 NEW_LINE store i32 1 %14 NEW_LINE store * i32 @g_69 %15 NEW_LINE store * i32 %14 %16 NEW_LINE store * i32 @g_69 %17 NEW_LINE %21 = bitcast * ARR 3 6 x * i32 %18 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %21 , i8 0 , i64 48 , i1 false ) NEW_LINE store i32 0 %19 NEW_LINE %22 = load i32 %19 NEW_LINE %23 = add i32 %22 , 1 NEW_LINE store i32 %23 %19 NEW_LINE store i32 0 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %7 NEW_LINE %26 = icmp ult i32 %25 , 6 NEW_LINE br i1 %26 , label %27 , label %34 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = zext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 6 x * i32 %18 , i64 0 , i64 %29 NEW_LINE store * i32 @g_69 %30 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %7 NEW_LINE %33 = add i32 %32 , 1 NEW_LINE store i32 %33 %7 NEW_LINE br label %24 NEW_LINE 34: NEW_LINE %35 = load * i32 %9 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = trunc i32 %36 to i8 NEW_LINE ret i8 %37 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 9 x * i32 NEW_LINE %2 = alloca * * i32 NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca ARR 3 2 x i16 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = bitcast * ARR 3 9 x * i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_1.l_3 to * i8 ) , i64 72 , i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 9 x * i32 %1 , i64 0 , i64 3 NEW_LINE store * * i32 %12 %2 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 1 x i64 @g_11 , i64 0 , i64 0 ) %3 NEW_LINE store i16 -21119 %4 NEW_LINE store * i16 getelementptr inbounds ( ARR 3 7 x i16 @g_23 , i64 0 , i64 2 ) %5 NEW_LINE store * i16 null %6 NEW_LINE store * i16 @g_29 %7 NEW_LINE store i64 -8 %9 NEW_LINE store i32 0 %10 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %10 NEW_LINE %15 = icmp slt i32 %14 , 2 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i32 %10 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 2 x i16 %8 , i64 0 , i64 %18 NEW_LINE store i16 0 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %10 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %10 NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = load * * i32 %2 NEW_LINE store * i32 null %24 NEW_LINE %25 = load i8 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x ARR 3 10 x i8 @g_168 , i64 0 , i64 1 , i64 0 , i64 8 ) NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE ret i32 %26 NEW_LINE }
define * i16 @func_88 ( i8 signext %0 , * i32 %1 , i32 %2 , * i8 %3 , i32 %4 ) { NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i16 NEW_LINE store i8 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i64 -7188160557292081809 %11 NEW_LINE store * i16 @g_146 %12 NEW_LINE %13 = load i64 %11 NEW_LINE %14 = icmp uge i64 %13 , -10 NEW_LINE %15 = zext i1 %14 to i32 NEW_LINE %16 = load * i32 %7 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load i64 %11 NEW_LINE %19 = xor i64 %18 , -3638543213312985193 NEW_LINE %20 = load i64 %11 NEW_LINE %21 = load i64 %11 NEW_LINE %22 = and i64 0 , %21 NEW_LINE %23 = load i64 %11 NEW_LINE %24 = icmp ule i64 %22 , %23 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = trunc i32 %25 to i8 NEW_LINE %27 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext %26 , i32 7 ) NEW_LINE %28 = zext i8 %27 to i64 NEW_LINE %29 = icmp ne i64 %20 , %28 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = icmp ult i64 %19 , %31 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = xor i64 59395 , %34 NEW_LINE %36 = trunc i64 %35 to i16 NEW_LINE %37 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %36 , i16 zeroext 9846 ) NEW_LINE %38 = zext i16 %37 to i32 NEW_LINE %39 = icmp sle i32 %17 , %38 NEW_LINE %40 = zext i1 %39 to i32 NEW_LINE %41 = xor i32 %15 , %40 NEW_LINE %42 = sext i32 %41 to i64 NEW_LINE %43 = load i64 %11 NEW_LINE %44 = icmp ult i64 %42 , %43 NEW_LINE %45 = zext i1 %44 to i32 NEW_LINE %46 = load * i32 %7 NEW_LINE store i32 %45 %46 NEW_LINE %47 = load * i16 %12 NEW_LINE ret * i16 %47 NEW_LINE }
define i64 @func_40 ( i64 %0 , i64 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca ARR 3 6 x * i32 NEW_LINE %15 = alloca i8 NEW_LINE %16 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 1 x i32 @g_47 , i64 0 , i64 0 , i64 0 ) %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 1 x i32 @g_47 , i64 0 , i64 0 , i64 0 ) %6 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 1 x i32 @g_47 , i64 0 , i64 0 , i64 0 ) %7 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 1 x i32 @g_47 , i64 0 , i64 0 , i64 0 ) %8 NEW_LINE store i32 4 %9 NEW_LINE store * i32 %9 %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 null %12 NEW_LINE store * i32 %9 %13 NEW_LINE %17 = getelementptr inbounds ARR 3 6 x * i32 %14 , i64 0 , i64 0 NEW_LINE store * i32 null %17 NEW_LINE %18 = getelementptr inbounds * i32 %17 , i64 1 NEW_LINE store * i32 null %18 NEW_LINE %19 = getelementptr inbounds * i32 %18 , i64 1 NEW_LINE store * i32 %9 %19 NEW_LINE %20 = getelementptr inbounds * i32 %19 , i64 1 NEW_LINE store * i32 null %20 NEW_LINE %21 = getelementptr inbounds * i32 %20 , i64 1 NEW_LINE store * i32 null %21 NEW_LINE %22 = getelementptr inbounds * i32 %21 , i64 1 NEW_LINE store * i32 %9 %22 NEW_LINE store i8 -7 %15 NEW_LINE %23 = load i8 %15 NEW_LINE %24 = add i8 %23 , 1 NEW_LINE store i8 %24 %15 NEW_LINE %25 = load i64 %3 NEW_LINE ret i64 %25 NEW_LINE }
define * * i64 @func_60 ( * * i64 %0 , i32 %1 , * * i64 %2 , * * i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca * * i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * i64 NEW_LINE %9 = alloca * * i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 6 x ARR 3 9 x * i32 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store * * i64 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * * i64 %2 %8 NEW_LINE store * * i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_145 %11 NEW_LINE %16 = bitcast * ARR 3 6 x ARR 3 9 x * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 6 x ARR 3 9 x * i32 @__const.func_60.l_164 to * i8 ) , i64 432 , i1 false ) NEW_LINE store i64 919120451353526829 %13 NEW_LINE %17 = load i64 %13 NEW_LINE %18 = add i64 %17 , -1 NEW_LINE store i64 %18 %13 NEW_LINE ret * * i64 @g_78 NEW_LINE }
define * i32 @func_34 ( i64 %0 , i16 zeroext %1 , * i32 %2 ) { NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca * * i32 NEW_LINE store i64 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i16 0 %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 null %9 NEW_LINE store * * i32 null %10 NEW_LINE store * * i32 @g_403 %11 NEW_LINE %12 = load i32 @g_41 NEW_LINE %13 = add i32 %12 , -1 NEW_LINE store i32 %13 @g_41 NEW_LINE %14 = load i32 @g_41 NEW_LINE %15 = load * i32 %8 NEW_LINE %16 = load i32 @g_4 NEW_LINE %17 = load * i32 %6 NEW_LINE %18 = load i16 %5 NEW_LINE %19 = trunc i16 %18 to i8 NEW_LINE %20 = call zeroext i8 @safe_rshift_func_uint8_t_u_s ( i8 zeroext %19 , i32 7 ) NEW_LINE %21 = zext i8 %20 to i32 NEW_LINE %22 = load * i32 %9 NEW_LINE %23 = icmp ne * i32 null , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = load i16 %5 NEW_LINE %26 = trunc i16 %25 to i8 NEW_LINE %27 = load i32 @g_4 NEW_LINE %28 = call * i32 @func_57 ( i32 %24 , i8 signext %26 , i32 %27 ) NEW_LINE %29 = load i64 getelementptr inbounds ( ARR 3 8 x ARR 3 3 x ARR 3 4 x i64 @g_289 , i64 0 , i64 3 , i64 1 , i64 0 ) NEW_LINE %30 = trunc i64 %29 to i16 NEW_LINE %31 = call i64 @func_49 ( i32 %16 , * i32 %17 , i32 %21 , * i32 %28 , i16 zeroext %30 ) NEW_LINE %32 = icmp ugt i64 %31 , 1 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE %34 = trunc i32 %33 to i16 NEW_LINE %35 = load * i32 %8 NEW_LINE %36 = call * i32 @func_44 ( i32 %14 , * i32 %15 , i16 signext %34 , * i32 %35 ) NEW_LINE %37 = load * * i32 %11 NEW_LINE store * i32 %36 %37 NEW_LINE %38 = load * * i32 @g_188 NEW_LINE %39 = load * i32 %38 NEW_LINE ret * i32 %39 NEW_LINE }
define signext i16 @func_10 ( * i32 %0 , * i32 %1 , * i32 %2 , i16 signext %3 , * i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca * * i64 NEW_LINE %14 = alloca * * * i64 NEW_LINE %15 = alloca * * * * i64 NEW_LINE %16 = alloca i32 NEW_LINE store * i32 %0 %7 NEW_LINE store * i32 %1 %8 NEW_LINE store * i32 %2 %9 NEW_LINE store i16 %3 %10 NEW_LINE store * i32 %4 %11 NEW_LINE store * i64 @g_56 %12 NEW_LINE store * * i64 %12 %13 NEW_LINE store * * * i64 %13 %14 NEW_LINE store * * * * i64 %14 %15 NEW_LINE %17 = load * * * * i64 %15 NEW_LINE %18 = load volatile * * * * * i64 @g_1147 NEW_LINE store * * * * i64 %17 %18 NEW_LINE store i16 -18 @g_984 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i16 @g_984 NEW_LINE %21 = zext i16 %20 to i32 NEW_LINE %22 = icmp slt i32 %21 , 4 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE store i32 -8 %16 NEW_LINE %24 = load i32 %16 NEW_LINE %25 = add i32 %24 , 1 NEW_LINE store i32 %25 %16 NEW_LINE %26 = load i16 %10 NEW_LINE store i16 %26 %6 NEW_LINE br label %43 NEW_LINE 27: NEW_LINE %28 = load i16 @g_984 NEW_LINE %29 = add i16 %28 , 1 NEW_LINE store i16 %29 @g_984 NEW_LINE br label %19 NEW_LINE 30: NEW_LINE store i8 -1 @g_135 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i8 @g_135 NEW_LINE %33 = zext i8 %32 to i32 NEW_LINE %34 = icmp eq i32 %33 , 2 NEW_LINE br i1 %34 , label %35 , label %41 NEW_LINE 35: NEW_LINE %36 = load * i16 @g_550 NEW_LINE %37 = load volatile i16 %36 NEW_LINE store i16 %37 %6 NEW_LINE br label %43 NEW_LINE 38: NEW_LINE %39 = load i8 @g_135 NEW_LINE %40 = add i8 %39 , 1 NEW_LINE store i8 %40 @g_135 NEW_LINE br label %31 NEW_LINE 41: NEW_LINE %42 = load i16 %10 NEW_LINE store i16 %42 %6 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i16 %6 NEW_LINE ret i16 %44 NEW_LINE }
define i64 @func_12 ( * * i32 %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i16 NEW_LINE store * * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i16 -12200 %7 NEW_LINE %8 = load i16 %7 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = call i32 @func_17 ( i32 %9 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE %13 = xor i1 %12 , true NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE %16 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %15 , i32 11 ) NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE %18 = and i32 %10 , %17 NEW_LINE %19 = load i32 @g_980 NEW_LINE %20 = or i32 %19 , %18 NEW_LINE store i32 %20 @g_980 NEW_LINE %21 = load * * i8 @g_702 NEW_LINE %22 = load volatile * i8 %21 NEW_LINE %23 = load volatile i8 %22 NEW_LINE %24 = zext i8 %23 to i32 NEW_LINE %25 = load * * i8 @g_861 NEW_LINE %26 = load * i8 %25 NEW_LINE %27 = load i8 %26 NEW_LINE %28 = zext i8 %27 to i32 NEW_LINE %29 = load i16 %7 NEW_LINE %30 = load * * * * * i32 @g_343 NEW_LINE %31 = load * * * * i32 %30 NEW_LINE %32 = bitcast * * * * i32 %31 to * i8 NEW_LINE %33 = icmp eq * i8 null , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = sext i32 %34 to i64 NEW_LINE %36 = xor i64 1 , %35 NEW_LINE %37 = icmp ne i64 %36 , 0 NEW_LINE br i1 %37 , label %41 , label %38 NEW_LINE 38: NEW_LINE %39 = load i32 %6 NEW_LINE %40 = icmp ne i32 %39 , 0 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = phi i1 ARR 2 true %3 , ARR 2 %40 %38 NEW_LINE %43 = zext i1 %42 to i32 NEW_LINE %44 = icmp sge i32 %28 , %43 NEW_LINE %45 = zext i1 %44 to i32 NEW_LINE %46 = icmp slt i32 %24 , %45 NEW_LINE %47 = zext i1 %46 to i32 NEW_LINE %48 = load i32 @g_980 NEW_LINE %49 = xor i32 %48 , %47 NEW_LINE store i32 %49 @g_980 NEW_LINE %50 = load i16 %7 NEW_LINE %51 = zext i16 %50 to i64 NEW_LINE ret i64 %51 NEW_LINE }
define i64 @func_18 ( i64 %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 1 x ARR 3 1 x * * * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * * i8 getelementptr inbounds ( ARR 3 9 x ARR 3 6 x * i8 @g_86 , i64 0 , i64 6 , i64 3 ) %5 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %30 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %8 NEW_LINE %15 = icmp slt i32 %14 , 1 NEW_LINE br i1 %15 , label %16 , label %26 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 1 x ARR 3 1 x * * * i8 %6 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %8 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1 x * * * i8 %19 , i64 0 , i64 %21 NEW_LINE store * * * i8 %5 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %8 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %8 NEW_LINE br label %13 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %7 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = getelementptr inbounds ARR 3 1 x ARR 3 1 x * * * i8 %6 , i64 0 , i64 0 NEW_LINE %32 = getelementptr inbounds ARR 3 1 x * * * i8 %31 , i64 0 , i64 0 NEW_LINE %33 = load * * * i8 %32 NEW_LINE %34 = load volatile * * * * i8 @g_933 NEW_LINE store * * * i8 %33 %34 NEW_LINE %35 = load i32 getelementptr inbounds ( STRUCT 7 i32 i16 i8 i16 i16 i32 i32 bitcast ( * STRUCT 8 i32 i8 i8 i8 i16 i16 i32 i32 @g_815 to * STRUCT 7 i32 i16 i8 i16 i16 i32 i32 ) , i32 0 , i32 5 ) NEW_LINE %36 = zext i32 %35 to i64 NEW_LINE ret i64 %36 NEW_LINE }
define * i32 @func_65 ( * i64 %0 , i64 %1 , * i64 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca * * i16 NEW_LINE %9 = alloca * * * i16 NEW_LINE %10 = alloca * * * * i16 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca STRUCT 1 * i8 NEW_LINE store * i64 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store * i64 %2 %7 NEW_LINE store * * i16 getelementptr inbounds ( ARR 3 3 x * i16 @g_222 , i64 0 , i64 0 ) %8 NEW_LINE store * * * i16 %8 %9 NEW_LINE store * * * * i16 null %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x i32 @g_5 , i64 0 , i64 0 ) %11 NEW_LINE store * * i32 @g_341 %12 NEW_LINE %15 = load * * * i16 %9 NEW_LINE store * * * i16 %15 %9 NEW_LINE store i64 0 @g_145 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 @g_145 NEW_LINE %18 = icmp ule i64 %17 , 52 NEW_LINE br i1 %18 , label %19 , label %24 NEW_LINE 19: NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x STRUCT 7 i32 i8 i8 i64 i32 i16 i8 bitcast ( * ARR 3 4 x STRUCT 8 i32 i8 i8 i64 i32 i8 i8 i8 @g_236 to * ARR 3 4 x STRUCT 7 i32 i8 i8 i64 i32 i16 i8 ) , i64 0 , i64 2 , i32 4 ) %13 NEW_LINE %20 = load * i32 %13 NEW_LINE store * i32 %20 %4 NEW_LINE br label %29 NEW_LINE 21: NEW_LINE %22 = load i64 @g_145 NEW_LINE %23 = add i64 %22 , 1 NEW_LINE store i64 %23 @g_145 NEW_LINE br label %16 NEW_LINE 24: NEW_LINE %25 = bitcast * STRUCT 1 * i8 %14 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %25 , * i8 bitcast ( * STRUCT 1 * i8 @g_424 to * i8 ) , i64 8 , i1 true ) NEW_LINE %26 = load * i32 %11 NEW_LINE %27 = load * * i32 %12 NEW_LINE store * i32 %26 %27 NEW_LINE %28 = load * i32 %11 NEW_LINE store * i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load * i32 %4 NEW_LINE ret * i32 %30 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1 x i16 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE store * i32 null %3 NEW_LINE store * i32 @g_3 %4 NEW_LINE store * i32 null %5 NEW_LINE store * i32 @g_14 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1 x i16 %2 , i64 0 , i64 %14 NEW_LINE store i16 -3 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %7 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i32 0 @g_3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @g_3 NEW_LINE %22 = icmp sle i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %29 NEW_LINE 23: NEW_LINE store i16 6 %8 NEW_LINE %24 = load i16 %8 NEW_LINE %25 = zext i16 %24 to i32 NEW_LINE store i32 %25 %1 NEW_LINE br label %40 NEW_LINE 26: NEW_LINE %27 = load i32 @g_3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 @g_3 NEW_LINE br label %20 NEW_LINE 29: NEW_LINE %30 = load i32 @g_3 NEW_LINE %31 = load * i32 %4 NEW_LINE store i32 %30 %31 NEW_LINE %32 = load i8 getelementptr inbounds ( ARR 3 5 x i8 @g_9 , i64 0 , i64 4 ) NEW_LINE %33 = add i8 %32 , 1 NEW_LINE store i8 %33 getelementptr inbounds ( ARR 3 5 x i8 @g_9 , i64 0 , i64 4 ) NEW_LINE %34 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext %32 , i32 1 ) NEW_LINE %35 = zext i8 %34 to i32 NEW_LINE %36 = xor i32 %30 , %35 NEW_LINE %37 = load * i32 %6 NEW_LINE store i32 %36 %37 NEW_LINE %38 = load * i32 %4 NEW_LINE %39 = load i32 %38 NEW_LINE store i32 %39 %1 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %1 NEW_LINE ret i32 %41 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i8 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE store i8 113 %1 NEW_LINE store i32 -1256464388 %2 NEW_LINE store i32 1 @g_4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_4 NEW_LINE %14 = icmp sle i32 %13 , 6 NEW_LINE br i1 %14 , label %15 , label %37 NEW_LINE 15: NEW_LINE store * i32 @g_6 %3 NEW_LINE store * i32 @g_6 %4 NEW_LINE store * i32 @g_6 %5 NEW_LINE store * i32 @g_6 %6 NEW_LINE store * i32 @g_6 %7 NEW_LINE store * i32 null %8 NEW_LINE store * i32 @g_6 %9 NEW_LINE store * i32 @g_6 %10 NEW_LINE %16 = load i8 %1 NEW_LINE %17 = add i8 %16 , 1 NEW_LINE store i8 %17 %1 NEW_LINE %18 = load i32 @g_4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 7 x i32 @g_2 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = trunc i32 %21 to i8 NEW_LINE %23 = call * i32 @func_17 ( i8 zeroext %22 ) NEW_LINE %24 = load * * * i32 @g_934 NEW_LINE %25 = load * * i32 %24 NEW_LINE store * i32 %23 %25 NEW_LINE %26 = load volatile * * STRUCT 1 i32 @g_406 NEW_LINE %27 = load * STRUCT 1 i32 %26 NEW_LINE %28 = icmp eq * STRUCT 1 i32 %27 , getelementptr inbounds ( ARR 3 8 x STRUCT 1 i32 @g_419 , i64 0 , i64 1 ) NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = trunc i32 %29 to i16 NEW_LINE %31 = call zeroext i16 @safe_lshift_func_uint16_t_u_u ( i16 zeroext %30 , i32 6 ) NEW_LINE %32 = zext i16 %31 to i32 NEW_LINE %33 = load * i32 %3 NEW_LINE store i32 %32 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 @g_4 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 @g_4 NEW_LINE br label %12 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE ret i32 %38 NEW_LINE }
define i32 @func_62 ( i16 zeroext %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * * i8 NEW_LINE %10 = alloca ARR 3 7 x * * * * i32 NEW_LINE %11 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i16 4721 %5 NEW_LINE store i32 -9 @g_316 NEW_LINE store i32 0 @g_458 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_458 NEW_LINE %14 = icmp ule i32 %13 , 6 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE store * i8 null %6 NEW_LINE store * * i8 %6 %7 NEW_LINE store * i8 @g_96 %8 NEW_LINE store * * i8 %8 %9 NEW_LINE %16 = bitcast * ARR 3 7 x * * * * i32 %10 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %16 , i8 0 , i64 56 , i1 false ) NEW_LINE %17 = load * i8 %6 NEW_LINE %18 = load * * i8 %7 NEW_LINE store * i8 %17 %18 NEW_LINE %19 = load * * i8 %9 NEW_LINE store * i8 null %19 NEW_LINE %20 = icmp ne * i8 %17 , null NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE %22 = load * * * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 2 x * * * i32 @g_703 , i64 0 , i64 3 , i64 1 ) NEW_LINE store * * * i32 %22 getelementptr inbounds ( ARR 3 6 x ARR 3 2 x * * * i32 @g_703 , i64 0 , i64 2 , i64 1 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @g_458 NEW_LINE %25 = add i32 %24 , 1 NEW_LINE store i32 %25 @g_458 NEW_LINE br label %12 NEW_LINE 26: NEW_LINE %27 = load i16 %5 NEW_LINE %28 = sext i16 %27 to i32 NEW_LINE ret i32 %28 NEW_LINE }
define i32 @func_29 ( i8 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i8 1 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 -1 %7 NEW_LINE %8 = load i8 %5 NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i8 getelementptr inbounds ( ARR 3 4 x i8 @g_237 , i64 0 , i64 0 ) NEW_LINE %13 = zext i8 %12 to i32 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 true %2 , ARR 2 %14 %11 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE %18 = trunc i32 %17 to i8 NEW_LINE %19 = load i8 %5 NEW_LINE %20 = call signext i8 @safe_sub_func_int8_t_s_s ( i8 signext %18 , i8 signext %19 ) NEW_LINE %21 = sext i8 %20 to i64 NEW_LINE %22 = load * * * i32 @g_644 NEW_LINE %23 = load volatile * * i32 %22 NEW_LINE %24 = load * i32 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = zext i32 %25 to i64 NEW_LINE %27 = or i64 %26 , -3 NEW_LINE %28 = icmp sgt i64 %21 , %27 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = call zeroext i16 @safe_rshift_func_uint16_t_u_s ( i16 zeroext -10 , i32 1 ) NEW_LINE %31 = zext i16 %30 to i32 NEW_LINE %32 = icmp slt i32 %29 , %31 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE %34 = call zeroext i8 @safe_lshift_func_uint8_t_u_u ( i8 zeroext -21 , i32 2 ) NEW_LINE %35 = load i32 %4 NEW_LINE %36 = trunc i32 %35 to i8 NEW_LINE %37 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %34 , i8 signext %36 ) NEW_LINE %38 = load * * i32 @g_69 NEW_LINE %39 = load * i32 %38 NEW_LINE %40 = load i32 %39 NEW_LINE %41 = load i8 %3 NEW_LINE %42 = sext i8 %41 to i32 NEW_LINE %43 = call i32 @safe_mod_func_int32_t_s_s ( i32 %40 , i32 %42 ) NEW_LINE %44 = load i32 %6 NEW_LINE %45 = and i32 %44 , %43 NEW_LINE store i32 %45 %6 NEW_LINE store i32 %45 %7 NEW_LINE %46 = load i32 %4 NEW_LINE ret i32 %46 NEW_LINE }
define signext i16 @func_45 ( i32 %0 , i8 signext %1 , i32 %2 , * i8 %3 , i64 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca * i32 NEW_LINE %19 = alloca * i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca * i32 NEW_LINE %22 = alloca * i32 NEW_LINE %23 = alloca ARR 3 7 x * i32 NEW_LINE %24 = alloca i16 NEW_LINE %25 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 @g_63 %12 NEW_LINE store i32 602032915 %13 NEW_LINE store * i32 @g_63 %14 NEW_LINE store * i32 %13 %15 NEW_LINE store i32 131656571 %16 NEW_LINE store * i32 %16 %17 NEW_LINE store * i32 %13 %18 NEW_LINE store * i32 %13 %19 NEW_LINE store i32 -1099506512 %20 NEW_LINE store * i32 null %21 NEW_LINE store * i32 %13 %22 NEW_LINE store i16 1 %24 NEW_LINE store i32 0 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %25 NEW_LINE %28 = icmp slt i32 %27 , 7 NEW_LINE br i1 %28 , label %29 , label %36 NEW_LINE 29: NEW_LINE %30 = load i32 %25 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 7 x * i32 %23 , i64 0 , i64 %31 NEW_LINE store * i32 @g_63 %32 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %25 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %25 NEW_LINE br label %26 NEW_LINE 36: NEW_LINE %37 = load i16 %24 NEW_LINE %38 = add i16 %37 , 1 NEW_LINE store i16 %38 %24 NEW_LINE %39 = load * i32 %14 NEW_LINE %40 = load i32 %39 NEW_LINE %41 = trunc i32 %40 to i16 NEW_LINE ret i16 %41 NEW_LINE }
define * i32 @func_55 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 1 x i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 3 x ARR 3 1 x ARR 3 5 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1 x i8 %3 , i64 0 , i64 %14 NEW_LINE store i8 -83 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE store i8 0 @g_108 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i8 @g_108 NEW_LINE %22 = zext i8 %21 to i32 NEW_LINE %23 = icmp sgt i32 %22 , 29 NEW_LINE br i1 %23 , label %24 , label %32 NEW_LINE 24: NEW_LINE %25 = bitcast * ARR 3 3 x ARR 3 1 x ARR 3 5 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %25 , * i8 bitcast ( * ARR 3 3 x ARR 3 1 x ARR 3 5 x * i32 @__const.func_55.l_849 to * i8 ) , i64 120 , i1 false ) NEW_LINE %26 = getelementptr inbounds ARR 3 1 x i8 %3 , i64 0 , i64 0 NEW_LINE %27 = load i8 %26 NEW_LINE %28 = add i8 %27 , 1 NEW_LINE store i8 %28 %26 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i8 @g_108 NEW_LINE %31 = add i8 %30 , 1 NEW_LINE store i8 %31 @g_108 NEW_LINE br label %20 NEW_LINE 32: NEW_LINE %33 = load * i32 %2 NEW_LINE ret * i32 %33 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call i32 @func_1 ( ) NEW_LINE %18 = load i32 @g_3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i8 @g_7 NEW_LINE %22 = sext i8 %21 to i64 NEW_LINE %23 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %22 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_7~00" , i64 0 , i64 0 ) , i32 %23 ) NEW_LINE %24 = load volatile i32 @g_8 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %25 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.5:g_8~00" , i64 0 , i64 0 ) , i32 %26 ) NEW_LINE %27 = load volatile i8 @g_9 NEW_LINE %28 = zext i8 %27 to i64 NEW_LINE %29 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %28 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.6:g_9~00" , i64 0 , i64 0 ) , i32 %29 ) NEW_LINE %30 = load i32 @crc32_context NEW_LINE %31 = zext i32 %30 to i64 NEW_LINE %32 = xor i64 %31 , 4294967295 NEW_LINE %33 = trunc i64 %32 to i32 NEW_LINE %34 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %33 , i32 %34 ) NEW_LINE ret i32 0 NEW_LINE }
define signext i8 @func_13 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i8 null %3 NEW_LINE store * i8 @g_20 %4 NEW_LINE store * i32 @g_3 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load i8 %6 NEW_LINE %8 = zext i8 %7 to i64 NEW_LINE %9 = or i64 %8 , 5 NEW_LINE %10 = trunc i64 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load * i32 %5 NEW_LINE %12 = icmp ne * i32 null , %11 NEW_LINE %13 = zext i1 %12 to i32 NEW_LINE %14 = load * i32 %2 NEW_LINE %15 = icmp eq * i32 %14 , null NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE %17 = load * i32 %2 NEW_LINE %18 = call i64 @func_30 ( i32 %13 , i32 %16 , * i32 %17 ) NEW_LINE %19 = call i64 @safe_add_func_int64_t_s_s ( i64 %18 , i64 -1 ) NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE %21 = load * i32 %5 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = trunc i32 %22 to i16 NEW_LINE %24 = load * * i16 @g_1553 NEW_LINE %25 = load * i16 %24 NEW_LINE %26 = load i16 %25 NEW_LINE %27 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %23 , i16 zeroext %26 ) NEW_LINE %28 = zext i16 %27 to i64 NEW_LINE %29 = load * i32 %5 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = load * i32 %2 NEW_LINE %32 = call i64 @func_23 ( i32 %20 , i64 %28 , i32 %30 , * i32 %31 ) NEW_LINE %33 = load * i64 @g_133 NEW_LINE %34 = load i64 %33 NEW_LINE %35 = call i64 @safe_sub_func_int64_t_s_s ( i64 %32 , i64 %34 ) NEW_LINE %36 = trunc i64 %35 to i8 NEW_LINE %37 = call zeroext i8 @safe_mod_func_uint8_t_u_u ( i8 zeroext %10 , i8 zeroext %36 ) NEW_LINE %38 = zext i8 %37 to i32 NEW_LINE %39 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @g_37 , i64 0 , i64 0 ) NEW_LINE %40 = and i32 %39 , %38 NEW_LINE store i32 %40 getelementptr inbounds ( ARR 3 1 x i32 @g_37 , i64 0 , i64 0 ) NEW_LINE %41 = load * i32 %5 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = trunc i32 %42 to i8 NEW_LINE ret i8 %43 NEW_LINE }
define signext i8 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 7 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE store i16 4 %1 NEW_LINE store * i32 @g_4 %2 NEW_LINE %5 = bitcast * ARR 3 7 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_1.l_5 to * i8 ) , i64 56 , i1 false ) NEW_LINE %6 = load i16 %1 NEW_LINE %7 = sext i16 %6 to i32 NEW_LINE %8 = load * i32 %2 NEW_LINE store i32 %7 %8 NEW_LINE store i32 %7 @g_6 NEW_LINE %9 = load * i32 %2 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = load * i32 %2 NEW_LINE store i32 %10 %11 NEW_LINE %12 = load i32 @g_4 NEW_LINE %13 = load * i32 %2 NEW_LINE %14 = getelementptr inbounds ARR 3 7 x * i32 %3 , i64 0 , i64 6 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = load i32 @g_6 NEW_LINE %17 = trunc i32 %16 to i16 NEW_LINE %18 = call * i32 @func_16 ( * i32 %15 , i16 signext %17 ) NEW_LINE %19 = load * i32 %2 NEW_LINE %20 = load * i16 @g_922 NEW_LINE %21 = load i16 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 7 x * i32 %3 , i64 0 , i64 2 NEW_LINE %23 = load * i32 %22 NEW_LINE %24 = call signext i16 @func_10 ( * i32 %13 , * i32 %18 , * i32 %19 , i16 signext %21 , * i32 %23 ) NEW_LINE %25 = load * i16 @g_922 NEW_LINE store i16 %24 %25 NEW_LINE %26 = getelementptr inbounds ARR 3 7 x * i32 %3 , i64 0 , i64 2 NEW_LINE %27 = load * i32 %26 NEW_LINE %28 = call * i32 @func_7 ( i16 signext %24 , * i32 %27 ) NEW_LINE %29 = load * * i32 @g_84 NEW_LINE store * i32 %28 %29 NEW_LINE %30 = load * i32 %2 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = and i64 %32 , 2076304935 NEW_LINE %34 = trunc i64 %33 to i32 NEW_LINE store i32 %34 %30 NEW_LINE %35 = load * i32 %2 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = trunc i32 %36 to i8 NEW_LINE ret i8 %37 NEW_LINE }
define i64 @func_5 ( i16 zeroext %0 , i64 %1 , i8 signext %2 , i32 %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca * * * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i8 NEW_LINE store i16 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 1027154713 %9 NEW_LINE store * i16 @g_128 %10 NEW_LINE store * * * i32 getelementptr inbounds ( ARR 3 6 x * * i32 @g_670 , i64 0 , i64 1 ) %11 NEW_LINE store i32 -1059737434 %12 NEW_LINE store i8 -36 %13 NEW_LINE %14 = load i32 %9 NEW_LINE %15 = trunc i32 %14 to i16 NEW_LINE %16 = load * i16 %10 NEW_LINE store i16 %15 %16 NEW_LINE %17 = load i32 %9 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE %19 = call zeroext i16 @safe_div_func_uint16_t_u_u ( i16 zeroext %15 , i16 zeroext %18 ) NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %33 , label %22 NEW_LINE 22: NEW_LINE %23 = load * * * i32 %11 NEW_LINE %24 = icmp eq * * * i32 null , %23 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = load i32 @g_1420 NEW_LINE %27 = xor i32 %26 , -1 NEW_LINE %28 = load * i8 @g_987 NEW_LINE %29 = load i8 %28 NEW_LINE %30 = call signext i8 @safe_lshift_func_int8_t_s_u ( i8 signext %29 , i32 4 ) NEW_LINE %31 = sext i8 %30 to i32 NEW_LINE %32 = icmp ne i32 %31 , 0 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = phi i1 ARR 2 true %4 , ARR 2 %32 %22 NEW_LINE %35 = zext i1 %34 to i32 NEW_LINE %36 = trunc i32 %35 to i16 NEW_LINE %37 = call zeroext i16 @safe_mod_func_uint16_t_u_u ( i16 zeroext %36 , i16 zeroext 10637 ) NEW_LINE %38 = zext i16 %37 to i32 NEW_LINE %39 = load i32 %12 NEW_LINE %40 = or i32 %39 , %38 NEW_LINE store i32 %40 %12 NEW_LINE %41 = load * i32 @g_814 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = or i32 %42 , %40 NEW_LINE store i32 %43 %41 NEW_LINE %44 = load i8 %13 NEW_LINE %45 = zext i8 %44 to i64 NEW_LINE ret i64 %45 NEW_LINE }
define i64 @func_12 ( i32 %0 , i32 %1 , i8 zeroext %2 , i32 %3 ) { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 3 x ARR 3 3 x ARR 3 7 x i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %13 = bitcast * ARR 3 3 x ARR 3 3 x ARR 3 7 x i8 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 3 x ARR 3 3 x ARR 3 7 x i8 @__const.func_12.l_978 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 63 , i1 false ) NEW_LINE %14 = load volatile * * * i8 @g_976 NEW_LINE store * * i8 @g_827 %14 NEW_LINE %15 = getelementptr inbounds ARR 3 3 x ARR 3 3 x ARR 3 7 x i8 %9 , i64 0 , i64 2 NEW_LINE %16 = getelementptr inbounds ARR 3 3 x ARR 3 7 x i8 %15 , i64 0 , i64 0 NEW_LINE %17 = getelementptr inbounds ARR 3 7 x i8 %16 , i64 0 , i64 2 NEW_LINE %18 = load i8 %17 NEW_LINE %19 = add i8 %18 , 1 NEW_LINE store i8 %19 %17 NEW_LINE %20 = getelementptr inbounds ARR 3 3 x ARR 3 3 x ARR 3 7 x i8 %9 , i64 0 , i64 2 NEW_LINE %21 = getelementptr inbounds ARR 3 3 x ARR 3 7 x i8 %20 , i64 0 , i64 1 NEW_LINE %22 = getelementptr inbounds ARR 3 7 x i8 %21 , i64 0 , i64 5 NEW_LINE %23 = load i8 %22 NEW_LINE %24 = zext i8 %23 to i64 NEW_LINE ret i64 %24 NEW_LINE }
define i64 @func_38 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 9 x ARR 3 10 x i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %6 = bitcast * ARR 3 9 x ARR 3 10 x i16 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 9 x ARR 3 10 x i16 @__const.func_38.l_40 to * i8 ) , i64 180 , i1 false ) NEW_LINE %7 = getelementptr inbounds ARR 3 9 x ARR 3 10 x i16 %3 , i64 0 , i64 2 NEW_LINE %8 = getelementptr inbounds ARR 3 10 x i16 %7 , i64 0 , i64 1 NEW_LINE %9 = load i16 %8 NEW_LINE %10 = sext i16 %9 to i32 NEW_LINE %11 = load volatile * i32 @g_41 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = xor i32 %12 , %10 NEW_LINE store i32 %13 %11 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x ARR 3 10 x i16 %3 , i64 0 , i64 1 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i16 %14 , i64 0 , i64 0 NEW_LINE %16 = load i16 %15 NEW_LINE %17 = sext i16 %16 to i64 NEW_LINE ret i64 %17 NEW_LINE }
define signext i8 @func_35 ( i64 %0 , i16 signext %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 4 x * * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store i16 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_49 %9 NEW_LINE store i8 0 @g_132 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i8 @g_132 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = icmp slt i32 %15 , -22 NEW_LINE br i1 %16 , label %17 , label %25 NEW_LINE 17: NEW_LINE %18 = load * i32 %9 NEW_LINE %19 = load volatile * * i32 @g_783 NEW_LINE store * i32 %18 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i8 @g_132 NEW_LINE %22 = sext i8 %21 to i64 NEW_LINE %23 = call i64 @safe_sub_func_uint64_t_u_u ( i64 %22 , i64 8 ) NEW_LINE %24 = trunc i64 %23 to i8 NEW_LINE store i8 %24 @g_132 NEW_LINE br label %13 NEW_LINE 25: NEW_LINE store i32 3 @g_676 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 @g_676 NEW_LINE %28 = icmp ule i32 %27 , 8 NEW_LINE br i1 %28 , label %29 , label %37 NEW_LINE 29: NEW_LINE %30 = bitcast * ARR 3 4 x ARR 3 4 x * * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * ARR 3 4 x ARR 3 4 x * * i32 @__const.func_35.l_784 to * i8 ) , i64 128 , i1 false ) NEW_LINE %31 = load i32 @g_676 NEW_LINE %32 = zext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 9 x i32 @g_631 , i64 0 , i64 %32 NEW_LINE store * i32 %33 %9 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 @g_676 NEW_LINE %36 = add i32 %35 , 1 NEW_LINE store i32 %36 @g_676 NEW_LINE br label %26 NEW_LINE 37: NEW_LINE %38 = load i64 %5 NEW_LINE %39 = trunc i64 %38 to i8 NEW_LINE ret i8 %39 NEW_LINE }
define i64 @func_48 ( * i64 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca * i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * i32 NEW_LINE store * i64 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 10 x i64 @g_71 , i64 0 , i64 3 ) %5 NEW_LINE store * i8 null %6 NEW_LINE store i32 -1 %7 NEW_LINE store * * i32 null %8 NEW_LINE %9 = load i16 %4 NEW_LINE %10 = zext i16 %9 to i32 NEW_LINE %11 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext 108 , i32 3 ) NEW_LINE %12 = load * i64 %5 NEW_LINE %13 = load volatile i32 @g_7 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = load * i8 %6 NEW_LINE %16 = load i32 %7 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %24 , label %18 NEW_LINE 18: NEW_LINE %19 = load i16 %4 NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE %21 = call i32 @func_78 ( i32 %20 ) NEW_LINE %22 = load i32 %7 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i1 ARR 2 true %2 , ARR 2 %23 %18 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = load * * i32 @g_869 NEW_LINE %28 = call i32 @func_72 ( * i8 %15 , i32 %26 , * * i32 %27 ) NEW_LINE %29 = load * * i32 %8 NEW_LINE %30 = call signext i8 @func_65 ( * i64 %12 , i64 %14 , i32 %28 , * * i32 %29 ) NEW_LINE %31 = sext i8 %30 to i32 NEW_LINE %32 = call signext i8 @safe_lshift_func_int8_t_s_s ( i8 signext %11 , i32 %31 ) NEW_LINE %33 = sext i8 %32 to i32 NEW_LINE %34 = and i32 %10 , %33 NEW_LINE %35 = load * * i32 %8 NEW_LINE %36 = load i16 %4 NEW_LINE %37 = trunc i16 %36 to i8 NEW_LINE %38 = load * * i32 %8 NEW_LINE %39 = load i16 %4 NEW_LINE %40 = zext i16 %39 to i32 NEW_LINE %41 = call i32 @func_56 ( * * i32 %35 , i8 zeroext %37 , * * i32 %38 , i32 %40 ) NEW_LINE store i32 %41 %7 NEW_LINE %42 = load * * i64 @g_1177 NEW_LINE %43 = load * i64 %42 NEW_LINE %44 = load i64 %43 NEW_LINE ret i64 %44 NEW_LINE }
define zeroext i16 @func_49 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i16 1 %5 NEW_LINE store * i32 @g_26 %6 NEW_LINE store * * i32 %6 %7 NEW_LINE %8 = load * i32 %3 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load i16 %5 NEW_LINE %11 = load i16 %5 NEW_LINE %12 = load i16 %5 NEW_LINE %13 = trunc i16 %12 to i8 NEW_LINE %14 = load i32 @g_2 NEW_LINE %15 = load i32 @g_2 NEW_LINE %16 = load i16 %5 NEW_LINE %17 = sext i16 %16 to i32 NEW_LINE %18 = load * * i32 %7 NEW_LINE %19 = icmp ne * * i32 %3 , %18 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = and i32 %17 , %20 NEW_LINE %22 = load * * i32 %7 NEW_LINE %23 = load * i32 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = or i32 %21 , %24 NEW_LINE %26 = load * * i32 %7 NEW_LINE %27 = load * i32 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext -1 , i32 %28 ) NEW_LINE %30 = zext i8 %29 to i32 NEW_LINE %31 = icmp sgt i32 %15 , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = icmp ne i32 %14 , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = trunc i32 %34 to i16 NEW_LINE %36 = load * * i32 %7 NEW_LINE %37 = load * i32 %36 NEW_LINE %38 = load i32 %37 NEW_LINE %39 = trunc i32 %38 to i16 NEW_LINE %40 = call zeroext i16 @safe_mod_func_uint16_t_u_u ( i16 zeroext %35 , i16 zeroext %39 ) NEW_LINE %41 = zext i16 %40 to i64 NEW_LINE %42 = load * * i32 @g_73 NEW_LINE %43 = call * i32 @func_62 ( i8 zeroext %13 , i64 %41 , * * i32 %6 , * * i32 %42 ) NEW_LINE %44 = call * * i32 @func_56 ( i16 zeroext %10 , i16 zeroext %11 , * i32 %43 , * i32 @g_5 ) NEW_LINE %45 = call * i32 @func_53 ( i32 %9 , * * i32 %44 ) NEW_LINE %46 = load * * i32 %7 NEW_LINE store * i32 %45 %46 NEW_LINE %47 = load i32 @g_5 NEW_LINE %48 = trunc i32 %47 to i16 NEW_LINE ret i16 %48 NEW_LINE }
define signext i16 @func_18 ( * i32 %0 , i16 zeroext %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 2 x ARR 3 10 x ARR 3 1 x * i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x ARR 3 4 x i32 @g_713 , i64 0 , i64 2 , i64 1 ) %5 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x ARR 3 4 x i32 @g_713 , i64 0 , i64 2 , i64 1 ) %6 NEW_LINE store i32 -838859456 %7 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 10 x i32 @g_301 , i64 0 , i64 3 , i64 4 ) %8 NEW_LINE %14 = bitcast * ARR 3 2 x ARR 3 10 x ARR 3 1 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 2 x ARR 3 10 x ARR 3 1 x * i32 @__const.func_18.l_785 to * i8 ) , i64 160 , i1 false ) NEW_LINE store i64 -1 %10 NEW_LINE %15 = load i64 %10 NEW_LINE %16 = add i64 %15 , 1 NEW_LINE store i64 %16 %10 NEW_LINE %17 = load i16 %4 NEW_LINE ret i16 %17 NEW_LINE }
define zeroext i16 @func_24 ( * STRUCT 1 ARR 3 3 x i8 %0 , * i8 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca * STRUCT 1 ARR 3 3 x i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * STRUCT 2 i16 i32 NEW_LINE store * STRUCT 1 ARR 3 3 x i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * * i32 @g_355 %7 NEW_LINE %9 = load * * i32 %7 NEW_LINE store * i32 null %9 NEW_LINE store i32 0 getelementptr inbounds ( STRUCT 5 i32 i16 i16 i32 i32 bitcast ( * STRUCT 8 i32 i16 i16 i8 i8 i8 i8 i32 @g_696 to * STRUCT 5 i32 i16 i16 i32 i32 ) , i32 0 , i32 0 ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 getelementptr inbounds ( STRUCT 5 i32 i16 i16 i32 i32 bitcast ( * STRUCT 8 i32 i16 i16 i8 i8 i8 i8 i32 @g_696 to * STRUCT 5 i32 i16 i16 i32 i32 ) , i32 0 , i32 0 ) NEW_LINE %12 = icmp uge i32 %11 , 37 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE store * STRUCT 2 i16 i32 getelementptr inbounds ( ARR 3 1 x STRUCT 2 i16 i32 bitcast ( * ARR 3 1 x STRUCT 6 i16 ARR 3 2 x i8 i8 i8 i8 i8 @g_455 to * ARR 3 1 x STRUCT 2 i16 i32 ) , i64 0 , i64 0 ) %8 NEW_LINE %14 = load * STRUCT 2 i16 i32 %8 NEW_LINE %15 = bitcast * STRUCT 2 i16 i32 %14 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * STRUCT 6 i16 ARR 3 2 x i8 i8 i8 i8 i8 @g_1326 to * i8 ) , i64 8 , i1 true ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 getelementptr inbounds ( STRUCT 5 i32 i16 i16 i32 i32 bitcast ( * STRUCT 8 i32 i16 i16 i8 i8 i8 i8 i32 @g_696 to * STRUCT 5 i32 i16 i16 i32 i32 ) , i32 0 , i32 0 ) NEW_LINE %18 = zext i32 %17 to i64 NEW_LINE %19 = call i64 @safe_add_func_int64_t_s_s ( i64 %18 , i64 3 ) NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE store i32 %20 getelementptr inbounds ( STRUCT 5 i32 i16 i16 i32 i32 bitcast ( * STRUCT 8 i32 i16 i16 i8 i8 i8 i8 i32 @g_696 to * STRUCT 5 i32 i16 i16 i32 i32 ) , i32 0 , i32 0 ) NEW_LINE br label %10 NEW_LINE 21: NEW_LINE %22 = load i16 %6 NEW_LINE ret i16 %22 NEW_LINE }
define signext i16 @func_42 ( * i32 %0 , i32 %1 , * i32 %2 , i32 %3 , i8 signext %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca ARR 3 8 x * i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca i8 NEW_LINE %14 = alloca i16 NEW_LINE %15 = alloca ARR 3 3 x i32 NEW_LINE %16 = alloca i16 NEW_LINE %17 = alloca ARR 3 8 x i8 NEW_LINE %18 = alloca i8 NEW_LINE %19 = alloca i8 NEW_LINE %20 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE %21 = bitcast * ARR 3 8 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_42.l_674 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i8 -24 %12 NEW_LINE store i8 0 %13 NEW_LINE store i16 -3 %14 NEW_LINE store i16 -32590 %16 NEW_LINE %22 = bitcast * ARR 3 8 x i8 %17 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %22 , * i8 getelementptr inbounds ( ARR 3 8 x i8 @__const.func_42.l_680 , i32 0 , i32 0 ) , i64 8 , i1 false ) NEW_LINE store i8 0 %18 NEW_LINE store i8 28 %19 NEW_LINE store i32 0 %20 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %20 NEW_LINE %25 = icmp slt i32 %24 , 3 NEW_LINE br i1 %25 , label %26 , label %33 NEW_LINE 26: NEW_LINE %27 = load i32 %20 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 3 x i32 %15 , i64 0 , i64 %28 NEW_LINE store i32 -1105635035 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %20 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %20 NEW_LINE br label %23 NEW_LINE 33: NEW_LINE %34 = load i8 %18 NEW_LINE %35 = add i8 %34 , -1 NEW_LINE store i8 %35 %18 NEW_LINE %36 = load i8 %19 NEW_LINE %37 = sext i8 %36 to i16 NEW_LINE ret i16 %37 NEW_LINE }
define * i32 @func_25 ( * i32 %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * * * STRUCT 3 i64 i24 i24 NEW_LINE %10 = alloca * * * * STRUCT 3 i64 i24 i24 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 2 %7 NEW_LINE store * i32 @g_2 %8 NEW_LINE store * * * STRUCT 3 i64 i24 i24 @g_303 %9 NEW_LINE store * * * * STRUCT 3 i64 i24 i24 %9 %10 NEW_LINE store i32 18 %6 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = icmp ult i32 %15 , 9 NEW_LINE br i1 %16 , label %17 , label %34 NEW_LINE 17: NEW_LINE store * * i32 @g_255 %11 NEW_LINE store * i32 null %12 NEW_LINE store * * i32 @g_255 %13 NEW_LINE %18 = load i32 @g_2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = call * i32 @func_38 ( i64 %21 , * i32 @g_2 ) NEW_LINE %23 = load * * i32 %11 NEW_LINE store * i32 %22 %23 NEW_LINE %24 = load * i32 %8 NEW_LINE %25 = load * i32 %8 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 @safe_mod_func_int32_t_s_s ( i32 7 , i32 -5 ) NEW_LINE %28 = and i32 %26 , %27 NEW_LINE %29 = call * i32 @func_32 ( i64 %19 , * i32 %22 , * i32 null , * i32 %24 , i32 %28 ) NEW_LINE %30 = load * * i32 %13 NEW_LINE store * i32 %29 %30 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = add i32 %32 , -1 NEW_LINE store i32 %33 %6 NEW_LINE br label %14 NEW_LINE 34: NEW_LINE %35 = load * * * STRUCT 3 i64 i24 i24 %9 NEW_LINE %36 = load * * * * STRUCT 3 i64 i24 i24 %10 NEW_LINE store * * * STRUCT 3 i64 i24 i24 %35 %36 NEW_LINE %37 = load * i32 %4 NEW_LINE ret * i32 %37 NEW_LINE }
define zeroext i16 @func_91 ( i16 signext %0 , * i32 %1 , * i64 %2 , i32 %3 , * i64 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i64 NEW_LINE %11 = alloca ARR 3 6 x ARR 3 9 x * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i64 %4 %10 NEW_LINE %15 = bitcast * ARR 3 6 x ARR 3 9 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 6 x ARR 3 9 x * i32 @__const.func_91.l_106 to * i8 ) , i64 432 , i1 false ) NEW_LINE %16 = getelementptr inbounds ARR 3 6 x ARR 3 9 x * i32 %11 , i64 0 , i64 0 NEW_LINE %17 = getelementptr inbounds ARR 3 9 x * i32 %16 , i64 0 , i64 4 NEW_LINE store * * i32 %17 %12 NEW_LINE %18 = getelementptr inbounds ARR 3 6 x ARR 3 9 x * i32 %11 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 9 x * i32 %18 , i64 0 , i64 4 NEW_LINE %20 = load * i32 %19 NEW_LINE store * i32 %20 %7 NEW_LINE %21 = load * * i32 %12 NEW_LINE store * i32 @g_45 %21 NEW_LINE store * i32 @g_45 %7 NEW_LINE %22 = load * i16 @g_42 NEW_LINE %23 = load i16 %22 NEW_LINE ret i16 %23 NEW_LINE }
define signext i8 @func_58 ( i64 %0 , i64 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * STRUCT 1 i32 NEW_LINE %6 = alloca ARR 3 1 x ARR 3 10 x * STRUCT 1 i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * STRUCT 1 i32 null %5 NEW_LINE %9 = bitcast * ARR 3 1 x ARR 3 10 x * STRUCT 1 i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %9 , i8 0 , i64 80 , i1 false ) NEW_LINE %10 = bitcast * i8 %9 to * ARR 3 1 x ARR 3 10 x * STRUCT 1 i32 NEW_LINE %11 = getelementptr inbounds ARR 3 1 x ARR 3 10 x * STRUCT 1 i32 %10 , i32 0 , i32 0 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x * STRUCT 1 i32 %11 , i32 0 , i32 1 NEW_LINE store * STRUCT 1 i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 2 x ARR 3 9 x ARR 3 8 x STRUCT 1 i32 @g_41 to * i8 ) , i64 512 ) to * STRUCT 1 i32 ) %12 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x * STRUCT 1 i32 %11 , i32 0 , i32 4 NEW_LINE store * STRUCT 1 i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 2 x ARR 3 9 x ARR 3 8 x STRUCT 1 i32 @g_41 to * i8 ) , i64 512 ) to * STRUCT 1 i32 ) %13 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x * STRUCT 1 i32 %11 , i32 0 , i32 7 NEW_LINE store * STRUCT 1 i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 2 x ARR 3 9 x ARR 3 8 x STRUCT 1 i32 @g_41 to * i8 ) , i64 512 ) to * STRUCT 1 i32 ) %14 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 bitcast ( * STRUCT 1 i32 getelementptr inbounds ( ARR 3 8 x ARR 3 3 x STRUCT 1 i32 @g_105 , i64 0 , i64 7 , i64 1 ) to * i8 ) , * i8 bitcast ( * STRUCT 1 i32 @g_102 to * i8 ) , i64 4 , i1 true ) NEW_LINE %15 = load i64 %3 NEW_LINE %16 = trunc i64 %15 to i8 NEW_LINE ret i8 %16 NEW_LINE }
define * i64 @func_109 ( i32 %0 , * * * i32 %1 , * i64 %2 ) { NEW_LINE %4 = alloca STRUCT 1 i32 NEW_LINE %5 = alloca * * * i32 NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 7 x ARR 3 3 x * i32 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = getelementptr inbounds STRUCT 1 i32 %4 , i32 0 , i32 0 NEW_LINE store i32 %0 %17 NEW_LINE store * * * i32 %1 %5 NEW_LINE store * i64 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 @g_44 %8 NEW_LINE store * i32 null %9 NEW_LINE store * i32 @g_44 %10 NEW_LINE store i64 -98780845044970746 %12 NEW_LINE store i32 -173158793 %13 NEW_LINE store i32 358353852 %14 NEW_LINE store i32 0 %15 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %15 NEW_LINE %20 = icmp slt i32 %19 , 7 NEW_LINE br i1 %20 , label %21 , label %39 NEW_LINE 21: NEW_LINE store i32 0 %16 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %16 NEW_LINE %24 = icmp slt i32 %23 , 3 NEW_LINE br i1 %24 , label %25 , label %35 NEW_LINE 25: NEW_LINE %26 = load i32 %15 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 7 x ARR 3 3 x * i32 %11 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %16 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 3 x * i32 %28 , i64 0 , i64 %30 NEW_LINE store * i32 @g_34 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %16 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %16 NEW_LINE br label %22 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %15 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %15 NEW_LINE br label %18 NEW_LINE 39: NEW_LINE %40 = load i32 %14 NEW_LINE %41 = add i32 %40 , -1 NEW_LINE store i32 %41 %14 NEW_LINE %42 = load * i64 %6 NEW_LINE ret * i64 %42 NEW_LINE }
define i64 @func_25 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 2 x ARR 3 5 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 @g_29 %5 NEW_LINE store i32 0 %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 %6 %8 NEW_LINE store * i32 @g_29 %9 NEW_LINE store * i32 null %10 NEW_LINE store * i32 %6 %11 NEW_LINE store i32 0 %13 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %13 NEW_LINE %17 = icmp slt i32 %16 , 2 NEW_LINE br i1 %17 , label %18 , label %36 NEW_LINE 18: NEW_LINE store i32 0 %14 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %14 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %32 NEW_LINE 22: NEW_LINE %23 = load i32 %13 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 2 x ARR 3 5 x * i32 %12 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %14 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x * i32 %25 , i64 0 , i64 %27 NEW_LINE store * i32 @g_29 %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %14 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %14 NEW_LINE br label %19 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %13 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %13 NEW_LINE br label %15 NEW_LINE 36: NEW_LINE store * i32 @g_4 %5 NEW_LINE %37 = load volatile * * i32 @g_30 NEW_LINE store * i32 @g_4 %37 NEW_LINE %38 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @g_39 , i64 0 , i64 0 ) NEW_LINE %39 = add i32 %38 , 1 NEW_LINE store i32 %39 getelementptr inbounds ( ARR 3 1 x i32 @g_39 , i64 0 , i64 0 ) NEW_LINE %40 = load i32 @g_4 NEW_LINE %41 = sext i32 %40 to i64 NEW_LINE ret i64 %41 NEW_LINE }
define * STRUCT 6 i8 i8 i32 i16 i8 i16 @func_45 ( * STRUCT 6 i8 i8 i32 i16 i8 i16 %0 ) { NEW_LINE %2 = alloca * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %3 = alloca ARR 3 6 x ARR 3 3 x * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %4 = alloca * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %5 = alloca ARR 3 4 x * * STRUCT 6 i8 i8 i32 i16 i8 i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 %0 %2 NEW_LINE %8 = bitcast * ARR 3 6 x ARR 3 3 x * STRUCT 6 i8 i8 i32 i16 i8 i16 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 6 x ARR 3 3 x * STRUCT 6 i8 i8 i32 i16 i8 i16 @__const.func_45.l_1036 to * i8 ) , i64 144 , i1 false ) NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 null %4 NEW_LINE %9 = bitcast * ARR 3 4 x * * STRUCT 6 i8 i8 i32 i16 i8 i16 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 4 x * * STRUCT 6 i8 i8 i32 i16 i8 i16 @__const.func_45.l_1038 to * i8 ) , i64 32 , i1 false ) NEW_LINE %10 = load * STRUCT 6 i8 i8 i32 i16 i8 i16 %4 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 %10 %2 NEW_LINE store * STRUCT 6 i8 i8 i32 i16 i8 i16 %10 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x ARR 3 9 x * STRUCT 6 i8 i8 i32 i16 i8 i16 @g_1032 , i64 0 , i64 0 , i64 2 , i64 3 ) NEW_LINE %11 = load * STRUCT 6 i8 i8 i32 i16 i8 i16 %2 NEW_LINE ret * STRUCT 6 i8 i8 i32 i16 i8 i16 %11 NEW_LINE }
define i32 @func_79 ( i32 %0 , i16 signext %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca ARR 3 5 x * i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i16 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 8 x i32 @g_37 , i64 0 , i64 3 ) %5 NEW_LINE %9 = bitcast * ARR 3 5 x * i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %9 , i8 0 , i64 40 , i1 false ) NEW_LINE %10 = bitcast * i8 %9 to * ARR 3 5 x * i32 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x * i32 %10 , i32 0 , i32 0 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 1 x ARR 3 4 x ARR 3 1 x i32 @g_75 to * i8 ) , i64 12 ) to * i32 ) %11 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x * i32 %10 , i32 0 , i32 1 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 1 x ARR 3 4 x ARR 3 1 x i32 @g_75 to * i8 ) , i64 12 ) to * i32 ) %12 NEW_LINE %13 = getelementptr inbounds ARR 3 5 x * i32 %10 , i32 0 , i32 2 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 1 x ARR 3 4 x ARR 3 1 x i32 @g_75 to * i8 ) , i64 12 ) to * i32 ) %13 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x * i32 %10 , i32 0 , i32 3 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 1 x ARR 3 4 x ARR 3 1 x i32 @g_75 to * i8 ) , i64 12 ) to * i32 ) %14 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x * i32 %10 , i32 0 , i32 4 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 1 x ARR 3 4 x ARR 3 1 x i32 @g_75 to * i8 ) , i64 12 ) to * i32 ) %15 NEW_LINE store i8 45 %7 NEW_LINE %16 = load i8 %7 NEW_LINE %17 = add i8 %16 , 1 NEW_LINE store i8 %17 %7 NEW_LINE %18 = load i32 getelementptr inbounds ( ARR 3 8 x i32 @g_37 , i64 0 , i64 6 ) NEW_LINE ret i32 %18 NEW_LINE }
define * i32 @func_24 ( i64 %0 , i16 zeroext %1 , * i32 %2 , i8 %3 , i32 %4 ) { NEW_LINE %6 = alloca STRUCT 1 i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca * i32 NEW_LINE %21 = alloca * i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca ARR 3 5 x * i32 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i32 NEW_LINE %26 = getelementptr inbounds STRUCT 1 i8 %6 , i32 0 , i32 0 NEW_LINE store i8 %3 %26 NEW_LINE store i64 %0 %7 NEW_LINE store i16 %1 %8 NEW_LINE store * i32 %2 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i8 -1 %11 NEW_LINE store * i32 @g_1017 %12 NEW_LINE store * i32 @g_2666 %13 NEW_LINE store * i32 @g_2666 %14 NEW_LINE store * i32 @g_2666 %15 NEW_LINE store * i32 @g_211 %16 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 1 x i32 @g_47 , i64 0 , i64 0 , i64 0 ) %17 NEW_LINE store i32 5 %18 NEW_LINE store i32 -4 %19 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 9 x i32 @g_2029 , i64 0 , i64 2 ) %20 NEW_LINE store * i32 @g_2666 %21 NEW_LINE store i32 -308135262 %22 NEW_LINE %27 = getelementptr inbounds ARR 3 5 x * i32 %23 , i64 0 , i64 0 NEW_LINE store * i32 %22 %27 NEW_LINE %28 = getelementptr inbounds * i32 %27 , i64 1 NEW_LINE store * i32 %22 %28 NEW_LINE %29 = getelementptr inbounds * i32 %28 , i64 1 NEW_LINE store * i32 %22 %29 NEW_LINE %30 = getelementptr inbounds * i32 %29 , i64 1 NEW_LINE store * i32 %22 %30 NEW_LINE %31 = getelementptr inbounds * i32 %30 , i64 1 NEW_LINE store * i32 %22 %31 NEW_LINE store i64 -1 %24 NEW_LINE %32 = load i64 %24 NEW_LINE %33 = add i64 %32 , 1 NEW_LINE store i64 %33 %24 NEW_LINE %34 = load volatile * * i32 @g_2101 NEW_LINE %35 = load * i32 %34 NEW_LINE ret * i32 %35 NEW_LINE }
define zeroext i8 @func_24 ( * i32 %0 , i16 signext %1 , i64 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_31 %11 NEW_LINE store * i32 %10 @g_49 NEW_LINE store * i32 %10 %11 NEW_LINE store i32 0 @g_31 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_31 NEW_LINE %14 = icmp slt i32 %13 , 4 NEW_LINE br i1 %14 , label %15 , label %47 NEW_LINE 15: NEW_LINE store i8 0 @g_119 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i8 @g_119 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = icmp slt i32 %18 , 10 NEW_LINE br i1 %19 , label %20 , label %43 NEW_LINE 20: NEW_LINE store i32 0 %10 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %10 NEW_LINE %23 = icmp slt i32 %22 , 1 NEW_LINE br i1 %23 , label %24 , label %37 NEW_LINE 24: NEW_LINE %25 = load i32 @g_31 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 4 x ARR 3 10 x ARR 3 1 x i32 @g_85 , i64 0 , i64 %26 NEW_LINE %28 = load i8 @g_119 NEW_LINE %29 = sext i8 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 10 x ARR 3 1 x i32 %27 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %10 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 1 x i32 %30 , i64 0 , i64 %32 NEW_LINE store i32 8 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %10 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %10 NEW_LINE br label %21 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = load i8 @g_119 NEW_LINE %40 = sext i8 %39 to i32 NEW_LINE %41 = add nsw i32 %40 , 1 NEW_LINE %42 = trunc i32 %41 to i8 NEW_LINE store i8 %42 @g_119 NEW_LINE br label %16 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i32 @g_31 NEW_LINE %46 = add nsw i32 %45 , 1 NEW_LINE store i32 %46 @g_31 NEW_LINE br label %12 NEW_LINE 47: NEW_LINE %48 = load i8 getelementptr inbounds ( ARR 3 1 x ARR 3 3 x i8 @g_12 , i64 0 , i64 0 , i64 2 ) NEW_LINE ret i8 %48 NEW_LINE }
define * i32 @func_52 ( i64 %0 , * i8 %1 , i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 1 x i8 NEW_LINE %10 = alloca ARR 3 5 x ARR 3 7 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE %13 = bitcast * ARR 3 5 x ARR 3 7 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 5 x ARR 3 7 x * i32 @__const.func_52.l_1238 to * i8 ) , i64 280 , i1 false ) NEW_LINE store i32 0 %11 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %11 NEW_LINE %16 = icmp slt i32 %15 , 1 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %11 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1 x i8 %9 , i64 0 , i64 %19 NEW_LINE store i8 3 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %11 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %11 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE %25 = load i32 %7 NEW_LINE %26 = trunc i32 %25 to i8 NEW_LINE %27 = getelementptr inbounds ARR 3 1 x i8 %9 , i64 0 , i64 0 NEW_LINE store i8 %26 %27 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x ARR 3 7 x * i32 %10 , i64 0 , i64 4 NEW_LINE %29 = getelementptr inbounds ARR 3 7 x * i32 %28 , i64 0 , i64 1 NEW_LINE %30 = load * i32 %29 NEW_LINE ret * i32 %30 NEW_LINE }
define signext i8 @func_23 ( i8 zeroext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 1 x i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca * i8 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 4 x ARR 3 4 x i32 @g_54 , i64 0 , i64 0 , i64 3 , i64 3 ) %6 NEW_LINE store i32 0 %7 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = icmp slt i32 %15 , 1 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %7 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1 x i32 %5 , i64 0 , i64 %19 NEW_LINE store i32 0 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %7 NEW_LINE br label %14 NEW_LINE 24: NEW_LINE store i8 0 @g_27 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i8 @g_27 NEW_LINE %27 = zext i8 %26 to i32 NEW_LINE %28 = icmp sle i32 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %42 NEW_LINE 29: NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 0 ) %8 NEW_LINE store * i8 @g_46 %9 NEW_LINE store * i8 @g_50 %10 NEW_LINE store * i8 null %11 NEW_LINE store * * i32 %8 %12 NEW_LINE %30 = load i8 @g_27 NEW_LINE %31 = zext i8 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 1 x i32 %5 , i64 0 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = load * i32 %8 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = and i32 %35 , %33 NEW_LINE store i32 %36 %34 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i8 @g_27 NEW_LINE %39 = zext i8 %38 to i32 NEW_LINE %40 = add nsw i32 %39 , 1 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE store i8 %41 @g_27 NEW_LINE br label %25 NEW_LINE 42: NEW_LINE %43 = load i32 %4 NEW_LINE %44 = trunc i32 %43 to i8 NEW_LINE ret i8 %44 NEW_LINE }
define * i32 @func_74 ( * i32 %0 , * i64 %1 , i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca ARR 3 2 x ARR 3 7 x * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i64 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_53 %9 NEW_LINE %13 = bitcast * ARR 3 2 x ARR 3 7 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 2 x ARR 3 7 x * i32 @__const.func_74.l_108 to * i8 ) , i64 112 , i1 false ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE store * i64 @g_82 @g_81 NEW_LINE %15 = load * i64 %6 NEW_LINE %16 = icmp ne * i64 %15 , null NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE %18 = icmp ne i32 1 , %17 NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE %20 = load * i32 %9 NEW_LINE store i32 %19 %20 NEW_LINE %21 = load * i32 %9 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = load i64 @g_109 NEW_LINE %25 = and i64 %24 , %23 NEW_LINE store i64 %25 @g_109 NEW_LINE %26 = load i32 %7 NEW_LINE %27 = load * i32 %9 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = load * i32 %5 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = trunc i32 %30 to i16 NEW_LINE store i16 %31 @g_110 NEW_LINE %32 = zext i16 %31 to i32 NEW_LINE %33 = icmp sle i32 %28 , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = load * i32 %9 NEW_LINE store i32 %34 %35 NEW_LINE %36 = load i32 @g_53 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br i1 %37 , label %38 , label %39 NEW_LINE 38: NEW_LINE br label %14 NEW_LINE 39: NEW_LINE %40 = load * i32 %8 NEW_LINE ret * i32 %40 NEW_LINE }
define signext i8 @func_12 ( i16 zeroext %0 , i64 %1 , i8 signext %2 , i64 %3 ) { NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca ARR 3 10 x * i32 NEW_LINE %17 = alloca i16 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i32 NEW_LINE store i16 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i8 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 5 x ARR 3 8 x i32 @g_90 , i64 0 , i64 4 , i64 0 , i64 2 ) %9 NEW_LINE store i32 -4 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 5 x ARR 3 8 x i32 @g_90 , i64 0 , i64 4 , i64 0 , i64 2 ) %11 NEW_LINE store i32 -1822725832 %12 NEW_LINE store * i32 %10 %13 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 6 x ARR 3 5 x ARR 3 8 x i32 @g_90 , i64 0 , i64 4 , i64 0 , i64 2 ) %14 NEW_LINE store * i32 null %15 NEW_LINE store i16 12457 %17 NEW_LINE store i64 3035644975028726137 %18 NEW_LINE store i32 0 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %19 NEW_LINE %22 = icmp slt i32 %21 , 10 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %19 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x * i32 %16 , i64 0 , i64 %25 NEW_LINE store * i32 @g_59 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %19 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %19 NEW_LINE br label %20 NEW_LINE 30: NEW_LINE %31 = load * i32 %9 NEW_LINE store * i32 %31 %9 NEW_LINE %32 = load volatile i32 @g_2065 NEW_LINE %33 = add i32 %32 , 1 NEW_LINE store volatile i32 %33 @g_2065 NEW_LINE %34 = load i16 %5 NEW_LINE %35 = trunc i16 %34 to i8 NEW_LINE ret i8 %35 NEW_LINE }
define i64 @func_8 ( i16 zeroext %0 , * i64 %1 ) { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i16 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca i32 NEW_LINE store i16 %0 %4 NEW_LINE store * i64 %1 %5 NEW_LINE store i32 1753701309 %6 NEW_LINE store i16 0 @g_307 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i16 @g_307 NEW_LINE %9 = zext i16 %8 to i32 NEW_LINE %10 = icmp slt i32 %9 , 26 NEW_LINE br i1 %10 , label %11 , label %49 NEW_LINE 11: NEW_LINE store i32 0 @g_23 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @g_23 NEW_LINE %14 = icmp uge i32 %13 , 41 NEW_LINE br i1 %14 , label %15 , label %43 NEW_LINE 15: NEW_LINE store i16 0 @g_236 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i16 @g_236 NEW_LINE %18 = sext i16 %17 to i32 NEW_LINE %19 = icmp sle i32 %18 , -19 NEW_LINE br i1 %19 , label %20 , label %37 NEW_LINE 20: NEW_LINE store i8 0 @g_49 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i8 @g_49 NEW_LINE %23 = sext i8 %22 to i32 NEW_LINE %24 = icmp eq i32 %23 , -27 NEW_LINE br i1 %24 , label %25 , label %31 NEW_LINE 25: NEW_LINE %26 = load i16 %4 NEW_LINE %27 = zext i16 %26 to i64 NEW_LINE store i64 %27 %3 NEW_LINE br label %52 NEW_LINE 28: NEW_LINE %29 = load i8 @g_49 NEW_LINE %30 = add i8 %29 , -1 NEW_LINE store i8 %30 @g_49 NEW_LINE br label %21 NEW_LINE 31: NEW_LINE %32 = load i16 %4 NEW_LINE %33 = zext i16 %32 to i64 NEW_LINE store i64 %33 %3 NEW_LINE br label %52 NEW_LINE 34: NEW_LINE %35 = load i16 @g_236 NEW_LINE %36 = add i16 %35 , -1 NEW_LINE store i16 %36 @g_236 NEW_LINE br label %16 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = load i32 @g_23 NEW_LINE %40 = trunc i32 %39 to i8 NEW_LINE %41 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %40 , i8 signext 2 ) NEW_LINE %42 = sext i8 %41 to i32 NEW_LINE store i32 %42 @g_23 NEW_LINE br label %12 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i16 @g_307 NEW_LINE %46 = trunc i16 %45 to i8 NEW_LINE %47 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %46 , i8 signext 6 ) NEW_LINE %48 = sext i8 %47 to i16 NEW_LINE store i16 %48 @g_307 NEW_LINE br label %7 NEW_LINE 49: NEW_LINE %50 = load i32 %6 NEW_LINE %51 = sext i32 %50 to i64 NEW_LINE store i64 %51 %3 NEW_LINE br label %52 NEW_LINE 52: NEW_LINE %53 = load i64 %3 NEW_LINE ret i64 %53 NEW_LINE }
define signext i8 @func_15 ( i32 %0 , * i32 %1 , * i32 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca ARR 3 7 x * i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store * i32 %2 %6 NEW_LINE store i32 -101019710 %7 NEW_LINE store * i32 @g_390 %8 NEW_LINE store * i32 null %9 NEW_LINE store * i32 null %10 NEW_LINE store * i32 %7 %11 NEW_LINE store i32 1 %12 NEW_LINE %18 = getelementptr inbounds ARR 3 7 x * i32 %13 , i64 0 , i64 0 NEW_LINE store * i32 @g_48 %18 NEW_LINE %19 = getelementptr inbounds * i32 %18 , i64 1 NEW_LINE store * i32 @g_48 %19 NEW_LINE %20 = getelementptr inbounds * i32 %19 , i64 1 NEW_LINE store * i32 %7 %20 NEW_LINE %21 = getelementptr inbounds * i32 %20 , i64 1 NEW_LINE store * i32 @g_48 %21 NEW_LINE %22 = getelementptr inbounds * i32 %21 , i64 1 NEW_LINE store * i32 @g_48 %22 NEW_LINE %23 = getelementptr inbounds * i32 %22 , i64 1 NEW_LINE store * i32 %7 %23 NEW_LINE %24 = getelementptr inbounds * i32 %23 , i64 1 NEW_LINE store * i32 @g_48 %24 NEW_LINE store i32 957594586 %14 NEW_LINE store i16 -1 %15 NEW_LINE store i64 0 %16 NEW_LINE store i8 0 @g_344 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i8 @g_344 NEW_LINE %27 = zext i8 %26 to i32 NEW_LINE %28 = icmp eq i32 %27 , 22 NEW_LINE br i1 %28 , label %29 , label %37 NEW_LINE 29: NEW_LINE %30 = load i32 %7 NEW_LINE %31 = load * i32 %6 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = and i32 %32 , %30 NEW_LINE store i32 %33 %31 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i8 @g_344 NEW_LINE %36 = add i8 %35 , 1 NEW_LINE store i8 %36 @g_344 NEW_LINE br label %25 NEW_LINE 37: NEW_LINE %38 = load i64 %16 NEW_LINE %39 = add i64 %38 , -1 NEW_LINE store i64 %39 %16 NEW_LINE %40 = load i32 %4 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE ret i8 %41 NEW_LINE }
define * * * i32 @func_59 ( i8 signext %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca ARR 3 10 x i32 NEW_LINE %8 = alloca ARR 3 8 x * * * i32 NEW_LINE %9 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 @g_250 %5 NEW_LINE store i16 -19114 %6 NEW_LINE %10 = bitcast * ARR 3 10 x i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 10 x i32 @__const.func_59.l_536 to * i8 ) , i64 40 , i1 false ) NEW_LINE store i32 0 %9 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %9 NEW_LINE %13 = icmp slt i32 %12 , 8 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %9 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 8 x * * * i32 %8 , i64 0 , i64 %16 NEW_LINE store * * * i32 @g_55 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %9 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %9 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = icmp ne * i32 @g_250 , %4 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = load i16 %6 NEW_LINE %26 = zext i16 %25 to i32 NEW_LINE %27 = and i32 %26 , %24 NEW_LINE %28 = trunc i32 %27 to i16 NEW_LINE store i16 %28 %6 NEW_LINE store i64 -28 @g_139 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i64 @g_139 NEW_LINE %31 = icmp ugt i64 %30 , 33 NEW_LINE br i1 %31 , label %32 , label %39 NEW_LINE 32: NEW_LINE %33 = load i16 %6 NEW_LINE %34 = zext i16 %33 to i32 NEW_LINE %35 = getelementptr inbounds ARR 3 10 x i32 %7 , i64 0 , i64 9 NEW_LINE store i32 %34 %35 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i64 @g_139 NEW_LINE %38 = add i64 %37 , 1 NEW_LINE store i64 %38 @g_139 NEW_LINE br label %29 NEW_LINE 39: NEW_LINE %40 = getelementptr inbounds ARR 3 8 x * * * i32 %8 , i64 0 , i64 4 NEW_LINE %41 = load * * * i32 %40 NEW_LINE ret * * * i32 %41 NEW_LINE }
define i64 @func_19 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca ARR 3 7 x * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE %7 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i64 -1 %3 NEW_LINE %8 = bitcast * ARR 3 7 x * i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_19.l_264 to * i8 ) , i64 56 , i1 false ) NEW_LINE store i64 -1 %5 NEW_LINE %9 = bitcast * ARR 3 10 x i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %9 , i8 0 , i64 40 , i1 false ) NEW_LINE %10 = bitcast * i8 %9 to * ARR 3 10 x i32 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %10 , i32 0 , i32 0 NEW_LINE store i32 -3 %11 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %10 , i32 0 , i32 2 NEW_LINE store i32 -3 %12 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 %10 , i32 0 , i32 4 NEW_LINE store i32 -3 %13 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %10 , i32 0 , i32 6 NEW_LINE store i32 -3 %14 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %10 , i32 0 , i32 8 NEW_LINE store i32 -3 %15 NEW_LINE %16 = load i8 %2 NEW_LINE %17 = load i32 @g_16 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = trunc i64 %19 to i32 NEW_LINE %21 = call i32 @func_23 ( i8 zeroext %16 , i64 %18 , i32 %20 ) NEW_LINE %22 = call i32 @safe_mod_func_int32_t_s_s ( i32 1 , i32 3 ) NEW_LINE %23 = trunc i32 %22 to i16 NEW_LINE %24 = load i8 %2 NEW_LINE %25 = sext i8 %24 to i16 NEW_LINE %26 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext %23 , i16 signext %25 ) NEW_LINE %27 = sext i16 %26 to i32 NEW_LINE %28 = icmp sge i32 %21 , %27 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = load i64 %3 NEW_LINE %31 = trunc i64 %30 to i32 NEW_LINE %32 = call i32 @safe_sub_func_int32_t_s_s ( i32 %29 , i32 %31 ) NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE store i64 %33 %5 NEW_LINE %34 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 5 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = zext i32 %35 to i64 NEW_LINE ret i64 %36 NEW_LINE }
define i16 @func_12 ( i16 signext %0 , i8 signext %1 , i64 %2 , i16 signext %3 ) { NEW_LINE %5 = alloca STRUCT 1 i16 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca * i8 NEW_LINE %11 = alloca STRUCT 8 i16 i32 i32 i24 i32 i16 i32 i24 NEW_LINE store i16 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store * i8 getelementptr inbounds ( STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 i16 i32 bitcast ( * STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 10 i32 i32 i32 i16 i8 i8 i8 i64 i16 i16 i16 i32 @g_571 to * STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 i16 i32 ) , i32 0 , i32 0 ) %10 NEW_LINE %12 = bitcast * STRUCT 1 i16 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 getelementptr inbounds ( STRUCT 2 i8 i8 @__const.func_12.l_1181 , i32 0 , i32 0 ) , i64 2 , i1 false ) NEW_LINE %13 = load * STRUCT 1 i16 @g_296 NEW_LINE %14 = load volatile * * i64 @g_232 NEW_LINE %15 = load volatile * i64 %14 NEW_LINE %16 = load volatile i64 %15 NEW_LINE %17 = icmp ugt i64 -2784717508877760181 , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = load * i8 %10 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = add i8 %20 , 1 NEW_LINE store i8 %21 %19 NEW_LINE %22 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext %20 , i32 6 ) NEW_LINE %23 = zext i8 %22 to i32 NEW_LINE %24 = xor i32 %18 , %23 NEW_LINE %25 = bitcast * STRUCT 8 i16 i32 i32 i24 i32 i16 i32 i24 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %25 , * i8 getelementptr inbounds ( STRUCT 30 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 i8 i8 i8 i8 i8 i8 i8 i8 @g_1180 , i32 0 , i32 0 ) , i64 32 , i1 true ) NEW_LINE %26 = bitcast * STRUCT 1 i16 %13 to * i8 NEW_LINE %27 = bitcast * STRUCT 1 i16 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %26 , * i8 %27 , i64 2 , i1 false ) NEW_LINE %28 = getelementptr inbounds STRUCT 1 i16 %5 , i32 0 , i32 0 NEW_LINE %29 = load i16 %28 NEW_LINE ret i16 %29 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca * i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 6 x ARR 3 8 x * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x i32 @g_3 , i64 0 , i64 2 , i64 1 ) %1 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x i32 @g_3 , i64 0 , i64 4 , i64 1 ) %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x i32 @g_3 , i64 0 , i64 0 , i64 0 ) %3 NEW_LINE store * i32 null %4 NEW_LINE store i16 -11682 %6 NEW_LINE store i32 1 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %8 NEW_LINE %12 = icmp slt i32 %11 , 6 NEW_LINE br i1 %12 , label %13 , label %31 NEW_LINE 13: NEW_LINE store i32 0 %9 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %9 NEW_LINE %16 = icmp slt i32 %15 , 8 NEW_LINE br i1 %16 , label %17 , label %27 NEW_LINE 17: NEW_LINE %18 = load i32 %8 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 6 x ARR 3 8 x * i32 %5 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %9 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 8 x * i32 %20 , i64 0 , i64 %22 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x i32 @g_3 , i64 0 , i64 4 , i64 0 ) %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %9 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %9 NEW_LINE br label %14 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %8 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %8 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %7 NEW_LINE %33 = add i32 %32 , 1 NEW_LINE store i32 %33 %7 NEW_LINE %34 = load i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x i32 @g_3 , i64 0 , i64 2 , i64 1 ) NEW_LINE ret i32 %34 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call i32 @func_1 ( ) NEW_LINE store i32 0 %6 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = icmp slt i32 %20 , 1 NEW_LINE br i1 %21 , label %22 , label %37 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 1 x i64 @g_2 , i64 0 , i64 %24 NEW_LINE %26 = load i64 %25 NEW_LINE %27 = load i32 %7 NEW_LINE call void @transparent_crc ( i64 %26 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2[i]~00" , i64 0 , i64 0 ) , i32 %27 ) NEW_LINE %28 = load i32 %7 NEW_LINE %29 = icmp ne i32 %28 , 0 NEW_LINE br i1 %29 , label %30 , label %33 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE %32 = call i32 ( * i8 , ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 14 x i8 @".str.4:index ▁ = ▁ [%d]~0A~00" , i64 0 , i64 0 ) , i32 %31 ) NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %6 NEW_LINE br label %19 NEW_LINE 37: NEW_LINE %38 = load i32 @crc32_context NEW_LINE %39 = zext i32 %38 to i64 NEW_LINE %40 = xor i64 %39 , 4294967295 NEW_LINE %41 = trunc i64 %40 to i32 NEW_LINE %42 = load i32 %7 NEW_LINE call void @platform_main_end ( i32 %41 , i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define * STRUCT 1 * i8 @func_83 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca ARR 3 7 x ARR 3 1 x ARR 3 7 x * STRUCT 1 * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 4 x ARR 3 4 x i32 @g_54 , i64 0 , i64 0 , i64 0 , i64 2 ) %3 NEW_LINE store * * i32 %3 %4 NEW_LINE %9 = bitcast * ARR 3 7 x ARR 3 1 x ARR 3 7 x * STRUCT 1 * i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 7 x ARR 3 1 x ARR 3 7 x * STRUCT 1 * i8 @__const.func_83.l_283 to * i8 ) , i64 392 , i1 false ) NEW_LINE %10 = load * i32 %2 NEW_LINE %11 = load * * i32 %4 NEW_LINE store * i32 %10 %11 NEW_LINE %12 = getelementptr inbounds ARR 3 7 x ARR 3 1 x ARR 3 7 x * STRUCT 1 * i8 %5 , i64 0 , i64 2 NEW_LINE %13 = getelementptr inbounds ARR 3 1 x ARR 3 7 x * STRUCT 1 * i8 %12 , i64 0 , i64 0 NEW_LINE %14 = getelementptr inbounds ARR 3 7 x * STRUCT 1 * i8 %13 , i64 0 , i64 2 NEW_LINE %15 = load * STRUCT 1 * i8 %14 NEW_LINE ret * STRUCT 1 * i8 %15 NEW_LINE }
define signext i8 @func_84 ( i16 signext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 9 x ARR 3 3 x * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store * i32 @g_344 %5 NEW_LINE store * i32 @g_344 %6 NEW_LINE %14 = bitcast * ARR 3 9 x ARR 3 3 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 9 x ARR 3 3 x * i32 @__const.func_84.l_347 to * i8 ) , i64 216 , i1 false ) NEW_LINE store i8 -1 %8 NEW_LINE store i8 86 %9 NEW_LINE store i64 -1 %10 NEW_LINE store i8 109 %11 NEW_LINE %15 = load i8 %9 NEW_LINE %16 = add i8 %15 , -1 NEW_LINE store i8 %16 %9 NEW_LINE %17 = load i16 getelementptr inbounds ( ARR 3 10 x i16 @g_354 , i64 0 , i64 7 ) NEW_LINE %18 = trunc i16 %17 to i8 NEW_LINE %19 = load i64 @g_191 NEW_LINE %20 = trunc i64 %19 to i8 NEW_LINE %21 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %18 , i8 zeroext %20 ) NEW_LINE %22 = zext i8 %21 to i32 NEW_LINE %23 = load * i32 %4 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = and i32 %24 , %22 NEW_LINE store i32 %25 %23 NEW_LINE %26 = load i64 %10 NEW_LINE %27 = add i64 %26 , 1 NEW_LINE store i64 %27 %10 NEW_LINE ret i8 109 NEW_LINE }
define * i8 @func_56 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca ARR 3 3 x ARR 3 10 x * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i8 %0 %2 NEW_LINE %8 = bitcast * ARR 3 3 x ARR 3 10 x * i8 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 , i8 0 , i64 240 , i1 false ) NEW_LINE store i64 0 @g_130 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 @g_130 NEW_LINE %11 = icmp eq i64 %10 , -7 NEW_LINE br i1 %11 , label %12 , label %26 NEW_LINE 12: NEW_LINE store * i32 null %6 NEW_LINE store i8 9 @g_272 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i8 @g_272 NEW_LINE %15 = zext i8 %14 to i32 NEW_LINE %16 = icmp ne i32 %15 , 51 NEW_LINE br i1 %16 , label %17 , label %22 NEW_LINE 17: NEW_LINE store * i32 null %7 NEW_LINE %18 = load * i32 %6 NEW_LINE store * i32 %18 %7 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i8 @g_272 NEW_LINE %21 = add i8 %20 , 1 NEW_LINE store i8 %21 @g_272 NEW_LINE br label %13 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 @g_130 NEW_LINE %25 = add nsw i64 %24 , -1 NEW_LINE store i64 %25 @g_130 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = getelementptr inbounds ARR 3 3 x ARR 3 10 x * i8 %3 , i64 0 , i64 0 NEW_LINE %28 = getelementptr inbounds ARR 3 10 x * i8 %27 , i64 0 , i64 3 NEW_LINE %29 = load * i8 %28 NEW_LINE ret * i8 %29 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call i32 @func_1 ( ) NEW_LINE store i32 0 %6 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = icmp slt i32 %20 , 2 NEW_LINE br i1 %21 , label %22 , label %38 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 2 x i32 @g_2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = load i32 %7 NEW_LINE call void @transparent_crc ( i64 %27 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2[i]~00" , i64 0 , i64 0 ) , i32 %28 ) NEW_LINE %29 = load i32 %7 NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %34 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = call i32 ( * i8 , ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 14 x i8 @".str.4:index ▁ = ▁ [%d]~0A~00" , i64 0 , i64 0 ) , i32 %32 ) NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %6 NEW_LINE br label %19 NEW_LINE 38: NEW_LINE %39 = load i32 @crc32_context NEW_LINE %40 = zext i32 %39 to i64 NEW_LINE %41 = xor i64 %40 , 4294967295 NEW_LINE %42 = trunc i64 %41 to i32 NEW_LINE %43 = load i32 %7 NEW_LINE call void @platform_main_end ( i32 %42 , i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @func_57 ( i16 zeroext %0 , i32 %1 , i16 signext %2 , i8 signext %3 , i16 signext %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca ARR 3 6 x ARR 3 8 x i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i16 %4 %10 NEW_LINE store i32 47843666 %11 NEW_LINE store * i64 null %12 NEW_LINE %17 = bitcast * ARR 3 6 x ARR 3 8 x i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 6 x ARR 3 8 x i32 @__const.func_57.l_265 to * i8 ) , i64 192 , i1 false ) NEW_LINE store i32 -666936841 %14 NEW_LINE %18 = load i32 %11 NEW_LINE %19 = getelementptr inbounds ARR 3 6 x ARR 3 8 x i32 %13 , i64 0 , i64 4 NEW_LINE %20 = getelementptr inbounds ARR 3 8 x i32 %19 , i64 0 , i64 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = and i32 %21 , %18 NEW_LINE store i32 %22 %20 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = icmp ule i64 %23 , -276208285768792793 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = load volatile * i32 @g_188 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = or i32 %27 , %25 NEW_LINE store i32 %28 %26 NEW_LINE %29 = load i32 %14 NEW_LINE ret i32 %29 NEW_LINE }
define signext i16 @func_41 ( * i32 %0 , * i32 %1 , * i32 %2 , * i32 %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca ARR 3 8 x * i32 NEW_LINE %14 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store i64 6662317432902882494 %9 NEW_LINE store i32 9 %10 NEW_LINE store i8 9 %11 NEW_LINE %15 = load i64 %9 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE %17 = load * i32 @g_720 NEW_LINE store i32 %16 %17 NEW_LINE %18 = load i32 %10 NEW_LINE %19 = or i32 %18 , %16 NEW_LINE store i32 %19 %10 NEW_LINE %20 = load i32 %10 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i64 %9 NEW_LINE %23 = trunc i64 %22 to i16 NEW_LINE %24 = call * i32 @func_53 ( i64 %21 , i16 signext %23 ) NEW_LINE %25 = load volatile * * i32 @g_1104 NEW_LINE store * i32 %24 %25 NEW_LINE store i32 0 @g_416 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 @g_416 NEW_LINE %28 = icmp ugt i32 %27 , 8 NEW_LINE br i1 %28 , label %29 , label %40 NEW_LINE 29: NEW_LINE store i32 -1 %12 NEW_LINE %30 = bitcast * ARR 3 8 x * i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_41.l_1109 to * i8 ) , i64 64 , i1 false ) NEW_LINE %31 = load * i32 %8 NEW_LINE %32 = load volatile * * i32 @g_1107 NEW_LINE store * i32 %31 %32 NEW_LINE %33 = load i8 %11 NEW_LINE %34 = add i8 %33 , 1 NEW_LINE store i8 %34 %11 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 @g_416 NEW_LINE %37 = trunc i32 %36 to i16 NEW_LINE %38 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %37 , i16 zeroext 6 ) NEW_LINE %39 = zext i16 %38 to i32 NEW_LINE store i32 %39 @g_416 NEW_LINE br label %26 NEW_LINE 40: NEW_LINE %41 = load i32 %10 NEW_LINE %42 = trunc i32 %41 to i16 NEW_LINE ret i16 %42 NEW_LINE }
define * i32 @func_68 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 4 x i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca ARR 3 7 x * i32 NEW_LINE %15 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 @g_71 %3 NEW_LINE store * i32 @g_71 %4 NEW_LINE store * i32 null %5 NEW_LINE store i32 926819092 %6 NEW_LINE %16 = getelementptr inbounds ARR 3 4 x i32 %7 , i64 0 , i64 1 NEW_LINE store * i32 %16 %8 NEW_LINE store * i32 @g_71 %9 NEW_LINE %17 = getelementptr inbounds ARR 3 4 x i32 %7 , i64 0 , i64 2 NEW_LINE store * i32 %17 %10 NEW_LINE %18 = getelementptr inbounds ARR 3 4 x i32 %7 , i64 0 , i64 0 NEW_LINE store * i32 %18 %11 NEW_LINE %19 = getelementptr inbounds ARR 3 4 x i32 %7 , i64 0 , i64 3 NEW_LINE store * i32 %19 %12 NEW_LINE store * i32 null %13 NEW_LINE %20 = bitcast * ARR 3 7 x * i32 %14 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * ARR 3 7 x * i32 @__const.func_68.l_82 to * i8 ) , i64 56 , i1 false ) NEW_LINE store i32 0 %15 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %15 NEW_LINE %23 = icmp slt i32 %22 , 4 NEW_LINE br i1 %23 , label %24 , label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %15 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 4 x i32 %7 , i64 0 , i64 %26 NEW_LINE store i32 6 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %15 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %15 NEW_LINE br label %21 NEW_LINE 31: NEW_LINE %32 = load * i32 %3 NEW_LINE store i32 9 %32 NEW_LINE %33 = load volatile i16 @g_83 NEW_LINE %34 = add i16 %33 , -1 NEW_LINE store volatile i16 %34 @g_83 NEW_LINE ret * i32 @g_71 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call signext i8 @func_1 ( ) NEW_LINE store i32 0 %6 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = icmp slt i32 %20 , 1 NEW_LINE br i1 %21 , label %22 , label %38 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 1 x i32 @g_3 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = load i32 %7 NEW_LINE call void @transparent_crc ( i64 %27 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_3[i]~00" , i64 0 , i64 0 ) , i32 %28 ) NEW_LINE %29 = load i32 %7 NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %34 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = call i32 ( * i8 , ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 14 x i8 @".str.4:index ▁ = ▁ [%d]~0A~00" , i64 0 , i64 0 ) , i32 %32 ) NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %6 NEW_LINE br label %19 NEW_LINE 38: NEW_LINE %39 = load i32 @crc32_context NEW_LINE %40 = zext i32 %39 to i64 NEW_LINE %41 = xor i64 %40 , 4294967295 NEW_LINE %42 = trunc i64 %41 to i32 NEW_LINE %43 = load i32 %7 NEW_LINE call void @platform_main_end ( i32 %42 , i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp eq i32 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load * * i8 %5 NEW_LINE %12 = getelementptr inbounds * i8 %11 , i64 1 NEW_LINE %13 = load * i8 %12 NEW_LINE %14 = call i32 @strcmp ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 1 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %18 = call zeroext i16 @func_1 ( ) NEW_LINE store i32 0 %6 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = icmp slt i32 %20 , 2 NEW_LINE br i1 %21 , label %22 , label %38 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 2 x i8 @g_2 , i64 0 , i64 %24 NEW_LINE %26 = load i8 %25 NEW_LINE %27 = zext i8 %26 to i64 NEW_LINE %28 = load i32 %7 NEW_LINE call void @transparent_crc ( i64 %27 , * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.3:g_2[i]~00" , i64 0 , i64 0 ) , i32 %28 ) NEW_LINE %29 = load i32 %7 NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %34 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = call i32 ( * i8 , ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 14 x i8 @".str.4:index ▁ = ▁ [%d]~0A~00" , i64 0 , i64 0 ) , i32 %32 ) NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %6 NEW_LINE br label %19 NEW_LINE 38: NEW_LINE %39 = load i32 @crc32_context NEW_LINE %40 = zext i32 %39 to i64 NEW_LINE %41 = xor i64 %40 , 4294967295 NEW_LINE %42 = trunc i64 %41 to i32 NEW_LINE %43 = load i32 %7 NEW_LINE call void @platform_main_end ( i32 %42 , i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define * i32 @func_41 ( i8 signext %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 7 x * i32 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store i32 -2035115595 %5 NEW_LINE %13 = getelementptr inbounds ARR 3 7 x * i32 %6 , i64 0 , i64 0 NEW_LINE store * i32 %5 %13 NEW_LINE %14 = getelementptr inbounds * i32 %13 , i64 1 NEW_LINE store * i32 %5 %14 NEW_LINE %15 = getelementptr inbounds * i32 %14 , i64 1 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_30 , i64 0 , i64 6 ) %15 NEW_LINE %16 = getelementptr inbounds * i32 %15 , i64 1 NEW_LINE store * i32 %5 %16 NEW_LINE %17 = getelementptr inbounds * i32 %16 , i64 1 NEW_LINE store * i32 %5 %17 NEW_LINE %18 = getelementptr inbounds * i32 %17 , i64 1 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_30 , i64 0 , i64 6 ) %18 NEW_LINE %19 = getelementptr inbounds * i32 %18 , i64 1 NEW_LINE store * i32 %5 %19 NEW_LINE store * i64 getelementptr inbounds ( ARR 3 6 x i64 @g_73 , i64 0 , i64 3 ) %7 NEW_LINE store * i8 @g_75 %8 NEW_LINE store * * i32 null %9 NEW_LINE store * * i32 null %10 NEW_LINE store * i32 @g_67 %11 NEW_LINE %20 = load i8 %4 NEW_LINE %21 = zext i8 %20 to i64 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = zext i32 %22 to i64 NEW_LINE %24 = call i64 @safe_add_func_uint64_t_u_u ( i64 %21 , i64 %23 ) NEW_LINE %25 = getelementptr inbounds ARR 3 7 x * i32 %6 , i64 0 , i64 2 NEW_LINE %26 = load * i32 %25 NEW_LINE %27 = icmp ne * i32 %5 , %26 NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = load * i64 %7 NEW_LINE store i64 %29 %30 NEW_LINE %31 = icmp eq i64 %24 , %29 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = trunc i32 %32 to i8 NEW_LINE %34 = load * i8 %8 NEW_LINE store i8 %33 %34 NEW_LINE store * i32 null %11 NEW_LINE ret * i32 @g_67 NEW_LINE }
define * i32 @func_46 ( i32 %0 , i32 %1 , * i32 %2 , i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 9 x ARR 3 6 x * i32 NEW_LINE %13 = alloca i8 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 null %11 NEW_LINE %16 = bitcast * ARR 3 9 x ARR 3 6 x * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 9 x ARR 3 6 x * i32 @__const.func_46.l_1262 to * i8 ) , i64 432 , i1 false ) NEW_LINE store i8 1 %13 NEW_LINE %17 = load i8 %13 NEW_LINE %18 = add i8 %17 , -1 NEW_LINE store i8 %18 %13 NEW_LINE %19 = getelementptr inbounds ARR 3 9 x ARR 3 6 x * i32 %12 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 6 x * i32 %19 , i64 0 , i64 5 NEW_LINE %21 = load * i32 %20 NEW_LINE ret * i32 %21 NEW_LINE }
define * i32 @func_42 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * * * * i32 NEW_LINE %5 = alloca * i32 NEW_LINE store * i16 %0 %2 NEW_LINE store i8 -1 %3 NEW_LINE store * * * * i32 @g_168 %4 NEW_LINE store * i32 @g_120 %5 NEW_LINE %6 = load i8 %3 NEW_LINE %7 = zext i8 %6 to i64 NEW_LINE %8 = load * * * * i32 %4 NEW_LINE %9 = icmp eq * * * * i32 null , %8 NEW_LINE %10 = zext i1 %9 to i32 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = load i8 %3 NEW_LINE %13 = zext i8 %12 to i64 NEW_LINE %14 = load i8 %3 NEW_LINE %15 = zext i8 %14 to i32 NEW_LINE %16 = load i8 %3 NEW_LINE %17 = zext i8 %16 to i32 NEW_LINE %18 = load i8 %3 NEW_LINE %19 = zext i8 %18 to i32 NEW_LINE %20 = load * i16 %2 NEW_LINE %21 = load i16 %20 NEW_LINE %22 = sext i16 %21 to i32 NEW_LINE %23 = icmp eq i32 %19 , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = icmp sle i32 %17 , %24 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = and i32 %15 , %26 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = and i64 %28 , 31231 NEW_LINE %30 = and i64 %13 , %29 NEW_LINE %31 = icmp slt i64 %30 , 2 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = load i8 %3 NEW_LINE %35 = zext i8 %34 to i64 NEW_LINE %36 = call i64 @safe_add_func_uint64_t_u_u ( i64 %33 , i64 %35 ) NEW_LINE %37 = call i64 @safe_div_func_uint64_t_u_u ( i64 %7 , i64 %36 ) NEW_LINE %38 = icmp ne i64 %37 , 0 NEW_LINE br i1 %38 , label %43 , label %39 NEW_LINE 39: NEW_LINE %40 = load i8 %3 NEW_LINE %41 = zext i8 %40 to i32 NEW_LINE %42 = icmp ne i32 %41 , 0 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = phi i1 ARR 2 true %1 , ARR 2 %42 %39 NEW_LINE %45 = zext i1 %44 to i32 NEW_LINE %46 = load i8 %3 NEW_LINE %47 = zext i8 %46 to i32 NEW_LINE %48 = icmp sle i32 %45 , %47 NEW_LINE %49 = zext i1 %48 to i32 NEW_LINE %50 = load * i32 %5 NEW_LINE store i32 %49 %50 NEW_LINE %51 = load * * i32 @g_372 NEW_LINE %52 = load volatile * i32 %51 NEW_LINE %53 = load volatile i32 %52 NEW_LINE %54 = xor i32 %53 , %49 NEW_LINE store volatile i32 %54 %52 NEW_LINE %55 = load * i32 %5 NEW_LINE ret * i32 %55 NEW_LINE }
define signext i16 @func_41 ( * i32 %0 , i32 %1 , * i32 %2 , * i16 %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i16 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * * i8 NEW_LINE %15 = alloca ARR 3 3 x * * * i8 NEW_LINE %16 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i16 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i32 1517786439 %11 NEW_LINE store i16 -5 %12 NEW_LINE store i32 -1 %13 NEW_LINE store * * i8 @g_293 %14 NEW_LINE store i32 0 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %16 NEW_LINE %19 = icmp slt i32 %18 , 3 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %16 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 3 x * * * i8 %15 , i64 0 , i64 %22 NEW_LINE store * * * i8 %14 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %16 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %16 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE %28 = load i32 %11 NEW_LINE %29 = load i16 %12 NEW_LINE %30 = zext i16 %29 to i32 NEW_LINE %31 = load i32 %13 NEW_LINE %32 = and i32 %31 , %30 NEW_LINE store i32 %32 %13 NEW_LINE %33 = load i32 %7 NEW_LINE %34 = load * i16 %9 NEW_LINE %35 = load i16 %34 NEW_LINE %36 = zext i16 %35 to i32 NEW_LINE store * * i8 null @g_1635 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE %38 = zext i1 %37 to i32 NEW_LINE %39 = icmp slt i32 %33 , %38 NEW_LINE %40 = zext i1 %39 to i32 NEW_LINE %41 = icmp eq i32 %32 , %40 NEW_LINE %42 = zext i1 %41 to i32 NEW_LINE %43 = call i32 @safe_sub_func_int32_t_s_s ( i32 %28 , i32 %42 ) NEW_LINE %44 = sext i32 %43 to i64 NEW_LINE %45 = icmp uge i64 0 , %44 NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE %47 = load * i32 @g_210 NEW_LINE %48 = load i32 %47 NEW_LINE %49 = or i32 %48 , %46 NEW_LINE store i32 %49 %47 NEW_LINE %50 = load i32 %13 NEW_LINE %51 = trunc i32 %50 to i16 NEW_LINE ret i16 %51 NEW_LINE }
define * i32 @func_39 ( * i32 %0 , i32 %1 , * i32 %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca * i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i16 10930 %11 NEW_LINE store * i64 @g_74 %12 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x ARR 3 4 x i32 @g_80 , i64 0 , i64 0 , i64 1 ) %13 NEW_LINE %14 = load * i32 %6 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %18 , label %17 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = phi i1 ARR 2 true %5 , ARR 2 true %17 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE %22 = load * * i16 @g_403 NEW_LINE %23 = load volatile * i16 %22 NEW_LINE %24 = load i16 %23 NEW_LINE %25 = zext i16 %24 to i32 NEW_LINE %26 = load i32 %10 NEW_LINE %27 = load i32 %10 NEW_LINE %28 = icmp slt i32 %25 , %27 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = icmp slt i32 %29 , 1 NEW_LINE %31 = zext i1 %30 to i32 NEW_LINE %32 = trunc i32 %31 to i8 NEW_LINE %33 = call zeroext i8 @safe_mul_func_uint8_t_u_u ( i8 zeroext %32 , i8 zeroext -78 ) NEW_LINE %34 = zext i8 %33 to i64 NEW_LINE %35 = load * i64 %12 NEW_LINE %36 = load i64 %35 NEW_LINE %37 = or i64 %36 , %34 NEW_LINE store i64 %37 %35 NEW_LINE %38 = icmp slt i64 10930 , %37 NEW_LINE %39 = zext i1 %38 to i32 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE %41 = icmp ne i64 %40 , -9 NEW_LINE %42 = zext i1 %41 to i32 NEW_LINE %43 = sext i32 %42 to i64 NEW_LINE %44 = and i64 %43 , 1523902034 NEW_LINE %45 = trunc i64 %44 to i8 NEW_LINE %46 = call signext i8 @safe_mod_func_int8_t_s_s ( i8 signext %21 , i8 signext %45 ) NEW_LINE %47 = sext i8 %46 to i32 NEW_LINE %48 = load * i32 %9 NEW_LINE %49 = load i32 %48 NEW_LINE %50 = and i32 %49 , %47 NEW_LINE store i32 %50 %48 NEW_LINE %51 = load * i32 %13 NEW_LINE ret * i32 %51 NEW_LINE }
define * i32 @func_26 ( i64 %0 , * i32 %1 , i16 zeroext %2 , * i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * * i32 NEW_LINE %11 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE store * i32 @g_250 %9 NEW_LINE store * * i32 %9 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = load i64 %5 NEW_LINE %13 = load * * * i32 @g_79 NEW_LINE %14 = load * * i32 %13 NEW_LINE %15 = load * i32 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 @safe_unary_minus_func_int32_t_s ( i32 %16 ) NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %22 , label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @g_590 NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i1 ARR 2 false %19 , ARR 2 false %22 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = icmp eq i64 %12 , %26 NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE %29 = load i16 %7 NEW_LINE %30 = load * * i32 %10 NEW_LINE %31 = icmp ne * * i32 null , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = load i32 %11 NEW_LINE %34 = trunc i32 %33 to i8 NEW_LINE %35 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext 0 , i8 signext %34 ) NEW_LINE %36 = sext i8 %35 to i32 NEW_LINE %37 = icmp sgt i32 %32 , %36 NEW_LINE br i1 %37 , label %41 , label %38 NEW_LINE 38: NEW_LINE %39 = load i64 %5 NEW_LINE %40 = icmp ne i64 %39 , 0 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = phi i1 ARR 2 true %23 , ARR 2 %40 %38 NEW_LINE %43 = zext i1 %42 to i32 NEW_LINE %44 = sext i32 %43 to i64 NEW_LINE %45 = and i64 -5 , %44 NEW_LINE %46 = trunc i64 %45 to i32 NEW_LINE %47 = load i16 %7 NEW_LINE %48 = zext i16 %47 to i64 NEW_LINE %49 = load * i32 %6 NEW_LINE %50 = call * i32 @func_40 ( i32 %28 , i16 zeroext %29 , i32 %46 , i64 %48 , * i32 %49 ) NEW_LINE %51 = load * * * i32 @g_122 NEW_LINE %52 = load volatile * * i32 %51 NEW_LINE store * i32 %50 %52 NEW_LINE %53 = load * i32 %8 NEW_LINE ret * i32 %53 NEW_LINE }
define i64 @func_99 ( * i16 %0 , i32 %1 , * i16 %2 , i32 %3 ) { NEW_LINE %5 = alloca * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i16 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i16 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 -2 %9 NEW_LINE store i32 996525292 %10 NEW_LINE store * i32 %8 @g_119 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %9 NEW_LINE %13 = icmp sle i32 %11 , %12 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE %15 = load i32 %9 NEW_LINE store i32 %15 %9 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = load i32 %10 NEW_LINE %18 = trunc i32 %17 to i8 NEW_LINE %19 = call zeroext i8 @safe_rshift_func_uint8_t_u_u ( i8 zeroext %18 , i32 6 ) NEW_LINE %20 = zext i8 %19 to i64 NEW_LINE %21 = call i64 @safe_mod_func_int64_t_s_s ( i64 %16 , i64 %20 ) NEW_LINE %22 = icmp eq i64 %21 , 1 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE %24 = icmp ne * i32 %9 , @g_105 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = trunc i32 %25 to i8 NEW_LINE %27 = load i32 %8 NEW_LINE %28 = load i16 getelementptr inbounds ( ARR 3 9 x ARR 3 1 x ARR 3 2 x i16 @g_52 , i64 0 , i64 1 , i64 0 , i64 1 ) NEW_LINE %29 = sext i16 %28 to i32 NEW_LINE %30 = xor i32 %29 , -1 NEW_LINE %31 = icmp ne i32 %30 , 0 NEW_LINE br i1 %31 , label %32 , label %35 NEW_LINE 32: NEW_LINE %33 = load i32 %9 NEW_LINE %34 = icmp ne i32 %33 , 0 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = phi i1 ARR 2 false %4 , ARR 2 %34 %32 NEW_LINE %37 = zext i1 %36 to i32 NEW_LINE %38 = trunc i32 %37 to i8 NEW_LINE %39 = call zeroext i8 @safe_div_func_uint8_t_u_u ( i8 zeroext %26 , i8 zeroext %38 ) NEW_LINE %40 = load i32 %10 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE %42 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %39 , i8 signext %41 ) NEW_LINE %43 = sext i8 %42 to i32 NEW_LINE %44 = load * i32 @g_119 NEW_LINE store i32 %43 %44 NEW_LINE %45 = load * i32 @g_119 NEW_LINE %46 = load i32 %45 NEW_LINE %47 = load * i32 @g_119 NEW_LINE store i32 %46 %47 NEW_LINE %48 = load i32 %9 NEW_LINE %49 = sext i32 %48 to i64 NEW_LINE ret i64 %49 NEW_LINE }
define signext i8 @func_58 ( * i64 %0 ) { NEW_LINE %2 = alloca * i64 NEW_LINE %3 = alloca ARR 3 6 x i32 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca ARR 3 3 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i64 %0 %2 NEW_LINE store * i16 @g_66 %4 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = icmp slt i32 %8 , 6 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 6 x i32 %3 , i64 0 , i64 %12 NEW_LINE store i32 -1 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %6 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE store i32 0 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = icmp slt i32 %19 , 3 NEW_LINE br i1 %20 , label %21 , label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 3 x * i32 %5 , i64 0 , i64 %23 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 1 x i32 @g_68 , i64 0 , i64 0 ) %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %6 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %6 NEW_LINE br label %18 NEW_LINE 28: NEW_LINE %29 = load i64 @g_34 NEW_LINE %30 = trunc i64 %29 to i32 NEW_LINE %31 = load i32 getelementptr inbounds ( ARR 3 6 x ARR 3 6 x i32 @g_17 , i64 0 , i64 1 , i64 5 ) NEW_LINE %32 = getelementptr inbounds ARR 3 6 x i32 %3 , i64 0 , i64 5 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = or i32 %31 , %33 NEW_LINE %35 = trunc i32 %34 to i16 NEW_LINE %36 = load * i16 %4 NEW_LINE store i16 %35 %36 NEW_LINE %37 = icmp ne i16 %35 , 0 NEW_LINE %38 = xor i1 %37 , true NEW_LINE %39 = zext i1 %38 to i32 NEW_LINE %40 = call i32 @safe_sub_func_int32_t_s_s ( i32 %30 , i32 %39 ) NEW_LINE store i32 %40 getelementptr inbounds ( ARR 3 1 x i32 @g_68 , i64 0 , i64 0 ) NEW_LINE %41 = load i32 getelementptr inbounds ( ARR 3 7 x ARR 3 2 x ARR 3 8 x i32 @g_10 , i64 0 , i64 6 , i64 1 , i64 3 ) NEW_LINE %42 = trunc i32 %41 to i8 NEW_LINE ret i8 %42 NEW_LINE }
define * STRUCT 1 i32 @func_27 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca * STRUCT 1 i32 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 2 x * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * STRUCT 1 i32 NEW_LINE store i8 %0 %3 NEW_LINE store * i32 bitcast ( * ARR 3 9 x STRUCT 2 i8 ARR 3 3 x i8 @g_99 to * i32 ) %4 NEW_LINE store i16 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp slt i32 %10 , 2 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 2 x * i32 %5 , i64 0 , i64 %14 NEW_LINE store * i32 bitcast ( * STRUCT 2 i8 ARR 3 3 x i8 @g_903 to * i32 ) %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %7 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i16 %6 NEW_LINE %21 = add i16 %20 , -1 NEW_LINE store i16 %21 %6 NEW_LINE store i8 0 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_1745 , i32 0 , i32 0 ) NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_1745 , i32 0 , i32 0 ) NEW_LINE %24 = sext i8 %23 to i32 NEW_LINE %25 = icmp sle i32 %24 , 9 NEW_LINE br i1 %25 , label %26 , label %31 NEW_LINE 26: NEW_LINE store * STRUCT 1 i32 getelementptr inbounds ( ARR 3 4 x STRUCT 1 i32 bitcast ( * ARR 3 4 x STRUCT 2 i8 ARR 3 3 x i8 @g_491 to * ARR 3 4 x STRUCT 1 i32 ) , i64 0 , i64 0 ) %8 NEW_LINE %27 = load * STRUCT 1 i32 %8 NEW_LINE store * STRUCT 1 i32 %27 %2 NEW_LINE br label %34 NEW_LINE 28: NEW_LINE %29 = load i8 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_1745 , i32 0 , i32 0 ) NEW_LINE %30 = add i8 %29 , 1 NEW_LINE store i8 %30 getelementptr inbounds ( STRUCT 2 i8 ARR 3 3 x i8 @g_1745 , i32 0 , i32 0 ) NEW_LINE br label %22 NEW_LINE 31: NEW_LINE %32 = load volatile * * STRUCT 1 i32 @g_101 NEW_LINE %33 = load * STRUCT 1 i32 %32 NEW_LINE store * STRUCT 1 i32 %33 %2 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load * STRUCT 1 i32 %2 NEW_LINE ret * STRUCT 1 i32 %35 NEW_LINE }
define dso_local i32 @main ( i32 %0 , * * i8 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , 2 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load * * i8 %5 NEW_LINE %11 = getelementptr inbounds * i8 %10 , i64 1 NEW_LINE %12 = load * i8 %11 NEW_LINE %13 = call i32 @strcmp ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" , i64 0 , i64 0 ) ) NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE call void @platform_main_begin ( ) NEW_LINE call void @crc32_gentab ( ) NEW_LINE %17 = call signext i8 @func_1 ( ) NEW_LINE %18 = load i16 @g_3 NEW_LINE %19 = zext i16 %18 to i64 NEW_LINE %20 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %19 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:g_3~00" , i64 0 , i64 0 ) , i32 %20 ) NEW_LINE %21 = load i64 @g_4 NEW_LINE %22 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %21 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:g_4~00" , i64 0 , i64 0 ) , i32 %22 ) NEW_LINE %23 = load i32 @g_27 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %24 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.5:g_27~00" , i64 0 , i64 0 ) , i32 %25 ) NEW_LINE %26 = load volatile i32 @g_42 NEW_LINE %27 = zext i32 %26 to i64 NEW_LINE %28 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %27 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.6:g_42~00" , i64 0 , i64 0 ) , i32 %28 ) NEW_LINE %29 = load i64 @g_54 NEW_LINE %30 = load i32 %6 NEW_LINE call void @transparent_crc ( i64 %29 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.7:g_54~00" , i64 0 , i64 0 ) , i32 %30 ) NEW_LINE %31 = load i32 @crc32_context NEW_LINE %32 = zext i32 %31 to i64 NEW_LINE %33 = xor i64 %32 , 4294967295 NEW_LINE %34 = trunc i64 %33 to i32 NEW_LINE %35 = load i32 %6 NEW_LINE call void @platform_main_end ( i32 %34 , i32 %35 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @func_62 ( i32 %0 , i64 %1 , * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca STRUCT 1 i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca STRUCT 1 i32 NEW_LINE %12 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 3 x i32 @g_97 , i64 0 , i64 0 , i64 2 ) %10 NEW_LINE %13 = bitcast * STRUCT 1 i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * STRUCT 1 i32 @__const.func_62.l_99 to * i8 ) , i64 4 , i1 false ) NEW_LINE store i64 -7 %7 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %7 NEW_LINE %16 = icmp sgt i64 %15 , -27 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x ARR 3 3 x i32 @g_97 , i64 0 , i64 0 , i64 2 ) %12 NEW_LINE store i32 2 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = icmp uge i32 %19 , 50 NEW_LINE br i1 %20 , label %21 , label %26 NEW_LINE 21: NEW_LINE %22 = bitcast * STRUCT 1 i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %22 , * i8 bitcast ( * STRUCT 1 i32 @g_95 to * i8 ) , i64 4 , i1 false ) NEW_LINE br label %39 NEW_LINE 23: NEW_LINE %24 = load i32 %6 NEW_LINE %25 = add i32 %24 , 1 NEW_LINE store i32 %25 %6 NEW_LINE br label %18 NEW_LINE 26: NEW_LINE %27 = load * i32 %8 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = load * i32 %12 NEW_LINE store i32 %28 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i64 %7 NEW_LINE %32 = add nsw i64 %31 , -1 NEW_LINE store i64 %32 %7 NEW_LINE br label %14 NEW_LINE 33: NEW_LINE %34 = load * i32 @g_90 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = load * i32 %10 NEW_LINE store i32 %35 %36 NEW_LINE %37 = bitcast * STRUCT 1 i32 %5 to * i8 NEW_LINE %38 = bitcast * STRUCT 1 i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %37 , * i8 %38 , i64 4 , i1 false ) NEW_LINE br label %39 NEW_LINE 39: NEW_LINE %40 = getelementptr inbounds STRUCT 1 i32 %5 , i32 0 , i32 0 NEW_LINE %41 = load i32 %40 NEW_LINE ret i32 %41 NEW_LINE }
define * i16 @func_57 ( i32 %0 , i32 %1 , * i16 %2 , i16 zeroext %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i16 NEW_LINE %9 = alloca i16 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca * i16 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca * i32 NEW_LINE store i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store * i16 %2 %8 NEW_LINE store i16 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store i64 9085855047303443174 %11 NEW_LINE store * i16 @g_76 %12 NEW_LINE store * i8 @g_80 %13 NEW_LINE store * i32 @g_82 %14 NEW_LINE %15 = load i64 %11 NEW_LINE %16 = load * i16 %12 NEW_LINE %17 = icmp ne * i16 null , %16 NEW_LINE %18 = zext i1 %17 to i32 NEW_LINE %19 = trunc i32 %18 to i16 NEW_LINE %20 = call signext i16 @safe_lshift_func_int16_t_s_s ( i16 signext %19 , i32 5 ) NEW_LINE %21 = trunc i16 %20 to i8 NEW_LINE %22 = load i64 %11 NEW_LINE %23 = icmp sge i64 -1 , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE %26 = load i32 %7 NEW_LINE %27 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext %25 , i32 %26 ) NEW_LINE %28 = call zeroext i8 @safe_mod_func_uint8_t_u_u ( i8 zeroext %21 , i8 zeroext %27 ) NEW_LINE %29 = load i16 @g_76 NEW_LINE %30 = trunc i16 %29 to i8 NEW_LINE %31 = call signext i8 @safe_add_func_int8_t_s_s ( i8 signext %28 , i8 signext %30 ) NEW_LINE %32 = load i32 %7 NEW_LINE %33 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext %31 , i32 %32 ) NEW_LINE %34 = sext i8 %33 to i64 NEW_LINE %35 = icmp ne i64 6597469096515196453 , %34 NEW_LINE %36 = zext i1 %35 to i32 NEW_LINE %37 = load * i8 %13 NEW_LINE %38 = load i8 %37 NEW_LINE %39 = zext i8 %38 to i32 NEW_LINE %40 = xor i32 %39 , %36 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE store i8 %41 %37 NEW_LINE %42 = load i32 %7 NEW_LINE %43 = trunc i32 %42 to i8 NEW_LINE %44 = call zeroext i8 @safe_mod_func_uint8_t_u_u ( i8 zeroext %41 , i8 zeroext %43 ) NEW_LINE %45 = zext i8 %44 to i32 NEW_LINE %46 = load * i32 %14 NEW_LINE store i32 %45 %46 NEW_LINE %47 = load i32 @g_82 NEW_LINE %48 = load * i32 %14 NEW_LINE store i32 %47 %48 NEW_LINE ret * i16 @g_76 NEW_LINE }
define i64 @func_116 ( * * * i16 %0 , * i32 %1 , i32 %2 , * * * i16 %3 ) { NEW_LINE %5 = alloca * * * i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * * i16 NEW_LINE %9 = alloca ARR 3 2 x ARR 3 6 x * * i16 NEW_LINE %10 = alloca * * * i16 NEW_LINE %11 = alloca ARR 3 5 x i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store * * * i16 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * * * i16 %3 %8 NEW_LINE %16 = bitcast * ARR 3 2 x ARR 3 6 x * * i16 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 2 x ARR 3 6 x * * i16 @__const.func_116.l_136 to * i8 ) , i64 96 , i1 false ) NEW_LINE store * * * i16 @g_127 %10 NEW_LINE %17 = bitcast * ARR 3 5 x i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 5 x i32 @__const.func_116.l_138 to * i8 ) , i64 20 , i1 false ) NEW_LINE store i8 1 %12 NEW_LINE store * i8 @g_141 %13 NEW_LINE %18 = getelementptr inbounds ARR 3 2 x ARR 3 6 x * * i16 %9 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 6 x * * i16 %18 , i64 0 , i64 0 NEW_LINE %20 = load * * i16 %19 NEW_LINE %21 = load * * * i16 %10 NEW_LINE store * * i16 %20 %21 NEW_LINE %22 = getelementptr inbounds ARR 3 5 x i32 %11 , i64 0 , i64 4 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i8 %12 NEW_LINE %25 = load * i8 %13 NEW_LINE store i8 %24 %25 NEW_LINE %26 = sext i8 %24 to i32 NEW_LINE %27 = icmp slt i32 %23 , %26 NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE %29 = load * * i32 @g_98 NEW_LINE %30 = load * i32 %29 NEW_LINE %31 = load * * i32 @g_98 NEW_LINE store * i32 %30 %31 NEW_LINE %32 = load i32 @g_51 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE ret i64 %33 NEW_LINE }
define signext i16 @func_40 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i16 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store * i64 @g_28 %4 NEW_LINE store i32 1 %5 NEW_LINE store i16 0 %6 NEW_LINE store i32 -1 %7 NEW_LINE store * i32 @g_1587 %8 NEW_LINE store i16 1 %9 NEW_LINE %10 = load i8 %2 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = load volatile * i32 @g_44 NEW_LINE store i32 %11 %12 NEW_LINE %13 = load volatile * i32 @g_44 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = load * i64 %4 NEW_LINE %16 = icmp ne * i64 null , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i64 @g_28 NEW_LINE %21 = trunc i64 %20 to i8 NEW_LINE %22 = load i8 %2 NEW_LINE %23 = load * i64 %4 NEW_LINE %24 = load i64 @g_28 NEW_LINE %25 = icmp ult i64 %24 , 14448 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = trunc i32 %26 to i16 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = call i32 @func_54 ( i8 signext %22 , * i64 %23 , i16 signext %27 , * i32 @g_3 , i64 %29 ) NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = or i64 4294967295 , %31 NEW_LINE %33 = trunc i64 %32 to i32 NEW_LINE %34 = call signext i8 @safe_rshift_func_int8_t_s_s ( i8 signext %21 , i32 %33 ) NEW_LINE %35 = sext i8 %34 to i16 NEW_LINE store i16 %35 %6 NEW_LINE %36 = zext i16 %35 to i64 NEW_LINE %37 = call i64 @safe_mod_func_uint64_t_u_u ( i64 %18 , i64 %36 ) NEW_LINE %38 = load i8 @g_451 NEW_LINE %39 = zext i8 %38 to i64 NEW_LINE %40 = icmp ugt i64 %37 , %39 NEW_LINE %41 = zext i1 %40 to i32 NEW_LINE %42 = sext i32 %41 to i64 NEW_LINE %43 = call i64 @safe_div_func_uint64_t_u_u ( i64 %42 , i64 1 ) NEW_LINE %44 = load i32 %7 NEW_LINE %45 = sext i32 %44 to i64 NEW_LINE %46 = and i64 %45 , %43 NEW_LINE %47 = trunc i64 %46 to i32 NEW_LINE store i32 %47 %7 NEW_LINE %48 = load * i32 %8 NEW_LINE %49 = load i32 %48 NEW_LINE %50 = and i32 %49 , %47 NEW_LINE store i32 %50 %48 NEW_LINE %51 = load i16 %9 NEW_LINE ret i16 %51 NEW_LINE }
define i32 @func_74 ( * i32 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca ARR 3 10 x ARR 3 4 x * i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i16 9 %5 NEW_LINE store * i32 @g_97 %6 NEW_LINE store * i32 @g_97 %7 NEW_LINE store * i32 @g_97 %8 NEW_LINE store i32 2093301997 %9 NEW_LINE store * i32 @g_97 %10 NEW_LINE store * i32 @g_97 %11 NEW_LINE store * i32 @g_97 %12 NEW_LINE store * i32 @g_97 %13 NEW_LINE store * i32 null %14 NEW_LINE store * i32 @g_97 %15 NEW_LINE %19 = bitcast * ARR 3 10 x ARR 3 4 x * i32 %16 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 10 x ARR 3 4 x * i32 @__const.func_74.l_107 to * i8 ) , i64 320 , i1 false ) NEW_LINE %20 = load i16 %5 NEW_LINE %21 = sext i16 %20 to i64 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = zext i32 %22 to i64 NEW_LINE %24 = call i64 @safe_sub_func_int64_t_s_s ( i64 %21 , i64 %23 ) NEW_LINE %25 = trunc i64 %24 to i32 NEW_LINE %26 = load * i32 %6 NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i64 @g_108 NEW_LINE %28 = add i64 %27 , 1 NEW_LINE store i64 %28 @g_108 NEW_LINE %29 = load i32 %4 NEW_LINE ret i32 %29 NEW_LINE }
define * i32 @func_96 ( * i8 %0 , i32 %1 ) { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * * * i32 NEW_LINE %8 = alloca * * * i32 NEW_LINE %9 = alloca ARR 3 8 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 6 x i32 @g_7 , i64 0 , i64 1 , i64 1 ) %5 NEW_LINE store * * i32 @g_11 %6 NEW_LINE store * * * i32 null %7 NEW_LINE store * * * i32 %6 %8 NEW_LINE %11 = load * * i32 %6 NEW_LINE store * i32 bitcast ( * i8 getelementptr ( i8 bitcast ( * ARR 3 2 x ARR 3 6 x i32 @g_7 to * i8 ) , i64 28 ) to * i32 ) %11 NEW_LINE store i8 0 @g_101 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i8 @g_101 NEW_LINE %14 = zext i8 %13 to i32 NEW_LINE %15 = icmp sgt i32 %14 , 27 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE store i32 0 %10 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %10 NEW_LINE %19 = icmp slt i32 %18 , 8 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %10 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 8 x * i32 %9 , i64 0 , i64 %22 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x ARR 3 6 x i32 @g_7 , i64 0 , i64 1 , i64 1 ) %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %10 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %10 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE %28 = getelementptr inbounds ARR 3 8 x * i32 %9 , i64 0 , i64 1 NEW_LINE %29 = load * i32 %28 NEW_LINE %30 = load * * i32 %6 NEW_LINE store * i32 %29 %30 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i8 @g_101 NEW_LINE %33 = add i8 %32 , 1 NEW_LINE store i8 %33 @g_101 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load * * * i32 %8 NEW_LINE store * * i32 null %35 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 4 x ARR 3 9 x i32 @g_17 , i64 0 , i64 0 , i64 2 ) NEW_LINE }
define i32 @func_82 ( * * i32 %0 , i8 zeroext %1 ) { NEW_LINE %3 = alloca * * i32 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca ARR 3 1 x ARR 3 4 x * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca ARR 3 4 x ARR 3 9 x ARR 3 1 x i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store * * i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * i32 @g_130 %5 NEW_LINE %12 = bitcast * ARR 3 1 x ARR 3 4 x * i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 1 x ARR 3 4 x * i32 @__const.func_82.l_145 to * i8 ) , i64 32 , i1 false ) NEW_LINE store i16 0 %7 NEW_LINE %13 = bitcast * ARR 3 4 x ARR 3 9 x ARR 3 1 x i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 4 x ARR 3 9 x ARR 3 1 x i32 @__const.func_82.l_148 to * i8 ) , i64 144 , i1 false ) NEW_LINE %14 = getelementptr inbounds ARR 3 4 x ARR 3 9 x ARR 3 1 x i32 %8 , i64 0 , i64 2 NEW_LINE %15 = getelementptr inbounds ARR 3 9 x ARR 3 1 x i32 %14 , i64 0 , i64 4 NEW_LINE %16 = getelementptr inbounds ARR 3 1 x i32 %15 , i64 0 , i64 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = add i32 %17 , 1 NEW_LINE store i32 %18 %16 NEW_LINE %19 = load * i32 %5 NEW_LINE %20 = load i32 %19 NEW_LINE ret i32 %20 NEW_LINE }
define * i8 @func_63 ( * i64 %0 , * i32 %1 , i16 signext %2 ) { NEW_LINE %4 = alloca STRUCT 1 * i8 NEW_LINE %5 = alloca * i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca ARR 3 7 x ARR 3 8 x STRUCT 1 * i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store * i64 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE %11 = bitcast * ARR 3 7 x ARR 3 8 x STRUCT 1 * i8 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 getelementptr inbounds ( ARR 3 7 x ARR 3 8 x STRUCT 2 i8 ARR 3 7 x i8 @__const.func_63.l_70 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 448 , i1 false ) NEW_LINE %12 = load volatile * i32 @g_69 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = xor i64 %14 , -1576969295 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE store i32 %16 %12 NEW_LINE %17 = getelementptr inbounds ARR 3 7 x ARR 3 8 x STRUCT 1 * i8 %8 , i64 0 , i64 4 NEW_LINE %18 = getelementptr inbounds ARR 3 8 x STRUCT 1 * i8 %17 , i64 0 , i64 2 NEW_LINE %19 = bitcast * STRUCT 1 * i8 %4 to * i8 NEW_LINE %20 = bitcast * STRUCT 1 * i8 %18 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 %20 , i64 8 , i1 false ) NEW_LINE %21 = getelementptr inbounds STRUCT 1 * i8 %4 , i32 0 , i32 0 NEW_LINE %22 = load * i8 %21 NEW_LINE ret * i8 %22 NEW_LINE }
define i64 @func_68 ( i8 signext %0 , i32 %1 , * i8 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * * * i8 NEW_LINE %9 = alloca * * i8 NEW_LINE %10 = alloca * * * i8 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca * i64 NEW_LINE %13 = alloca i16 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca ARR 3 5 x i32 NEW_LINE %16 = alloca i8 NEW_LINE %17 = alloca * * * i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca * STRUCT 4 i24 i32 i16 i32 NEW_LINE %20 = alloca i16 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca * * i32 NEW_LINE %23 = alloca i32 NEW_LINE store i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE store i32 1 %7 NEW_LINE store * * * i8 null %8 NEW_LINE store * * i8 getelementptr inbounds ( ARR 3 1 x ARR 3 8 x * i8 @g_276 , i64 0 , i64 0 , i64 3 ) %9 NEW_LINE store * * * i8 %9 %10 NEW_LINE store i8 115 %11 NEW_LINE store * i64 @g_294 %12 NEW_LINE store i16 0 %13 NEW_LINE store i32 1912062985 %14 NEW_LINE store i8 33 %16 NEW_LINE store * * * i32 null %17 NEW_LINE store i32 -1 %18 NEW_LINE store * STRUCT 4 i24 i32 i16 i32 getelementptr inbounds ( ARR 3 5 x STRUCT 4 i24 i32 i16 i32 bitcast ( * ARR 3 5 x STRUCT 6 i8 i8 i8 i32 i16 i32 @g_359 to * ARR 3 5 x STRUCT 4 i24 i32 i16 i32 ) , i64 0 , i64 2 ) %19 NEW_LINE store i16 4 %20 NEW_LINE store i32 -204145623 %21 NEW_LINE store * * i32 @g_134 %22 NEW_LINE store i32 0 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %23 NEW_LINE %26 = icmp slt i32 %25 , 5 NEW_LINE br i1 %26 , label %27 , label %34 NEW_LINE 27: NEW_LINE %28 = load i32 %23 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 5 x i32 %15 , i64 0 , i64 %29 NEW_LINE store i32 9 %30 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %23 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %23 NEW_LINE br label %24 NEW_LINE 34: NEW_LINE %35 = load i8 %4 NEW_LINE %36 = sext i8 %35 to i64 NEW_LINE ret i64 %36 NEW_LINE }
define zeroext i8 @func_51 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca ARR 3 8 x ARR 3 2 x ARR 3 3 x * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE %7 = bitcast * ARR 3 8 x ARR 3 2 x ARR 3 3 x * i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %7 , * i8 bitcast ( * ARR 3 8 x ARR 3 2 x ARR 3 3 x * i32 @__const.func_51.l_55 to * i8 ) , i64 384 , i1 false ) NEW_LINE %8 = load i64 %2 NEW_LINE %9 = load i32 @g_56 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = or i64 %10 , %8 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE store i32 %12 @g_56 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = trunc i64 %13 to i8 NEW_LINE ret i8 %14 NEW_LINE }
define signext i16 @func_18 ( * i8 %0 , * i8 %1 , * i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca ARR 3 9 x ARR 3 8 x * * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store * i8 %0 %5 NEW_LINE store * i8 %1 %6 NEW_LINE store * i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE %13 = bitcast * ARR 3 9 x ARR 3 8 x * * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 9 x ARR 3 8 x * * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 @__const.func_18.l_834 to * i8 ) , i64 576 , i1 false ) NEW_LINE store i32 -7 %10 NEW_LINE %14 = load volatile * * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 @g_99 NEW_LINE %15 = load * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 %14 NEW_LINE %16 = load volatile * * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 @g_99 NEW_LINE store * STRUCT 9 i8 i8 i8 i8 i16 i32 i32 i64 i16 %15 %16 NEW_LINE %17 = load i32 %10 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE ret i16 %18 NEW_LINE }
define * i32 @func_42 ( * i16 %0 , * i32 %1 , i32 %2 ) { NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca ARR 3 2 x ARR 3 5 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 6 x ARR 3 2 x i8 NEW_LINE %11 = alloca i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store * i16 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %15 = bitcast * ARR 3 2 x ARR 3 5 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 2 x ARR 3 5 x * i32 @__const.func_42.l_48 to * i8 ) , i64 80 , i1 false ) NEW_LINE store i32 1172444043 %8 NEW_LINE store i8 91 %9 NEW_LINE %16 = bitcast * ARR 3 4 x ARR 3 6 x ARR 3 2 x i8 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 getelementptr inbounds ( ARR 3 4 x ARR 3 6 x ARR 3 2 x i8 @__const.func_42.l_55 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 48 , i1 false ) NEW_LINE store i8 -1 %11 NEW_LINE %17 = load i8 @g_50 NEW_LINE %18 = add i8 %17 , -1 NEW_LINE store i8 %18 @g_50 NEW_LINE %19 = load i8 %11 NEW_LINE %20 = add i8 %19 , -1 NEW_LINE store i8 %20 %11 NEW_LINE %21 = load * i32 %5 NEW_LINE ret * i32 %21 NEW_LINE }
define i32 @func_37 ( * i32 %0 , i8 signext %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 4 x ARR 3 3 x ARR 3 5 x i32 @g_12 , i64 0 , i64 3 , i64 1 , i64 2 ) %5 NEW_LINE store i32 781419818 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = icmp ne * i32 %7 , null NEW_LINE %9 = zext i1 %8 to i32 NEW_LINE %10 = load i8 %4 NEW_LINE %11 = load i32 getelementptr inbounds ( ARR 3 4 x ARR 3 3 x ARR 3 5 x i32 @g_12 , i64 0 , i64 1 , i64 0 , i64 1 ) NEW_LINE %12 = trunc i32 %11 to i16 NEW_LINE %13 = call * i32 @func_52 ( i16 zeroext %12 ) NEW_LINE %14 = load i8 %4 NEW_LINE %15 = sext i8 %14 to i64 NEW_LINE %16 = load * i32 %5 NEW_LINE %17 = load i64 getelementptr inbounds ( ARR 3 6 x i64 @g_972 , i64 0 , i64 4 ) NEW_LINE %18 = icmp sle i64 %17 , -1 NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE %20 = load i32 %6 NEW_LINE store i16 -1 @g_1097 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = trunc i32 %21 to i8 NEW_LINE %23 = call signext i8 @safe_mod_func_int8_t_s_s ( i8 signext -1 , i8 signext %22 ) NEW_LINE %24 = sext i8 %23 to i32 NEW_LINE %25 = icmp ne i32 %24 , 0 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i1 ARR 2 false %2 , ARR 2 true %26 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = icmp ult i64 %30 , -7464615369687135893 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = and i64 2781641667 , %33 NEW_LINE %35 = call * i32 @func_46 ( i8 zeroext %10 , * i32 %13 , i64 %15 , * i32 %16 , i64 %34 ) NEW_LINE %36 = load i32 %6 NEW_LINE %37 = trunc i32 %36 to i16 NEW_LINE %38 = load i8 %4 NEW_LINE %39 = sext i8 %38 to i64 NEW_LINE %40 = call * i32 @func_40 ( * i32 %35 , i16 signext %37 , i64 %39 , i32 243105981 ) NEW_LINE store * i32 %40 %5 NEW_LINE %41 = load i32 %6 NEW_LINE ret i32 %41 NEW_LINE }
define i64 @func_104 ( i64 %0 , i64 %1 , i32 %2 , * i8 %3 , i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 4 x ARR 3 7 x * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca i16 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store * i8 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE %16 = bitcast * ARR 3 4 x ARR 3 7 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 4 x ARR 3 7 x * i32 @__const.func_104.l_446 to * i8 ) , i64 224 , i1 false ) NEW_LINE store * i32 @g_448 %12 NEW_LINE store i16 4 %13 NEW_LINE %17 = load volatile * i32 @g_155 NEW_LINE store i32 -265990856 %17 NEW_LINE %18 = load * i32 %12 NEW_LINE store i32 -403704582 %18 NEW_LINE %19 = load * i8 %9 NEW_LINE store i8 0 %19 NEW_LINE %20 = load i32 %10 NEW_LINE %21 = trunc i32 %20 to i16 NEW_LINE %22 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext %21 , i16 signext -1 ) NEW_LINE %23 = sext i16 %22 to i32 NEW_LINE %24 = call signext i8 @safe_lshift_func_int8_t_s_u ( i8 signext 0 , i32 %23 ) NEW_LINE %25 = load i32 getelementptr inbounds ( ARR 3 1 x ARR 3 2 x ARR 3 3 x i32 @g_3 , i64 0 , i64 0 , i64 1 , i64 0 ) NEW_LINE %26 = trunc i32 %25 to i8 NEW_LINE %27 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %24 , i8 signext %26 ) NEW_LINE %28 = sext i8 %27 to i64 NEW_LINE %29 = load i64 %6 NEW_LINE %30 = icmp sle i64 %28 , %29 NEW_LINE %31 = zext i1 %30 to i32 NEW_LINE %32 = load volatile * * i32 @g_166 NEW_LINE %33 = load * i32 %32 NEW_LINE store volatile i32 %31 %33 NEW_LINE ret i64 4 NEW_LINE }
define * i32 @func_54 ( i32 %0 ) { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 7 x ARR 3 7 x * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE store * i32 null %4 NEW_LINE store i32 0 @g_503 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @g_503 NEW_LINE %12 = icmp ule i32 %11 , 6 NEW_LINE br i1 %12 , label %13 , label %31 NEW_LINE 13: NEW_LINE store i32 1694343122 %5 NEW_LINE store * i32 @g_547 %6 NEW_LINE %14 = bitcast * ARR 3 7 x ARR 3 7 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 7 x ARR 3 7 x * i32 @__const.func_54.l_581 to * i8 ) , i64 392 , i1 false ) NEW_LINE %15 = load i8 @g_87 NEW_LINE %16 = zext i8 %15 to i32 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = trunc i32 %17 to i16 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = trunc i32 %19 to i16 NEW_LINE %21 = call signext i16 @safe_sub_func_int16_t_s_s ( i16 signext %18 , i16 signext %20 ) NEW_LINE %22 = call signext i16 @safe_rshift_func_int16_t_s_u ( i16 signext %21 , i32 6 ) NEW_LINE %23 = sext i16 %22 to i32 NEW_LINE %24 = and i32 %16 , %23 NEW_LINE %25 = load * i32 %6 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = or i32 %26 , %24 NEW_LINE store i32 %27 %25 NEW_LINE store i32 %27 %2 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 @g_503 NEW_LINE %30 = add i32 %29 , 1 NEW_LINE store i32 %30 @g_503 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load * i32 %4 NEW_LINE ret * i32 %32 NEW_LINE }
define * i8 @func_40 ( i32 %0 , i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * * i32 NEW_LINE %9 = alloca * * i32 NEW_LINE %10 = alloca ARR 3 4 x ARR 3 9 x * i32 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca ARR 3 9 x i32 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store * i32 @g_174 %7 NEW_LINE store * * i32 null %8 NEW_LINE store * * i32 %7 %9 NEW_LINE %16 = bitcast * ARR 3 4 x ARR 3 9 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 4 x ARR 3 9 x * i32 @__const.func_40.l_718 to * i8 ) , i64 288 , i1 false ) NEW_LINE store i64 -7 %11 NEW_LINE %17 = bitcast * ARR 3 9 x i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 9 x i32 @__const.func_40.l_720 to * i8 ) , i64 36 , i1 false ) NEW_LINE store * i8 getelementptr inbounds ( ARR 3 7 x i8 @g_176 , i64 0 , i64 4 ) %13 NEW_LINE %18 = load * i32 %7 NEW_LINE %19 = load * * i32 %9 NEW_LINE store * i32 %18 %19 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i32 %12 , i64 0 , i64 8 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = add i32 %21 , 1 NEW_LINE store i32 %22 %20 NEW_LINE %23 = load * * i32 %9 NEW_LINE %24 = load * i32 %23 NEW_LINE %25 = load * * i32 %9 NEW_LINE store * i32 %24 %25 NEW_LINE %26 = load * i8 %13 NEW_LINE ret * i8 %26 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i64 NEW_LINE %2 = alloca ARR 3 5 x ARR 3 7 x ARR 3 1 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = bitcast * ARR 3 5 x ARR 3 7 x ARR 3 1 x i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 5 x ARR 3 7 x ARR 3 1 x i32 @__const.func_1.l_2 to * i8 ) , i64 140 , i1 false ) NEW_LINE store i32 0 @g_3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @g_3 NEW_LINE %9 = icmp sge i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 5 x ARR 3 7 x ARR 3 1 x i32 %2 , i64 0 , i64 3 NEW_LINE %12 = getelementptr inbounds ARR 3 7 x ARR 3 1 x i32 %11 , i64 0 , i64 6 NEW_LINE %13 = getelementptr inbounds ARR 3 1 x i32 %12 , i64 0 , i64 0 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = zext i32 %14 to i64 NEW_LINE store i64 %15 %1 NEW_LINE br label %25 NEW_LINE 16: NEW_LINE %17 = load i32 @g_3 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE store i32 %18 @g_3 NEW_LINE br label %7 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 5 x ARR 3 7 x ARR 3 1 x i32 %2 , i64 0 , i64 4 NEW_LINE %21 = getelementptr inbounds ARR 3 7 x ARR 3 1 x i32 %20 , i64 0 , i64 2 NEW_LINE %22 = getelementptr inbounds ARR 3 1 x i32 %21 , i64 0 , i64 0 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE store i64 %24 %1 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i64 %1 NEW_LINE ret i64 %26 NEW_LINE }
define zeroext i16 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 3 x ARR 3 5 x ARR 3 7 x i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = bitcast * ARR 3 3 x ARR 3 5 x ARR 3 7 x i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 , * i8 bitcast ( * ARR 3 3 x ARR 3 5 x ARR 3 7 x i32 @__const.func_1.l_2 to * i8 ) , i64 420 , i1 false ) NEW_LINE %6 = getelementptr inbounds ARR 3 3 x ARR 3 5 x ARR 3 7 x i32 %1 , i64 0 , i64 0 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x ARR 3 7 x i32 %6 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds ARR 3 7 x i32 %7 , i64 0 , i64 3 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = trunc i32 %9 to i16 NEW_LINE ret i16 %10 NEW_LINE }
define signext i16 @func_87 ( i16 signext %0 , i32 %1 , i8 signext %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i64 NEW_LINE %12 = alloca i16 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE store i16 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i64 @g_113 %11 NEW_LINE store i16 1 %12 NEW_LINE store * i8 getelementptr inbounds ( ARR 3 1 x i8 @g_106 , i64 0 , i64 0 ) %13 NEW_LINE store * i32 null %14 NEW_LINE store * i32 @g_125 %15 NEW_LINE %16 = load i64 %9 NEW_LINE %17 = load * i64 %11 NEW_LINE %18 = load * i64 %11 NEW_LINE %19 = icmp eq * i64 %17 , %18 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE %22 = load i16 %12 NEW_LINE %23 = add i16 %22 , 1 NEW_LINE store i16 %23 %12 NEW_LINE %24 = zext i16 %22 to i32 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = icmp eq i64 %25 , 76 NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = load * i8 %13 NEW_LINE %29 = load i8 %28 NEW_LINE %30 = sext i8 %29 to i32 NEW_LINE %31 = xor i32 %30 , %27 NEW_LINE %32 = trunc i32 %31 to i8 NEW_LINE store i8 %32 %28 NEW_LINE %33 = sext i8 %32 to i32 NEW_LINE %34 = load i16 %6 NEW_LINE %35 = trunc i16 %34 to i8 NEW_LINE %36 = call signext i8 @safe_div_func_int8_t_s_s ( i8 signext 1 , i8 signext %35 ) NEW_LINE %37 = sext i8 %36 to i32 NEW_LINE %38 = and i32 %33 , %37 NEW_LINE %39 = load i16 %12 NEW_LINE %40 = zext i16 %39 to i64 NEW_LINE %41 = or i64 48835 , %40 NEW_LINE %42 = load i32 %7 NEW_LINE %43 = zext i32 %42 to i64 NEW_LINE %44 = or i64 %41 , %43 NEW_LINE %45 = trunc i64 %44 to i8 NEW_LINE %46 = call zeroext i8 @safe_mul_func_uint8_t_u_u ( i8 zeroext %21 , i8 zeroext %45 ) NEW_LINE %47 = zext i8 %46 to i64 NEW_LINE %48 = call i64 @safe_div_func_int64_t_s_s ( i64 0 , i64 %47 ) NEW_LINE %49 = icmp sgt i64 %48 , 7 NEW_LINE %50 = zext i1 %49 to i32 NEW_LINE %51 = load * i32 %15 NEW_LINE store i32 %50 %51 NEW_LINE %52 = load * i32 %15 NEW_LINE %53 = load i32 %52 NEW_LINE %54 = trunc i32 %53 to i16 NEW_LINE ret i16 %54 NEW_LINE }
define i32 @func_2 ( i32 %0 , i64 %1 ) { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 2 x ARR 3 7 x * i32 NEW_LINE %9 = alloca ARR 3 7 x i64 NEW_LINE %10 = alloca STRUCT 1 i64 NEW_LINE %11 = alloca * * * * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store * i32 @g_25 %5 NEW_LINE store * i32 @g_449 %6 NEW_LINE store * i32 @g_449 %7 NEW_LINE %14 = bitcast * ARR 3 2 x ARR 3 7 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 bitcast ( * ARR 3 2 x ARR 3 7 x * i32 @__const.func_2.l_3339 to * i8 ) , i64 112 , i1 false ) NEW_LINE %15 = bitcast * STRUCT 1 i64 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * STRUCT 1 i64 @__const.func_2.l_3343 to * i8 ) , i64 8 , i1 false ) NEW_LINE store * * * * i32 null %11 NEW_LINE store i32 0 %12 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %12 NEW_LINE %18 = icmp slt i32 %17 , 7 NEW_LINE br i1 %18 , label %19 , label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %12 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 7 x i64 %9 , i64 0 , i64 %21 NEW_LINE store i64 -1 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %12 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %12 NEW_LINE br label %16 NEW_LINE 26: NEW_LINE %27 = getelementptr inbounds ARR 3 7 x i64 %9 , i64 0 , i64 0 NEW_LINE %28 = load i64 %27 NEW_LINE %29 = add i64 %28 , -1 NEW_LINE store i64 %29 %27 NEW_LINE %30 = load * * STRUCT 1 i64 @g_3151 NEW_LINE %31 = load volatile * STRUCT 1 i64 %30 NEW_LINE %32 = bitcast * STRUCT 1 i64 %31 to * i8 NEW_LINE %33 = bitcast * STRUCT 1 i64 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %32 , * i8 %33 , i64 8 , i1 true ) NEW_LINE %34 = load volatile * * * * i32 @g_3345 NEW_LINE store * * * i32 @g_2333 %34 NEW_LINE %35 = load i64 %4 NEW_LINE %36 = trunc i64 %35 to i32 NEW_LINE ret i32 %36 NEW_LINE }
define i32 @func_35 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca ARR 3 1 x * i32 NEW_LINE %5 = alloca * STRUCT 1 i24 NEW_LINE %6 = alloca * * * i64 NEW_LINE %7 = alloca * * * i64 NEW_LINE %8 = alloca * * * * i64 NEW_LINE %9 = alloca * * * * * i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca ARR 3 2 x * * * STRUCT 1 i24 NEW_LINE %12 = alloca * * * * STRUCT 1 i24 NEW_LINE %13 = alloca i8 NEW_LINE %14 = alloca * * i16 NEW_LINE %15 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i16 1 %3 NEW_LINE store * STRUCT 1 i24 null %5 NEW_LINE store * * * i64 null %6 NEW_LINE store * * * i64 null %7 NEW_LINE store * * * * i64 %7 %8 NEW_LINE store * * * * * i64 %8 %9 NEW_LINE store i32 -1258458705 %10 NEW_LINE %16 = getelementptr inbounds ARR 3 2 x * * * STRUCT 1 i24 %11 , i64 0 , i64 0 NEW_LINE store * * * * STRUCT 1 i24 %16 %12 NEW_LINE store i8 61 %13 NEW_LINE store * * i16 @g_1844 %14 NEW_LINE store i32 0 %15 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %15 NEW_LINE %19 = icmp slt i32 %18 , 1 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %15 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1 x * i32 %4 , i64 0 , i64 %22 NEW_LINE store * i32 @g_116 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %15 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %15 NEW_LINE br label %17 NEW_LINE 27: NEW_LINE store i32 0 %15 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %15 NEW_LINE %30 = icmp slt i32 %29 , 2 NEW_LINE br i1 %30 , label %31 , label %38 NEW_LINE 31: NEW_LINE %32 = load i32 %15 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 2 x * * * STRUCT 1 i24 %11 , i64 0 , i64 %33 NEW_LINE store * * * STRUCT 1 i24 null %34 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %15 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %15 NEW_LINE br label %28 NEW_LINE 38: NEW_LINE %39 = load i8 %2 NEW_LINE %40 = sext i8 %39 to i32 NEW_LINE ret i32 %40 NEW_LINE }
define * i32 @func_22 ( i32 %0 , * i32 %1 , i64 %2 , i32 %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca ARR 3 7 x * i32 NEW_LINE %18 = alloca i16 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store i64 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_51 , i64 0 , i64 0 ) %12 NEW_LINE store * i32 @g_33 %13 NEW_LINE store * i32 null %14 NEW_LINE store * i32 @g_33 %15 NEW_LINE store i32 -798802204 %16 NEW_LINE store i16 -9 %18 NEW_LINE store i64 -6466264751620866625 %19 NEW_LINE store i32 0 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %20 NEW_LINE %23 = icmp slt i32 %22 , 7 NEW_LINE br i1 %23 , label %24 , label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %20 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 7 x * i32 %17 , i64 0 , i64 %26 NEW_LINE store * i32 @g_33 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %20 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %20 NEW_LINE br label %21 NEW_LINE 31: NEW_LINE store i16 0 @g_189 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i16 @g_189 NEW_LINE %34 = sext i16 %33 to i32 NEW_LINE %35 = icmp slt i32 %34 , -30 NEW_LINE br i1 %35 , label %36 , label %45 NEW_LINE 36: NEW_LINE %37 = load * i32 @g_212 NEW_LINE %38 = load i32 %37 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = and i64 %39 , 0 NEW_LINE %41 = trunc i64 %40 to i32 NEW_LINE store i32 %41 %37 NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i16 @g_189 NEW_LINE %44 = call zeroext i16 @safe_sub_func_uint16_t_u_u ( i16 zeroext %43 , i16 zeroext 7 ) NEW_LINE store i16 %44 @g_189 NEW_LINE br label %32 NEW_LINE 45: NEW_LINE %46 = load i64 %19 NEW_LINE %47 = add i64 %46 , 1 NEW_LINE store i64 %47 %19 NEW_LINE ret * i32 getelementptr inbounds ( ARR 3 2 x i32 @g_51 , i64 0 , i64 0 ) NEW_LINE }
define i32 @func_70 ( * i64 %0 , * i64 %1 , i16 signext %2 , i8 zeroext %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca ARR 3 10 x * * i32 NEW_LINE %13 = alloca * * * i32 NEW_LINE %14 = alloca * * * * i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca ARR 3 5 x * i32 NEW_LINE %18 = alloca i32 NEW_LINE store * i64 %0 %6 NEW_LINE store * i64 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i16 -10 %11 NEW_LINE %19 = bitcast * ARR 3 10 x * * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 10 x * * i32 @__const.func_70.l_339 to * i8 ) , i64 80 , i1 false ) NEW_LINE %20 = getelementptr inbounds ARR 3 10 x * * i32 %12 , i64 0 , i64 7 NEW_LINE store * * * i32 %20 %13 NEW_LINE store * * * * i32 %13 %14 NEW_LINE store i16 26 %8 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i16 %8 NEW_LINE %23 = sext i16 %22 to i32 NEW_LINE %24 = icmp sle i32 %23 , -30 NEW_LINE br i1 %24 , label %25 , label %32 NEW_LINE 25: NEW_LINE store i32 -869505798 %16 NEW_LINE %26 = bitcast * ARR 3 5 x * i32 %17 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %26 , i8 0 , i64 40 , i1 false ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i16 %8 NEW_LINE %29 = sext i16 %28 to i64 NEW_LINE %30 = call i64 @safe_sub_func_uint64_t_u_u ( i64 %29 , i64 8 ) NEW_LINE %31 = trunc i64 %30 to i16 NEW_LINE store i16 %31 %8 NEW_LINE br label %21 NEW_LINE 32: NEW_LINE %33 = load * i32 @g_100 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = load * i32 %10 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = or i32 %36 , %34 NEW_LINE store i32 %37 %35 NEW_LINE %38 = load * * * i32 %13 NEW_LINE %39 = load * * * * i32 %14 NEW_LINE store * * * i32 %38 %39 NEW_LINE %40 = load * i32 %10 NEW_LINE %41 = load i32 %40 NEW_LINE ret i32 %41 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1 x ARR 3 7 x ARR 3 9 x i16 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = bitcast * ARR 3 1 x ARR 3 7 x ARR 3 9 x i16 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 1 x ARR 3 7 x ARR 3 9 x i16 @__const.func_1.l_5 to * i8 ) , i64 126 , i1 false ) NEW_LINE store i32 -15 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE %9 = icmp sgt i32 %8 , 15 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE store i32 %11 %1 NEW_LINE br label %23 NEW_LINE 12: NEW_LINE %13 = load i32 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE %14 = trunc i32 %13 to i8 NEW_LINE %15 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %14 , i8 zeroext 1 ) NEW_LINE %16 = zext i8 %15 to i32 NEW_LINE store i32 %16 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 1 x ARR 3 7 x ARR 3 9 x i16 %2 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 7 x ARR 3 9 x i16 %18 , i64 0 , i64 2 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i16 %19 , i64 0 , i64 0 NEW_LINE %21 = load i16 %20 NEW_LINE %22 = zext i16 %21 to i32 NEW_LINE store i32 %22 %1 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define * * i8 @func_2 ( * i8 %0 , i32 %1 , * * i8 %2 , * * i8 %3 ) { NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * * i8 NEW_LINE %8 = alloca * * i8 NEW_LINE %9 = alloca * STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 10 x * i32 NEW_LINE %12 = alloca ARR 3 5 x ARR 3 6 x i16 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca * * i8 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE store * i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * * i8 %2 %7 NEW_LINE store * * i8 %3 %8 NEW_LINE store * STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 @g_1891 %9 NEW_LINE store * i32 @g_1109 %10 NEW_LINE %19 = bitcast * ARR 3 10 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_2.l_1896 to * i8 ) , i64 80 , i1 false ) NEW_LINE %20 = bitcast * ARR 3 5 x ARR 3 6 x i16 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * ARR 3 5 x ARR 3 6 x i16 @__const.func_2.l_1897 to * i8 ) , i64 60 , i1 false ) NEW_LINE store i64 -1 %13 NEW_LINE store i32 2 %14 NEW_LINE store i16 1086 %15 NEW_LINE store * * i8 null %16 NEW_LINE %21 = load * STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 %9 NEW_LINE %22 = load volatile * * STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 @g_1893 NEW_LINE store * STRUCT 9 i8 i32 i16 i32 i16 i64 STRUCT 5 i32 i64 i32 i32 i16 i64 i8 %21 %22 NEW_LINE %23 = load i16 %15 NEW_LINE %24 = add i16 %23 , 1 NEW_LINE store i16 %24 %15 NEW_LINE %25 = load * * i8 %16 NEW_LINE ret * * i8 %25 NEW_LINE }
define i64 @func_27 ( i8 zeroext %0 , i32 %1 , i32 %2 , i64 %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca ARR 3 8 x ARR 3 4 x i64 NEW_LINE %10 = alloca ARR 3 5 x * i8 NEW_LINE %11 = alloca * * * i8 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i8 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE %18 = bitcast * ARR 3 8 x ARR 3 4 x i64 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 bitcast ( * ARR 3 8 x ARR 3 4 x i64 @__const.func_27.l_575 to * i8 ) , i64 256 , i1 false ) NEW_LINE store * * * i8 @g_579 %11 NEW_LINE store i32 71298322 %12 NEW_LINE store i32 -1876238595 %13 NEW_LINE store * i8 getelementptr inbounds ( ARR 3 4 x ARR 3 4 x i8 @g_244 , i64 0 , i64 1 , i64 3 ) %14 NEW_LINE store * i32 null %15 NEW_LINE store i32 0 %16 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %16 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %16 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x * i8 %10 , i64 0 , i64 %24 NEW_LINE store * i8 @g_195 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %16 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %16 NEW_LINE br label %19 NEW_LINE 29: NEW_LINE store * i32 %13 %15 NEW_LINE ret i64 0 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca ARR 3 7 x i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 8 x * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = bitcast * ARR 3 7 x i32 %1 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %11 , * i8 bitcast ( * ARR 3 7 x i32 @__const.func_1.l_2 to * i8 ) , i64 28 , i1 false ) NEW_LINE store * i32 @g_5 %2 NEW_LINE store * i32 @g_5 %3 NEW_LINE store i32 373801673 %4 NEW_LINE %12 = bitcast * ARR 3 8 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_1.l_8 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 -5 %6 NEW_LINE store i64 1 %7 NEW_LINE store i32 -1 %8 NEW_LINE store i32 1 %9 NEW_LINE store volatile i32 0 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x i32 @g_3 , i64 0 , i64 3 , i64 6 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load volatile i32 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x i32 @g_3 , i64 0 , i64 3 , i64 6 ) NEW_LINE %15 = icmp slt i32 %14 , 7 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load volatile i32 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x i32 @g_3 , i64 0 , i64 3 , i64 6 ) NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 7 x i32 %1 , i64 0 , i64 %18 NEW_LINE store i32 -1 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load volatile i32 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x i32 @g_3 , i64 0 , i64 3 , i64 6 ) NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store volatile i32 %22 getelementptr inbounds ( ARR 3 5 x ARR 3 7 x i32 @g_3 , i64 0 , i64 3 , i64 6 ) NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = load i32 %9 NEW_LINE %25 = add i32 %24 , 1 NEW_LINE store i32 %25 %9 NEW_LINE %26 = load i32 @g_5 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE ret i64 %27 NEW_LINE }
define * i32 @func_2 ( * i32 %0 , * i32 %1 ) { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca ARR 3 9 x ARR 3 5 x i16 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i64 -536432841219872180 %6 NEW_LINE %10 = load i64 %6 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE %12 = load * i32 %5 NEW_LINE store i32 %11 %12 NEW_LINE store i64 4 @g_56 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 @g_56 NEW_LINE %15 = icmp sge i64 %14 , 2 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = bitcast * ARR 3 9 x ARR 3 5 x i16 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 9 x ARR 3 5 x i16 @__const.func_2.l_2246 to * i8 ) , i64 90 , i1 false ) NEW_LINE %18 = getelementptr inbounds ARR 3 9 x ARR 3 5 x i16 %7 , i64 0 , i64 6 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i16 %18 , i64 0 , i64 3 NEW_LINE %20 = load i16 %19 NEW_LINE %21 = add i16 %20 , -1 NEW_LINE store i16 %21 %19 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i64 @g_56 NEW_LINE %24 = sub nsw i64 %23 , 1 NEW_LINE store i64 %24 @g_56 NEW_LINE br label %13 NEW_LINE 25: NEW_LINE store i8 0 @g_2037 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i8 @g_2037 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = icmp sle i32 %28 , 29 NEW_LINE br i1 %29 , label %30 , label %37 NEW_LINE 30: NEW_LINE %31 = load * i32 %5 NEW_LINE store * i32 %31 %3 NEW_LINE br label %39 NEW_LINE 32: NEW_LINE %33 = load i8 @g_2037 NEW_LINE %34 = sext i8 %33 to i16 NEW_LINE %35 = call zeroext i16 @safe_add_func_uint16_t_u_u ( i16 zeroext %34 , i16 zeroext 6 ) NEW_LINE %36 = trunc i16 %35 to i8 NEW_LINE store i8 %36 @g_2037 NEW_LINE br label %26 NEW_LINE 37: NEW_LINE %38 = load * i32 %5 NEW_LINE store * i32 %38 %3 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE %40 = load * i32 %3 NEW_LINE ret * i32 %40 NEW_LINE }
define * i32 @func_50 ( i64 %0 ) { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * * i32 NEW_LINE %5 = alloca ARR 3 4 x ARR 3 9 x * i32 NEW_LINE %6 = alloca ARR 3 6 x * * * i32 NEW_LINE %7 = alloca * * * * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store * * i32 %3 %4 NEW_LINE %10 = bitcast * ARR 3 4 x ARR 3 9 x * i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %10 , * i8 bitcast ( * ARR 3 4 x ARR 3 9 x * i32 @__const.func_50.l_58 to * i8 ) , i64 288 , i1 false ) NEW_LINE %11 = getelementptr inbounds ARR 3 6 x * * * i32 %6 , i64 0 , i64 0 NEW_LINE store * * * i32 null %11 NEW_LINE %12 = getelementptr inbounds * * * i32 %11 , i64 1 NEW_LINE store * * * i32 null %12 NEW_LINE %13 = getelementptr inbounds * * * i32 %12 , i64 1 NEW_LINE store * * * i32 %4 %13 NEW_LINE %14 = getelementptr inbounds * * * i32 %13 , i64 1 NEW_LINE store * * * i32 null %14 NEW_LINE %15 = getelementptr inbounds * * * i32 %14 , i64 1 NEW_LINE store * * * i32 null %15 NEW_LINE %16 = getelementptr inbounds * * * i32 %15 , i64 1 NEW_LINE store * * * i32 %4 %16 NEW_LINE %17 = getelementptr inbounds ARR 3 6 x * * * i32 %6 , i64 0 , i64 3 NEW_LINE store * * * * i32 %17 %7 NEW_LINE %18 = load * i32 %3 NEW_LINE %19 = load * * i32 %4 NEW_LINE store * i32 %18 %19 NEW_LINE %20 = load i16 @g_59 NEW_LINE %21 = add i16 %20 , 1 NEW_LINE store i16 %21 @g_59 NEW_LINE %22 = load * * * * i32 %7 NEW_LINE store * * * i32 %4 %22 NEW_LINE ret * i32 @g_3 NEW_LINE }
define * i32 @func_56 ( * i32 %0 , * i32 %1 , * i32 %2 , * i32 %3 , * i32 %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i16 NEW_LINE %13 = alloca * i8 NEW_LINE %14 = alloca * * i8 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * * i32 NEW_LINE %17 = alloca ARR 3 3 x * * i32 NEW_LINE %18 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store * i32 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store i16 -1 %11 NEW_LINE store * i16 @g_75 %12 NEW_LINE store * i8 null %13 NEW_LINE store * * i8 %13 %14 NEW_LINE store * i32 @g_7 %15 NEW_LINE store * * i32 null %16 NEW_LINE store i32 0 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %18 NEW_LINE %21 = icmp slt i32 %20 , 3 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %18 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 3 x * * i32 %17 , i64 0 , i64 %24 NEW_LINE store * * i32 %15 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %18 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %18 NEW_LINE br label %19 NEW_LINE 29: NEW_LINE store * i32 @g_7 %8 NEW_LINE %30 = load * i32 %15 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = icmp sgt i32 1 , %31 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = xor i64 %34 , 0 NEW_LINE %36 = load i16 getelementptr inbounds ( STRUCT 2 i16 ARR 3 2 x i8 @g_124 , i32 0 , i32 0 ) NEW_LINE %37 = zext i16 %36 to i64 NEW_LINE %38 = icmp ugt i64 %35 , %37 NEW_LINE %39 = zext i1 %38 to i32 NEW_LINE %40 = load * i32 %15 NEW_LINE %41 = load i32 %40 NEW_LINE %42 = and i32 %39 , %41 NEW_LINE %43 = load i32 @g_92 NEW_LINE %44 = xor i32 %42 , %43 NEW_LINE %45 = call signext i8 @safe_lshift_func_int8_t_s_s ( i8 signext -4 , i32 %44 ) NEW_LINE %46 = sext i8 %45 to i16 NEW_LINE %47 = call signext i16 @safe_mul_func_int16_t_s_s ( i16 signext %46 , i16 signext 0 ) NEW_LINE %48 = sext i16 %47 to i32 NEW_LINE %49 = load * i32 %10 NEW_LINE store i32 %48 %49 NEW_LINE %50 = load * i32 %9 NEW_LINE ret * i32 %50 NEW_LINE }
define signext i8 @func_30 ( i8 signext %0 , i64 %1 , i32 %2 ) { NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 2 x * * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * * i32 NEW_LINE store i8 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store * i32 null %7 NEW_LINE store * i32 @g_18 %8 NEW_LINE store i32 0 %10 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %10 NEW_LINE %17 = icmp slt i32 %16 , 2 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %10 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 2 x * * i32 %9 , i64 0 , i64 %20 NEW_LINE store * * i32 %8 %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %10 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %10 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i8 %4 NEW_LINE %27 = load i8 %4 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = call signext i8 @safe_lshift_func_int8_t_s_u ( i8 signext %26 , i32 %28 ) NEW_LINE %30 = sext i8 %29 to i32 NEW_LINE %31 = load * i32 %8 NEW_LINE store i32 %30 %31 NEW_LINE store i32 -14 %6 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = icmp ne i32 %33 , 37 NEW_LINE br i1 %34 , label %35 , label %39 NEW_LINE 35: NEW_LINE store * * i32 null %11 NEW_LINE store * * i32 null %12 NEW_LINE store * i32 @g_48 %13 NEW_LINE store * * i32 %13 %14 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %6 NEW_LINE %38 = add i32 %37 , 1 NEW_LINE store i32 %38 %6 NEW_LINE br label %32 NEW_LINE 39: NEW_LINE %40 = load i32 %6 NEW_LINE %41 = trunc i32 %40 to i16 NEW_LINE %42 = load * i16 @g_246 NEW_LINE store i16 %41 %42 NEW_LINE %43 = call signext i16 @safe_mod_func_int16_t_s_s ( i16 signext -30016 , i16 signext %41 ) NEW_LINE %44 = sext i16 %43 to i32 NEW_LINE %45 = load * i32 %8 NEW_LINE store i32 %44 %45 NEW_LINE %46 = load i32 %6 NEW_LINE %47 = trunc i32 %46 to i8 NEW_LINE %48 = call * i32 @func_56 ( i8 signext %47 ) NEW_LINE %49 = load volatile * * i32 @g_954 NEW_LINE store * i32 %48 %49 NEW_LINE %50 = load i32 %6 NEW_LINE %51 = trunc i32 %50 to i8 NEW_LINE ret i8 %51 NEW_LINE }
define * * i32 @func_15 ( i8 signext %0 , * i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca ARR 3 9 x i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca ARR 3 9 x ARR 3 2 x * i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i8 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i64 -7338609723942011698 %5 NEW_LINE store i32 0 %7 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %12 , 9 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 9 x i32 %6 , i64 0 , i64 %16 NEW_LINE store i32 1043855018 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %7 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %7 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = load * i32 %4 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE store i64 %24 %5 NEW_LINE store i16 0 @g_314 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i16 @g_314 NEW_LINE %27 = zext i16 %26 to i32 NEW_LINE %28 = icmp sle i32 %27 , 30 NEW_LINE br i1 %28 , label %29 , label %37 NEW_LINE 29: NEW_LINE %30 = bitcast * ARR 3 9 x ARR 3 2 x * i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * ARR 3 9 x ARR 3 2 x * i32 @__const.func_15.l_391 to * i8 ) , i64 144 , i1 false ) NEW_LINE %31 = getelementptr inbounds ARR 3 9 x i32 %6 , i64 0 , i64 3 NEW_LINE store i32 1 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i16 @g_314 NEW_LINE %34 = trunc i16 %33 to i8 NEW_LINE %35 = call zeroext i8 @safe_add_func_uint8_t_u_u ( i8 zeroext %34 , i8 zeroext 5 ) NEW_LINE %36 = zext i8 %35 to i16 NEW_LINE store i16 %36 @g_314 NEW_LINE br label %25 NEW_LINE 37: NEW_LINE ret * * i32 @g_83 NEW_LINE }
define i32 @func_31 ( * i32 %0 , * i32 %1 , i8 zeroext %2 ) { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i16 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca * * i32 NEW_LINE %13 = alloca i64 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store i32 8 %7 NEW_LINE store * i64 @g_707 %8 NEW_LINE store i32 9 %9 NEW_LINE store * i16 getelementptr inbounds ( ARR 3 7 x ARR 3 1 x i16 @g_718 , i64 0 , i64 5 , i64 0 ) %10 NEW_LINE store i32 -1836522598 %11 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 4 x * i32 @g_705 , i64 0 , i64 2 ) %12 NEW_LINE store i64 -1366275324819604927 %13 NEW_LINE %14 = load i8 %6 NEW_LINE %15 = zext i8 %14 to i16 NEW_LINE %16 = load i32 %7 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i32 @g_4 NEW_LINE %19 = call * i32 @func_50 ( i64 %17 , i32 %18 ) NEW_LINE %20 = load * i64 %8 NEW_LINE %21 = load * i16 getelementptr inbounds ( ARR 3 6 x ARR 3 7 x * i16 @g_329 , i64 0 , i64 0 , i64 1 ) NEW_LINE %22 = load i32 %7 NEW_LINE %23 = trunc i32 %22 to i8 NEW_LINE %24 = call zeroext i16 @func_45 ( * i32 %19 , * i64 %20 , * i16 %21 , i8 zeroext %23 ) NEW_LINE %25 = load i32 %9 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = call i64 @safe_div_func_int64_t_s_s ( i64 1 , i64 %26 ) NEW_LINE %28 = load * i16 %10 NEW_LINE %29 = load i16 %28 NEW_LINE %30 = sext i16 %29 to i64 NEW_LINE %31 = and i64 %30 , %27 NEW_LINE %32 = trunc i64 %31 to i16 NEW_LINE store i16 %32 %28 NEW_LINE %33 = call zeroext i16 @safe_mul_func_uint16_t_u_u ( i16 zeroext %24 , i16 zeroext %32 ) NEW_LINE %34 = zext i16 %33 to i32 NEW_LINE %35 = load * i32 %5 NEW_LINE store i32 %34 %35 NEW_LINE %36 = load i32 %11 NEW_LINE %37 = or i32 %36 , %34 NEW_LINE store i32 %37 %11 NEW_LINE %38 = load * i32 %4 NEW_LINE store i32 %37 %38 NEW_LINE %39 = call i32 @safe_div_func_int32_t_s_s ( i32 %37 , i32 2 ) NEW_LINE %40 = trunc i32 %39 to i16 NEW_LINE %41 = call zeroext i16 @safe_mod_func_uint16_t_u_u ( i16 zeroext %15 , i16 zeroext %40 ) NEW_LINE %42 = load * * i32 %12 NEW_LINE store * i32 null %42 NEW_LINE %43 = load i64 %13 NEW_LINE %44 = trunc i64 %43 to i32 NEW_LINE ret i32 %44 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 4 x * i32 NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca * i16 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE store i32 -1451028201 %1 NEW_LINE %8 = bitcast * ARR 3 4 x * i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %8 , * i8 bitcast ( * ARR 3 4 x * i32 @__const.func_1.l_19 to * i8 ) , i64 32 , i1 false ) NEW_LINE store * i16 null %3 NEW_LINE store * i16 @g_23 %4 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 9 x ARR 3 6 x ARR 3 4 x i32 @g_31 , i64 0 , i64 1 , i64 4 , i64 1 ) %5 NEW_LINE store i16 -1 %6 NEW_LINE %9 = load i32 %1 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = load i64 @g_11 NEW_LINE %12 = xor i64 141 , %11 NEW_LINE %13 = trunc i64 %12 to i8 NEW_LINE %14 = load * i32 @g_18 NEW_LINE %15 = getelementptr inbounds ARR 3 4 x * i32 %2 , i64 0 , i64 3 NEW_LINE %16 = load * i32 %15 NEW_LINE %17 = load * i16 %4 NEW_LINE %18 = load i16 %17 NEW_LINE %19 = add i16 %18 , 1 NEW_LINE store i16 %19 %17 NEW_LINE %20 = load i64 @g_11 NEW_LINE %21 = load i32 @g_20 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = icmp eq i64 %20 , %22 NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = load * i32 %5 NEW_LINE store i32 -1 %25 NEW_LINE %26 = load i32 @g_20 NEW_LINE %27 = call i32 @safe_mod_func_uint32_t_u_u ( i32 -1 , i32 -1 ) NEW_LINE %28 = call i32 @safe_sub_func_int32_t_s_s ( i32 %24 , i32 %27 ) NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = load i64 @g_11 NEW_LINE %31 = icmp uge i64 %29 , %30 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = call zeroext i8 @func_12 ( * i32 %14 , * i32 %16 , i16 zeroext %18 , i64 %33 , * i32 @g_20 ) NEW_LINE %35 = call zeroext i8 @safe_div_func_uint8_t_u_u ( i8 zeroext %13 , i8 zeroext %34 ) NEW_LINE %36 = load i8 @g_1211 NEW_LINE %37 = load i16 %6 NEW_LINE %38 = trunc i16 %37 to i8 NEW_LINE %39 = load i8 @g_1211 NEW_LINE %40 = call * i32 @func_2 ( i64 %10 , * i32 null , i8 zeroext %36 , i8 signext %38 , i8 zeroext %39 ) NEW_LINE %41 = load volatile * * i32 @g_1878 NEW_LINE store * i32 %40 %41 NEW_LINE %42 = load * i64 @g_313 NEW_LINE %43 = load i64 %42 NEW_LINE ret i64 %43 NEW_LINE }
define i32 @func_10 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 3 x ARR 3 6 x ARR 3 7 x i8 NEW_LINE %6 = alloca * i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca ARR 3 5 x * i64 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i32 -1 %3 NEW_LINE store i32 -482483689 %4 NEW_LINE %13 = bitcast * ARR 3 3 x ARR 3 6 x ARR 3 7 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 getelementptr inbounds ( ARR 3 3 x ARR 3 6 x ARR 3 7 x i8 @__const.func_10.l_2154 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 126 , i1 false ) NEW_LINE store * i16 @g_122 %6 NEW_LINE store * i32 %4 %7 NEW_LINE %14 = bitcast * ARR 3 5 x * i64 %8 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %14 , i8 0 , i64 40 , i1 false ) NEW_LINE store i32 1695478064 %9 NEW_LINE store * i32 %4 %7 NEW_LINE %15 = load i32 %9 NEW_LINE %16 = add i32 %15 , -1 NEW_LINE store i32 %16 %9 NEW_LINE %17 = load i8 %2 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE ret i32 %18 NEW_LINE }
define zeroext i16 @func_32 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 9 x i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca ARR 3 7 x * i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store * i16 null %3 NEW_LINE store i32 -213531441 %4 NEW_LINE %16 = bitcast * ARR 3 9 x i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 9 x i32 @__const.func_32.l_1131 to * i8 ) , i64 36 , i1 false ) NEW_LINE store * i32 @g_65 %6 NEW_LINE store * i32 @g_301 %7 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 8 x i32 @g_96 , i64 0 , i64 5 , i64 5 ) %8 NEW_LINE store * i32 %4 %9 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x ARR 3 8 x i32 @g_96 , i64 0 , i64 6 , i64 5 ) %10 NEW_LINE store * i32 null %11 NEW_LINE store * i32 @g_65 %12 NEW_LINE %17 = bitcast * ARR 3 7 x * i32 %13 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %17 , i8 0 , i64 56 , i1 false ) NEW_LINE store i32 1 %14 NEW_LINE %18 = load * i16 @g_361 NEW_LINE %19 = load i16 %18 NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = and i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE %23 = load i8 @g_297 NEW_LINE %24 = zext i8 %23 to i32 NEW_LINE %25 = icmp ne i32 %22 , %24 NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE %27 = getelementptr inbounds ARR 3 9 x i32 %5 , i64 0 , i64 7 NEW_LINE store i32 %26 %27 NEW_LINE %28 = getelementptr inbounds ARR 3 9 x i32 %5 , i64 0 , i64 7 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = load * i32 %6 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = or i32 %31 , %29 NEW_LINE store i32 %32 %30 NEW_LINE %33 = load i32 %14 NEW_LINE %34 = add i32 %33 , -1 NEW_LINE store i32 %34 %14 NEW_LINE %35 = load * i32 %6 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = trunc i32 %36 to i16 NEW_LINE ret i16 %37 NEW_LINE }
define signext i16 @func_8 ( * i32 %0 ) { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca ARR 3 5 x i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 1 x ARR 3 10 x ARR 3 2 x * STRUCT 3 i32 i64 i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca * * STRUCT 3 i32 i64 i32 NEW_LINE %11 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE %12 = bitcast * ARR 3 5 x i8 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @__const.func_8.l_10 , i32 0 , i32 0 ) , i64 5 , i1 false ) NEW_LINE store i32 -756338750 %4 NEW_LINE %13 = bitcast * ARR 3 1 x ARR 3 10 x ARR 3 2 x * STRUCT 3 i32 i64 i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 1 x ARR 3 10 x ARR 3 2 x * STRUCT 3 i32 i64 i32 @__const.func_8.l_26 to * i8 ) , i64 160 , i1 false ) NEW_LINE store i32 1 @g_5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @g_5 NEW_LINE %16 = icmp ule i32 %15 , 4 NEW_LINE br i1 %16 , label %17 , label %31 NEW_LINE 17: NEW_LINE store * i16 @g_29 %9 NEW_LINE %18 = getelementptr inbounds ARR 3 1 x ARR 3 10 x ARR 3 2 x * STRUCT 3 i32 i64 i32 %5 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 10 x ARR 3 2 x * STRUCT 3 i32 i64 i32 %18 , i64 0 , i64 8 NEW_LINE %20 = getelementptr inbounds ARR 3 2 x * STRUCT 3 i32 i64 i32 %19 , i64 0 , i64 0 NEW_LINE store * * STRUCT 3 i32 i64 i32 %20 %10 NEW_LINE %21 = load i32 @g_5 NEW_LINE %22 = zext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i8 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = icmp ne i8 %24 , 0 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE br label %31 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 @g_5 NEW_LINE %30 = add i32 %29 , 1 NEW_LINE store i32 %30 @g_5 NEW_LINE br label %14 NEW_LINE 31: NEW_LINE %32 = getelementptr inbounds ARR 3 5 x i8 %3 , i64 0 , i64 1 NEW_LINE %33 = load i8 %32 NEW_LINE %34 = zext i8 %33 to i16 NEW_LINE ret i16 %34 NEW_LINE }
define * i32 @func_78 ( i8 signext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca * * i32 NEW_LINE %8 = alloca * i64 NEW_LINE %9 = alloca ARR 3 8 x * i8 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store * i32 null %3 NEW_LINE store i32 968665007 %4 NEW_LINE store * i32 @g_44 %5 NEW_LINE store * * i32 null %6 NEW_LINE store * * i32 %5 %7 NEW_LINE store * i64 @g_101 %8 NEW_LINE %13 = bitcast * ARR 3 8 x * i8 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %13 , * i8 bitcast ( * ARR 3 8 x * i8 @__const.func_78.l_102 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i16 -2338 %10 NEW_LINE store * i32 @g_106 %11 NEW_LINE %14 = load volatile * * i32 @g_90 NEW_LINE store * i32 null %14 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = zext i32 %15 to i64 NEW_LINE %17 = load i64 @g_96 NEW_LINE %18 = and i64 %17 , %16 NEW_LINE store i64 %18 @g_96 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load * i32 %5 NEW_LINE %21 = load * * i32 %7 NEW_LINE store * i32 %20 %21 NEW_LINE %22 = icmp ne * i32 null , %20 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = zext i1 %23 to i32 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE %26 = load i8 %2 NEW_LINE %27 = sext i8 %26 to i32 NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br i1 %28 , label %30 , label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = phi i1 ARR 2 true %1 , ARR 2 false %29 NEW_LINE %32 = zext i1 %31 to i32 NEW_LINE %33 = load * i64 %8 NEW_LINE %34 = icmp ne * i64 null , %33 NEW_LINE %35 = zext i1 %34 to i32 NEW_LINE %36 = load i8 %2 NEW_LINE %37 = sext i8 %36 to i32 NEW_LINE %38 = xor i32 %35 , %37 NEW_LINE %39 = trunc i32 %38 to i16 NEW_LINE store i16 %39 %10 NEW_LINE %40 = load i32 getelementptr inbounds ( ARR 3 2 x i32 @g_2 , i64 0 , i64 1 ) NEW_LINE %41 = call zeroext i8 @safe_lshift_func_uint8_t_u_u ( i8 zeroext %25 , i32 %40 ) NEW_LINE %42 = load i8 %2 NEW_LINE %43 = sext i8 %42 to i32 NEW_LINE %44 = load * i32 %11 NEW_LINE store i32 %43 %44 NEW_LINE %45 = load volatile * * i32 @g_90 NEW_LINE %46 = load * i32 %45 NEW_LINE ret * i32 %46 NEW_LINE }
define i64 @func_14 ( i64 %0 , i32 %1 , i32 %2 , i8 signext %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 6 x i64 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i8 NEW_LINE %15 = alloca * * i32 NEW_LINE %16 = alloca ARR 3 2 x ARR 3 1 x ARR 3 9 x i8 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store * i32 null %11 NEW_LINE %22 = bitcast * ARR 3 6 x i64 %12 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %22 , i8 0 , i64 48 , i1 false ) NEW_LINE %23 = bitcast * i8 %22 to * ARR 3 6 x i64 NEW_LINE %24 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 0 NEW_LINE store i64 1 %24 NEW_LINE %25 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 1 NEW_LINE store i64 1 %25 NEW_LINE %26 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 2 NEW_LINE store i64 1 %26 NEW_LINE %27 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 3 NEW_LINE store i64 1 %27 NEW_LINE %28 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 4 NEW_LINE store i64 1 %28 NEW_LINE %29 = getelementptr inbounds ARR 3 6 x i64 %23 , i32 0 , i32 5 NEW_LINE store i64 1 %29 NEW_LINE store i32 0 %13 NEW_LINE store * i8 null %14 NEW_LINE store * * i32 @g_1886 %15 NEW_LINE %30 = bitcast * ARR 3 2 x ARR 3 1 x ARR 3 9 x i8 %16 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 getelementptr inbounds ( ARR 3 2 x ARR 3 1 x ARR 3 9 x i8 @__const.func_14.l_2043 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 18 , i1 false ) NEW_LINE store i64 -3813354171938614515 %17 NEW_LINE store i32 -1830327832 %18 NEW_LINE %31 = load i64 %6 NEW_LINE %32 = trunc i64 %31 to i32 NEW_LINE %33 = load volatile * i32 @g_33 NEW_LINE store i32 %32 %33 NEW_LINE %34 = load volatile * * i64 @g_1067 NEW_LINE %35 = load * i64 %34 NEW_LINE %36 = load volatile i64 %35 NEW_LINE ret i64 %36 NEW_LINE }
define i64 @func_18 ( i16 signext %0 , * STRUCT 1 i16 %1 , * i32 %2 , * i32 %3 , i32 %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * STRUCT 1 i16 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca ARR 3 1 x ARR 3 8 x ARR 3 6 x * i32 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i16 NEW_LINE %16 = alloca ARR 3 10 x i32 NEW_LINE %17 = alloca i16 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE store i16 %0 %6 NEW_LINE store * STRUCT 1 i16 %1 %7 NEW_LINE store * i32 %2 %8 NEW_LINE store * i32 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_209 %11 NEW_LINE store * i32 @g_383 %12 NEW_LINE %21 = bitcast * ARR 3 1 x ARR 3 8 x ARR 3 6 x * i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 1 x ARR 3 8 x ARR 3 6 x * i32 @__const.func_18.l_1027 to * i8 ) , i64 384 , i1 false ) NEW_LINE store i64 -10 %14 NEW_LINE store i16 1316 %15 NEW_LINE store i16 -15532 %17 NEW_LINE store i32 0 %18 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %18 NEW_LINE %24 = icmp slt i32 %23 , 10 NEW_LINE br i1 %24 , label %25 , label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %18 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 10 x i32 %16 , i64 0 , i64 %27 NEW_LINE store i32 1671625283 %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %18 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %18 NEW_LINE br label %22 NEW_LINE 32: NEW_LINE %33 = getelementptr inbounds ARR 3 10 x i32 %16 , i64 0 , i64 4 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = add i32 %34 , -1 NEW_LINE store i32 %35 %33 NEW_LINE %36 = load i16 %17 NEW_LINE %37 = sext i16 %36 to i64 NEW_LINE ret i64 %37 NEW_LINE }
define i32 @func_1 ( ) { NEW_LINE %1 = alloca i16 NEW_LINE %2 = alloca * * * * * i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i8 NEW_LINE store i16 -20030 %1 NEW_LINE store * * * * * i64 null %2 NEW_LINE store i32 -1708933720 %3 NEW_LINE store i64 -1158375699446997613 %4 NEW_LINE store i8 -1 %5 NEW_LINE store i32 1468831727 %6 NEW_LINE store i32 -1302233459 %7 NEW_LINE store i16 15059 %8 NEW_LINE store * i8 %5 %9 NEW_LINE %10 = load i16 %1 NEW_LINE %11 = sext i16 %10 to i32 NEW_LINE %12 = load i32 @g_10 NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE %14 = call i64 @func_8 ( i8 zeroext %13 ) NEW_LINE %15 = xor i64 %14 , -7059405973020926085 NEW_LINE %16 = and i64 %15 , 2270043396 NEW_LINE %17 = trunc i64 %16 to i32 NEW_LINE %18 = call i32 @func_4 ( i32 %11 , i32 %17 ) NEW_LINE %19 = call * i32 @func_2 ( i32 %18 ) NEW_LINE %20 = load volatile * * i32 @g_1921 NEW_LINE store * i32 %19 %20 NEW_LINE store i16 1 %8 NEW_LINE %21 = load * i8 %9 NEW_LINE store i8 0 %21 NEW_LINE %22 = load i16 %1 NEW_LINE %23 = trunc i16 %22 to i8 NEW_LINE %24 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext 0 , i8 signext %23 ) NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE store i32 %25 %7 NEW_LINE %26 = load i8 %5 NEW_LINE %27 = sext i8 %26 to i32 NEW_LINE ret i32 %27 NEW_LINE }
define i32 @func_69 ( * i8 %0 ) { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca ARR 3 7 x ARR 3 7 x * i16 NEW_LINE %4 = alloca ARR 3 4 x * * i16 NEW_LINE %5 = alloca * * * i16 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE %9 = bitcast * ARR 3 7 x ARR 3 7 x * i16 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 7 x ARR 3 7 x * i16 @__const.func_69.l_997 to * i8 ) , i64 392 , i1 false ) NEW_LINE %10 = getelementptr inbounds ARR 3 4 x * * i16 %4 , i64 0 , i64 1 NEW_LINE store * * * i16 %10 %5 NEW_LINE store i32 -1261987009 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %12 , 4 NEW_LINE br i1 %13 , label %14 , label %23 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 7 x ARR 3 7 x * i16 %3 , i64 0 , i64 6 NEW_LINE %16 = getelementptr inbounds ARR 3 7 x * i16 %15 , i64 0 , i64 0 NEW_LINE %17 = load i32 %7 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 4 x * * i16 %4 , i64 0 , i64 %18 NEW_LINE store * * i16 %16 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %7 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %7 NEW_LINE br label %11 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds ARR 3 4 x * * i16 %4 , i64 0 , i64 0 NEW_LINE %25 = load * * i16 %24 NEW_LINE %26 = load * * * i16 %5 NEW_LINE store * * i16 %25 %26 NEW_LINE %27 = load i32 %6 NEW_LINE ret i32 %27 NEW_LINE }
define i32 @func_98 ( i16 signext %0 ) { NEW_LINE %2 = alloca STRUCT 1 i32 NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca ARR 3 1 x * i32 NEW_LINE %5 = alloca ARR 3 6 x ARR 3 4 x ARR 3 4 x i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE %9 = bitcast * ARR 3 6 x ARR 3 4 x ARR 3 4 x i8 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 getelementptr inbounds ( ARR 3 6 x ARR 3 4 x ARR 3 4 x i8 @__const.func_98.l_102 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 96 , i1 false ) NEW_LINE store i32 0 %6 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp slt i32 %11 , 1 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1 x * i32 %4 , i64 0 , i64 %15 NEW_LINE store * i32 @g_45 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %6 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 6 x ARR 3 4 x ARR 3 4 x i8 %5 , i64 0 , i64 2 NEW_LINE %22 = getelementptr inbounds ARR 3 4 x ARR 3 4 x i8 %21 , i64 0 , i64 2 NEW_LINE %23 = getelementptr inbounds ARR 3 4 x i8 %22 , i64 0 , i64 2 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = add i8 %24 , 1 NEW_LINE store i8 %25 %23 NEW_LINE %26 = bitcast * STRUCT 1 i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %26 , * i8 bitcast ( * STRUCT 2 i16 ARR 3 2 x i8 @g_105 to * i8 ) , i64 4 , i1 false ) NEW_LINE %27 = getelementptr inbounds STRUCT 1 i32 %2 , i32 0 , i32 0 NEW_LINE %28 = load i32 %27 NEW_LINE ret i32 %28 NEW_LINE }
define signext i16 @func_11 ( i32 %0 , i8 signext %1 , i64 %2 ) { NEW_LINE %4 = alloca STRUCT 2 i16 i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca ARR 3 9 x ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = bitcast * STRUCT 2 i16 i32 %4 to * i64 NEW_LINE store i64 %2 %11 NEW_LINE store i32 %0 %5 NEW_LINE store i8 %1 %6 NEW_LINE %12 = bitcast * ARR 3 9 x ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 9 x ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 @__const.func_11.l_2549 to * i8 ) , i64 360 , i1 false ) NEW_LINE %13 = getelementptr inbounds ARR 3 9 x ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %7 , i64 0 , i64 5 NEW_LINE %14 = getelementptr inbounds ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %13 , i64 0 , i64 0 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %14 , i64 0 , i64 0 NEW_LINE %16 = load * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %15 NEW_LINE %17 = getelementptr inbounds ARR 3 9 x ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %7 , i64 0 , i64 2 NEW_LINE %18 = getelementptr inbounds ARR 3 1 x ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %17 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %18 , i64 0 , i64 0 NEW_LINE store * STRUCT 8 i32 i32 i32 i8 i64 i32 i16 %struct.S0 %16 %19 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = trunc i32 %20 to i16 NEW_LINE ret i16 %21 NEW_LINE }
define zeroext i8 @func_60 ( i32 %0 , i8 signext %1 , i16 zeroext %2 , i64 %3 , i32 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca ARR 3 7 x ARR 3 4 x i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca * i32 NEW_LINE %19 = alloca * i32 NEW_LINE %20 = alloca * i32 NEW_LINE %21 = alloca ARR 3 8 x * i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i8 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i64 %3 %9 NEW_LINE store i32 %4 %10 NEW_LINE store * i32 @g_80 %11 NEW_LINE store i32 0 %12 NEW_LINE %25 = bitcast * ARR 3 7 x ARR 3 4 x i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %25 , * i8 bitcast ( * ARR 3 7 x ARR 3 4 x i32 @__const.func_60.l_82 to * i8 ) , i64 112 , i1 false ) NEW_LINE %26 = getelementptr inbounds ARR 3 7 x ARR 3 4 x i32 %13 , i64 0 , i64 2 NEW_LINE %27 = getelementptr inbounds ARR 3 4 x i32 %26 , i64 0 , i64 1 NEW_LINE store * i32 %27 %14 NEW_LINE store * i32 null %15 NEW_LINE %28 = getelementptr inbounds ARR 3 7 x ARR 3 4 x i32 %13 , i64 0 , i64 3 NEW_LINE %29 = getelementptr inbounds ARR 3 4 x i32 %28 , i64 0 , i64 3 NEW_LINE store * i32 %29 %16 NEW_LINE store * i32 null %17 NEW_LINE store * i32 %12 %18 NEW_LINE store * i32 null %19 NEW_LINE store * i32 null %20 NEW_LINE %30 = bitcast * ARR 3 8 x * i32 %21 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %30 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_60.l_92 to * i8 ) , i64 64 , i1 false ) NEW_LINE store i32 842618155 %22 NEW_LINE store * i32 null %11 NEW_LINE %31 = load i32 %22 NEW_LINE %32 = add i32 %31 , 1 NEW_LINE store i32 %32 %22 NEW_LINE %33 = load i32 @g_16 NEW_LINE %34 = trunc i32 %33 to i8 NEW_LINE ret i8 %34 NEW_LINE }
define * i32 @func_28 ( i64 %0 , i16 zeroext %1 , i16 signext %2 , i8 zeroext %3 , * i32 %4 ) { NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca ARR 3 4 x ARR 3 2 x ARR 3 8 x * i32 NEW_LINE %12 = alloca ARR 3 9 x * * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store i64 %0 %6 NEW_LINE store i16 %1 %7 NEW_LINE store i16 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store * i32 %4 %10 NEW_LINE %16 = bitcast * ARR 3 4 x ARR 3 2 x ARR 3 8 x * i32 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 4 x ARR 3 2 x ARR 3 8 x * i32 @__const.func_28.l_2707 to * i8 ) , i64 512 , i1 false ) NEW_LINE %17 = bitcast * ARR 3 9 x * * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 9 x * * i32 @__const.func_28.l_2708 to * i8 ) , i64 72 , i1 false ) NEW_LINE %18 = getelementptr inbounds ARR 3 4 x ARR 3 2 x ARR 3 8 x * i32 %11 , i64 0 , i64 3 NEW_LINE %19 = getelementptr inbounds ARR 3 2 x ARR 3 8 x * i32 %18 , i64 0 , i64 1 NEW_LINE %20 = getelementptr inbounds ARR 3 8 x * i32 %19 , i64 0 , i64 2 NEW_LINE %21 = load * i32 %20 NEW_LINE store * i32 %21 %10 NEW_LINE %22 = load * * * * i32 @g_1718 NEW_LINE %23 = load * * * i32 %22 NEW_LINE %24 = load * * i32 %23 NEW_LINE %25 = load * i32 %24 NEW_LINE ret * i32 %25 NEW_LINE }
define zeroext i16 @func_21 ( i8 zeroext %0 , * i64 %1 , * i64 %2 , i8 signext %3 ) { NEW_LINE %5 = alloca i8 NEW_LINE %6 = alloca * i64 NEW_LINE %7 = alloca * i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca ARR 3 6 x ARR 3 6 x i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca ARR 3 9 x * i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE store i8 %0 %5 NEW_LINE store * i64 %1 %6 NEW_LINE store * i64 %2 %7 NEW_LINE store i8 %3 %8 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 5 ) %9 NEW_LINE store i32 -1145351394 %10 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 2 ) %11 NEW_LINE store * i32 %10 %12 NEW_LINE %21 = bitcast * ARR 3 6 x ARR 3 6 x i32 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 6 x ARR 3 6 x i32 @__const.func_21.l_36 to * i8 ) , i64 144 , i1 false ) NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 3 ) %14 NEW_LINE %22 = getelementptr inbounds ARR 3 6 x ARR 3 6 x i32 %13 , i64 0 , i64 0 NEW_LINE %23 = getelementptr inbounds ARR 3 6 x i32 %22 , i64 0 , i64 0 NEW_LINE store * i32 %23 %15 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 7 x i32 @g_32 , i64 0 , i64 3 ) %16 NEW_LINE %24 = bitcast * ARR 3 9 x * i32 %17 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %24 , * i8 bitcast ( * ARR 3 9 x * i32 @__const.func_21.l_40 to * i8 ) , i64 72 , i1 false ) NEW_LINE store i32 1004023999 %18 NEW_LINE %25 = load i32 %18 NEW_LINE %26 = add i32 %25 , -1 NEW_LINE store i32 %26 %18 NEW_LINE %27 = load * i32 %14 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = trunc i32 %28 to i16 NEW_LINE ret i16 %29 NEW_LINE }
define * * i16 @func_34 ( i32 %0 , * * i16 %1 , * i8 %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i16 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca ARR 3 2 x ARR 3 5 x ARR 3 8 x * i32 NEW_LINE %8 = alloca * * i16 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store * * i16 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE %12 = bitcast * ARR 3 2 x ARR 3 5 x ARR 3 8 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %12 , * i8 bitcast ( * ARR 3 2 x ARR 3 5 x ARR 3 8 x * i32 @__const.func_34.l_1285 to * i8 ) , i64 640 , i1 false ) NEW_LINE store * * i16 getelementptr inbounds ( ARR 3 2 x * i16 @g_1190 , i64 0 , i64 0 ) %8 NEW_LINE %13 = getelementptr inbounds ARR 3 2 x ARR 3 5 x ARR 3 8 x * i32 %7 , i64 0 , i64 1 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x ARR 3 8 x * i32 %13 , i64 0 , i64 3 NEW_LINE %15 = getelementptr inbounds ARR 3 8 x * i32 %14 , i64 0 , i64 0 NEW_LINE %16 = load * i32 %15 NEW_LINE %17 = load * * i32 @g_1263 NEW_LINE store * i32 %16 %17 NEW_LINE %18 = load * * i16 %8 NEW_LINE ret * * i16 %18 NEW_LINE }
define * i32 @func_41 ( i64 %0 , i32 %1 , * i32 %2 , i32 %3 ) { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca * i16 NEW_LINE %10 = alloca * * i16 NEW_LINE %11 = alloca * * * i16 NEW_LINE %12 = alloca * * * * i16 NEW_LINE %13 = alloca * * * * i16 NEW_LINE %14 = alloca * * i32 NEW_LINE %15 = alloca * i8 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca ARR 3 4 x * i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE store i64 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store * i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store * i16 getelementptr inbounds ( ARR 3 6 x ARR 3 1 x ARR 3 8 x i16 @g_497 , i64 0 , i64 1 , i64 0 , i64 3 ) %9 NEW_LINE store * * i16 %9 %10 NEW_LINE store * * * i16 %10 %11 NEW_LINE store * * * * i16 null %12 NEW_LINE store * * * * i16 null %13 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 10 x ARR 3 8 x ARR 3 3 x * i32 @g_666 , i64 0 , i64 1 , i64 1 , i64 2 ) %14 NEW_LINE store * i8 getelementptr inbounds ( ARR 3 1 x i8 @g_194 , i64 0 , i64 0 ) %15 NEW_LINE store i32 -2 %16 NEW_LINE store i32 -203272124 %17 NEW_LINE store i32 -556769308 %19 NEW_LINE store i32 0 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %20 NEW_LINE %23 = icmp slt i32 %22 , 4 NEW_LINE br i1 %23 , label %24 , label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %20 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 4 x * i32 %18 , i64 0 , i64 %26 NEW_LINE store * i32 @g_93 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %20 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %20 NEW_LINE br label %21 NEW_LINE 31: NEW_LINE %32 = load * * * i16 %11 NEW_LINE store * * * i16 %32 %11 NEW_LINE store * * i32 null %14 NEW_LINE %33 = load i32 %19 NEW_LINE %34 = and i32 %33 , 1 NEW_LINE store i32 %34 %19 NEW_LINE %35 = load * i32 %7 NEW_LINE ret * i32 %35 NEW_LINE }
define signext i8 @func_26 ( i64 %0 , i32 %1 ) { NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i8 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca ARR 3 2 x ARR 3 6 x ARR 3 3 x * i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE store i64 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 939262774 %6 NEW_LINE store i32 8 %7 NEW_LINE store i32 1 %8 NEW_LINE store i32 549705941 %9 NEW_LINE store i32 694868354 %10 NEW_LINE store i32 7 %11 NEW_LINE store i8 2 %12 NEW_LINE store i32 -739869901 %13 NEW_LINE store i32 -8 %14 NEW_LINE store i32 2 %15 NEW_LINE store i32 2066619782 %16 NEW_LINE store i32 29 %5 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = icmp slt i32 %23 , 27 NEW_LINE br i1 %24 , label %25 , label %42 NEW_LINE 25: NEW_LINE store * i32 @g_33 %17 NEW_LINE %26 = bitcast * ARR 3 2 x ARR 3 6 x ARR 3 3 x * i32 %18 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %26 , * i8 bitcast ( * ARR 3 2 x ARR 3 6 x ARR 3 3 x * i32 @__const.func_26.l_34 to * i8 ) , i64 288 , i1 false ) NEW_LINE %27 = load i32 @g_49 NEW_LINE %28 = add i32 %27 , -1 NEW_LINE store i32 %28 @g_49 NEW_LINE store i32 1 %8 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %8 NEW_LINE %31 = icmp sge i32 %30 , 0 NEW_LINE br i1 %31 , label %32 , label %38 NEW_LINE 32: NEW_LINE %33 = load i32 @g_49 NEW_LINE %34 = trunc i32 %33 to i8 NEW_LINE store i8 %34 %3 NEW_LINE br label %45 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = sub nsw i32 %36 , 1 NEW_LINE store i32 %37 %8 NEW_LINE br label %29 NEW_LINE 38: NEW_LINE br label %39 NEW_LINE 39: NEW_LINE %40 = load i32 %5 NEW_LINE %41 = add nsw i32 %40 , -1 NEW_LINE store i32 %41 %5 NEW_LINE br label %22 NEW_LINE 42: NEW_LINE %43 = load i32 %8 NEW_LINE %44 = trunc i32 %43 to i8 NEW_LINE store i8 %44 %3 NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load i8 %3 NEW_LINE ret i8 %46 NEW_LINE }
define i64 @func_1 ( ) { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 7 x ARR 3 4 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i8 NEW_LINE store i32 -902721100 %1 NEW_LINE %6 = bitcast * ARR 3 7 x ARR 3 4 x i32 %2 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %6 , * i8 bitcast ( * ARR 3 7 x ARR 3 4 x i32 @__const.func_1.l_4559 to * i8 ) , i64 112 , i1 false ) NEW_LINE store i32 1 getelementptr inbounds ( ARR 3 1 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE %9 = icmp ne i32 %8 , -4 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE store i8 -44 %5 NEW_LINE br label %14 NEW_LINE 11: NEW_LINE %12 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 getelementptr inbounds ( ARR 3 1 x i32 @g_2 , i64 0 , i64 0 ) NEW_LINE br label %7 NEW_LINE 14: NEW_LINE %15 = call i64 @func_14 ( i32 1 ) NEW_LINE %16 = call i64 @safe_sub_func_uint64_t_u_u ( i64 %15 , i64 3392246196 ) NEW_LINE %17 = trunc i64 %16 to i8 NEW_LINE %18 = load i32 bitcast ( * STRUCT 7 i8 i8 i8 i8 i8 i8 ARR 3 2 x i8 @g_89 to * i32 ) NEW_LINE %19 = shl i32 %18 , 27 NEW_LINE %20 = ashr i32 %19 , 27 NEW_LINE %21 = trunc i32 %20 to i8 NEW_LINE %22 = call signext i8 @safe_mul_func_int8_t_s_s ( i8 signext %17 , i8 signext %21 ) NEW_LINE %23 = sext i8 %22 to i64 NEW_LINE %24 = call i64 @safe_div_func_int64_t_s_s ( i64 1 , i64 %23 ) NEW_LINE %25 = trunc i64 %24 to i16 NEW_LINE %26 = call signext i16 @safe_rshift_func_int16_t_s_s ( i16 signext %25 , i32 7 ) NEW_LINE %27 = sext i16 %26 to i32 NEW_LINE %28 = getelementptr inbounds ARR 3 7 x ARR 3 4 x i32 %2 , i64 0 , i64 4 NEW_LINE %29 = getelementptr inbounds ARR 3 4 x i32 %28 , i64 0 , i64 0 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = xor i32 %30 , %27 NEW_LINE store i32 %31 %29 NEW_LINE %32 = getelementptr inbounds ARR 3 7 x ARR 3 4 x i32 %2 , i64 0 , i64 2 NEW_LINE %33 = getelementptr inbounds ARR 3 4 x i32 %32 , i64 0 , i64 3 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = sext i32 %34 to i64 NEW_LINE ret i64 %35 NEW_LINE }
define void @func_40 ( * STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 i16 i32 noalias sret %0 , i16 zeroext %1 , * i16 %2 , i16 signext %3 , i8 zeroext %4 ) { NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca ARR 3 8 x * i32 NEW_LINE %11 = alloca ARR 3 6 x ARR 3 5 x i64 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i8 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE store i16 %1 %6 NEW_LINE store * i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE store i8 %4 %9 NEW_LINE %16 = bitcast * ARR 3 8 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %16 , * i8 bitcast ( * ARR 3 8 x * i32 @__const.func_40.l_563 to * i8 ) , i64 64 , i1 false ) NEW_LINE %17 = bitcast * ARR 3 6 x ARR 3 5 x i64 %11 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 6 x ARR 3 5 x i64 @__const.func_40.l_564 to * i8 ) , i64 240 , i1 false ) NEW_LINE store i32 1638808105 %12 NEW_LINE store i8 0 %13 NEW_LINE %18 = load volatile * i32 @g_173 NEW_LINE store i32 -1 %18 NEW_LINE %19 = load i32 %12 NEW_LINE %20 = add i32 %19 , 1 NEW_LINE store i32 %20 %12 NEW_LINE %21 = load i8 %13 NEW_LINE %22 = add i8 %21 , 1 NEW_LINE store i8 %22 %13 NEW_LINE %23 = bitcast * STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 8 i32 i32 i32 i16 ARR 3 3 x i8 i64 i16 i16 i16 i32 %0 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %23 , * i8 getelementptr inbounds ( STRUCT 9 i8 i64 i32 i64 i32 i8 STRUCT 10 i32 i32 i32 i16 i8 i8 i8 i64 i16 i16 i16 i32 @g_571 , i32 0 , i32 0 ) , i64 61 , i1 false ) NEW_LINE ret void NEW_LINE }
define i64 @func_68 ( i8 zeroext %0 ) { NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 6 x ARR 3 5 x ARR 3 2 x * i32 NEW_LINE %5 = alloca ARR 3 6 x i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i8 %0 %2 NEW_LINE store i32 248755235 %3 NEW_LINE %9 = bitcast * ARR 3 6 x ARR 3 5 x ARR 3 2 x * i32 %4 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 6 x ARR 3 5 x ARR 3 2 x * i32 @__const.func_68.l_71 to * i8 ) , i64 480 , i1 false ) NEW_LINE store i32 0 %6 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp slt i32 %11 , 6 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 6 x i32 %5 , i64 0 , i64 %15 NEW_LINE store i32 -1148017168 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %6 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE store i32 %21 getelementptr inbounds ( %struct.S1 bitcast ( * STRUCT 7 i32 i32 i32 i8 i8 i8 i64 @g_65 to * %struct.S1 ) , i32 0 , i32 2 ) NEW_LINE %22 = getelementptr inbounds ARR 3 6 x i32 %5 , i64 0 , i64 3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = zext i32 %23 to i64 NEW_LINE ret i64 %24 NEW_LINE }
define i32 @func_23 ( i16 zeroext %0 ) { NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca * i16 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 5 x i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca * i8 NEW_LINE %10 = alloca ARR 3 10 x * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca ARR 3 10 x ARR 3 4 x * i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE store i16 %0 %2 NEW_LINE store * i16 @g_33 %3 NEW_LINE store i32 1370315592 %4 NEW_LINE %15 = bitcast * ARR 3 5 x i32 %5 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %15 , * i8 bitcast ( * ARR 3 5 x i32 @__const.func_23.l_2129 to * i8 ) , i64 20 , i1 false ) NEW_LINE store i32 1 %6 NEW_LINE store i16 0 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i16 %2 NEW_LINE %18 = zext i16 %17 to i32 NEW_LINE %19 = icmp sle i32 %18 , 50 NEW_LINE br i1 %19 , label %20 , label %26 NEW_LINE 20: NEW_LINE store i16 -4535 %8 NEW_LINE store * i8 @g_84 %9 NEW_LINE %21 = bitcast * ARR 3 10 x * i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 10 x * i32 @__const.func_23.l_944 to * i8 ) , i64 80 , i1 false ) NEW_LINE store * i32 null %11 NEW_LINE %22 = bitcast * ARR 3 10 x ARR 3 4 x * i32 %12 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %22 , * i8 bitcast ( * ARR 3 10 x ARR 3 4 x * i32 @__const.func_23.l_2128 to * i8 ) , i64 320 , i1 false ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i16 %2 NEW_LINE %25 = add i16 %24 , 1 NEW_LINE store i16 %25 %2 NEW_LINE br label %16 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE ret i32 %27 NEW_LINE }
define i64 @func_19 ( i32 %0 , i16 zeroext %1 , i8 signext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i16 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 10 x ARR 3 8 x * i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * * i32 NEW_LINE %12 = alloca * i8 NEW_LINE %13 = alloca * i16 NEW_LINE %14 = alloca * * i32 NEW_LINE %15 = alloca * * * i32 NEW_LINE %16 = alloca i16 NEW_LINE %17 = alloca ARR 3 7 x i16 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i16 %1 %5 NEW_LINE store i8 %2 %6 NEW_LINE store * i32 @g_25 %7 NEW_LINE store * i32 @g_25 %8 NEW_LINE %20 = bitcast * ARR 3 10 x ARR 3 8 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %20 , * i8 bitcast ( * ARR 3 10 x ARR 3 8 x * i32 @__const.func_19.l_27 to * i8 ) , i64 640 , i1 false ) NEW_LINE store i16 7 %10 NEW_LINE store * * i32 @g_441 %11 NEW_LINE store * i8 @g_252 %12 NEW_LINE store * i16 @g_292 %13 NEW_LINE store * * i32 @g_244 %14 NEW_LINE store * * * i32 %14 %15 NEW_LINE store i16 -24658 %16 NEW_LINE %21 = bitcast * ARR 3 7 x i16 %17 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 7 x i16 @__const.func_19.l_1550 to * i8 ) , i64 14 , i1 false ) NEW_LINE %22 = load i16 %10 NEW_LINE %23 = add i16 %22 , 1 NEW_LINE store i16 %23 %10 NEW_LINE %24 = load * i32 %8 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE ret i64 %26 NEW_LINE }
define i32 @func_2 ( i32 %0 , i32 %1 , i16 zeroext %2 ) { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca ARR 3 5 x ARR 3 3 x ARR 3 7 x i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i64 NEW_LINE %12 = alloca * * i64 NEW_LINE %13 = alloca * * i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i16 %2 %6 NEW_LINE store i32 -2 %7 NEW_LINE store i64 0 @g_7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 @g_7 NEW_LINE %19 = icmp ult i64 %18 , 39 NEW_LINE br i1 %19 , label %20 , label %25 NEW_LINE 20: NEW_LINE %21 = bitcast * ARR 3 5 x ARR 3 3 x ARR 3 7 x i32 %8 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %21 , * i8 bitcast ( * ARR 3 5 x ARR 3 3 x ARR 3 7 x i32 @__const.func_2.l_1893 to * i8 ) , i64 420 , i1 false ) NEW_LINE store i32 2 %9 NEW_LINE store * i32 %9 %10 NEW_LINE store * i64 @g_6 %11 NEW_LINE store * * i64 @g_1110 %12 NEW_LINE store * * i32 getelementptr inbounds ( ARR 3 8 x * i32 @g_75 , i64 0 , i64 0 ) %13 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i64 @g_7 NEW_LINE %24 = add i64 %23 , 1 NEW_LINE store i64 %24 @g_7 NEW_LINE br label %17 NEW_LINE 25: NEW_LINE %26 = load i32 %7 NEW_LINE ret i32 %26 NEW_LINE }
define zeroext i16 @func_22 ( i32 %0 , i64 %1 , i8 zeroext %2 , i32 %3 , i64 %4 ) { NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i16 NEW_LINE %12 = alloca * i16 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca ARR 3 9 x ARR 3 4 x * i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE store i32 %0 %6 NEW_LINE store i64 %1 %7 NEW_LINE store i8 %2 %8 NEW_LINE store i32 %3 %9 NEW_LINE store i64 %4 %10 NEW_LINE store i16 -1 %11 NEW_LINE store * i16 @g_776 %12 NEW_LINE store i32 2127982254 %13 NEW_LINE store * i32 null %14 NEW_LINE %19 = bitcast * ARR 3 9 x ARR 3 4 x * i32 %15 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 bitcast ( * ARR 3 9 x ARR 3 4 x * i32 @__const.func_22.l_1255 to * i8 ) , i64 288 , i1 false ) NEW_LINE store i32 -1 %16 NEW_LINE %20 = load i16 %11 NEW_LINE %21 = zext i16 %20 to i32 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = call signext i16 @safe_lshift_func_int16_t_s_u ( i16 signext 1 , i32 %22 ) NEW_LINE %24 = sext i16 %23 to i32 NEW_LINE %25 = load i32 %9 NEW_LINE %26 = icmp sge i32 %24 , %25 NEW_LINE %27 = xor i1 %26 , true NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE %29 = icmp slt i32 %21 , %28 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = load i64 %7 NEW_LINE %33 = icmp sle i64 %31 , %32 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE %35 = load i64 %7 NEW_LINE %36 = trunc i64 %35 to i32 NEW_LINE %37 = call i32 @safe_add_func_int32_t_s_s ( i32 %34 , i32 %36 ) NEW_LINE %38 = load * i32 @g_360 NEW_LINE store i32 %37 %38 NEW_LINE %39 = load i32 %16 NEW_LINE %40 = add i32 %39 , 1 NEW_LINE store i32 %40 %16 NEW_LINE %41 = load i32 %6 NEW_LINE %42 = trunc i32 %41 to i16 NEW_LINE ret i16 %42 NEW_LINE }
define i64 @func_67 ( i16 zeroext %0 , i64 %1 ) { NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i16 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca * i32 NEW_LINE %9 = alloca ARR 3 4 x ARR 3 7 x ARR 3 3 x * i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE store i16 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i32 238326395 %5 NEW_LINE store i16 0 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i16 %3 NEW_LINE %15 = zext i16 %14 to i32 NEW_LINE %16 = icmp ne i32 %15 , 19 NEW_LINE br i1 %16 , label %17 , label %26 NEW_LINE 17: NEW_LINE store i16 2 %6 NEW_LINE store * i32 @g_82 %7 NEW_LINE store * i32 @g_82 %8 NEW_LINE %18 = bitcast * ARR 3 4 x ARR 3 7 x ARR 3 3 x * i32 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 bitcast ( * ARR 3 4 x ARR 3 7 x ARR 3 3 x * i32 @__const.func_67.l_84 to * i8 ) , i64 672 , i1 false ) NEW_LINE %19 = load i32 %5 NEW_LINE %20 = add i32 %19 , -1 NEW_LINE store i32 %20 %5 NEW_LINE %21 = load i32 %5 NEW_LINE store volatile i32 %21 getelementptr inbounds ( ARR 3 3 x ARR 3 7 x ARR 3 8 x i32 @g_3 , i64 0 , i64 0 , i64 3 , i64 5 ) NEW_LINE %22 = load volatile * * i32 @g_88 NEW_LINE store * i32 @g_82 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i16 %3 NEW_LINE %25 = add i16 %24 , 1 NEW_LINE store i16 %25 %3 NEW_LINE br label %13 NEW_LINE 26: NEW_LINE %27 = load i32 %5 NEW_LINE %28 = zext i32 %27 to i64 NEW_LINE ret i64 %28 NEW_LINE }
define i32 @func_21 ( * i8 %0 , * i8 %1 , * i8 %2 , * i8 %3 ) { NEW_LINE %5 = alloca STRUCT 1 * i8 NEW_LINE %6 = alloca STRUCT 1 * i8 NEW_LINE %7 = alloca * i8 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca ARR 3 9 x ARR 3 3 x ARR 3 1 x i32 NEW_LINE %11 = alloca * i16 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca STRUCT 1 * i8 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * * i32 NEW_LINE %16 = alloca * * * * i8 NEW_LINE %17 = alloca * * * * * i8 NEW_LINE %18 = alloca * * * * * i16 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i8 NEW_LINE %21 = alloca i16 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i8 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE %27 = getelementptr inbounds STRUCT 1 * i8 %5 , i32 0 , i32 0 NEW_LINE store * i8 %1 %27 NEW_LINE %28 = getelementptr inbounds STRUCT 1 * i8 %6 , i32 0 , i32 0 NEW_LINE store * i8 %3 %28 NEW_LINE store * i8 %0 %7 NEW_LINE store * i8 %2 %8 NEW_LINE store i8 17 %9 NEW_LINE %29 = bitcast * ARR 3 9 x ARR 3 3 x ARR 3 1 x i32 %10 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %29 , * i8 bitcast ( * ARR 3 9 x ARR 3 3 x ARR 3 1 x i32 @__const.func_21.l_1151 to * i8 ) , i64 108 , i1 false ) NEW_LINE store * i16 getelementptr inbounds ( ARR 3 1 x ARR 3 2 x i16 @g_1186 , i64 0 , i64 0 , i64 1 ) %11 NEW_LINE store * i32 getelementptr inbounds ( ARR 3 5 x i32 @g_1647 , i64 0 , i64 0 ) %12 NEW_LINE %30 = bitcast * STRUCT 1 * i8 %13 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %30 , i8 0 , i64 8 , i1 false ) NEW_LINE store * i32 @g_451 %14 NEW_LINE store * * i32 %14 %15 NEW_LINE store * * * * i8 @g_480 %16 NEW_LINE store * * * * * i8 %16 %17 NEW_LINE store * * * * * i16 null %18 NEW_LINE store i32 1475411532 %19 NEW_LINE store i8 0 %20 NEW_LINE store i16 -1 %21 NEW_LINE store i32 0 %22 NEW_LINE store i8 1 %23 NEW_LINE %31 = load * i32 %12 NEW_LINE %32 = load i32 %31 NEW_LINE ret i32 %32 NEW_LINE }
define * i8 @func_17 ( * i8 %0 , i64 %1 ) { NEW_LINE %3 = alloca STRUCT 1 * i8 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca ARR 3 4 x ARR 3 9 x * i32 NEW_LINE %8 = alloca i8 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i16 NEW_LINE %11 = alloca * STRUCT 1 i64 NEW_LINE %12 = alloca * * STRUCT 1 i64 NEW_LINE %13 = alloca ARR 3 9 x ARR 3 2 x ARR 3 1 x * * STRUCT 1 i64 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store * i32 @g_381 %6 NEW_LINE %17 = bitcast * ARR 3 4 x ARR 3 9 x * i32 %7 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %17 , * i8 bitcast ( * ARR 3 4 x ARR 3 9 x * i32 @__const.func_17.l_1880 to * i8 ) , i64 288 , i1 false ) NEW_LINE store i8 0 %8 NEW_LINE store i32 -9 %9 NEW_LINE store i16 0 %10 NEW_LINE store * STRUCT 1 i64 @g_1207 %11 NEW_LINE store * * STRUCT 1 i64 null %12 NEW_LINE %18 = bitcast * ARR 3 9 x ARR 3 2 x ARR 3 1 x * * STRUCT 1 i64 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %18 , * i8 bitcast ( * ARR 3 9 x ARR 3 2 x ARR 3 1 x * * STRUCT 1 i64 @__const.func_17.l_1888 to * i8 ) , i64 144 , i1 false ) NEW_LINE %19 = bitcast * STRUCT 1 * i8 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %19 , i8 0 , i64 8 , i1 false ) NEW_LINE %20 = load i16 %10 NEW_LINE %21 = add i16 %20 , -1 NEW_LINE store i16 %21 %10 NEW_LINE %22 = load * i32 %6 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load * i32 @g_1491 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = xor i32 %25 , %23 NEW_LINE store i32 %26 %24 NEW_LINE %27 = load * STRUCT 1 i64 %11 NEW_LINE %28 = load volatile * * STRUCT 1 i64 @g_1508 NEW_LINE store * STRUCT 1 i64 %27 %28 NEW_LINE %29 = getelementptr inbounds STRUCT 1 * i8 %3 , i32 0 , i32 0 NEW_LINE %30 = load * i8 %29 NEW_LINE ret * i8 %30 NEW_LINE }
define i64 @func_40 ( * i16 %0 ) { NEW_LINE %2 = alloca * i16 NEW_LINE %3 = alloca * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 NEW_LINE %4 = alloca * * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 NEW_LINE %5 = alloca * * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 NEW_LINE %6 = alloca ARR 3 9 x ARR 3 10 x i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i16 %0 %2 NEW_LINE store * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 @g_1670 %3 NEW_LINE store * * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 null %4 NEW_LINE store * * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 %3 %5 NEW_LINE %9 = bitcast * ARR 3 9 x ARR 3 10 x i32 %6 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %9 , * i8 bitcast ( * ARR 3 9 x ARR 3 10 x i32 @__const.func_40.l_2058 to * i8 ) , i64 360 , i1 false ) NEW_LINE %10 = load * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 %3 NEW_LINE %11 = load * * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 %5 NEW_LINE store * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 %10 %11 NEW_LINE %12 = icmp eq * * STRUCT 9 i16 i32 i8 i32 i32 i32 i8 i32 i8 %10 , @g_1670 NEW_LINE %13 = zext i1 %12 to i32 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x ARR 3 10 x i32 %6 , i64 0 , i64 3 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %14 , i64 0 , i64 0 NEW_LINE store i32 %13 %15 NEW_LINE %16 = load * * * * * i32 @g_924 NEW_LINE %17 = load * * * * i32 %16 NEW_LINE %18 = load * * * i32 %17 NEW_LINE %19 = load * * i32 %18 NEW_LINE store * i32 null %19 NEW_LINE %20 = load i8 @g_1127 NEW_LINE %21 = zext i8 %20 to i64 NEW_LINE ret i64 %21 NEW_LINE }
define * i32 @func_48 ( * i32 %0 , * * i32 %1 , i16 signext %2 , i16 zeroext %3 ) { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * * i32 NEW_LINE %7 = alloca i16 NEW_LINE %8 = alloca i16 NEW_LINE %9 = alloca ARR 3 8 x ARR 3 1 x ARR 3 5 x STRUCT 1 ARR 3 7 x i8 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * * i32 %1 %6 NEW_LINE store i16 %2 %7 NEW_LINE store i16 %3 %8 NEW_LINE %14 = bitcast * ARR 3 8 x ARR 3 1 x ARR 3 5 x STRUCT 1 ARR 3 7 x i8 %9 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %14 , * i8 getelementptr inbounds ( ARR 3 8 x ARR 3 1 x ARR 3 5 x STRUCT 7 i8 i8 i8 i8 i8 i8 i8 @__const.func_48.l_601 , i32 0 , i32 0 , i32 0 , i32 0 , i32 0 ) , i64 280 , i1 false ) NEW_LINE store * i32 null %10 NEW_LINE %15 = load * STRUCT 1 ARR 3 7 x i8 @g_513 NEW_LINE %16 = getelementptr inbounds ARR 3 8 x ARR 3 1 x ARR 3 5 x STRUCT 1 ARR 3 7 x i8 %9 , i64 0 , i64 2 NEW_LINE %17 = getelementptr inbounds ARR 3 1 x ARR 3 5 x STRUCT 1 ARR 3 7 x i8 %16 , i64 0 , i64 0 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x STRUCT 1 ARR 3 7 x i8 %17 , i64 0 , i64 0 NEW_LINE %19 = bitcast * STRUCT 1 ARR 3 7 x i8 %15 to * i8 NEW_LINE %20 = bitcast * STRUCT 1 ARR 3 7 x i8 %18 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %19 , * i8 %20 , i64 7 , i1 false ) NEW_LINE %21 = load * i32 %10 NEW_LINE %22 = load * * i32 %6 NEW_LINE store * i32 %21 %22 NEW_LINE %23 = load * i32 %10 NEW_LINE ret * i32 %23 NEW_LINE }
define i64 @func_55 ( * i32 %0 , i32 %1 , i32 %2 , i8 signext %3 , i8 signext %4 ) { NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i8 NEW_LINE %10 = alloca i8 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca ARR 3 7 x ARR 3 4 x i64 NEW_LINE %14 = alloca * * * * * i32 NEW_LINE %15 = alloca * i8 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca * STRUCT 1 i32 NEW_LINE %27 = alloca i8 NEW_LINE %28 = alloca i16 NEW_LINE %29 = alloca i16 NEW_LINE %30 = alloca i32 NEW_LINE %31 = alloca i64 NEW_LINE %32 = alloca * i64 NEW_LINE %33 = alloca * * i64 NEW_LINE %34 = alloca * * * i64 NEW_LINE %35 = alloca i8 NEW_LINE %36 = alloca i32 NEW_LINE %37 = alloca i32 NEW_LINE store * i32 %0 %6 NEW_LINE store i32 %1 %7 NEW_LINE store i32 %2 %8 NEW_LINE store i8 %3 %9 NEW_LINE store i8 %4 %10 NEW_LINE store i32 5 %11 NEW_LINE store i32 1983996754 %12 NEW_LINE %38 = bitcast * ARR 3 7 x ARR 3 4 x i64 %13 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %38 , * i8 bitcast ( * ARR 3 7 x ARR 3 4 x i64 @__const.func_55.l_1475 to * i8 ) , i64 224 , i1 false ) NEW_LINE store * * * * * i32 null %14 NEW_LINE store * i8 getelementptr inbounds ( ARR 3 4 x ARR 3 5 x ARR 3 5 x i8 @g_552 , i64 0 , i64 3 , i64 2 , i64 2 ) %15 NEW_LINE store i32 -1 %16 NEW_LINE store i32 3 %17 NEW_LINE store i32 298021283 %18 NEW_LINE store i32 1 %19 NEW_LINE store i32 0 %20 NEW_LINE store i32 -427503886 %21 NEW_LINE store i32 -1 %22 NEW_LINE store i32 1 %23 NEW_LINE store i32 -2036697258 %24 NEW_LINE store i32 -4 %25 NEW_LINE store * STRUCT 1 i32 @g_1578 %26 NEW_LINE store i8 -4 %27 NEW_LINE store i16 -17500 %28 NEW_LINE store i16 26198 %29 NEW_LINE store i32 687839691 %30 NEW_LINE store i64 7597685771738595576 %31 NEW_LINE store * i64 @g_307 %32 NEW_LINE store * * i64 %32 %33 NEW_LINE store * * * i64 %33 %34 NEW_LINE store i8 100 %35 NEW_LINE %39 = load i32 %25 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE ret i64 %40 NEW_LINE }
define * i32 @func_50 ( i64 %0 , i32 %1 , i32 %2 , i64 %3 , * i32 %4 ) { NEW_LINE %6 = alloca STRUCT 2 i32 i8 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca * i32 NEW_LINE %11 = alloca * i32 NEW_LINE %12 = alloca * i32 NEW_LINE %13 = alloca * i32 NEW_LINE %14 = alloca * i32 NEW_LINE %15 = alloca * i32 NEW_LINE %16 = alloca * i32 NEW_LINE %17 = alloca * i32 NEW_LINE %18 = alloca * i32 NEW_LINE %19 = alloca ARR 3 6 x ARR 3 9 x i32 NEW_LINE %20 = alloca * i32 NEW_LINE %21 = alloca * i32 NEW_LINE %22 = alloca * i32 NEW_LINE %23 = alloca * i32 NEW_LINE %24 = alloca * i32 NEW_LINE %25 = alloca * i32 NEW_LINE %26 = alloca * i32 NEW_LINE %27 = alloca ARR 3 3 x ARR 3 4 x * i32 NEW_LINE %28 = alloca i64 NEW_LINE %29 = alloca i32 NEW_LINE %30 = alloca i32 NEW_LINE %31 = bitcast * STRUCT 2 i32 i8 %6 to * i64 NEW_LINE store i64 %3 %31 NEW_LINE store i64 %0 %7 NEW_LINE store i32 %1 %8 NEW_LINE store i32 %2 %9 NEW_LINE store * i32 %4 %10 NEW_LINE store * i32 @g_64 %11 NEW_LINE store * i32 @g_139 %12 NEW_LINE store * i32 @g_375 %13 NEW_LINE store * i32 @g_375 %14 NEW_LINE store * i32 @g_375 %15 NEW_LINE store * i32 @g_139 %16 NEW_LINE store * i32 @g_370 %17 NEW_LINE store * i32 @g_370 %18 NEW_LINE %32 = bitcast * ARR 3 6 x ARR 3 9 x i32 %19 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %32 , * i8 bitcast ( * ARR 3 6 x ARR 3 9 x i32 @__const.func_50.l_385 to * i8 ) , i64 216 , i1 false ) NEW_LINE store * i32 null %20 NEW_LINE store * i32 @g_375 %21 NEW_LINE store * i32 null %22 NEW_LINE %33 = getelementptr inbounds ARR 3 6 x ARR 3 9 x i32 %19 , i64 0 , i64 5 NEW_LINE %34 = getelementptr inbounds ARR 3 9 x i32 %33 , i64 0 , i64 7 NEW_LINE store * i32 %34 %23 NEW_LINE store * i32 @g_375 %24 NEW_LINE store * i32 @g_370 %25 NEW_LINE store * i32 @g_64 %26 NEW_LINE %35 = bitcast * ARR 3 3 x ARR 3 4 x * i32 %27 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %35 , * i8 bitcast ( * ARR 3 3 x ARR 3 4 x * i32 @__const.func_50.l_393 to * i8 ) , i64 96 , i1 false ) NEW_LINE store i64 3557198350755208671 %28 NEW_LINE %36 = load i64 %28 NEW_LINE %37 = add i64 %36 , -1 NEW_LINE store i64 %37 %28 NEW_LINE %38 = load * i32 %10 NEW_LINE ret * i32 %38 NEW_LINE }
