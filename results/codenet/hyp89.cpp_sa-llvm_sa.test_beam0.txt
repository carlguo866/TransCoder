define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret void NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32
define dso_local double pow2 ( double %0 ) #0 { NEW_LINE %2 = alloca double NEW_LINE store double %0 %2 NEW_LINE %3 = load double %2 NEW_LINE %4 = call double @pow ( double %3 double %4 ) #4 NEW_LINE %5 = load double %2 NEW_LINE %6 = call double @pow ( double
define dso_local double pow2 ( double %0 ) #0 { NEW_LINE %2 = alloca double NEW_LINE store double %0 %2 NEW_LINE %3 = load double %2 NEW_LINE %4 = call double @pow ( double %3 double %4 ) #4 NEW_LINE %5 = load double %2 NEW_LINE %6 = call double @pow ( double
define dso_local void @pop ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds
define dso_local void @push ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S
define dso_local * i8 @salloc ( i64 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE store i64 0 %3 NEW_LINE store i64 0 %4 NEW_LINE store i64 0 %5 NEW_LINE store i64 0 %6 NEW_LINE store i64 0 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %7 NEW_LINE %12
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define < 4 x i64 > @_mm256_madd52hi_epu64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #42 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpmadd52h.uq.256 ( < 4 x i64 > %10 < 4 x i64 > %11 <
define dso_local i32 @pop ( * i32 %0 ) #0 { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE %3 = load * i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 %3 , i64 %6 NEW_LINE %8 = load i32 %7 NEW_LINE ret i32 %8 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @pop ( * * i8 %0 ) #0 { NEW_LINE %2 = alloca * * i8 NEW_LINE store * * i8 %0 %2 NEW_LINE %3 = load * * i8 %2 NEW_LINE %4 = load * i8 %3 NEW_LINE %5 = call i32 @strcmp ( * i8 %4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:~E3~82~AA~E3~83~BC~E3~83~90~E3~83~BC~E3~83~95~E3~83~AD~E3~83~BC~0A~00" i64 0 i64 0 ) ) #3 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local void @push ( * * i8 %0 i8 signext %1 ) #0 { NEW_LINE %3 = alloca * * i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * * i8 %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %7 = load * * i8 %3 NEW_LINE %8 = load i8 %7 NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE %11 = load
define dso_local void @push ( i32 %0 * i32 %1 i32 %2 ) #0 { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load * i32 %5 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = load * i32 %5 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds i32 %7 , i64 %11 NEW_LINE store i32 %8 %12 NEW_LINE %13 = load i32
define dso_local i64 @POW ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 1 %5 NEW_LINE store i64 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %6 NEW_LINE %9 = load i64 %4 NEW_LINE %10 = icmp slt i64 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %5 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 @getchar_unlocked ( ) NEW_LINE store i32 %3 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %1 NEW_LINE %6 = mul nsw i32 10 , %5 NEW_LINE %7
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 0 %4 NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE store i32 %16 %4 NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %6 = load float %2 NEW_LINE %7 = load float %2 NEW_LINE %8 = fmul float %6 , %7 NEW_LINE %9 = fmul float %8 , 0x400921FB5444261E NEW_LINE store float %9 %3 NEW_LINE %10 = load float %2 NEW_LINE %11 = fmul float 2.000000e+00 , %10 NEW_LINE %12 = fmul float %11 , 0x400921FB5444261E NEW_LINE store float %12 %4 NEW_LINE %13 = load float %3 NEW_LINE %14 = load float %4 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 ) float %13 double %14 ) NEW_LINE ret i32 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node *
define dso_local i32 @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 2 NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:0~0A~00" i64 0 i64 0 ) ) NEW_LINE
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %6 = load float %2 NEW_LINE %7 = load float %2 NEW_LINE %8 = fmul float %6 , %7 NEW_LINE %9 = fmul float %8 , 0x400921FB5444261E NEW_LINE store float %9 %3 NEW_LINE %10 = load float %2 NEW_LINE %11 = fmul float 2.000000e+00 , %10 NEW_LINE %12 = fmul float %11 , 0x400921FB5444261E NEW_LINE store float %12 %4 NEW_LINE %13 = load float %3 NEW_LINE %14 = load float %4 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 ) float %13 double %14 ) NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 ,
define dso_local void @swap ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE store i32 %7 %5 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * i32 %3 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load * i32 %4 NEW_LINE store i32 %11 %12 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %6 = load float %2 NEW_LINE %7 = load float %2 NEW_LINE %8 = fmul float %6 , %7 NEW_LINE %9 = fmul float %8 , 0x400921FB5444261E NEW_LINE store float %9 %3 NEW_LINE %10 = load float %2 NEW_LINE %11 = fmul float 2.000000e+00 , %10 NEW_LINE %12 = fmul float %11 , 0x400921FB5444261E NEW_LINE store float %12 %4 NEW_LINE %13 = load float %3 NEW_LINE %14 = load float %4 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %11 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i64 @_gcd ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %4 NEW_LINE %9 = icmp slt i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE store i64 %11 %6 NEW_LINE %12 = load i64 %4 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i64 %6 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = srem i64 %15 , %16 NEW_LINE store i64 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %5 NEW_LINE %20 = icmp ne i64 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load
define dso_local i64 @_gcd ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %4 NEW_LINE %9 = icmp slt i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE store i64 %11 %6 NEW_LINE %12 = load i64 %4 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i64 %6 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = srem i64 %15 , %16 NEW_LINE store i64 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %5 NEW_LINE %20 = icmp ne i64 %19 , 0 NEW_LINE br i1 %20
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 )
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sgt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %4 NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE store i32 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp sgt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %24 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE store i32 %22 %5 NEW_LINE %23
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) i32 %10 i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE call void @".str.2:a ( i32 %13 i32
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE store i64 0 %21 NEW_LINE store i64 0 %22 NEW_LINE store i64 0 %23 NEW_LINE %24 = load i64 %22 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = icmp slt i64 %24 , %25
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @l ) NEW_LINE %4 = load i32 @l NEW_LINE %5 = icmp slt i32 %4 , 1200 NEW_LINE br i1 %5 , label %6 , label %11 NEW_LINE 6: NEW_LINE %7 = load i32 @l NEW_LINE %8 = icmp slt i32 %7 , 2800 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:ABC~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = call
define dso_local i32 @25 ( * STRUCT 2 i32 i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 2 i32 i32 NEW_LINE %3 = alloca i32 NEW_LINE store * STRUCT 2 i32 i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load * STRUCT 2 i32 i32 %2 NEW_LINE %6 = getelementptr inbounds STRUCT 2 i32 i32 %5 , i32 0 , i32 0 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = icmp slt i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load * STRUCT 2 i32 i32 %2 NEW_LINE %11 = getelementptr inbounds STRUCT 2 i32 i32 %10 , i32 0 , i32 0 NEW_LINE %12 = load i32 %11
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @25 ( * STRUCT 2 i32 i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 2 i32 i32 NEW_LINE %3 = alloca i32 NEW_LINE store * STRUCT 2 i32 i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load * STRUCT 2 i32 i32 %2 NEW_LINE %6 = getelementptr inbounds STRUCT 2 i32 i32 %5 , i32 0 , i32 0 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = icmp slt i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load * STRUCT 2 i32 i32 %2 NEW_LINE %11 = getelementptr inbounds STRUCT 2 i32 i32 %10 , i32 0 , i32 0 NEW_LINE %12 = load i32 %11
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁
define dso_local void func_init ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * i8 %2 NEW_LINE %5 = load i8 %4 NEW_LINE %6 = icmp ne i8 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = getelementptr inbounds i8 %8 , i32 1 NEW_LINE store * i8 %9 %2 NEW_LINE %10 = load i8 %8 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 =
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local void func_init ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * i8 %2 NEW_LINE %5 = load i8 %4 NEW_LINE %6 = icmp ne i8 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = getelementptr inbounds i8 %8 , i32 1 NEW_LINE store * i8 %9 %2 NEW_LINE %10 = load i8 %8 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret void NEW_LINE }
define dso_local i64 @POW ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 1 %5 NEW_LINE store i64 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %6 NEW_LINE %9 = load i64 %4 NEW_LINE %10 = icmp slt i64 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 0 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32
define dso_local i32 deg ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 %12 , 10 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = srem i32 %14 , 10 NEW_LINE store i32 %15 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load i32 %2 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 %11 , 60 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = srem i32 %13 , 60 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 i32 %17 ) NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i64 @mod_icals ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i64 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i64 20 %6 NEW_LINE store i64 1 %7 NEW_LINE store i64 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %8 NEW_LINE %11 = load i64 %5 NEW_LINE %12 = icmp slt i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %34 NEW_LINE 13: NEW_LINE %14 = load i64 %7 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = load i64 %8 NEW_LINE %17 = sub nsw i64 %15 , %16 NEW_LINE %18 = mul nsw i64 %14 , %17 NEW_LINE %19 = load i64 %6 NEW_LINE %20 = load i64 %8 NEW_LINE %21 = sub nsw i64 %19 , %20 NEW_LINE %22 = mul nsw i64 %18 , %21 NEW_LINE %23 = load i64 %6 NEW_LINE %24 = load i64 %8 NEW_LINE %25 = sub nsw i64 %23 , %24 NEW_LINE %26 = mul nsw i64 %22 , %25 NEW_LINE %27 = load i64 %6 NEW_LINE %28 = load i64 %8 NEW_LINE %29 = sub nsw i64 %27 , %28 NEW_LINE %30 = mul nsw i64 %26 , %29 NEW_LINE %31 = load i64 %6 NEW_LINE %32 = load i64 %8 NEW_LINE %33 = sub nsw i64 %31 , %32 NEW_LINE store i64 %33 %6 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i64 %8 NEW_LINE %36 = add nsw i64 %35 , 1 NEW_LINE store i64 %36 %8 NEW_LINE br label %9 NEW_LINE 37: NEW_LINE %38 = load i64 %6 NEW_LINE ret i64 %38 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00"
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %19 NEW_LINE %29 = load i64 %2 NEW_LINE %30 = icmp slt i64 %28 , %29 NEW_LINE br i1
define dso_local void trans ( * i8 %0 * i8 %1 * i8 %2 ) #0 { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i8 NEW_LINE %7 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store * i8 %2 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = call i64 @strlen ( * i8 %9 ) #4 NEW_LINE %11 = sub i64 %10 , 1 NEW_LINE %12 = getelementptr inbounds i8 %8 , i64 %11 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = load * i8 %6 NEW_LINE %15 = load * i8 %5 NEW_LINE %16 = call i64
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %16 = load i32 %4 NEW_LINE store i32 %16 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %5 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = icmp sge i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = call i32 ( *
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @extract ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @H NEW_LINE %3 = icmp slt i32 %2 , 1 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 -1073741824 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 -1073741824 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 600 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp eq i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 800 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @sum ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 %1 NEW_LINE %5 = icmp slt i32 %4 , 600 NEW_LINE br i1 %5 , label %6 , label %11 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 600 x i32 @dp , i64 0 , i64 %8 NEW_LINE store i32 -1 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE br label %3 NEW_LINE 11: NEW_LINE store i32 0 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %8 , %9 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %10 , %11 NEW_LINE %13 = load i32 %3
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) )
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000
define dso_local i32 exit ( ! puts ( " "2432902008176640000" ) ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64
define dso_local i32 "2432902008176640000" ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 %1 NEW_LINE %4 = icmp slt i32 %3 , 4 NEW_LINE br i1 %4 , label %5 , label %15 NEW_LINE 5: NEW_LINE %6 = load i32 %1 NEW_LINE %7 = sext i32 %6
define dso_local i32 "2432902008176640000" ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 %1 NEW_LINE %4 = icmp slt i32 %3 , 4 NEW_LINE br i1 %4 , label %5 , label %15 NEW_LINE 5: NEW_LINE %6 = load i32 %1 NEW_LINE %7 = sext i32 %6
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 600 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 800 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 3600 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 3600 NEW_LINE store i32 %9 %2 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2
define dso_local i32 while ( scanf ( " % d " , & a ) != EOF ) { if ( a == 0 ) break ; printf ( " Case ▁ % d : ▁ % d \n " , i , a ) ; i ++ ; } return 0 ; }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define dso_local void @swap ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE store i32 %7 %5 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * i32 %3 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load * i32 %4 NEW_LINE store i32 %11 %12 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @char_cmp ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12
define dso_local double @distance ( double %0 double %1 double %2 double %3 ) #0 { NEW_LINE %5 = alloca STRUCT 2 double double NEW_LINE %6 = alloca STRUCT 2 double double NEW_LINE %7 = bitcast * STRUCT 2 double double %5 to * STRUCT 2 double double NEW_LINE %8 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 0 NEW_LINE store double %0 %8 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 1 NEW_LINE store double %1 %9 NEW_LINE %10 = bitcast * STRUCT 2 double double %6 to * STRUCT 2 double double NEW_LINE %11 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 0 NEW_LINE store double %2 %11 NEW_LINE %12 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 1 NEW_LINE store double %3 %12 NEW_LINE %13 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = load i64 %2 NEW_LINE %8 = sdiv i64 %7 , 500 NEW_LINE store i64 %8 %3 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = srem i64 %9 , 500 NEW_LINE store i64 %10 %4 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = sdiv i64
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 %11 , 60 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = srem i32 %13 , 60 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 i32 %17 ) NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 ,
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 while ( scanf ( " % d " , & n ) != EOF ) { if ( n == 0 ) break ; printf ( " Case ▁ % d : ▁ % d \n " , ++ top , n ) ; } return 0 ; }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16:
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32 2 , %12 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %6 = load double %2 NEW_LINE %7 = load double %2 NEW_LINE %8 = fmul double %6 , %7 NEW_LINE %9 = fmul double %8 , 0x400921FB5444261E NEW_LINE store double %9 %3 NEW_LINE %10 = load double %2 NEW_LINE %11 = fmul double 2.000000e+00 , %10 NEW_LINE %12 = fmul double %11 , 0x400921FB5444261E NEW_LINE store double %12 %4
define dso_local i32 @"243290200817664000000" ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 %1 NEW_LINE %4 = icmp slt i32 %3 , 0000000000000000000000000000
define dso_local void @swap ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE store i32 %7 %5 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * i32 %3 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load * i32 %4 NEW_LINE store i32 %11 %12 NEW_LINE ret void NEW_LINE }
define dso_local i32 sp ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE %3 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 %3 NEW_LINE %7 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %8 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %7 , i32 0 , i32 3 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %11 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 , i32 0 , i32 1 NEW_LINE %12 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 NEW_LINE %13 = icmp ne * STRUCT 4 * %struct.node *
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32 2 , %12 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 ,
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 )
define dso_local i32 @area ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13
define dso_local i64 @factorial ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE store i64 1 %3 NEW_LINE store i64 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i64 %4 NEW_LINE %7 = load i64 %2 NEW_LINE %8 = icmp sle i64 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %4 NEW_LINE %12 = mul i64 %11 , %10 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i64 %4 NEW_LINE store i64 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( *
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %8 , %9 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %10 , %11 NEW_LINE %13 = load i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32
define dso_local i64 @llin ( ) #0 { NEW_LINE %1 = alloca i64 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lld~00" i64 0 i64 0 ) * i64 %1 ) NEW_LINE %3 = load i64 %1 NEW_LINE ret i64 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = load i64 %2 NEW_LINE %8 = sdiv i64 %7 , 500 NEW_LINE store i64 %8 %3 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = srem i64 %9 , 500 NEW_LINE store i64 %10 %4 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = sdiv i64 %11 , 5 NEW_LINE store i64 %12 %5 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , 1000 NEW_LINE %15 = load i64 %5 NEW_LINE %16 = mul
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 (
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 train ( * STRUCT 4 i32 i32 i32 i32 %0 * STRUCT 4 i32 i32 i32 i32 %1 ) #0 { NEW_LINE %3 = alloca * STRUCT 4 i32 i32 i32 i32 NEW_LINE %4 = alloca * STRUCT 4 i32 i32 i32 i32 NEW_LINE %5 = alloca i32 NEW_LINE store * STRUCT 4 i32 i32 i32 i32 %0 %3 NEW_LINE store * STRUCT 4 i32 i32 i32 i32 %1 %4 NEW_LINE %6 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %7 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %6 , i32 0 , i32 0 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * STRUCT 4 i32 i32 i32 i32 %4 NEW_LINE %10 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %9 , i32 0 , i32 0 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp slt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %15 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %14 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE store i32 %16 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %19 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %18 , i32 0 , i32 0 NEW_LINE %20
define dso_local i32 while ( scanf ( " % d " , & read ) != EOF ) { if ( read == 0 ) break ; if ( read == 1 ) printf ( " % d \n " , top ) ; top = 0 ; } return 0 ; }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32
define dso_local i32 unsigned long long int ret i32 1 ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 1 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 10 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %4 NEW_LINE br label %5 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 car ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 @strcmp ( * i32 %5 * i32 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @linearSearch ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 @n NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE %16 = icmp slt i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %36 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = add nsw i32 %18 , %19 NEW_LINE %21 = sdiv i32 %20 , 2 NEW_LINE store i32 %21 %6 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 @S , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = icmp eq i32 %22 , %26 NEW_LINE br i1 %27 , label %28 ,
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 ~ scanf ( " % d " , & d ) NEW_LINE store i32 0 printf ( " % d \n " , ( 600 - d ) * 100 * ( 1200 - d ) ) ; }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32
define dso_local i32 @sortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp sgt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i32 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast
define dso_local i32 state ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 0 %2 NEW_LINE br label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %10 NEW_LINE %12 = getelementptr inbounds STRUCT 3 i32 i32 i32 %11 , i32 0 , i32 1 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp eq i32 %13 , -1 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %2 NEW_LINE br label %34 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %18 NEW_LINE %20 = getelementptr inbounds STRUCT 3 i32 i32 i32 %19 , i32 0 , i32 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %23
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %11 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = mul nsw i32 %11 , 2 NEW_LINE %13 = call i32 ( *
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15
define dso_local i32 car ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 =
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %3 * i32 @x ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 @x NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 @x NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21:
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %6 = load float %2 NEW_LINE %7 = load float %2 NEW_LINE %8 = fmul float %6 , %7 NEW_LINE %9 = fmul float %8 , 0x400921FB5444261E NEW_LINE store float %9 %3 NEW_LINE %10 = load float %2 NEW_LINE %11 = fmul float 2.000000e+00 , %10 NEW_LINE %12 = fmul float %11 , 0x400921FB5444261E NEW_LINE store float %12 %4 NEW_LINE %13 = load float %3 NEW_LINE %14 = load float %4 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 ) NEW_LINE %34 = load double %2 NEW_LINE %35 = load double %3 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %5 NEW_LINE %38 = load double %6 NEW_LINE %39 = call double @fadd ( double %34 double %35 double %36 double %37 double %38 double %39 ) NEW_LINE %40 = load double %2 NEW_LINE %41 = load double %3 NEW_LINE %42 = load double %4 NEW_LINE %43 = call double @fadd ( double %40 double %41 double %42 ) NEW_LINE store double %43 %12 NEW_LINE br label %45 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load double %9 NEW_LINE %47 = fadd double %46 , 1 NEW_LINE store double %47 %9 NEW_LINE %48 = load double %12 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.1f~0A~00" i64 0 i64 0 ) double %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8
define i64 @__uint64_identity ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE ret i64 %3 NEW_LINE }
define dso_local i32 fact ( double %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE store double %0 %3 NEW_LINE store i32 1 %4 NEW_LINE store i32 2 %5 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sle i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = mul nsw i32 %11 , %10 NEW_LINE store i32 %12 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @sCars ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %8 NEW_LINE %10 = getelementptr inbounds STRUCT 3 i32 i32 i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load i32 %10 NEW_LINE call void @sCars ( i32 %11 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %13 NEW_LINE %15 = getelementptr inbounds STRUCT 3 i32 i32 i32 %14 , i32 0 , i32 2 NEW_LINE %16 = load i32 %15 NEW_LINE call void @sCars ( i32 %16 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf (
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sdiv i32 %8 , 2 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = srem i32 %10 , 2 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fdiv double %13 , %15 NEW_LINE store double %16 %6 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load double %6 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d ▁ %d ▁ %f~0A~00" i64 0 i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) i32 %10 i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE call void @".str.2:a ( i32 %13 i32 %14 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp sgt i32 %16 , %17 NEW_LINE br i1 %18 , label %19
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp ogt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sgt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %5 NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE store i32 %16 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp sgt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %24 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE store i32 %22 %6 NEW_LINE %23 = load i32 %4 NEW_LINE store i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 0 %4 NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE store i32 %16 %4 NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 ,
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i64 @_gcd ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %4 NEW_LINE %9 = icmp slt i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE store i64 %11 %6 NEW_LINE %12 = load i64 %4 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i64 %6 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = srem i64 %15 , %16 NEW_LINE store i64 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %5 NEW_LINE %20 = icmp ne i64 %19 , 0 NEW_LINE br i1 %20
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i32 %5 NEW_LINE store i32 %19 %6 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = icmp slt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE store i32 %27 %6 NEW_LINE %28 = load i32 %5 NEW_LINE store i32 %28 %4 NEW_LINE %29 = load i32 %6 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %40 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %6 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %6 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %19 NEW_LINE %29 = load i64 %2 NEW_LINE %30 = icmp slt i64 %28 , %29 NEW_LINE br i1
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 )
define dso_local i64 @POW ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 %1 %4 NEW_LINE store i64 1 %5 NEW_LINE store i64 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %6 NEW_LINE %9 = load i64 %4 NEW_LINE %10 = icmp slt i64 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %5 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 %6 NEW_LINE %17 = add nsw i64 %16 , 1 NEW_LINE store i64 %17 %6 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %5 NEW_LINE ret i64 %19 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @x ) NEW_LINE %4 = load i32 @x NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:Yes~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 8: NEW_LINE %9 = load i32 @x NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %24 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %4 NEW_LINE %19 = load i32 %4 NEW_LINE %20
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 while ( scanf ( " % d " , & num ) != EOF ) { if ( num == 0 ) break ; push ( num ) ; } while ( scanf ( " % d " , & num ) != EOF ) { if ( num == 0 ) push ( num ) ; else pop ( ) ; } printf ( " % d \n " , pop ( ) ) ; return 0 ; }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @upll ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp slt i64 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = load * i8 %3 NEW_LINE %15 = bitcast * i8 %14 to * i64 NEW_LINE %16 = load i64 %15 NEW_LINE %17 = load * i8 %4 NEW_LINE %18 = bitcast * i8 %17 to * i64 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = icmp sgt i64 %16 , %19 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , i32 1 , i32 0 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 -1 %12 , ARR 2 %22 %13 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 111 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:unsafe~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:safe~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp sgt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE store i32 %14 %2 NEW_LINE %15 = load i32 %5 NEW_LINE store i32 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = icmp sgt i32 %17 , %18 NEW_LINE br i1 %19 , label %20 , label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE store i64 0 %21 NEW_LINE store i64 0 %22 NEW_LINE store i64 0 %23 NEW_LINE %24 = load i64 %22 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = icmp slt i64 %24 , %25
define dso_local i32 data1 ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds i32 %5 , i64 %7 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds i32 %10 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp slt i32 %9 , %14 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i32 %3 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load * i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds i32 %22 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load * i32 %3 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds i32 %27 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = icmp sgt i32 %26 , %31 NEW_LINE br i1 %32 , label %33 , label %35 NEW_LINE 33: NEW_LINE %34 = load * i32 %3 NEW_LINE store i32 1 @flag NEW_LINE br label %37 NEW_LINE 35: NEW_LINE %36 = load * i32 %3 NEW_LINE store i32 0 @flag NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load * i32 %3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 get ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %5 NEW_LINE %13 = load i32 %3 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %5 NEW_LINE store i32 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = srem i32 %16 , %17 NEW_LINE store i32 %18 %4 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp sge i32 %4 , 10 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:Yes~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:No~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 =
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 flg ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , 1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %7 , %8 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 %12 , %13 NEW_LINE store i32 %14 %2 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sdiv i32 %17 , %16 NEW_LINE store i32 %18 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = load i64 %2 NEW_LINE %6 = srem i64 %5 , 2 NEW_LINE %7 = icmp eq i64 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:0~00" i64 0 i64 0 ) ) NEW_LINE br label %21 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = srem i64 %11 , 2 NEW_LINE %13 = icmp eq i64 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" i64 0 i64 0 ) ) NEW_LINE br label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sdiv i32 %8 , %9 NEW_LINE store i32 %10 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = srem i32 %11 , %12 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fdiv double %15 , %17 NEW_LINE store double %18 %6 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = load double %6 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d ▁ %d ▁ %f~0A~00" i64 0 i64 0 ) i32 %19 i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( *
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) )
define i64 @__uint64_identity ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE ret i64 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14:
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 sieve ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %1 * i32 %2 ) NEW_LINE %6 = load i32 %1 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = load i32 %1 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = mul nsw i32 %11 , 2 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %17 %10 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE store i32 %24 %10 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE store i32 %30 %11 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %2 NEW_LINE store i32 %36 %10 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = load i32 %3 NEW_LINE %40 = icmp sgt i32 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %43 NEW_LINE 41: NEW_LINE %42 = load i32 %3 NEW_LINE store i32 %42 %11 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i32 %2 NEW_LINE %45 = load i32 %3 NEW_LINE %46 = icmp sgt i32 %44 , %45 NEW_LINE br i1 %46 , label %47 , label %49 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE store i32 %48 %10 NEW_LINE br label %49 NEW_LINE 49: NEW_LINE %50 = load i32 %10 NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %50 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %17 %10 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE store i32 %24 %10 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE store i32 %30 %11 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %2 NEW_LINE store i32 %36 %10 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = load i32 %3 NEW_LINE %40 = icmp sgt i32 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %43 NEW_LINE 41: NEW_LINE %42 = load i32 %3 NEW_LINE store i32 %42 %11 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i32 %2
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0
define dso_local i32 @prime ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , 2 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %9 , 2 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = srem i32 %12 , 2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 0 %2 NEW_LINE br label %36 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 0 %5 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp slt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28 , %29 NEW_LINE store i32 %30 %5 NEW_LINE br label %18 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE ret i32 %32 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i32
define dso_local i32 @sum ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 0 %4 NEW_LINE store i64 0 %5 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %4 NEW_LINE %9 = icmp slt i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 0 %2 NEW_LINE br label %46 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = icmp slt i64 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE store i64 %16 %6 NEW_LINE br label %19 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE store i64 %18 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i64 %3 NEW_LINE %21 = load i64 %4 NEW_LINE %22 = srem i64 %20 , %21 NEW_LINE %23 = icmp eq i64 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = load i64 %4 NEW_LINE store i64 %25 %2 NEW_LINE br label %46 NEW_LINE 26: NEW_LINE %27 = load i64 %3 NEW_LINE %28 = load i64 %4 NEW_LINE %29 = srem i64 %27 , %28 NEW_LINE %30 = icmp eq i64 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE store i32 1 %2 NEW_LINE br label %46 NEW_LINE 32: NEW_LINE %33 = load i64 %3 NEW_LINE %34 = load i64 %4 NEW_LINE %35 = srem i64 %33 , %34 NEW_LINE %36 = icmp eq i64 %35 , 0 NEW_LINE br i1 %36 , label %37 , label %41 NEW_LINE 37: NEW_LINE %38 = load i64 %4 NEW_LINE %39 = add nsw i64 %38 , 1 NEW_LINE %40 = load i64 %5 NEW_LINE call void @sum ( i64 %39 ) NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i64 %4 NEW_LINE %43 = add nsw i64 %42 , 1 NEW_LINE %44 = load i64 %5 NEW_LINE %45 = add nsw i64 %44 , %43 NEW_LINE store i64 %45 %5 NEW_LINE br label %46 NEW_LINE 46: NEW_LINE %47 = load i64 %5 NEW_LINE %48 = add nsw i64 %47 , 1 NEW_LINE store i64 %48 %5 NEW_LINE %49 = load i64 %4 NEW_LINE %50 = load i64 %5 NEW_LINE %51 = add nsw i64 %50 , %49 NEW_LINE store i64 %51 %4 NEW_LINE %52 = load i64 %5 NEW_LINE ret i32 %52 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:pon~0A~00" i64 0 i64
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8
define dso_local i32 train ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sgt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %5 NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE store i32 %16 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp sgt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE store i32 %22 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = icmp sgt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load
define dso_local i32 @sortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp sgt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i32 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * i32 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp eq i32 %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %17 %10 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca float NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %1 ) NEW_LINE %3 = load float %1 NEW_LINE %4 = load float %1 NEW_LINE %5 = fmul float %3 , %4 NEW_LINE %6 = fmul float %5 , 0x400921FB54442D18 NEW_LINE %7 = load float %1 NEW_LINE %8 = fmul float %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lf~0A~00" i64 0 i64 0 ) double %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %19 NEW_LINE %29 =
define dso_local i32 ~ scanf ( " % d " , s + 1 ) NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 %1 NEW_LINE %4 = icmp slt i32 %3 , 2 NEW_LINE br i1 %4 , label %5 , label %11 NEW_LINE 5: NEW_LINE %6 = load i32 %1 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 2 x i32 bitcast ( * ARR 3 2 x i32 @t to * ARR 3 2 x i32 ) , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = load i32 %1 NEW_LINE ret i32 %10 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) )
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local void fact ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %16 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 %12 , 10 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sdiv i32 %14 , 10 NEW_LINE store i32 %15 %2 NEW_LINE br label %4 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp eq i32 %17 , 1 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE br label %21 NEW_LINE 20: NEW_LINE br label %4 NEW_LINE 21: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i64 NEW_LINE %11 = alloca i64 NEW_LINE %12 = alloca i64 NEW_LINE %13 = alloca i64 NEW_LINE %14 = alloca i64 NEW_LINE %15 = alloca i64 NEW_LINE %16 = alloca i64 NEW_LINE %17 = alloca i64 NEW_LINE %18 = alloca i64 NEW_LINE %19 = alloca i64 NEW_LINE %20 = alloca i64 NEW_LINE %21 = alloca i64 NEW_LINE %22 = alloca i64 NEW_LINE %23 = alloca i64 NEW_LINE %24 = alloca i64 NEW_LINE %25 = alloca i64 NEW_LINE %26 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %12 NEW_LINE store i64 0 %13 NEW_LINE store i64 0 %14 NEW_LINE store i64 0 %15 NEW_LINE store i64 0 %16 NEW_LINE store i64 0 %17 NEW_LINE store i64 0 %18 NEW_LINE store i64 0 %19 NEW_LINE store i64 0 %20 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %19 NEW_LINE %29 = load i64 %2 NEW_LINE %30 = icmp slt i64 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 =
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:pon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.3:hon~0A~00" i64 0 i64 0 ) ) NEW_LINE
define dso_local i32 @fact ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp sle i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %11 , %10 NEW_LINE store i32 %12 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE store i32 %23 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE store i32 %29 %8 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %36 NEW_LINE 34: NEW_LINE %35 = load i32 %2 NEW_LINE store i32 %35 %9 NEW_LINE br label %36 NEW_LINE 36:
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 =
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 bus ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = mul
define dso_local i64 @mod_icals ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i64 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE store i64 1 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %5 NEW_LINE %9 = load i64 %4 NEW_LINE %10 = icmp sle i64 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE %12 = load i64 %5 NEW_LINE %13 = load i64 %6 NEW_LINE %14 = sub nsw i64 %12 , %13 NEW_LINE %15 = load i64 %5 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %6 NEW_LINE %17 = load i64 %6 NEW_LINE %18 = srem i64 %17 , 1000000007 NEW_LINE %19 = load i64 %5 NEW_LINE %20 = srem i64 %19 , 1000000007 NEW_LINE %21 = mul nsw i64 %18 , %20 NEW_LINE %22 = srem i64 %21 , 1000000007 NEW_LINE store i64 %22 %6 NEW_LINE %23 = load i64 %6 NEW_LINE %24 = srem i64 %23 , 1000000007 NEW_LINE store i64 %24 %6 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = load i64 %6 NEW_LINE %27 = srem i64 %25 , %26 NEW_LINE %28 = load i64 %5 NEW_LINE %29 = srem i64 %28 , 1000000007 NEW_LINE %30 = mul nsw i64 %27 , %29 NEW_LINE %31 = srem i64 %30 , 1000000007 NEW_LINE %32 = mul nsw i64 %30 , %31 NEW_LINE %33 = srem i64 %32 , 1000000007 NEW_LINE store i64 %33 %6 NEW_LINE %34 = load i64 %6 NEW_LINE %35 = srem i64 %34 , 1000000007 NEW_LINE store i64 %35 %6 NEW_LINE %36 = load i64 %6 NEW_LINE %37 = srem i64 %36 , 1000000007
define dso_local i32 @mul ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE store i32 %13 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %5 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local double @distance ( i64 %0 i64 %1 i64 %2 i64 %3 ) #0 { NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE store i64 %0 %5 NEW_LINE store i64 %1 %6 NEW_LINE store i64 %2 %7 NEW_LINE store i64 %3 %8 NEW_LINE %13 = load i64 %5 NEW_LINE %14 = load i64 %6 NEW_LINE %15 = sub nsw i64 %13 , %14 NEW_LINE %16 = load i64 %5 NEW_LINE %17 = load i64 %7 NEW_LINE %18 = sub nsw i64 %16 , %17 NEW_LINE %19 = mul nsw i64 %15 , %18 NEW_LINE %20 = sitofp i64 %19 to double NEW_LINE store double %20 %9 NEW_LINE %21 = load i64 %6 NEW_LINE %22 = load i64 %8 NEW_LINE %23 =
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 @getchar ( ) NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE store i8 %4 @c NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp ne i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i8 @c NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = icmp eq i32 %9 , 105 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i8 @c NEW_LINE %13 = sext i8 %12 to i32 NEW_LINE %14 = icmp eq i32 %13 , 117 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 false %7 , ARR
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE
define dso_local i32 @ceil ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = srem i32 %6 , %7 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = sdiv i32 %11 , %12 NEW_LINE store i32 %13 %3 NEW_LINE br label %19 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sdiv i32 %15 , %16 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( ... ) @getchar ( ) NEW_LINE %4 = trunc i32 %3 to i8 NEW_LINE store i8 %4 @c NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp ne i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %16 NEW_LINE 7: NEW_LINE %8 = load i8 @c NEW_LINE %9 = sext i8 %8 to i32 NEW_LINE %10 = icmp ne i32 %9 , 10 NEW_LINE br i1 %10 , label %11 , label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:Rainy~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 13: NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @calc ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x i32 @d , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 @d , i64 0 , i64 %14
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @r ) NEW_LINE %4 = load i32 @r NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %11 NEW_LINE 6: NEW_LINE %7 = load i32 @r NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @r NEW_LINE %13 = icmp eq i32 %12 , 0
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8
define dso_local i32 @prime ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , 2 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %9 , 2 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = srem i32 %12 , 2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 0 %2 NEW_LINE br label %36 NEW_LINE 16: NEW_LINE store i32 3 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = call double @sqrt ( double %21 ) #3 NEW_LINE %23 = fcmp ole double %19 , %22 NEW_LINE br i1 %23 , label %24 , label %35 NEW_LINE 24: NEW_LINE %25 =
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32
define dso_local i32 exit ( ! puts ( " "2432902008176640000" ) ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = mul
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load *
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to *
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 ) NEW_LINE %10 = load i32 %6 NEW_LINE %11 = load i32 %7 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17:
define dso_local i32 @char_cmp ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 sq_sq_2 ( double %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE store double %0 %3 NEW_LINE %5 = load double %3 NEW_LINE %6 = load double %3 NEW_LINE %7 = fmul double %5 , %6 NEW_LINE %8 = load double %3 NEW_LINE %9 = fmul double %7 , %8 NEW_LINE store double %9 %4 NEW_LINE %10 = load double %4 NEW_LINE %11 = load double %3 NEW_LINE %12 = fmul double %10 , %11 NEW_LINE %13 = load double %4 NEW_LINE %14 = fmul double %12 , %13 NEW_LINE %15 = load double %3 NEW_LINE %16 = fmul double %14 , %15 NEW_LINE store double %16 %4 NEW_LINE %17 = load double %4 NEW_LINE %18 = load double %3 NEW_LINE %19 = fmul double %17 , %18 NEW_LINE %20 = load double %4 NEW_LINE %21 = fmul double %19 , %20 NEW_LINE %22 = load double %3 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fmul double %23 , %24 NEW_LINE store double %25 %4 NEW_LINE %26 = load double %4 NEW_LINE %27 = load double %3 NEW_LINE %28 = fadd double %26 , %27 NEW_LINE %29 = load double %4 NEW_LINE %30 = fmul double %28 , %29 NEW_LINE %31 = load double %4 NEW_LINE %32 = fmul double %30 , %31 NEW_LINE %33 = load double %4 NEW_LINE %34 = fmul double %32 , %33 NEW_LINE %35 = load double %3 NEW_LINE %36 = fmul double %34 , %35 NEW_LINE %37 = load double %4 NEW_LINE %38 = fmul double %36 , %37 NEW_LINE %39 = load double %4 NEW_LINE %40 = fmul double %38 , %39 NEW_LINE %41 = load double %3 NEW_LINE %42 = fmul double %40 , %41 NEW_LINE %43 = fadd double %28 , %42 NEW_LINE %44 = call double @sqrt ( double %43 ) #3 NEW_LINE store double %44 %2 NEW_LINE %45 = load double %2 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @isEmpty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 1 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @d ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 600 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %8 , %9 NEW_LINE %11 = srem i32 %10 , 600 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE store i32 %14 %1 NEW_LINE br label %20 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE store i32 0 %1 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %1 NEW_LINE ret i32 %21 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @i ) NEW_LINE %4 = load i32 @i NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @i NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE %14 = load i32 %1 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22:
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @isEmpty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 1 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 4 x i64 > @_mm256_permutex2var_epi64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpermi2var.q.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x i64 > %12 ) NEW_LINE ret < 4 x i64 > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19:
define dso_local i32 @compare_i64_desc ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp sgt i64 %7 , %10 NEW_LINE %12 = zext i1 %11 to i64 NEW_LINE %13 = select i1 %11 , i32 -1 , i32 1 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( *
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @upll ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp slt i64 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = load * i8 %3 NEW_LINE %15 = bitcast * i8 %14 to * i64 NEW_LINE %16 = load i64 %15 NEW_LINE %17 = load * i8 %4 NEW_LINE %18 = bitcast * i8 %17 to * i64 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = icmp sgt i64 %16 , %19 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , i32 1 , i32 0 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 -1 %12 , ARR 2 %22 %13 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 4 x i64 > @_mm256_madd52hi_epu64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #42 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load <
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 12 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE %6 = getelementptr inbounds ARR 3 12 x i8 %2 , i64 0 , i64 0 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %6 ) NEW_LINE %8 = getelementptr inbounds ARR 3 12 x i8 %2 , i64 0 , i64 0 NEW_LINE %9 = call i64 @strlen ( * i8 %8 ) #3 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %40 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 0 %5 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp slt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 0 , %13 NEW_LINE %15 = call i32 train ( i32 %14 ) NEW_LINE %16 = add nsw i32 %12 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @empty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 600 NEW_LINE br i1 %8 , label %9 , label %24 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 600 x i32 @d , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp eq i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE store i32 %17 %1 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %4 NEW_LINE br label %6 NEW_LINE 24: NEW_LINE store i32 0 %3 NEW_LINE br label %25 NEW_LINE
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 MAX_COUNT x i8 NEW_LINE %6 = alloca ARR 3 1001 x i8 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %7 = getelementptr inbounds ARR 3 1001 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds ARR 3 1001 x i8 %6 , i64 0 , i64 0 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%s ▁ %s ▁ %s~00" i64 0 i64 0 ) * i8 %7 * i8 %8 ) NEW_LINE %10 = getelementptr inbounds ARR 3 1001 x i8 %5 , i64 0 , i64 0 NEW_LINE %11 = load * i32 %3 NEW_LINE %12 = load * i32 %4 NEW_LINE %13 = call i32 @strcmp ( * i8 %10 * i8 %11 ) #4 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64
define dso_local i32 @isEmpty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 1 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 while ( scanf ( " % d " , & d ) != EOF ) printf ( " % d \n " , f0 ( 0 , 0 , 0 ) ) ; return 0 ; }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @downint ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i32 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i32 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = icmp slt i32 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = load * i8 %3 NEW_LINE %15 = bitcast * i8 %14 to * i32 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = load * i8 %4 NEW_LINE %18 = bitcast * i8 %17 to * i32 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = icmp sgt i32 %16 , %19 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , i32 -1 , i32 0 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 1 %12 , ARR 2 %22 %13 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 (
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sitofp i32 %5 to double NEW_LINE %7 = call double @pow ( double %6 double 3.000000e+00 ) #3 NEW_LINE %8 = fptosi double %7 to i32 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @char_cmp ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16
define dso_local i32 @lcm ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @gcd ( i32 %8 i32 %9 ) NEW_LINE %11 = sdiv i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28 , %29 NEW_LINE
define dso_local i32 while ( scanf ( " % d " , & d ) != EOF ) { s = 0 ; getS ( ) ; printf ( " % d \n " , s ) ; } return 0 ; }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %1 * i32 %2 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 %13 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 0 , %13 NEW_LINE %15 = call i32 train ( i32 %14 ) NEW_LINE %16 = add nsw i32 %12 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @d ( * i32 %0 ) #0 { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = icmp slt i32 %8 , 600 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE store i32 0 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %36 NEW_LINE 14: NEW_LINE %15 = load * i32 %2 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i32 %15 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load * i32 %2 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i32 %20 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = icmp eq i32 %19 , %24 NEW_LINE br i1 %25 , label %26 , label %32 NEW_LINE 26: NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %27
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 %11 , 60 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = srem i32 %13 , 60 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 i32 %17 ) NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp ogt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 600 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %3 * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = xor i32 %11 , -1 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE ret i32 %15 NEW_LINE }
define dso_local i32 @car_stack ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load * i32 %3 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %17 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = icmp eq i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE store i32 1 %6 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = icmp sgt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE store i32 1 %6 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %5 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %6 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %6 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = load i32 @a NEW_LINE %5 = icmp slt i32 %4 , 1200 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:ABC~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:ARC~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define dso_local i32 Difference ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @i NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @Heuristic ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 @n NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE %14 = icmp eq i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %1 NEW_LINE br label %42 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = icmp eq i32 %18 , %22 NEW_LINE br i1 %23 , label %24 , label %36 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %28 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = icmp eq i32 %26 , %30 NEW_LINE br i1 %31
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @find ( * i8 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store * i8 %0 %3 NEW_LINE %7 = load * i8 %3 NEW_LINE %8 = call i64 @getKey ( * i8 %7 ) NEW_LINE store i64 %8 %4 NEW_LINE store i64 0 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE %12 = call i32 @h1 ( i32 %11 ) NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = load i64 %5 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = trunc i64 %15 to i32 NEW_LINE %17 = call i32 @h2 ( i32 %16 ) NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = mul nsw i64 %14 , %18 NEW_LINE %20 = add nsw i64 %13 , %19 NEW_LINE %21 = srem i64 %20 , 1046527 NEW_LINE store i64 %21 %6 NEW_LINE %22 = load i64 %6 NEW_LINE %23 = getelementptr inbounds ARR 3 1046527 x ARR 3 14 x i8 @H , i64 0 , i64 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 14 x i8 %23 , i64 0 , i64 0 NEW_LINE %25 = load * i8 %3 NEW_LINE %26 = call i32 @strcmp ( * i8 %24 * i8 %25 ) #4 NEW_LINE %27 = icmp eq i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store i32 1 %2 NEW_LINE br label %46 NEW_LINE
define dso_local i32 stdinput ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %34 NEW_LINE 13: NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = load * i32 %3 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i32 %19 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp eq i32 %18 , %23 NEW_LINE br i1 %24 , label %25 , label %30 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %6 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %7 NEW_LINE %33 = add nsw i32
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 sq_y ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load * i8 %2 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i8 %17 , i64 %19 NEW_LINE %21 = load i8 %20 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE %23 = load * i8 %2 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds i8 %23 , i64 %25 NEW_LINE %27 = load i8 %26 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = icmp eq i32 %22 , %28 NEW_LINE br i1 %29 , label %30 , label %31 NEW_LINE 30: NEW_LINE store i32 1 %2 NEW_LINE br label %42 NEW_LINE 31: NEW_LINE %32 = load i32 %5
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i8 NEW_LINE %5 = alloca ARR 3 10 x i8 NEW_LINE store i32 0 %1 NEW_LINE %6 = getelementptr inbounds ARR 3 10 x i8 %4 , i64 0 , i64 0 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%s ▁ %s ▁ %s~00" i64 0 i64 0 ) * i8 %6 * i8 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i8 %4 , i64 0 , i64 0 NEW_LINE %10 = load i8 %9 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i8 %5 , i64 0 , i64 1 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = icmp eq i32 %11 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 STACK x i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE store i32 %21 %5 NEW_LINE %22 = load i32 %3 NEW_LINE store i32 %22 %2 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = srem i32 %24 , %25 NEW_LINE %27 = icmp eq i32 %26 , 0 NEW_LINE br i1 %27 , label
define dso_local i32 @heapExtractMax ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @H NEW_LINE %3 = icmp slt i32 %2 , 1 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 -1073741824 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 -1073741824 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 =
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %17 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %20 , label %22 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i8 NEW_LINE %3 = alloca ARR 3 11 x i8 NEW_LINE %4 = alloca ARR 3 11 x i8 NEW_LINE store i32 0 %1 NEW_LINE %5 = getelementptr inbounds ARR 3 11 x i8 %2 , i64 0 , i64 0 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i8 %3 , i64 0 , i64 0 NEW_LINE %7 = getelementptr inbounds ARR 3 11 x i8 %4 , i64 0 , i64 0 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%s ▁ %s ▁ %s~00" i64 0 i64 0 ) * i8 %5 * i8 %6 * i8 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 11 x i8 %2 , i64 0 , i64 0 NEW_LINE %10 = load i8 %9 NEW_LINE %11 = sext i8 %10 to i32 NEW_LINE %12 = getelementptr inbounds ARR 3 11 x i8 %3 , i64 0 , i64 0 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = getelementptr inbounds ARR 3 11 x i8 %4 , i64 0 ,
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @cars ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %8 , %9 NEW_LINE %11 = srem i32 %10 , 10 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , %11 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , %11 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %5 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %5 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE %4 = load i32 %1 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE %6 = load i32 %1 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @compare_f ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp slt i64 %7 , %10 NEW_LINE %12 = zext i1 %11 to i64 NEW_LINE %13 = select i1 %11 , i32 -1 , i32 1 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @_cknum ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 48 %7 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %6 NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %33 NEW_LINE 12: NEW_LINE %13 = load * i8 %4 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds i8 %13 , i64 %15 NEW_LINE %17 = load i8 %16 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = icmp slt i32 %18 , 48 NEW_LINE br i1 %19 , label %28 , label %20 NEW_LINE 20: NEW_LINE %21 = load * i8 %4 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i8 %21 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp sgt i32 %26 , 57 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store i32 1 %3 NEW_LINE br label %34 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %6 NEW_LINE br label %8 NEW_LINE 33: NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 =
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) i32 %17 i32 %18 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 600 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 600 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp sge i32 %9 , 800 NEW_LINE br i1 %10 , label %11 , label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
main ( ) { for ( ; ~ scanf ( " % d " , & d ) && main ( printf ( " % . f \n " , Parent - 18e4 * d + 100 * d * d * d ) ) ; }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 index ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define < 4 x i64 > @_mm256_madd52hi_epu64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #42 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpmadd52h.uq.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x i64 > %12 ) NEW_LINE ret < 4 x i64 > %13 NEW_LINE }
define dso_local i32 delta ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 1 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 2 %2 NEW_LINE br label %36 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 3 %2 NEW_LINE br label %36 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 4 %2 NEW_LINE br label %36 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = icmp sgt i32 %25 , %26 NEW_LINE br i1 %27 , label %28
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:Case ▁ %d: ▁ %d~0A~00" i64 0 i64 0 ) i32 %11 i32 %12 ) NEW_LINE br label %4 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 ,
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %14 )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 )
define dso_local i32 stack_data ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %36 NEW_LINE 11: NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %32 NEW_LINE 16: NEW_LINE %17 = load * i8 %2 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i8 %17 , i64 %19 NEW_LINE %21 = load i8 %20 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE %23 = load * i8 %2 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds i8 %23 , i64 %25 NEW_LINE %27 = load i8 %26 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = icmp eq i32 %22 , %28 NEW_LINE br i1 %29 , label %30 , label %31 NEW_LINE 30: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 31: NEW_LINE br label %12 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32
define i64 @__uint64_identity ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE ret i64 %3 NEW_LINE }
define dso_local i32 @empty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 600 NEW_LINE br i1 %8 , label %9 , label %24 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 600 x i32 @d , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp eq i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE store i32 %17 %1 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %4 NEW_LINE br label %6 NEW_LINE 24: NEW_LINE store i32 0 %3 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE ret i32 %26 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sgt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %5 NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE store i32 %16 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp sgt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE store i32 %22 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = icmp sgt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 600 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 600 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %14 NEW_LINE 12: NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:Yes~00" i64 0 i64 0 ) ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:No~00" i64 0 i64 0 ) ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE ret i32
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE
define dso_local i32 @zet ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %11 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = call i32 @zet ( i32 %9 ) NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE ret i32 %12 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %5 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %6 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %15 = load i32 %7 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %20 NEW_LINE 18: NEW_LINE %19 = load i32 %7 NEW_LINE store i32 %19 %5 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 car ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 @strcmp ( * i32 %5 * i32 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 cars ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 0 %2 NEW_LINE br label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 10 x i32 @color , i64 0 , i64 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 @color , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %18 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 stock ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @z ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %8 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %6 , -1 NEW_LINE store i32 %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double
define dso_local i32 @d ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp slt i32 %6 , 600 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = mul nsw i32 %9 , 800 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %12 , 800 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , %13 NEW_LINE store i32 %15 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %16 , 200 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %22 , %23 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 delta ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 1 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 2 %2 NEW_LINE br label %36 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 3 %2 NEW_LINE br label %36 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 4 %2 NEW_LINE br label %36 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = icmp sgt i32 %25 , %26 NEW_LINE br i1 %27
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define < 16 x float > @_mm512_or_ps ( < 16 x float > byval ( < 16 x float > ) %0 < 16 x float > byval ( < 16 x float > ) %1 ) #31 { NEW_LINE %3 = alloca < 16 x float > NEW_LINE %4 = alloca < 16 x float > NEW_LINE %5 = load < 16 x float > %0 NEW_LINE %6 = load < 16 x float > %1 NEW_LINE store < 16 x float > %5 %3 NEW_LINE store < 16 x float > %6 %4 NEW_LINE %7 = load < 16 x float > %3 NEW_LINE %8 = bitcast < 16 x float > %7 to < 16 x i32 > NEW_LINE %9 = load < 16 x float > %4 NEW_LINE %10 = bitcast < 16 x float > %9 to < 16 x i32 > NEW_LINE %11 = or < 16 x i32 > %8 , %10 NEW_LINE %12 = bitcast < 16 x i32 > %11 to < 16 x float > NEW_LINE ret < 16 x float > %12 NEW_LINE }
define dso_local i32 @sortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp sgt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i32 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * i32 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp eq i32 %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp sgt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE store i32 %15 %5 NEW_LINE %16 = load i32 %3 NEW_LINE store i32 %16 %2 NEW_LINE %17 = load i32 %5 NEW_LINE store i32 %17 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE store i32 %23 %5 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp sgt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %32 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE store i32 %30 %7 NEW_LINE %31
define dso_local i32 while ( scanf ( " % d " , & n ) != EOF ) { if ( n == 0 ) break ; for ( i = 0 ; i < n ; i ++ ) scanf ( " % d " , & a [ i ] ) ; cnt = 0 ; for ( i = 0 ; i < n ; i ++ ) cnt += a [ i ] ; printf ( " % d \n " , cnt ) ; }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %10 = load i32 %7 NEW_LINE %11 = sdiv i32 %10 , 3600 NEW_LINE store i32 %11 %8 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = srem i32 %12 , 3600 NEW_LINE %14 = sdiv i32 %13 , 60 NEW_LINE store i32 %14 %6 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = srem i32 %15 , 60 NEW_LINE store i32 %16 %7 NEW_LINE %17 = load i32 %7 NEW_LINE %18 = srem i32 %17 , 60 NEW_LINE store i32 %18 %8 NEW_LINE %19 = load i32 %8 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %8 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %19 i32 %20 i32 %21 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @sortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp sgt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i32 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * i32 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp eq i32 %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %11 i32 %12 ) NEW_LINE br label %4 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 600 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 600 NEW_LINE store i32 %9 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = srem i32 %12 , 5 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %20 NEW_LINE 18: NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @area ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 600 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 600 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %14 NEW_LINE 12: NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label
define dso_local i32 num1 ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3
define dso_local i32 while ( scanf ( " % d " , & num ) != EOF ) { if ( num == 0 ) break ; push ( num ) ; } while ( scanf ( " % d " , & num ) != EOF ) { if ( num == 0 ) push ( num ) ; else pop ( ) ; } printf ( " % d \n " , pop ( ) ) ; return 0 ; }
define dso_local i32 cars ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %44 NEW_LINE 13: NEW_LINE %14 = load * i8 %4 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i8 %14 , i64 %16 NEW_LINE %18 = load i8 %17 NEW_LINE %19 = sext i8 %18 to i32 NEW_LINE %20 = load * i8 %5 NEW_LINE %21 = load i32 %7 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i8 %20 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = icmp eq i32 %19 , %25 NEW_LINE br i1 %26 , label %27 , label %40 NEW_LINE 27: NEW_LINE %28 = load * i8 %4 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds i8 %28 , i64 %30 NEW_LINE %32 = load i8 %31 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 %13 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %17 %10 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE store i32 %24 %10 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE store i32 %30 %11 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %2 NEW_LINE store i32 %36 %10 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = load i32 %3 NEW_LINE %40 = icmp sgt i32 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %43 NEW_LINE 41: NEW_LINE %42 = load i32 %3 NEW_LINE store i32 %42 %11 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i32 %2 NEW_LINE %45 = load i32 %3 NEW_LINE %46 = icmp sgt i32 %44 , %45 NEW_LINE br i1 %46 , label %47 , label %49 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE store i32 %48 %10 NEW_LINE br label %49 NEW_LINE 49: NEW_LINE %50 = load i32 %10 NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %50 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 wa ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 %12 , 10 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE ret i32 %16 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 16 x float > @_mm512_or_ps ( < 16 x float > byval ( < 16 x float > ) %0 < 16 x float > byval ( < 16 x float > ) %1 ) #31 { NEW_LINE %3 = alloca < 16 x float > NEW_LINE %4 = alloca < 16 x float > NEW_LINE %5 = load < 16 x float > %0 NEW_LINE %6 = load < 16 x float > %1 NEW_LINE store < 16 x float > %5 %3 NEW_LINE store < 16 x float > %6 %4 NEW_LINE %7 = load < 16 x float > %3 NEW_LINE %8 = bitcast < 16 x float > %7 to < 16 x i32 > NEW_LINE %9 = load < 16 x float > %4 NEW_LINE %10 = bitcast < 16 x float > %9 to < 16 x i32 > NEW_LINE %11 = or < 16 x i32 > %8 , %10 NEW_LINE %12 = bitcast < 16 x i32 > %11 to < 16 x float > NEW_LINE ret < 16 x float > %12 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE }
define dso_local i32 tr ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %13 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 12 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %9 NEW_LINE %11 = getelementptr inbounds STRUCT 3 i32 i32 i32 %10 , i32 0 , i32 1 NEW_LINE %12 = load i32 %11 NEW_LINE store i32 %12 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @i NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %7 = load * i32 %3 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE store i32 %7 %5 NEW_LINE %10 = load * i32 %3 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp sge i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE store i32 %15 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = icmp sge i32 %17 , %18 NEW_LINE br i1 %19 , label %20 , label %22 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE store i32 %21 %5 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = icmp sge i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = icmp sge i32 %27 , %28 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = phi i1 ARR 2 false %26 , ARR 2 %29 %26 NEW_LINE br i1 %31 , label %32 , label %34 NEW_LINE 32: NEW_LINE %33
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE store i32 %23 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE store i32 %29 %8 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %36 NEW_LINE 34: NEW_LINE %35 = load i32 %2 NEW_LINE store i32 %35 %9 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp sgt i32 %37 , %38 NEW_LINE br i1 %39 , label %40 , label %42 NEW_LINE 40: NEW_LINE %41 = load i32 %3 NEW_LINE store i32 %41 %10 NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %2 NEW_LINE %44 = load i32 %3 NEW_LINE %45 = icmp sgt i32 %43 , %44 NEW_LINE br i1 %45 , label %46 , label %48 NEW_LINE 46: NEW_LINE %47 = load i32 %2 NEW_LINE store i32 %47 %11 NEW_LINE br label %48 NEW_LINE 48: NEW_LINE %49 = load i32 %9 NEW_LINE %50 = load i32 %10 NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 =
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @stack ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = add nsw i32 %2 , -1 NEW_LINE store i32 %3 @top NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 train ( * STRUCT 4 i32 i32 i32 i32 %0 * STRUCT 4 i32 i32 i32 i32 %1 ) #0 { NEW_LINE %3 = alloca * STRUCT 4 i32 i32 i32 i32 NEW_LINE %4 = alloca * STRUCT 4 i32 i32 i32 i32 NEW_LINE %5 = alloca i32 NEW_LINE store * STRUCT 4 i32 i32 i32 i32 %0 %3 NEW_LINE store * STRUCT 4 i32 i32 i32 i32 %1 %4 NEW_LINE %6 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %7 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %6 , i32 0 , i32 0 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * STRUCT 4 i32 i32 i32 i32 %4 NEW_LINE %10 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %9 , i32 0 , i32 0 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp slt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %15 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %14 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE store i32 %16 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * STRUCT 4 i32 i32 i32 i32 %3 NEW_LINE %19 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %18 , i32 0 , i32 0 NEW_LINE %20
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @init ( ) #0 { NEW_LINE %1 = call noalias * i8 @malloc ( i64 24 ) #4 NEW_LINE %2 = bitcast * i8 %1 to * STRUCT 3 i32 * %struct.node * %struct.node NEW_LINE store * STRUCT 3 i32 * %struct.node * %struct.node %2 @nil NEW_LINE %3 = load * STRUCT 3 i32 * %struct.node * %struct.node @nil NEW_LINE %4 = load * STRUCT 3 i32 * %struct.node * %struct.node @nil NEW_LINE %5 = getelementptr inbounds STRUCT 3 i32 * %struct.node * %struct.node %4 , i32 0 , i32 1 NEW_LINE store * STRUCT 3 i32 * %struct.node * %struct.node %3 %5 NEW_LINE %6 = load * STRUCT 3 i32 * %struct.node * %struct.node @nil NEW_LINE %7 = load * STRUCT 3 i32 * %struct.node * %struct.node @nil NEW_LINE %8 = getelementptr inbounds STRUCT 3 i32 * %struct.node * %struct.node %7 , i32 0 , i32 2 NEW_LINE store * STRUCT 3 i32 * %struct.node * %struct.node %6 %8 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 105 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 cars ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE %12 = load * i32 %3 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds i32 %12 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = load * i32 %3 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %17 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = icmp eq i32 %16 , %21 NEW_LINE br i1 %22 , label %23 , label %36 NEW_LINE 23: NEW_LINE %24 = load * i32 %3 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds i32 %24 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = load * i32 %3 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds i32 %29 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = icmp slt i32 %28 , %33 NEW_LINE br i1 %34
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sge i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %16 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @Emptyhead ( * STRUCT 2 i32 i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * STRUCT 2 i32 i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * STRUCT 2 i32 i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE %12 = load * STRUCT 2 i32 i32 %3 NEW_LINE %13 = load i32 %6 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i32 i32 %12 , i64 %14 NEW_LINE %16 = getelementptr inbounds STRUCT 2 i32 i32 %15 , i32 0 , i32 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * STRUCT 2 i32 i32 %3 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds STRUCT 2 i32 i32 %18 , i64 %20 NEW_LINE %22 = getelementptr inbounds STRUCT 2 i32 i32 %21 , i32 0 , i32 0 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp slt i32 %17 , %23 NEW_LINE br i1 %24 , label %25 , label %36 NEW_LINE 25: NEW_LINE %26 = load * STRUCT 2 i32 i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds STRUCT 2 i32 i32 %26 , i64 %28 NEW_LINE %30 = getelementptr inbounds STRUCT 2 i32 i32 %29 , i32 0 , i32 1 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = load * STRUCT 2 i32 i32 %3 NEW_LINE %33 = load i32 %6 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds STRUCT 2 i32 i32 %32 , i64 %34 NEW_LINE store i32 %31
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28 , %29 NEW_LINE store i32 %30 %5 NEW_LINE br label %18 NEW_LINE 31: NEW_LINE %32
define dso_local i32 @sum ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 cars ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 0 %2 NEW_LINE br label %41 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = call i32 cars ( i32 %17 i32 %18 ) NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 @A , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = icmp eq i32 %20 , %24 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE store i32 1 %2 NEW_LINE br label %41 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000 x i32 @A , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE %33 =
define dso_local i32 state ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 0 %2 NEW_LINE br label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %10 NEW_LINE %12 = getelementptr inbounds STRUCT 3 i32 i32 i32 %11 , i32 0 , i32 1 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp eq i32 %13 , -1 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 1 %2 NEW_LINE br label %34 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %18 NEW_LINE %20 = getelementptr inbounds STRUCT 3 i32 i32 i32 %19 , i32 0 , i32 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %23
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %10 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE %33 = load i32 %11 NEW_LINE %34 = load i32 %11 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %13 NEW_LINE %36 = load i32 %13 NEW_LINE %37 = load i32 %11 NEW_LINE %38 = icmp slt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br label %44 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %2 NEW_LINE %46 = load i32 %3 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:1~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 50: NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:0~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 52: NEW_LINE %53 = load i32 %1 NEW_LINE ret i32 %53 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp sgt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %5 NEW_LINE %13 = load i32 %3 NEW_LINE store i32 %13 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %2 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %2 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %3 NEW_LINE store i32 %28
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node *
define dso_local double @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store double 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store double 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store double -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load double %3 NEW_LINE ret double %25 NEW_LINE }
define dso_local i32 @d ( * i32 %0 ) #0 { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = icmp slt i32 %8 , 600 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load * i32 %2 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds i32 %11 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE store i32 1 %2 NEW_LINE br label %40 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %5 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = icmp slt i32 %24 ,
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %16 , %17 NEW_LINE store i32 %18 %3 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %5 NEW_LINE br label %10 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sub nsw i32 %22 , %23 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = icmp sgt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:-1~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 29: NEW_LINE %30 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 11 x i8 NEW_LINE %6 = alloca ARR 3 11 x i8 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %7 = getelementptr inbounds ARR 3 11 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds ARR 3 11 x i8 %6 , i64 0 , i64 0 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%s ▁ %s~00" i64 0 i64 0 ) * i8 %7 * i8 %8 ) NEW_LINE %10 = getelementptr inbounds ARR 3 11 x i8 %5 , i64 0 , i64 0 NEW_LINE %11 = load * i32 %3 NEW_LINE %12 = call i32 @strcmp ( * i8 %10 * i8 %11 ) #4 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = call i32 @strcmp ( * i8 %15 * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) #4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * i32 %3 NEW_LINE %19 = call i32 @strcmp ( * i8 %18 * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 )
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 der ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 6 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 6 x i32 getelementptr inbounds ( STRUCT 2 ARR 3 6 x i32 ARR 3 6 x i32 @dice1 i32 0 i32 0 ) , i64 0 , i64 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 6 x i32 getelementptr inbounds ( STRUCT 2 ARR 3 6 x i32 ARR 3 6 x i32 @dice1 i32 0 i32 0 ) , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = add nsw i32 %11 , %15 NEW_LINE store i32 %16 %14 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 101 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @sikosu ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 6 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 6 x i32 getelementptr inbounds ( ARR 3 6 x i32 @dice1 i32 0 i32 0 ) , i64 0 , i64 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE store i32 %14 %2 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load i32 %4 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = srem i32 %24 , %25 NEW_LINE store i32 %26 %4 NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 @getchar_unlocked ( ) NEW_LINE store i32 %3 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %1 NEW_LINE %6 = mul nsw i32 10 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = and i32 %7 , 15 NEW_LINE %9 = add nsw i32 %6 , %8 NEW_LINE store i32 %9 %1 NEW_LINE %10 = call i32 @getchar_unlocked ( ) NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp sge i32 %12 , 48 NEW_LINE br i1 %13 , label %4 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %1 NEW_LINE ret i32 %15 NEW_LINE }
define dso_local i32 hako ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %14 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = call i32 hako ( i32 %9 ) NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE %13 = call i32 hako ( i32 %10 i32 %12 ) NEW_LINE store i32 %13 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE ret i32 %15 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %16 = load i32 %5 NEW_LINE store i32 %16 %6 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %6 NEW_LINE br label %10 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp sle i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp sge i32 %4 , 600 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:ABC~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:ARC~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%f ▁ %f~00" i64 0 i64 0 ) * float %2 * float %3 ) NEW_LINE %7 = load float %2 NEW_LINE %8 = load float %3 NEW_LINE %9 = fmul float %7 , %8 NEW_LINE %10 = load float %2 NEW_LINE %11 = fmul float %9 , %10 NEW_LINE store float %11 %4 NEW_LINE %12 = load float %4 NEW_LINE %13 = fpext float %12 to double NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%f~00" i64 0 i64 0 ) double %13 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 %13 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d%d%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 * i32 %8 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE store i32 %15 %9 NEW_LINE %16 = load i32 %6 NEW_LINE store i32 %16 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = icmp slt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE store i32 %22 %7 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %7 NEW_LINE %25 = load i32 %8 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 29: NEW_LINE %30 = call i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 128 %2 NEW_LINE store i32 128 %3 NEW_LINE store i32 128 %4 NEW_LINE store i32 128 %5 NEW_LINE store i32 128 %6 NEW_LINE store i32 128 %7 NEW_LINE store i32 128 %8 NEW_LINE store i32 128 %9 NEW_LINE store i32 128 %10 NEW_LINE store i32 128 %11 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = icmp slt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %6 NEW_LINE %25 = load i32 %7 NEW_LINE %26 = icmp sgt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %6 NEW_LINE %31 = load i32 %7 NEW_LINE %32 = icmp slt i32 %30 , %31 NEW_LINE br i1 %32 , label %33 , label %35 NEW_LINE 33: NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %8 NEW_LINE %38 = icmp sgt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE store i32 1 %2 NEW_LINE br label %41 NEW_LINE 40: NEW_LINE store i32 0 %2 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %2 NEW_LINE ret i32 %42 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d%d%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 * i32 %8 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE store i32 %15 %9 NEW_LINE %16 = load i32 %6 NEW_LINE store i32 %16 %7 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = icmp slt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE store i32 %22 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %7 NEW_LINE %25 = load i32 %8 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = load i32 %8 NEW_LINE store i32 %28
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @distance ( i32 %0 i32 %1 i32 %2 i32 %3 ) #0 { NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE store i32 %0 %5 NEW_LINE store i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store i32 %3 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE store i32 0 %13 NEW_LINE store i32 0 %14 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %13 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = icmp slt i32 %27 , %28 NEW_LINE br i1 %29 , label %30 , label %44 NEW_LINE 30: NEW_LINE %31 = load i32 %8 NEW_LINE %32 = load i32 %13 NEW_LINE %33 = add nsw i32 %31 , %32 NEW_LINE %34 = load i32 %6 NEW_LINE %35
define dso_local i32 @train ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @st ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 128 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 128 x i32 @d , i64 0 , i64 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , %11 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 128 x i32 @d , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @num ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %6 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %40 NEW_LINE 13: NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp eq i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %36 NEW_LINE 21: NEW_LINE %22 = load * i32 %3 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds i32 %22 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = icmp eq i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %36 NEW_LINE 29: NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %6 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = load i32 %6 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %36 NEW_LINE 35: NEW_LINE store i32 1 %7 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %6 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %6 NEW_LINE br label %9 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 stuck ( * i32 %0 ) #0 { NEW_LINE %2 = alloca * i32 NEW_LINE store * i32 %0 %2 NEW_LINE %3 = load * i32 %2 NEW_LINE %4 = getelementptr inbounds i32 %3 , i64 1 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %5 ) NEW_LINE %7 = load * i32 %2 NEW_LINE %8 = getelementptr inbounds i32 %7 , i64 2 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE %11 = load * i32 %2 NEW_LINE %12 = getelementptr inbounds i32 %11 , i64 3 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load * i32 %2 NEW_LINE %16 = getelementptr inbounds i32 %15 , i64 2 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load * i32 %2 NEW_LINE %20 = getelementptr inbounds i32 %19 , i64 3 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load * i32 %2 NEW_LINE %24 = getelementptr inbounds i32 %23 , i64 5 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 )
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 sp ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE %3 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE %4 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @d ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @train ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i32 %5 NEW_LINE store i32 %19 %6 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = icmp slt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE store i32 %27 %6 NEW_LINE %28 = load i32 %5 NEW_LINE store i32 %28 %4 NEW_LINE %29 = load i32 %6 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %40 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %6 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %6 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 600 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 1 %1 NEW_LINE br label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sub nsw i32 %9 , 800 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 trainNum ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @z ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 1 NEW_LINE br i1 %4 , label %5 , label %8 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %6 , -1 NEW_LINE store i32 %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE ret i32 %9 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local double @min ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca STRUCT 2 double double NEW_LINE %4 = bitcast * STRUCT 2 double double %3 to * STRUCT 2 double double NEW_LINE %5 = getelementptr inbounds STRUCT 2 double double %4 , i32 0 , i32 0 NEW_LINE store double %0 %5 NEW_LINE %6 = getelementptr inbounds STRUCT 2 double double %4 , i32 0 , i32 1 NEW_LINE store double %1 %6 NEW_LINE %7 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 0 NEW_LINE %8 = load double %7 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 1 NEW_LINE %10 = load double %9 NEW_LINE %11 = fcmp olt double %8 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE store double 0.000000e+00 %3 NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 0 NEW_LINE %15 = load double %14 NEW_LINE %16 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 0 NEW_LINE %17 = load double %16 NEW_LINE %18 = fcmp ole double %15 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store double 1.000000e+00 %3 NEW_LINE br label %23 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 1 NEW_LINE %22 = load double %21 NEW_LINE store double %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 1 NEW_LINE %25 = load double %24 NEW_LINE %26 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 1 NEW_LINE %27 = load double %26 NEW_LINE %28 = fcmp ole double %25 , %27 NEW_LINE br i1 %28 , label %29 , label %30 NEW_LINE 29: NEW_LINE store double 1.000000e+00 %3 NEW_LINE br label %23 NEW_LINE 30: NEW_LINE %31 = load double %3 NEW_LINE ret double %31 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 car ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 while ( scanf ( " % d " , & read ) != EOF ) { if ( read == 0 ) break ; if ( read == 1 ) printf ( " % d \n " , top ) ; top = 0 ; } return 0 ; }
define dso_local i32 temp ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @train ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i32 %3 NEW_LINE %9 = load i32 %5 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i32 %8 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %5 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp eq i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE store i32 1 %6 NEW_LINE br label %23 NEW_LINE 22: NEW_LINE store i32 0 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %6 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE %33 = load i32 %11 NEW_LINE %34 = load i32 %11 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %13 NEW_LINE %36 = load i32 %13 NEW_LINE %37 = load i32 %11 NEW_LINE %38 = icmp slt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br label %44 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %2 NEW_LINE %46 = load i32 %3 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:1~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 50: NEW_LINE %51 =
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @isPrime ( i64 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE %5 = load i64 %3 NEW_LINE %6 = icmp eq i64 %5 , 2 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 1 %2 NEW_LINE br label %36 NEW_LINE 8: NEW_LINE %9 = load i64 %3 NEW_LINE %10 = icmp slt i64 %9 , 2 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = srem i64 %12 , 2 NEW_LINE %14 = icmp eq i64 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE store i32 0 %2 NEW_LINE br label %36 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = sitofp i64 %18 to double NEW_LINE %20 = load i64 %3 NEW_LINE %21 = sitofp i64 %20 to double NEW_LINE %22 = call double @sqrt ( double %21 ) #3 NEW_LINE %23 = fcmp ole double %19 , %22 NEW_LINE br i1 %23 , label %24 , label %35 NEW_LINE 24: NEW_LINE %25 = load i64 %3 NEW_LINE %26 = load i64 %3 NEW_LINE %27 = srem i64 %25 , %26 NEW_LINE %28 = icmp eq i64 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %30 NEW_LINE 29: NEW_LINE store i32 0 %2 NEW_LINE br label %36 NEW_LINE 30: NEW_LINE %31 = load i64 %3 NEW_LINE %32 = load i64 %3 NEW_LINE %33 = srem i64 %31 ,
define dso_local i32 stdinput ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %34 NEW_LINE 13: NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = load * i32 %3 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i32 %19 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp eq i32 %18 , %23 NEW_LINE br i1 %24 , label %25 , label %30 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %6 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %7 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %7 NEW_LINE br label %9 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = load i32 %5 NEW_LINE %37 = icmp sgt i32 %35 , %36 NEW_LINE br i1 %37 , label %38 , label %40 NEW_LINE 38: NEW_LINE %39 = load i32 %6 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 car ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 @strcmp ( * i32 %5 * i32 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 =
define dso_local i32 memo ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 %12 , 10 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE ret i32 %16 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node *
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @_cknum ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i8 48 %7 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %6 NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %33 NEW_LINE 12: NEW_LINE %13 = load * i8 %4 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds i8 %13 , i64 %15 NEW_LINE %17 = load i8 %16 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE %19 = icmp slt i32 %18 , 48 NEW_LINE br i1 %19 , label %28 , label %20 NEW_LINE 20: NEW_LINE %21 = load * i8 %4 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i8 %21 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp sgt i32 %26 , 57 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store i32 1 %3 NEW_LINE br label %34 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %6 NEW_LINE br label %8 NEW_LINE 33: NEW_LINE store i32 0 %3 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @sum ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load * i32 %3 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %17 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load * i32 %3 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds i32 %22 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = icmp eq i32 %21 , %26 NEW_LINE br i1 %27 , label %28 , label %32 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %5 NEW_LINE %31 = load i32 %6 NEW_LINE store i32 %31 %4 NEW_LINE br label %41 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33:
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13
define dso_local i32 cars ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %8 NEW_LINE %11 = load i32 %7 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %34 NEW_LINE 13: NEW_LINE %14 = load * i8 %4 NEW_LINE %15 = load i32 %8 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i8 %14 , i64 %16 NEW_LINE %18 = load i8 %17 NEW_LINE %19 = sext i8 %18 to i32 NEW_LINE %20 = load * i8 %5 NEW_LINE %21 = load i32 %8 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i8 %20 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = icmp eq i32 %19 , %25 NEW_LINE br i1 %26 , label %27 , label %30 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %7 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %8 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %8 NEW_LINE br label %9 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %9 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str:%d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 * i32 %5 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 0 %9 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp sgt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 0 %9 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp sgt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %26 NEW_LINE 24: NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:0~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 26:
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @d ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * STRUCT 2 i32 i32 NEW_LINE %7 = alloca * STRUCT 2 i32 i32 NEW_LINE %8 = alloca * STRUCT 2 i32 i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %9 = load * i8 %4 NEW_LINE %10 = bitcast * i8 %9 to * STRUCT 2 i32 i32 NEW_LINE store * STRUCT 2 i32 i32 %10 %6 NEW_LINE %11 = load * STRUCT 2 i32 i32 %6 NEW_LINE %12 = getelementptr inbounds STRUCT 2 i32 i32 %11 , i32 0 , i32 0 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load * STRUCT 2 i32 i32 %5 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i32 i32 %14 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %13 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 1 %3 NEW_LINE br label %36 NEW_LINE 19: NEW_LINE %20 = load * STRUCT 2 i32 i32 %6 NEW_LINE %21 = getelementptr inbounds STRUCT 2 i32 i32 %20 , i32 0 , i32 1 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load * STRUCT 2 i32 i32 %5 NEW_LINE %24 = getelementptr inbounds STRUCT 2 i32 i32 %23 , i32 0 , i32 1 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = icmp slt i32 %22 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE store i32 -1 %3 NEW_LINE br label %36 NEW_LINE 28: NEW_LINE %29 = load * STRUCT 2 i32 i32 %6 NEW_LINE %30 = getelementptr inbounds STRUCT 2 i32 i32 %29 , i32 0 , i32 0 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = load * STRUCT 2 i32 i32 %5 NEW_LINE %33 = getelementptr inbounds STRUCT 2 i32 i32 %32 , i32 0 , i32 1 NEW_LINE %34 = load i32 %33 NEW_LINE %35 =
define dso_local i32 Pos ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 in_car ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %4 NEW_LINE %8 = bitcast * i8 %7 to * i32 NEW_LINE store * i32 %8 %6 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE store * i32 %10 %5 NEW_LINE %11 = load * i32 %6 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load * i32 %5 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = sub nsw i32 %12 , %14 NEW_LINE ret i32 %15 NEW_LINE }
define dso_local i32 ststp ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = icmp slt i32 %8 , 10 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 0 %6 NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 1 %2 NEW_LINE br label %40 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = icmp slt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE store i32 0 %2 NEW_LINE br label %40 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %35 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = icmp slt i32 %30 , %31 NEW_LINE br i1 %32 , label %33 , label %35 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE store i32 %34 %6 NEW_LINE br label %36 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load i32 %4 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @x ) NEW_LINE %3 = load i32 @x NEW_LINE %4 = sdiv i32 %3 , 4 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = fmul double %5 , 5.000000e-01 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = srem i32 %28 , %29 NEW_LINE store i32 %30 %5 NEW_LINE br label %18 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE ret i32 %32 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca ARR 3 10 x i8 NEW_LINE %6 = alloca ARR 3 10 x i8 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %9 = call * i8 @fgets ( * i8 %7 i32 10 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %8 ) NEW_LINE %10 = getelementptr inbounds ARR 3 10 x i8 %5 , i64 0 , i64 0 NEW_LINE %11 = call i32 ( * i8 * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %10 * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) #3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp sge i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:error~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ...
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str:%d%d%d%d%d~00" i64 0 i64 0 ) * i32 @a * i32 @b * i32 %3 * i32 @x * i32 @y * i32 @x ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 @x NEW_LINE %10 = load i32 @y NEW_LINE %11 = icmp ne i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %14 NEW_LINE 12: NEW_LINE %13 = load i32 @y NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 @x NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = phi i32 ARR 2 %13 %12 , ARR 2 %15 %14 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 clock_t start ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 =
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 %12 , %13 NEW_LINE %15 = call i32 @train ( i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32 %23 , %24
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label
define dso_local i32 carList ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %44 NEW_LINE 13: NEW_LINE %14 = load * i8 %4 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i8 %14 , i64 %16 NEW_LINE %18 = load i8 %17 NEW_LINE %19 = sext i8 %18 to i32 NEW_LINE %20 = load * i8 %5 NEW_LINE %21 = load i32 %7 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i8 %20 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = icmp eq i32 %19 , %25 NEW_LINE br i1 %26 , label %27 , label %40 NEW_LINE 27: NEW_LINE %28 = load * i8 %4 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds i8 %28 , i64 %30 NEW_LINE
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13
define dso_local i32 @dead_end ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = srem i32 %11 , 2 NEW_LINE %13 = icmp eq i32 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %5 NEW_LINE %19 = load i32 %5 NEW_LINE store i32 %19 %6 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = icmp slt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE store i32 %27 %6 NEW_LINE %28 = load i32 %5 NEW_LINE store i32 %28 %4 NEW_LINE %29 = load i32 %6 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %40 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %6 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %6 NEW_LINE %42 = call i32 ( * i8 ...
define dso_local i32 car ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 sp ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 30 NEW_LINE br i1 %6 , label %7 , label %14 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 30 x STRUCT 4 i32 i32 i32 i32 @T , i64 0 , i64 %9 NEW_LINE %11 = getelementptr inbounds STRUCT 4 i32 i32 i32 i32 %10 , i32 0 , i32 0 NEW_LINE store i32 -1 %11 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %2 NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE ret i32 %15 NEW_LINE }
define < 4 x i64 > @_mm256_permutex2var_epi64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpermi2var.q.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x i64 > %12 ) NEW_LINE ret < 4 x i64 > %13 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 car ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp sgt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE store i32 %23 %6 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp sgt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE store i32 %29 %7 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %31 i32 %32 i32 %33 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @sortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i32 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = icmp sgt i32 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i32 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * i32 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp eq i32 %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 divisor ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp sgt i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE store i32 %7 %2 NEW_LINE br label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 600 , %9 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE store i32 %14 %2 NEW_LINE %15 = load i32 %5 NEW_LINE store i32 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %17 , %18 NEW_LINE br i1 %19 , label %20 , label %24 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE store i32 %21 %6 NEW_LINE %22 = load i32 %3 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load i32 %6 NEW_LINE store i32 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE store i32
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 train ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i32 %3 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i32 %11 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = icmp ne i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %6 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp eq i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE store i32 1 %6 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = icmp eq i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE store i32 2 %6 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %6 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = call i32 train ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 ikidosu ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 600 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sge i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sdiv i32 %14 , 100 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 @solve ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 600 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i32 1 %1 NEW_LINE br label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sub nsw i32 %9 , 800 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local double mov ( ) #0 { NEW_LINE %1 = alloca double NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %1 ) NEW_LINE %3 = load double %1 NEW_LINE ret double %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pod ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 1000001 x i32 @A , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp eq i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 1 %2 NEW_LINE br label %42 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 1000001 x i32 @A , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = icmp slt i32 %25 , %29 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE store i32 0 %2 NEW_LINE br label %42 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %6 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load i32 %4 NEW_LINE store i32 %41 %2 NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %2 NEW_LINE ret i32 %43 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , %13 NEW_LINE store i32 %15 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 low ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %4 = load double %2 NEW_LINE %5 = fmul double 0x400921FB54442D18 , %4 NEW_LINE %6 = load double %2 NEW_LINE %7 = fmul double %5 , %6 NEW_LINE %8 = load double %2 NEW_LINE %9 = fmul double 0x401921FB54442D18 , %8 NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 ) double %7 double %9 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 ) NEW_LINE %34 = load double %2 NEW_LINE %35 = load double %3 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %5 NEW_LINE %38 = load double %6 NEW_LINE %39 = call double @fadd ( double %34 double %35 double %36 double %37 double %38 double %39 ) NEW_LINE %40 = load double %2 NEW_LINE %41 = load double %3 NEW_LINE %42 = load double %4 NEW_LINE %43 = call double @fadd ( double %40 double %41 double %42 ) NEW_LINE store double %43 %12 NEW_LINE br label %45 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load double %9 NEW_LINE %47 = fadd double %46 , 1 NEW_LINE store double %47 %9 NEW_LINE %48 = load double %12 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 inp ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %1 * i32 %2 ) NEW_LINE %5 = load i32 %1 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sge i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:unsafe~00" i64 0 i64 0 ) ) NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:safe~00" i64 0 i64 0 ) ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 judgeprime ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %24 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 1000000 x i64 @A , i64 0 , i64 %13 NEW_LINE %15 = load i64 %14 NEW_LINE %16 = call i32 judgeprime ( i64 %11 ) NEW_LINE %17 = icmp eq i32 %13 , %16 NEW_LINE br i1 %17 , label %18 , label %20 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %2 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %5 NEW_LINE br label %6 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18:
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %9 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %23 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %17 = load i32 %6 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %5 NEW_LINE br label %11 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp sge i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:-1~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 29: NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:-1~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 sya ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %5 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE store i32 %12 %5 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp sgt i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE store i32 %17 %5 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = srem i32 %19 , %20 NEW_LINE store i32 %21 %5 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %34 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = srem i32 %27 , 10 NEW_LINE %29 = add nsw i32 48 , %28 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , %30 NEW_LINE store i32 %32 %3 NEW_LINE %33 = sext
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 divisor ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp sgt i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE store i32 %7 %2 NEW_LINE br label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 0 , %9 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE store i32 %23 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:pon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.3:hon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 z = ~ scanf ( " % d " , & a ) ; i = ! printf ( i ? " - 1 ? " : " % d \n " : " NA \n " , i ) ; }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %24 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 0 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %5 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 box ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void func_output ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i32 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i32 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret void NEW_LINE }
define dso_local void func_output ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i32 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i32 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret void NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sdiv i32 %6 , 500 NEW_LINE store i32 %7 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 500 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 %10 , 5 NEW_LINE store i32 %11 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %12 , 1000 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %14 , 5 NEW_LINE %16 = add nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 ho ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 90 x i8 @buf , i64 0 , i64 %18 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = icmp eq i32 %21 , 90 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 1 %2 NEW_LINE br label %41 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %32 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 90 x i8 @buf , i64 0 , i64 %30 NEW_LINE store i8 0 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %6 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE store i32 0 %2 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %2 NEW_LINE ret i32 %42 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 angle ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local i32 angle ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %10 , 2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 2 NEW_LINE %14 = add nsw i32 %11 , %13 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @string_len ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = call i32 @strcmp ( * i8 %6 * i8 %7 ) #4 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE %13 = load * i8 %5 NEW_LINE %14 = call i32 @strcmp ( * i8 %12 * i8 %13 ) #4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %3 NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load * i8 %4 NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = call i32 @strcmp ( * i8 %18 * i8 %19 ) #4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @string_d ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca * STRUCT 2 i32 i32 NEW_LINE %7 = alloca * STRUCT 2 i32 i32 NEW_LINE %8 = alloca * STRUCT 2 i32 i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %9 = load * i8 %4 NEW_LINE %10 = bitcast * i8 %9 to * STRUCT 2 i32 i32 NEW_LINE store * STRUCT 2 i32 i32 %10 %6 NEW_LINE %11 = load * STRUCT 2 i32 i32 %6 NEW_LINE %12 = getelementptr inbounds STRUCT 2 i32 i32 %11 , i32 0 , i32 0 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load * STRUCT 2 i32 i32 %5 NEW_LINE %15 = getelementptr inbounds STRUCT 2 i32 i32 %14 , i32 0 , i32 0 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %13 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 1 %3 NEW_LINE br label %36 NEW_LINE 19: NEW_LINE %20 = load * STRUCT 2 i32 i32 %6 NEW_LINE %21 = getelementptr inbounds STRUCT 2 i32 i32 %20 , i32 0 , i32 1 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load * STRUCT 2 i32 i32 %5 NEW_LINE %24 = getelementptr inbounds STRUCT 2 i32 i32 %23 , i32 0 , i32 1 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = icmp slt i32 %22 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE store i32 -1 %3 NEW_LINE br label %36 NEW_LINE 28: NEW_LINE %29 = load * STRUCT 2 i32 i32 %6 NEW_LINE %30 = getelementptr inbounds STRUCT 2 i32 i32 %29 , i32 0 , i32 0 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = load * STRUCT 2 i32 i32 %5 NEW_LINE %33 = getelementptr inbounds STRUCT 2 i32 i32 %32 , i32 0 , i32 0 NEW_LINE %34 = load i32 %33 NEW_LINE %35 =
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %13 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = call i32 @f ( i32 %9 ) NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE store i32 %12 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 train ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp slt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 0 , %7 NEW_LINE %9 = call i32 train ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 0 , %10 NEW_LINE %12 = call i32 train ( i32 %11 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 0 , %13 NEW_LINE %15 = call i32 train ( i32 %14 ) NEW_LINE %16 = add nsw i32 %12 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i64 @f ( i64 %0 i64 %1 ) #0 { NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i64 %0 %4 NEW_LINE store i64 %1 %5 NEW_LINE %6 = load i64 %4 NEW_LINE %7 = load i64 %5 NEW_LINE %8 = icmp sgt i64 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i64 %5 NEW_LINE store i64 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i64 %4 NEW_LINE store i64 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE ret i64 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16:
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16:
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local i32 distance ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %8 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %44 NEW_LINE 14: NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = load i32 %8 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i32 %15 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load * i32 %4 NEW_LINE %21 = load i32 %8 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i32 %20 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = icmp slt i32 %19 , %24 NEW_LINE br i1 %25 , label %26 , label %40 NEW_LINE 26: NEW_LINE %27 = load * i32 %3 NEW_LINE %28 = load i32 %8 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds i32 %27 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE store i32 %31 %9 NEW_LINE %32 = load * i32 %4 NEW_LINE %33 = load i32 %8 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds i32 %32 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = load * i32 %3 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE call void distance ( * i32 %35 * i32 %36 i32 %37 ) NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %8 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %8 NEW_LINE br label %10 NEW_LINE 44: NEW_LINE %45 = load i32 %5 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local double @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = call double @pow ( double %5 double 3.000000e+00 ) #3 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = sitofp i32 %7 to double NEW_LINE %9 = call double @pow ( double %8 double 3.000000e+00 ) #3 NEW_LINE %10 = fptosi double %9 to i32 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = call double @pow ( double %11 double 3.000000e+00 ) #3 NEW_LINE %13 = fptosi double %12 to i32 NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = call double @pow ( double %14 double 3.000000e+00 ) #3 NEW_LINE %16 = fptosi double %15 to i32 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = call double @pow ( double %17 double 3.000000e+00 ) #3 NEW_LINE %19 = fptosi double %18 to i32 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 3.000000e+00 ) #3 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = call double @pow ( double %23 double 3.000000e+00 ) #3 NEW_LINE %25 = fptosi double %24 to i32 NEW_LINE store i32 %25 %2 NEW_LINE %26 = load i32 %2 NEW_LINE ret i32 %26 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = icmp eq i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i32 1 %2 NEW_LINE br label %13 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = call i32 @f ( i32 %9 ) NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE store i32 %12 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @dbsortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp ogt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 @i NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local float @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca float NEW_LINE store i32 %0 %2 NEW_LINE store float 0.000000e+00 %3 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = sitofp i32 %4 to float NEW_LINE %6 = load float %3 NEW_LINE %7 = fmul float %5 , %6 NEW_LINE %8 = load float %3 NEW_LINE %9 = fmul float %7 , %8 NEW_LINE %10 = load float %3 NEW_LINE %11 = fmul float %9 , %10 NEW_LINE %12 = load float %3 NEW_LINE %13 = fmul float %11 , %12 NEW_LINE %14 = fdiv float %13 , 2.000000e+00 NEW_LINE %15 = fadd float %10 , %14 NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = call double @llvm.ceil.f64 ( double %16 ) NEW_LINE ret float %17 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %40 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = add nsw i32 %17 , %18 NEW_LINE %20 = sdiv i32 %19 , 2 NEW_LINE store i32 %20 %9 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %9 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = icmp slt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %36 NEW_LINE 26: NEW_LINE %27 = load i32 %9 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %9 NEW_LINE %30 = add nsw i32 %28 , %29 NEW_LINE %31 = srem i32 %27 , %30 NEW_LINE store i32 %31 %10 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = load i32 %9 NEW_LINE %34 = add nsw i32 %32 , %33 NEW_LINE %35 = load i32 %4 NEW_LINE %36 = icmp slt i32 %34 , %35 NEW_LINE br i1 %36 , label %37 , label %39 NEW_LINE 37: NEW_LINE %38 = load i32 %9 NEW_LINE store i32 %38 %11 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %8 NEW_LINE %42 = add nsw i32 %41 , 1 NEW_LINE store i32 %42 %8 NEW_LINE br label %12 NEW_LINE 43: NEW_LINE %44 = load i32 %7 NEW_LINE %45 = load i32 %10 NEW_LINE %46 = add nsw i32 %44 , %45 NEW_LINE %47 = load i32 %4 NEW_LINE %48 = icmp slt i32 %46 , %47 NEW_LINE %49 = zext i1 %48 to i64
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:ABC%d~0A~00" i64 0 i64 0 ) i32 %4 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @veve ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %8 NEW_LINE %10 = getelementptr inbounds STRUCT 3 i32 i32 i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load i32 %10 NEW_LINE call void @makeTree ( i32 %11 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %13 NEW_LINE %15 = getelementptr inbounds STRUCT 3 i32 i32 i32 %14 , i32 0 , i32 2 NEW_LINE %16 = load i32 %15 NEW_LINE call void @makeTree ( i32 %16 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 ire ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 ,
define dso_local * i8 decode ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i32 %6 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i8 %8 , i64 %10 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = sext i8 %12 to i32 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load * i8 %2 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i8 %16 , i64 %18 NEW_LINE store i8 0 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %6 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds i8 %16 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store * i8 null %2 NEW_LINE br label %46 NEW_LINE 29: NEW_LINE %30 = load * i8 %2 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds i8 %30 , i64 %32 NEW_LINE %34 = load i8 %33 NEW_LINE %35 = sext i8 %34 to i32 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load * i8 %2 NEW_LINE %39 = load i32 %6 NEW_LINE store i32 %38 %5 NEW_LINE br label %43 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE %42 = add nsw i32 %41 , 1
define dso_local * i8 decode ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i32 %6 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i8 %8 , i64 %10 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = sext i8 %12 to i32 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load * i8 %2 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i8 %16 , i64 %18 NEW_LINE store i8 0 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %6 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds i8 %16 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store * i8 null %2 NEW_LINE br label %46 NEW_LINE 29: NEW_LINE %30 = load * i8 %2 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds i8 %30 , i64 %32 NEW_LINE %34 = load i8 %33 NEW_LINE %35 = sext i8 %34 to i32 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load * i8 %2 NEW_LINE %39 = load i32 %6 NEW_LINE store i32 %38 %5 NEW_LINE br label %43 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE %42 = add nsw i32
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE store i32 0 %14 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %33 = load i32 %8 NEW_LINE %34 = load i32 %9 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %15 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = icmp sgt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local * i8 decode ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i32 %6 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i8 %8 , i64 %10 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = sext i8 %12 to i32 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load * i8 %2 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i8 %16 , i64 %18 NEW_LINE store i8 0 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %6 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds i8 %16 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE store * i8 null %2 NEW_LINE br label %46 NEW_LINE 29: NEW_LINE %30 = load * i8 %2 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds i8 %30 , i64 %32 NEW_LINE %34 = load i8 %33 NEW_LINE %35 = sext i8 %34 to i32 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load * i8 %2 NEW_LINE %39 = load i32 %6 NEW_LINE store i32 %38 %5 NEW_LINE br label %43 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE %42 = add nsw i32 %41 , 1
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @d ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = sub nsw i64 %7 , %10 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local double @dbzt ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE store double %0 %3 NEW_LINE store double %1 %4 NEW_LINE %5 = load double %3 NEW_LINE %6 = load double %4 NEW_LINE %7 = call double @dbmax ( double %5 double %6 ) NEW_LINE %8 = load double %3 NEW_LINE %9 = load double %4 NEW_LINE %10 = call double @dbmin ( double %8 double %9 ) NEW_LINE %11 = fsub double %7 , %10 NEW_LINE ret double %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @ullcomp ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * i64 NEW_LINE %8 = load i64 %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * i64 NEW_LINE %11 = load i64 %10 NEW_LINE %12 = icmp ult i64 %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * i64 NEW_LINE %17 = load i64 %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * i64 NEW_LINE %20 = load i64 %19 NEW_LINE %21 = icmp ugt i64 %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %7 = load * i32 %3 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE store double %7 %7 NEW_LINE %10 = load double %7 NEW_LINE %11 = load double %6 NEW_LINE %12 = fdiv double %10 , %11 NEW_LINE store double %12 %5 NEW_LINE %13 = load double %5 NEW_LINE %14 = load double %6 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %13 double %14 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 ) NEW_LINE %34 = load double %2 NEW_LINE %35 = load double %3 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %5 NEW_LINE %38 = load double %6 NEW_LINE %39 = call double @@distance ( double %34 double %35 double %36 double %37 double %38 double %39 ) NEW_LINE %40 = load double %2 NEW_LINE store double %40 %12 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load double %9 NEW_LINE %43 = load double %10 NEW_LINE %44 = load double %11 NEW_LINE %45 = load double %12 NEW_LINE %46 = call i32 @@distance ( double %42 double %43 double %44 double %45 double %46 double %47 ) NEW_LINE store i32 %48 %13 NEW_LINE %47 = load i32 %13 NEW_LINE %48 = load i32 %14 NEW_LINE %49 = load double %15 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.1:%d ▁ %d ▁ %lf~0A~00" i64 0 i64 0 ) i32 %47 i32 %48 double %49 double %50 double %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 ix ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %7 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %44 NEW_LINE 14: NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = load i32 %7 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i32 %15 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = icmp eq i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %25 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %6 NEW_LINE br label %40 NEW_LINE 25: NEW_LINE %26 = load * i32 %3 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds i32 %26 , i64 %28 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = icmp slt i32 %30 , %31 NEW_LINE br i1 %32 , label %33 , label %40 NEW_LINE 33: NEW_LINE %34 = load i32 %7 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %5 NEW_LINE %36 = load i32 %7 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %7 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local double ansx ( double %0 double %1 double %2 double %3 ) #0 { NEW_LINE %5 = alloca STRUCT 2 double double NEW_LINE %6 = alloca STRUCT 2 double double NEW_LINE %7 = bitcast * STRUCT 2 double double %5 to * STRUCT 2 double double NEW_LINE %8 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 0 NEW_LINE store double %0 %8 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 1 NEW_LINE store double %1 %9 NEW_LINE %10 = bitcast * STRUCT 2 double double %6 to * STRUCT 2 double double NEW_LINE %11 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 0 NEW_LINE store double %2 %11 NEW_LINE %12 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 1 NEW_LINE store double %3 %12 NEW_LINE %13 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0 NEW_LINE %14 = load double %13 NEW_LINE %15 = getelementptr inbounds STRUCT 2 double double %6 , i32 0 , i32 1 NEW_LINE %16 = load double %15 NEW_LINE %17 = fmul double %14 , %16 NEW_LINE %18 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 1 NEW_LINE %19 = load double %18 NEW_LINE %20 = getelementptr inbounds STRUCT 2 double double %6 , i32 0 , i32 0 NEW_LINE %21 = load double %20 NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = fadd double %17 , %22 NEW_LINE ret double %23 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 82 x i8 NEW_LINE %5 = alloca ARR 3 82 x i8 NEW_LINE store i32 0 %1 NEW_LINE %6 = getelementptr inbounds ARR 3 82 x i8 %4 , i64 0 , i64 0 NEW_LINE %7 = getelementptr inbounds ARR 3 82 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%s ▁ %s ▁ %s~00" i64 0 i64 0 ) * i8 %6 * i8 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 82 x i8 %4 , i64 0 , i64 0 NEW_LINE %10 = call i64 @strlen ( * i8 %9 ) #3 NEW_LINE %11 = trunc i64 %10 to i32 NEW_LINE store i32 %11 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %33 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 82 x i8 %4 , i64 0 , i64 %18 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 82 x i8 %5 , i64 0 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp eq i32 %21 , %26 NEW_LINE br i1 %27 , label %28 , label %29 NEW_LINE 28: NEW_LINE br label %33 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %3 NEW_LINE br label %12 NEW_LINE 33: NEW_LINE %34 = getelementptr inbounds ARR 3 82 x i8 %5 , i64 0 , i64 0 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%s~0A~00" i64 0 i64 0 ) * i8 %34 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x i64 > @_mm256_madd52hi_epu64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #42 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpmadd52h.uq.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x i64 > %12 ) NEW_LINE ret < 4 x i64 > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %2 NEW_LINE %7 = mul nsw i32 %5 , %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = srem i32 %5 , %6 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = srem i32 %11 , %12 NEW_LINE %14 = call i32 @gcd ( i32 %10 i32 %13 ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = phi i32 ARR 2 %14 %9 , ARR 2 %16 %15 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @t ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %6 NEW_LINE %11 = load i32 @n NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %34 NEW_LINE 13: NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = load * i32 %4 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i32 %19 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp eq i32 %18 , %23 NEW_LINE br i1 %24 , label %25 , label %30 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %6 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %6 NEW_LINE br label %9 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 101 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19
define dso_local i32 @MIN ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE store i32 %23 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE store i32 %29 %8 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %36 NEW_LINE 34: NEW_LINE %35 = load i32 %2 NEW_LINE store i32 %35 %9 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp sgt i32 %37 , %38 NEW_LINE br i1 %39 , label %40 , label %42 NEW_LINE 40: NEW_LINE %41 = load i32 %3 NEW_LINE store i32 %41 %10 NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %2 NEW_LINE %44 = load i32 %3 NEW_LINE %45 = icmp sgt i32 %43 , %44 NEW_LINE br i1 %45 , label %46 , label %48 NEW_LINE 46: NEW_LINE %47 = load i32 %2 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 0 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store i32 0 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = icmp slt i32 %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %34 = load i32 %4 NEW_LINE %35 = load i32 %5 NEW_LINE %36 = add nsw i32 %34 , %35 NEW_LINE store i32 %36 %5 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sitofp i32 %37 to double NEW_LINE %39 = load double %8 NEW_LINE %40 = fadd double %39 , %38 NEW_LINE store double %40 %6 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %5 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %5 NEW_LINE br label %28 NEW_LINE 44: NEW_LINE %45 = load i32 %2 NEW_LINE %46 = load i32 %3 NEW_LINE %47 = icmp sle i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @compare_i64_desc ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp sgt i64 %7 , %10 NEW_LINE %12 = zext i1 %11 to i64 NEW_LINE %13 = select i1 %11 , i32 -1 , i32 1 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local double dx ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE store double %0 %3 NEW_LINE store double %1 %4 NEW_LINE %5 = load double %3 NEW_LINE %6 = load double %4 NEW_LINE %7 = fcmp ogt double %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load double %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load double %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi double ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret double %13 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @list ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 @l , i64 0 , i64 %9 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , %11 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 @l , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 ) NEW_LINE %34 = load double %2 NEW_LINE %35 = load double %3 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %5 NEW_LINE %38 = load double %6 NEW_LINE %39 = call double @@distance ( double %34 double %35 double %36 double %37 double %38 double %39 ) NEW_LINE %40 = load double %2 NEW_LINE store double %40 %12 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load double %9 NEW_LINE %43 = load double %10 NEW_LINE %44 = load double %11 NEW_LINE %45 = load double %12 NEW_LINE %46 = call i32 @@distance ( double %42 double %43 double %44 double %45 double %46 double %47 ) NEW_LINE store i32 %48 %13 NEW_LINE %47 = load i32 %13 NEW_LINE %48 = load i32 %14 NEW_LINE %49 = load double %15 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.1:%d ▁ %d ▁ %lf~0A~00" i64 0 i64 0 ) i32 %47 i32 %48 double %49 double %50 double %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @isEmpty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 1 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @hp ( * i8 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load * i8 %3 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i8 %17 , i64 %19 NEW_LINE %21 = load i8 %20 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE %23 = load * i8 %3 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds i8 %23 , i64 %25 NEW_LINE %27 = load i8 %26 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 =
define < 8 x i64 > @_mm512_permutex2var_epi64 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 < 8 x i64 > byval ( < 8 x i64 > ) %2 ) #17 { NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = alloca < 8 x i64 > NEW_LINE %6 = alloca < 8 x i64 > NEW_LINE %7 = load < 8 x i64 > %0 NEW_LINE %8 = load < 8 x i64 > %1 NEW_LINE %9 = load < 8 x i64 > %2 NEW_LINE store < 8 x i64 > %7 %4 NEW_LINE store < 8 x i64 > %8 %5 NEW_LINE store < 8 x i64 > %9 %6 NEW_LINE %10 = load < 8 x i64 > %4 NEW_LINE %11 = load < 8 x i64 > %5 NEW_LINE %12 = load < 8 x i64 > %6 NEW_LINE %13 = call < 8 x i64 > @llvm.x86.avx512.vpermi2var.q.512 ( < 8 x i64 > %10 < 8 x i64 > %11 < 8 x i64 > %12 ) NEW_LINE ret < 8 x i64 > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local i32 dir ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %8 NEW_LINE %10 = getelementptr inbounds STRUCT 3 i32 i32 i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load i32 %10 NEW_LINE call void dir ( i32 %11 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %13 NEW_LINE %15 = getelementptr inbounds STRUCT 3 i32 i32 i32 %14 , i32 0 , i32 2 NEW_LINE %16 = load i32 %15 NEW_LINE call void dir ( i32 %16 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = load i32 %6 NEW_LINE %10 = load i32 %6 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32
define dso_local double @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store double 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store double 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store double -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load double %3 NEW_LINE ret double %25 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local double north ( ) #0 { NEW_LINE %1 = alloca double NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %1 ) NEW_LINE %3 = load double %1 NEW_LINE ret double %3 NEW_LINE }
define dso_local i32 @car_stack ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load * i32 %3 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %17 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = icmp eq i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE store i32 1 %6 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = icmp sgt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE store i32 1 %6 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %5 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %6 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %6 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load i32 %5 NEW_LINE ret i32 %41 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE %7 = alloca float NEW_LINE %8 = alloca float NEW_LINE %9 = alloca float NEW_LINE %10 = alloca float NEW_LINE %11 = alloca float NEW_LINE %12 = alloca float NEW_LINE %13 = alloca float NEW_LINE %14 = alloca float NEW_LINE %15 = alloca float NEW_LINE %16 = alloca float NEW_LINE %17 = alloca float NEW_LINE %18 = alloca float NEW_LINE %19 = alloca float NEW_LINE %20 = alloca float NEW_LINE %21 = alloca float NEW_LINE %22 = alloca float NEW_LINE %23 = alloca float NEW_LINE %24 = alloca float NEW_LINE %25 = alloca float NEW_LINE %26 = alloca float NEW_LINE %27 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store float 0.000000e+00 %12 NEW_LINE store float 0.000000e+00 %13 NEW_LINE store float 0.000000e+00 %14 NEW_LINE store float 0.000000e+00 %15 NEW_LINE store float 0.000000e+00 %16 NEW_LINE store float 0.000000e+00 %17 NEW_LINE store float 0.000000e+00 %18 NEW_LINE store float 0.000000e+00 %19 NEW_LINE store float 0.000000e+00 %20 NEW_LINE %21 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %4 ) NEW_LINE %22 = load float %4 NEW_LINE %23 = load float %14 NEW_LINE %24 = fadd float %22 , %23 NEW_LINE store float %24 %24 NEW_LINE %25 = load float %4 NEW_LINE %26 = load float %5 NEW_LINE %27 = fadd float %26 , %25 NEW_LINE store float %27 %5 NEW_LINE %28 = load float %5 NEW_LINE %29 = load float %6 NEW_LINE %30 = fadd float %29 , %28 NEW_LINE store float %30 %6 NEW_LINE %31 = load float %6 NEW_LINE %32 = load float %8 NEW_LINE %33 = fadd float %32 , %31 NEW_LINE store float %33 %8 NEW_LINE %34 = load float %8 NEW_LINE %35 = load float %9 NEW_LINE %36 = fadd float %34 , %35 NEW_LINE store float %36 %9 NEW_LINE %37 = load float %9 NEW_LINE %38 = load float %10 NEW_LINE %39 = fadd float %37 , %38 NEW_LINE %40 = fdiv float %39 , 2.000000e+00 NEW_LINE store float %40 %17 NEW_LINE %41 = load float %10 NEW_LINE %42 = load float %11 NEW_LINE %43 = fadd float %41 , %42 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lf~0A~00" i64 0 i64 0 ) double %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local double @dbmax ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE store double %0 %4 NEW_LINE store double %1 %5 NEW_LINE %6 = load double %4 NEW_LINE %7 = load double %5 NEW_LINE %8 = fcmp ogt double %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load double %4 NEW_LINE store double %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load double %5 NEW_LINE store double %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load double %3 NEW_LINE ret double %14 NEW_LINE }
define dso_local i32 step ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = call double @pow ( double %5 double 2.000000e+00 ) #3 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = mul nsw i32 %7 , 2 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = call double @pow ( double %10 double 2.000000e+00 ) #3 NEW_LINE %12 = fptosi double %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1000000 %11 NEW_LINE store i32 -1000000 %5 NEW_LINE store i32 1000000 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp slt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE store i32 %22 %7 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp sgt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %30 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE store i32 %28 %10 NEW_LINE %29 = load i32 %3 NEW_LINE store i32 %29 %2 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %8 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %8 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %9 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:%d ▁ %d ▁ %lld~0A~00" i64 0 i64 0 ) i32 %35 i32 %36 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dsumb ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %18 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = srem i32 %10 , %11 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = add nsw i32 %13 , %12 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sdiv i32 %16 , %15 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1 x i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %3 ) NEW_LINE %5 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = icmp eq i32 %7 , 83 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:Cloudy~00" i64 0 i64 0 ) ) NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = icmp eq i32 %14 , 67 NEW_LINE br i1 %15 , label %16 , label
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x float > byval ( < 4 x float > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x float > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x float > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = shufflevector < 8 x float > %7 , < 8 x float > %8 , < 8 x i32 > < i32 1 , i32 9 , i32 3 , i32 11 , i32 5 , i32 13 , i32 7 , i32 15 > NEW_LINE ret < 8 x float > %9 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE store i32 0 %14 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %33 = load i32 %8 NEW_LINE %34 = load i32 %9 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %15 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = icmp sgt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br label %44 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %2 NEW_LINE %46 = load i32 %3 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE store i32 0 %14 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %33 = load i32 %8 NEW_LINE %34 = load i32 %9 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %15 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = icmp sgt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br label %44 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %2 NEW_LINE %46 = load i32 %3 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr
define dso_local i32 @MIN ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store double %0 %3 NEW_LINE store double %1 %4 NEW_LINE %5 = load double %3 NEW_LINE %6 = load double %4 NEW_LINE %7 = fcmp olt double %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load double %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load double %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi double ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %6 = load i32 %1 NEW_LINE %7 = mul nsw i32 %6 , 3 NEW_LINE %8 = load i32 %1 NEW_LINE %9 = mul nsw i32 %7 , %8 NEW_LINE store i32 %9 %2 NEW_LINE %10 = load i32 %1 NEW_LINE %11 = sdiv i32 %10 , 2 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %12 , %13 NEW_LINE %15 = sub nsw i32 %14 , 1 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = load i32 %1 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fdiv double %16 , %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d ▁ %d ▁ %f~0A~00" i64 0 i64 0 ) i32 %11 i32 %15 double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 train ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 walk ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %8 NEW_LINE %10 = getelementptr inbounds STRUCT 3 i32 i32 i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load i32 %10 NEW_LINE call void walk ( i32 %11 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10000 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %15 NEW_LINE %17 = getelementptr inbounds STRUCT 3 i32 i32 i32 %16 , i32 0 , i32 2 NEW_LINE %18 = load i32 %17 NEW_LINE call void walk ( i32 %18 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %11 = load double %6 NEW_LINE %12 = load double %7 NEW_LINE %13 = fsub double %11 , %12 NEW_LINE %14 = load double %6 NEW_LINE %15 = load double %7 NEW_LINE %16 = fsub double %14 , %15 NEW_LINE %17 = fmul double %13 , %16 NEW_LINE %18 = load double %8 NEW_LINE %19 = load double %9 NEW_LINE %20 = fsub double %18 , %19 NEW_LINE %21 = load double %8 NEW_LINE %22 = load double %9 NEW_LINE %23 = fsub double %21 , %22 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = fadd double %17 , %24 NEW_LINE %26 = call double @sqrt ( double %25 ) #3 NEW_LINE store double %26 %9 NEW_LINE %27 = load double %9 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%f~0A~00" i64 0 i64 0 ) double %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i32 @root ( i32 %5 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE %9 = icmp eq i32 %6 , %8 NEW_LINE %10 = zext i1 %9 to i32 NEW_LINE ret i32 %10 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 rad ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %11 = load double %6 NEW_LINE %12 = load double %7 NEW_LINE %13 = fsub double %11 , %12 NEW_LINE %14 = load double %6 NEW_LINE %15 = load double %7 NEW_LINE %16 = fsub double %14 , %15 NEW_LINE %17 = fmul double %13 , %16 NEW_LINE %18 = load double %8 NEW_LINE %19 = load double %9 NEW_LINE %20 = fsub double %18 , %19 NEW_LINE %21 = load double %8 NEW_LINE %22 = load double %9 NEW_LINE %23 = fsub double %21 , %22 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = fadd double %17 , %24 NEW_LINE %26 = call double @sqrt ( double %25 ) #3 NEW_LINE store double %26 %8 NEW_LINE %27 = load double %8 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%f~0A~00" i64 0 i64 0 ) double %27 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1 x i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %3 ) NEW_LINE %5 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = icmp eq i32 %7 , 83 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:Cloudy~00" i64 0 i64 0 ) ) NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = icmp eq i32 %14 , 67 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16:
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 step ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = call double @pow ( double %5 double 2.000000e+00 ) #3 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = mul nsw i32 %7 , 2 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = call double @pow ( double %10 double 2.000000e+00 ) #3 NEW_LINE %12 = fptosi double %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @c ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i32 %5 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = sub nsw i32 %7 , %9 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE store i32 1 %3 NEW_LINE br label %21 NEW_LINE 13: NEW_LINE %14 = load * i32 %4 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load * i32 %5 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = sub nsw i32 %15 , %17 NEW_LINE %19 = call i32 @c ( * i32 %14 i32 %18 ) NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = sdiv i32 %11 , 2 NEW_LINE store i32 %12 %7 NEW_LINE %13 = load i32 %6 NEW_LINE %14 = srem i32 %13 , 2 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:1~00" i64 0 i64 0 ) ) NEW_LINE br label %20 NEW_LINE 18: NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:0~00" i64 0 i64 0 ) ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 step ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %5 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = icmp eq i32 %15 , -1 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE store i32 1 %3 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = srem i32 %19 , %20 NEW_LINE %22 = icmp eq i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 0 %3 NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE store i32 %25 %3 NEW_LINE br label %27 NEW_LINE 26: NEW_LINE store i32 -1 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 %11 , 60 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = srem i32 %13 , 60 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %16 i32 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dist ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE store i32 0 %3 NEW_LINE br label %46 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE store i32 0 %6 NEW_LINE br label %42 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %46 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE store i32 1 %3 NEW_LINE br label %46 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = icmp slt i32 %29 , %30 NEW_LINE br i1 %31 , label %32 , label %35 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = load i32 %6 NEW_LINE %11 = sdiv i32 %10 , 3600 NEW_LINE store i32 %11 %7 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = srem i32 %12 , 3600 NEW_LINE %14 = sdiv i32 %13 , 60 NEW_LINE store i32 %14 %8 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = srem i32 %15 , 60 NEW_LINE store i32 %16 %6 NEW_LINE %17 = load i32 %7 NEW_LINE %18 = srem i32 %17 , 60 NEW_LINE store i32 %18 %7 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = load i32 %8 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %19 i32 %20 i32 %21 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 angle ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE store i32 %17 %10 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE store i32 %24 %10 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE store i32 %30 %11 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = icmp slt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %2 NEW_LINE store i32 %36 %10 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = load i32 %3 NEW_LINE %40 = icmp sgt i32 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %43 NEW_LINE 41: NEW_LINE %42 = load i32 %3 NEW_LINE store i32 %42 %11 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i32 %2 NEW_LINE %45 = load i32 %3 NEW_LINE %46 = icmp sgt i32 %44 , %45 NEW_LINE br i1 %46 , label %47 , label %49 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE store i32 %48 %10 NEW_LINE br label %49 NEW_LINE 49: NEW_LINE %50 = load i32 %10 NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %50 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @d ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = sub nsw i64 %7 , %10 NEW_LINE %12 = trunc i64 %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %15 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i32 @root ( i32 %5 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE %9 = icmp eq i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE br label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = call i32 @root ( i32 %13 ) NEW_LINE %15 = icmp eq i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = call i32 @root ( i32 %18 ) NEW_LINE %20 = load i32 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i32 ARR 2 0 %16 , ARR 2 %20 %17 NEW_LINE %23 = load i32 %3 NEW_LINE ret i32 %23 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @meter ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE ret i32 %16 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1000000 %11 NEW_LINE store i32 -1000000 %5 NEW_LINE store i32 1000000 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = add nsw i32 %18 , %19 NEW_LINE %21 = load i32 %7 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 1000000 %11 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %6 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %7 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %8 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %8 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %7 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:Case ▁ %d: ▁ %d~0A~00" i64 0 i64 0 ) i32 %35 i32 %36 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @c ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = load i32 %6 NEW_LINE %8 = load * i32 %5 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = sub nsw i32 %7 , %9 NEW_LINE %11 = icmp sgt i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE store i32 1 %3 NEW_LINE br label %20 NEW_LINE 13: NEW_LINE %14 = load * i32 %4 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load * i32 %5 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = sub nsw i32 %15 , %17 NEW_LINE %19 = call i32 @c ( * i32 %14 i32 %18 ) NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE ret i32 %21 NEW_LINE }
define dso_local i32 step ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = call double @pow ( double %5 double 2.000000e+00 ) #3 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = mul nsw i32 %7 , 2 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = call double @pow ( double %10 double 2.000000e+00 ) #3 NEW_LINE %12 = fptosi double %11 to i32 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @max_array ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %6 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %46 NEW_LINE 13: NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = icmp eq i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %24 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %5 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %6 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %6 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @max_array ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sge i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %10 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %11 , %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = load i32 %1 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 step ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sitofp i32 %4 to double NEW_LINE %6 = call double @sqrt ( double %5 ) #3 NEW_LINE %7 = fptosi double %6 to i32 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sitofp i32 %8 to double NEW_LINE %10 = call double @sqrt ( double %9 ) #3 NEW_LINE %11 = fptosi double %10 to i32 NEW_LINE %12 = mul nsw i32 %7 , %11 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE ret i32 0 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sgt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 =
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 90 x i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 0 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %3 ) NEW_LINE %5 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 0 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = icmp eq i32 %7 , 83 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:Cloudy~00" i64 0 i64 0 ) ) NEW_LINE br label %21 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 0 NEW_LINE %13 = load i8 %12 NEW_LINE %14 = sext i8 %13 to i32 NEW_LINE %15 = icmp eq i32 %14 , 67 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.2:Rainy~00" i64 0 i64 0 ) ) NEW_LINE br label %20 NEW_LINE 18: NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.3:Sunny~00" i64 0 i64 0 ) ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @dis ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i32 ARR 2 %9 %8 , ARR 2 %11 %10 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @dbsortfncsj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp ogt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %4 = load i8 %2 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @max ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sgt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE store i32 %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 data ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = call i32 @strcmp ( * i8 %5 * i8 %6 ) #4 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @upll ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp slt i64 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = load * i8 %3 NEW_LINE %15 = bitcast * i8 %14 to * i64 NEW_LINE %16 = load i64 %15 NEW_LINE %17 = load * i8 %4 NEW_LINE %18 = bitcast * i8 %17 to * i64 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = icmp sgt i64 %16 , %19 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , i32 1 , i32 0 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 -1 %12 , ARR 2 %22 %13 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE %6 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %6 ) NEW_LINE %8 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 0 NEW_LINE %9 = call i64 @strlen ( * i8 %8 ) #3 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %33 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i8 %18 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1 x i8 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = icmp eq i32 %20 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %11 NEW_LINE 33: NEW_LINE
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 Real ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 %13 , 10 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE ret i32 %16 NEW_LINE }
define dso_local i32 walk ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp eq i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %6 NEW_LINE 5: NEW_LINE br label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 90 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %8 NEW_LINE %10 = getelementptr inbounds STRUCT 3 i32 i32 i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load i32 %10 NEW_LINE call void walk ( i32 %11 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 90 x STRUCT 3 i32 i32 i32 @T , i64 0 , i64 %15 NEW_LINE %17 = getelementptr inbounds STRUCT 3 i32 i32 i32 %16 , i32 0 , i32 2 NEW_LINE %18 = load i32 %17 NEW_LINE call void walk ( i32 %18 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @_sort ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %7 = load * i8 %5 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = call i32 @strcmp ( * i8 %7 * i8 %8 ) #4 NEW_LINE %10 = trunc i32 %9 to i8 NEW_LINE store i8 %10 %6 NEW_LINE %11 = load i8 %6 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE store i8 0 %15 NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = sext i8 %17 to i32 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @c ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %9 NEW_LINE %12 = load i32 @n NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %44 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = load i32 %9 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i8 %15 , i64 %17 NEW_LINE %19 = load i8 %18 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE %21 = load * i8 %5 NEW_LINE %22 = load i32 %9 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i8 %21 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp eq i32 %20 , %26 NEW_LINE br i1 %27 , label %28 , label %40 NEW_LINE 28: NEW_LINE %29 = load i32 %9 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %8 NEW_LINE %31 = load i32 %8 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %9 NEW_LINE %33 = load i32 %9 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %8 NEW_LINE %35 = load i32 %8 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %9 NEW_LINE %37 = load i32 %9 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE %39 = load i32 %8 NEW_LINE call void @solve ( i32 %38 i32 %39 ) NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = srem i32 %15 , %16 NEW_LINE store i32 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load i32 %4 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = srem i32 %24 , %25 NEW_LINE store i32 %26 %4 NEW_LINE br label %18 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %11 = load double %6 NEW_LINE %12 = load double %7 NEW_LINE %13 = fsub double %11 , %12 NEW_LINE %14 = load double %6 NEW_LINE %15 = load double %7 NEW_LINE %16 = fsub double %14 , %15 NEW_LINE %17 = fmul double %13 , %16 NEW_LINE %18 = load double %8 NEW_LINE %19 = load double %9 NEW_LINE %20 = fsub double %18 , %19 NEW_LINE %21 = load double %8 NEW_LINE %22 = load double %9 NEW_LINE %23 = fsub double %21 , %22 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = fadd double %17 , %24 NEW_LINE %26 = call double @sqrt ( double %25 ) #3 NEW_LINE store double %26 %8 NEW_LINE %27 = load double %8 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%f~0A~00" i64 0 i64 0 ) double %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @90 ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sgt i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = srem i32 %8 , 10 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 %12 , 10 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE ret i32 %16 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 %2 NEW_LINE %6 = mul nsw i32 %4 , %5 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 deg ( double %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE store double %0 %3 NEW_LINE %4 = load double %3 NEW_LINE %5 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%f~0A~00" i64 0 i64 0 ) double %4 ) NEW_LINE %6 = load double %3 NEW_LINE %7 = fcmp oeq double %6 , 0.000000e+00 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load double %3 NEW_LINE %12 = load double %4 NEW_LINE %13 = fmul double %11 , %12 NEW_LINE %14 = fdiv double %13 , 2.000000e+00 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) double %14 ) NEW_LINE %16 = load double %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) double %16 ) NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 * i32 %4 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %3 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %5 NEW_LINE store i32 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp sgt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %22 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %5 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sgt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %3 NEW_LINE store i32 %28 %2 NEW_LINE %29 = load i32 %5 NEW_LINE store i32 %29 %3 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = load i32 %4
define dso_local i32 @combination ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 1 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 1 %7 NEW_LINE store i32 1 %8 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %8 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp sle i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %35 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %7 NEW_LINE %18 = add nsw i32 %16 , %17 NEW_LINE %19 = sdiv i32 %18 , 2 NEW_LINE store i32 %19 %9 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %9 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = icmp slt i32 %22 , %23 NEW_LINE br i1 %24 , label %25 , label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %9 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %26 , %27 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %9 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %8 NEW_LINE br label %11 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = add nsw i32 %37 , %36 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = icmp sgt i32 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %43 NEW_LINE 41: NEW_LINE %42 = load i32 %8 NEW_LINE store i32 %42 %6 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i32 %8 NEW_LINE %46 = add nsw i32 %45 , 1 NEW_LINE %47 = load i32 %4 NEW_LINE %48 = icmp slt i32 %46 , %47 NEW_LINE br i1 %48 , label %49 , label %50 NEW_LINE 49: NEW_LINE store i32 1 %5 NEW_LINE br label %53 NEW_LINE 50: NEW_LINE br label %51 NEW_LINE 51: NEW_LINE %52 = load i32 %8 NEW_LINE store i32 %52 %6 NEW_LINE br label %53 NEW_LINE 53: NEW_LINE %54 = load i32 %6 NEW_LINE ret i32 %54 NEW_LINE }
define dso_local double gx ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE store double %0 %4 NEW_LINE store double %1 %5 NEW_LINE %6 = load double %4 NEW_LINE %7 = load double %5 NEW_LINE %8 = fcmp olt double %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load double %4 NEW_LINE store double %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load double %5 NEW_LINE store double %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load double %3 NEW_LINE ret double %14 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 step ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %5 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = icmp eq i32 %15 , -1 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE store i32 0 %3 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = srem i32 %19 , %20 NEW_LINE %22 = icmp eq i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 1 %3 NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE store i32 %25 %3 NEW_LINE br label %27 NEW_LINE 26: NEW_LINE store i32 0 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE ret i32 %28 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @isEmpty ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 1 %1 NEW_LINE br label %6 NEW_LINE 5: NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local i32 @dead_end ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = srem i32 %11 , 2 NEW_LINE %13 = icmp eq i32 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE store i32 %8 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @root ( i32 %9 ) NEW_LINE store i32 %10 %6 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 1 %6 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = icmp eq i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE store i32 0 %6 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE ret i32 %21 NEW_LINE }
define dso_local double rad ( * STRUCT 2 double double %0 * STRUCT 2 double double %1 ) #0 { NEW_LINE %3 = alloca * STRUCT 2 double double NEW_LINE %4 = alloca * STRUCT 2 double double NEW_LINE store * STRUCT 2 double double %0 %3 NEW_LINE store * STRUCT 2 double double %1 %4 NEW_LINE %5 = load * STRUCT 2 double double %3 NEW_LINE %6 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0 NEW_LINE %7 = load double %6 NEW_LINE %8 = load * STRUCT 2 double double %4 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %8 , i32 0 , i32 0 NEW_LINE %10 = load double %9 NEW_LINE %11 = fsub double %7 , %10 NEW_LINE %12 = call double @hypot ( double %11 ) #4 NEW_LINE ret double %12 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @upll ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = bitcast * i8 %5 to * i64 NEW_LINE %7 = load i64 %6 NEW_LINE %8 = load * i8 %4 NEW_LINE %9 = bitcast * i8 %8 to * i64 NEW_LINE %10 = load i64 %9 NEW_LINE %11 = icmp slt i64 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %23 NEW_LINE 13: NEW_LINE %14 = load * i8 %3 NEW_LINE %15 = bitcast * i8 %14 to * i64 NEW_LINE %16 = load i64 %15 NEW_LINE %17 = load * i8 %4 NEW_LINE %18 = bitcast * i8 %17 to * i64 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = icmp sgt i64 %16 , %19 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , i32 1 , i32 0 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 -1 %12 , ARR 2 %22 %13 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 dist ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 0 %3 NEW_LINE br label %36 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE store i32 0 %3 NEW_LINE br label %36 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE store i32 1 %3 NEW_LINE br label %36 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %32 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = icmp slt i32 %29 , %30 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = phi i1 ARR 2 false %24 , ARR 2 %31 %28 NEW_LINE br i1 %33 , label %34 , label %35 NEW_LINE 34: NEW_LINE store i32 0 %3 NEW_LINE br label %36 NEW_LINE 35: NEW_LINE store i32 1 %6 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %6 NEW_LINE ret i32 %37 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %4 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %7 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = call i32 @primeiance ( * i32 %20 i32 %21 ) NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) i32 %17 i32 %18 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 %7 , 3600 NEW_LINE store i32 %8 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 %9 , 3600 NEW_LINE %11 = sdiv i32 %10 , 60 NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = srem i32 %12 , 60 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.1:%d:%d:%d~0A~00" i64 0 i64 0 ) i32 %14 i32 %15 i32 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i32 @root ( i32 %5 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE %9 = icmp eq i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE br label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = call i32 @root ( i32 %13 ) NEW_LINE %15 = icmp eq i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = call i32 @root ( i32 %18 ) NEW_LINE %20 = load i32 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i32 ARR 2 %15 %16 , ARR 2 %20 %17 NEW_LINE %23 = load i32 %3 NEW_LINE ret i32 %23 NEW_LINE }
define dso_local i32 datax ( * double %0 * double %1 ) #0 { NEW_LINE %3 = alloca * double NEW_LINE %4 = alloca * double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store * double %0 %3 NEW_LINE store * double %1 %4 NEW_LINE %8 = load * double %3 NEW_LINE %9 = load double %8 NEW_LINE store double %9 %5 NEW_LINE %10 = load * double %4 NEW_LINE %11 = load double %10 NEW_LINE store double %11 %6 NEW_LINE %12 = load double %5 NEW_LINE %13 = load double %6 NEW_LINE %14 = load double %5 NEW_LINE %15 = call i32 datax ( * i8 %12 double %13 double %14 ) NEW_LINE store i32 %15 %7 NEW_LINE %16 = load i32 %7 NEW_LINE %17 = load double %6 NEW_LINE %18 = load double %5 NEW_LINE %19 = call i32 datax ( * i8 %16 double %17 double %18 ) NEW_LINE store i32 %19 %8 NEW_LINE %20 = load i32 %8 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x float > @_mm256_permutevar_ps ( < 8 x float > byval ( < 8 x float > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 ) #12 { NEW_LINE %3 = alloca < 8 x float > NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = load < 8 x float > %0 NEW_LINE %6 = load < 4 x i64 > %1 NEW_LINE store < 8 x float > %5 %3 NEW_LINE store < 4 x i64 > %6 %4 NEW_LINE %7 = load < 8 x float > %3 NEW_LINE %8 = load < 4 x i64 > %4 NEW_LINE %9 = bitcast < 4 x i64 > %8 to < 8 x i32 > NEW_LINE %10 = call < 8 x float > @llvm.x86.avx.vpermilvar.ps.256 ( < 8 x float > %7 < 8 x i32 > %9 ) NEW_LINE ret < 8 x float > %10 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , %9 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 @i NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = load i32 @i NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = call double @llvm.minnum.f64 ( double %16 double %18 ) NEW_LINE %20 = fptosi double %19 to i32 NEW_LINE store i32 %20 @i NEW_LINE %21 = load i32 @i NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE store i32 %25 @i NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 @i NEW_LINE %28 = load i32 @i NEW_LINE %29 = icmp sgt i32 %27 , %28 NEW_LINE br i1 %29 , label %30 , label %32 NEW_LINE 30: NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:-1~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %34 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:0~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %2 NEW_LINE ret i32 %35 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @lenstr ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store * i8 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %8 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %44 NEW_LINE 14: NEW_LINE %15 = load * i8 %3 NEW_LINE %16 = load i32 %8 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i8 %15 , i64 %17 NEW_LINE %19 = load i8 %18 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE %21 = load * i8 %4 NEW_LINE %22 = load i32 %8 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i8 %21 , i64 %23 NEW_LINE %25 = load i8 %24 NEW_LINE %26 = sext i8 %25 to i32 NEW_LINE %27 = icmp eq i32 %20 , %26 NEW_LINE br i1 %27 , label %28 , label %40 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %5 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %6 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %5 NEW_LINE %35 = load i32 %6 NEW_LINE %36 = load i32 %5 NEW_LINE %37 = icmp sgt i32 %35 , %36 NEW_LINE br i1 %37 , label %38 , label %40 NEW_LINE 38: NEW_LINE %39 = load i32 %5 NEW_LINE store i32 %39 %8 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %8 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %8 NEW_LINE br label %10 NEW_LINE 44: NEW_LINE %45 = load i32 %5 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @ha ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %40 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE %20 = icmp eq i32 %17 , %19 NEW_LINE br i1 %20 , label %21 , label %24 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %4 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE %28 = icmp eq i32 %25 , %27 NEW_LINE br i1 %28 , label %29 , label %32 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %6 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load i32 %4 NEW_LINE ret i32 %41 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local void @push ( * * STRUCT 2 i8 * %struct.node %0 i8 signext %1 ) #0 { NEW_LINE %3 = alloca * * STRUCT 2 i8 * %struct.node NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca * STRUCT 2 i8 * %struct.node NEW_LINE store * * STRUCT 2 i8 * %struct.node %0 %3 NEW_LINE store i8 %1 %4 NEW_LINE %6 = call noalias * i8 @calloc ( i64 1 i64 16 ) #4 NEW_LINE %7 = bitcast * i8 %6 to * STRUCT 2 i8 * %struct.node NEW_LINE store * STRUCT 2 i8 * %struct.node %7 %5 NEW_LINE %8 = load * STRUCT 2 i8 * %struct.node %5 NEW_LINE %9 = icmp eq * STRUCT 2 i8 * %struct.node %8 , null NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE call void @exit ( i32 1 ) #5 NEW_LINE unreachable NEW_LINE 11: NEW_LINE %12 = load i8 %4 NEW_LINE %13 = load * STRUCT 2 i8 * %struct.node %5 NEW_LINE %14 = getelementptr inbounds STRUCT 2 i8 * %struct.node %13 , i32 0 , i32 0 NEW_LINE store i8 %12 %14 NEW_LINE %15 = load * * STRUCT 2 i8 * %struct.node %5 NEW_LINE %16 = load * STRUCT 2 i8 * %struct.node %5 NEW_LINE %17 = getelementptr inbounds STRUCT 2 i8 * %struct.node %16 , i32 0 , i32 1 NEW_LINE store * STRUCT 2 i8 * %struct.node %15 %17 NEW_LINE %18 = load * STRUCT 2 i8 * %struct.node %5 NEW_LINE %19 = load * * STRUCT 2 i8 * %struct.node %5 NEW_LINE %20 = getelementptr inbounds STRUCT 2 i8 * %struct.node %19 , i32 0 , i32 0 NEW_LINE store i8 %18 %20 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 @treeMinimum ( * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %5 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %5 NEW_LINE %7 = icmp ne * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %6 , null NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %9 , i32 0 , i32 1 NEW_LINE %11 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %10 NEW_LINE store * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %11 %2 NEW_LINE br label %3 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %2 NEW_LINE ret * STRUCT 4 * %struct.node * %struct.node * %struct.node i32 %13 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %4 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %7 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = call i32 @primeiance ( * i32 %20 i32 %21 ) NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %32 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE store i32 %28 %6 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = load i32 %7 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %8 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = load i32 %9 NEW_LINE %40 = add nsw i32 %38 , %39 NEW_LINE %41 = load i32 %10 NEW_LINE %42 = add nsw i32 %40 , %41 NEW_LINE %43 = load i32 %11 NEW_LINE %44 = add nsw i32 %42 , %43 NEW_LINE %45 = load i32 %8 NEW_LINE %46 = add nsw i32 %44 , %45 NEW_LINE %47 = load i32 %11 NEW_LINE %48 = add nsw i32 %46 , %47 NEW_LINE %49 = load i32 %8 NEW_LINE %50 = add nsw i32 %48 , %49 NEW_LINE store i32 %50 %8 NEW_LINE %51 = load i32 %8 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %19 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE store i32 %18 %7 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp slt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE store i32 %24 %7 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %6 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = icmp sgt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE store i32 %30 %8 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = load i32 %7 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE store i32 %36 %7 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %7 NEW_LINE %39 = load i32 %8 NEW_LINE %40 = load i32 %9 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %38 i32 %39 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @get_int2 ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local double @dbzt ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE store double %0 %3 NEW_LINE store double %1 %4 NEW_LINE %5 = load double %3 NEW_LINE %6 = load double %4 NEW_LINE %7 = call double @dbmax ( double %5 double %6 ) NEW_LINE %8 = load double %3 NEW_LINE %9 = load double %4 NEW_LINE %10 = call double @dbmin ( double %8 double %9 ) NEW_LINE %11 = fsub double %7 , %10 NEW_LINE ret double %11 NEW_LINE }
define dso_local i32 @gcd ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = srem i32 %5 , %6 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = srem i32 %11 , %12 NEW_LINE %14 = call i32 @gcd ( i32 %10 i32 %13 ) NEW_LINE br label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = phi i32 ARR 2 %14 %9 , ARR 2 %16 %15 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 * i32 %8 ) NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE store i32 %15 %9 NEW_LINE %16 = load i32 %6 NEW_LINE store i32 %16 %7 NEW_LINE %17 = load i32 %9 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %26 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE store i32 %23 %9 NEW_LINE %24 = load i32 %7 NEW_LINE store i32 %24 %6 NEW_LINE %25 = load i32 %9 NEW_LINE store i32 %25 %7 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = icmp slt i32 %27 , %28 NEW_LINE br i1 %29 , label %30 , label %32 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE store i32 %31 %9 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %7 NEW_LINE %34 = load i32 %8 NEW_LINE %35 = icmp slt i32 %33 , %34 NEW_LINE br i1 %35 , label %36 , label %38 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %40 NEW_LINE 38: NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %40 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 steps ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 0 %4 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = sitofp i32 %7 to double NEW_LINE %9 = call double @sqrt ( double %8 ) #3 NEW_LINE %10 = fptosi double %9 to i32 NEW_LINE store i32 %10 %5 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %6 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local double hos ( double %0 double %1 ) #0 { NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE store double %0 %4 NEW_LINE store double %1 %5 NEW_LINE %6 = load double %4 NEW_LINE %7 = load double %5 NEW_LINE %8 = fcmp ogt double %6 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load double %4 NEW_LINE store double %10 %3 NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load double %5 NEW_LINE store double %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load double %3 NEW_LINE ret double %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %5 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = icmp sle i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %44 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = add nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = icmp sle i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %40 NEW_LINE 23: NEW_LINE %24 = load i32 %5 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = add nsw i32 %24 , %25 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = icmp sle i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %40 NEW_LINE 29: NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %6 NEW_LINE %32 = load i32 %8 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %8 NEW_LINE %34 = load i32 %8 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %9 NEW_LINE %36 = load i32 %9 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %10 NEW_LINE %38 = load i32 %9 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %11 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %5 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %5 NEW_LINE br label %13 NEW_LINE 44: NEW_LINE %45 = load i32 %6 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i32 @root ( i32 %5 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE %9 = icmp eq i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE br label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = call i32 @root ( i32 %13 ) NEW_LINE %15 = icmp eq i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = call i32 @root ( i32 %18 ) NEW_LINE %20 = load i32 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i32 ARR 2 0 %16 , ARR 2 %20 %17 NEW_LINE %23 = load i32 %3 NEW_LINE ret i32 %23 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @prime ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE store i64 0 %4 NEW_LINE store i64 1 %5 NEW_LINE store i64 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %6 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = icmp slt i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %44 NEW_LINE 13: NEW_LINE %14 = load i64 %5 NEW_LINE %15 = load i64 %6 NEW_LINE %16 = add nsw i64 %14 , %15 NEW_LINE %17 = sdiv i64 %16 , 2 NEW_LINE store i64 %17 %7 NEW_LINE %18 = load i64 %7 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = icmp slt i64 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE store i32 0 %2 NEW_LINE br label %45 NEW_LINE 22: NEW_LINE %23 = load i64 %7 NEW_LINE %24 = load i64 %3 NEW_LINE %25 = icmp slt i64 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %27 NEW_LINE 26: NEW_LINE store i32 1 %2 NEW_LINE br label %45 NEW_LINE 27: NEW_LINE %28 = load i64 %7 NEW_LINE %29 = load i64 %3 NEW_LINE %30 = icmp slt i64 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %33 NEW_LINE 31: NEW_LINE %32 = load i64 %7 NEW_LINE store i64 %32 %8 NEW_LINE br label %44 NEW_LINE 33: NEW_LINE %34 = load i64 %7 NEW_LINE %35 = load i64 %3 NEW_LINE %36 = icmp slt i64 %34 , %35 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load i64 %3 NEW_LINE %39 = load i64 %6 NEW_LINE call void @swap ( i64 %38 i64 %39 ) NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i64 %6 NEW_LINE %43 = add nsw i64 %42 , 1 NEW_LINE store i64 %43 %6 NEW_LINE br label %9 NEW_LINE 44: NEW_LINE
define < 4 x float > @_mm_cvtpi32_ps ( < 4 x float > %0 double %1 ) #7 { NEW_LINE %3 = alloca < 1 x i64 > NEW_LINE %4 = alloca < 4 x float > NEW_LINE %5 = alloca < 1 x i64 > NEW_LINE * %6 = bitcast < 1 x i64 > %3 to * double NEW_LINE store double %1 %6 NEW_LINE %7 = load < 1 x i64 > %3 NEW_LINE store < 4 x float > %0 %4 NEW_LINE store < 1 x i64 > %7 %5 NEW_LINE %8 = load < 4 x float > %4 NEW_LINE %9 = load < 1 x i64 > %5 NEW_LINE %10 = bitcast < 1 x i64 > %9 to < 2 x i32 > NEW_LINE %11 = bitcast < 2 x i32 > %10 to x86_mmx NEW_LINE %12 = call < 4 x float > @llvm.x86.sse.cvtpi2ps ( < 4 x float > %8 x86_mmx %11 ) NEW_LINE ret < 4 x float > %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %5 = load double %2 NEW_LINE %6 = load double %2 NEW_LINE %7 = fmul double %5 , %6 NEW_LINE %8 = fmul double %7 , 0x400921FB5444261E NEW_LINE %9 = load double %2 NEW_LINE %10 = fmul double 2.000000e+00 , %9 NEW_LINE %11 = fmul double %10 , 0x400921FB5444261E NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%f ▁ %f~0A~00" i64 0 i64 0 ) double %8 double %11 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf ▁ %lf~00" i64 0 i64 0 ) * double %6 * double %7 ) NEW_LINE %12 = load double %6 NEW_LINE %13 = load double %7 NEW_LINE %14 = fdiv double %12 , %13 NEW_LINE %15 = call double @llvm.ceil.f64 ( double %14 ) NEW_LINE %16 = fptosi double %15 to i32 NEW_LINE store i32 %16 %8 NEW_LINE %17 = load i32 %8 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @in ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define < 4 x i64 > @_mm256_madd52hi_epu64 ( < 4 x i64 > byval ( < 4 x i64 > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x i64 > byval ( < 4 x i64 > ) %2 ) #42 { NEW_LINE %4 = alloca < 4 x i64 > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x i64 > NEW_LINE %7 = load < 4 x i64 > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x i64 > %2 NEW_LINE store < 4 x i64 > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x i64 > %9 %6 NEW_LINE %10 = load < 4 x i64 > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x i64 > %6 NEW_LINE %13 = call < 4 x i64 > @llvm.x86.avx512.vpmadd52h.uq.256 ( < 4 x i64 > %10 < 4 x i64 > %11 < 4 x i64 > %12 ) NEW_LINE ret < 4 x i64 > %13 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define < 4 x double > @_mm256_permutex2var_pd ( < 4 x double > byval ( < 4 x double > ) %0 < 4 x i64 > byval ( < 4 x i64 > ) %1 < 4 x double > byval ( < 4 x double > ) %2 ) #20 { NEW_LINE %4 = alloca < 4 x double > NEW_LINE %5 = alloca < 4 x i64 > NEW_LINE %6 = alloca < 4 x double > NEW_LINE %7 = load < 4 x double > %0 NEW_LINE %8 = load < 4 x i64 > %1 NEW_LINE %9 = load < 4 x double > %2 NEW_LINE store < 4 x double > %7 %4 NEW_LINE store < 4 x i64 > %8 %5 NEW_LINE store < 4 x double > %9 %6 NEW_LINE %10 = load < 4 x double > %4 NEW_LINE %11 = load < 4 x i64 > %5 NEW_LINE %12 = load < 4 x double > %6 NEW_LINE %13 = call < 4 x double > @llvm.x86.avx512.vpermi2var.pd.256 ( < 4 x double > %10 < 4 x i64 > %11 < 4 x double > %12 ) NEW_LINE ret < 4 x double > %13 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %44 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %10 * i32 %11 ) NEW_LINE %18 = load i32 %10 NEW_LINE %19 = load i32 %11 NEW_LINE %20 = icmp slt i32 %18 , %19 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE store i32 0 %9 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %10 NEW_LINE %24 = load i32 %11 NEW_LINE %25 = icmp slt i32 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %30 NEW_LINE 26: NEW_LINE %27 = load i32 %10 NEW_LINE store i32 %27 %11 NEW_LINE %28 = load i32 %11 NEW_LINE store i32 %28 %10 NEW_LINE %29 = load i32 %9 NEW_LINE store i32 %29 %11 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %10 NEW_LINE %32 = load i32 %11 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %40 NEW_LINE 34: NEW_LINE %35 = load i32 %10 NEW_LINE store i32 %35 %11 NEW_LINE %36 = load i32 %11 NEW_LINE store i32 %36 %12 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %12 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %12 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %8 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %8 NEW_LINE br label %12 NEW_LINE 44: NEW_LINE %45 = load i32 %3 NEW_LINE %46 = load i32 %4 NEW_LINE %47 = add nsw i32 %45 , %46 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %19 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE store i32 %18 %7 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp sgt i32 %20 , %21 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE store i32 %24 %7 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %6 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = icmp sgt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE store i32 %30 %8 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = load i32 %7 NEW_LINE %34 = icmp sgt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE store i32 %36 %7 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 =
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %33 = load i32 %2 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = icmp slt i32 %33 , %34 NEW_LINE br i1 %35 , label %36 , label %40 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , %37 NEW_LINE store i32 %39 %5 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %5 NEW_LINE %46 = load i32 %6 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 50: NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 52: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE store i32 0 %14 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %33 = load i32 %2 NEW_LINE %34 = load i32 %5 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %5 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = icmp sgt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %40 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %9 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %9 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %8 NEW_LINE %46 = load i32 %9 NEW_LINE %47 = icmp sgt i32 %45 , %46 NEW_LINE br i1 %47 , label %48 , label %50 NEW_LINE 48: NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 50: NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %52 NEW_LINE 52: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @z ( double %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store double %0 %2 NEW_LINE %3 = load double %2 NEW_LINE %4 = fcmp olt double %3 , 0.000000e+00 NEW_LINE br i1 %4 , label %5 , label %8 NEW_LINE 5: NEW_LINE %6 = load double %2 NEW_LINE %7 = fneg double %6 NEW_LINE store double %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load double %2 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @nCr ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 1 %6 NEW_LINE store i32 1 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp sle i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %24 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sub nsw i32 %13 , %14 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = mul nsw i32 %16 , %15 NEW_LINE store i32 %17 %6 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sdiv i32 %19 , %18 NEW_LINE store i32 %20 %6 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %5 NEW_LINE br label %7 NEW_LINE 24: NEW_LINE %25 = load i32 %6 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 pi ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE br label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %2 NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE store i32 %15 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @search ( i32 %0 * i32 %1 i32 %2 ) #0 { NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 %0 %4 NEW_LINE store * i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE store i32 0 %7 NEW_LINE %10 = load i32 %6 NEW_LINE %11 = sub nsw i32 %10 , 1 NEW_LINE store i32 %11 %8 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = load i32 %8 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %35 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = load i32 %8 NEW_LINE %19 = add nsw i32 %17 , %18 NEW_LINE %20 = sdiv i32 %19 , 2 NEW_LINE store i32 %20 %9 NEW_LINE %21 = load * i32 %5 NEW_LINE %22 = load i32 %9 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i32 %21 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %31 NEW_LINE 28: NEW_LINE %29 = load i32 %9 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %7 NEW_LINE br label %34 NEW_LINE 31: NEW_LINE %32 = load i32 %9 NEW_LINE %33 = sub nsw i32 %32 , 1 NEW_LINE store i32 %33 %8 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %12 NEW_LINE 35: NEW_LINE %36 = load i32 %7 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @dbsortfnckj ( * i8 %0 * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE %6 = load * i8 %4 NEW_LINE %7 = bitcast * i8 %6 to * double NEW_LINE %8 = load double %7 NEW_LINE %9 = load * i8 %5 NEW_LINE %10 = bitcast * i8 %9 to * double NEW_LINE %11 = load double %10 NEW_LINE %12 = fcmp olt double %8 , %11 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE store i32 1 %3 NEW_LINE br label %24 NEW_LINE 14: NEW_LINE %15 = load * i8 %4 NEW_LINE %16 = bitcast * i8 %15 to * double NEW_LINE %17 = load double %16 NEW_LINE %18 = load * i8 %5 NEW_LINE %19 = bitcast * i8 %18 to * double NEW_LINE %20 = load double %19 NEW_LINE %21 = fcmp oeq double %17 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE store i32 -1 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local double @dist ( double %0 double %1 double %2 double %3 ) #0 { NEW_LINE %5 = alloca STRUCT 2 double double NEW_LINE %6 = alloca STRUCT 2 double double NEW_LINE %7 = bitcast * STRUCT 2 double double %5 to * STRUCT 2 double double NEW_LINE %8 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 0 NEW_LINE store double %0 %8 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %7 , i32 0 , i32 1 NEW_LINE store double %1 %9 NEW_LINE %10 = bitcast * STRUCT 2 double double %6 to * STRUCT 2 double double NEW_LINE %11 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 0 NEW_LINE store double %2 %11 NEW_LINE %12 = getelementptr inbounds STRUCT 2 double double %10 , i32 0 , i32 1 NEW_LINE store double %3 %12 NEW_LINE %13 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0 NEW_LINE %14 = load double %13 NEW_LINE %15 = getelementptr inbounds STRUCT 2 double double %6 , i32 0 , i32 1 NEW_LINE %16 = load double %15 NEW_LINE %17 = fsub double %14 , %16 NEW_LINE %18 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0 NEW_LINE %19 = load double %18 NEW_LINE %20 = getelementptr inbounds STRUCT 2 double double %6 , i32 0 , i32 1 NEW_LINE %21 = load double %20 NEW_LINE %22 = fsub double %19 , %21 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = fadd double %18 , %23 NEW_LINE %25 = call double @sqrt ( double %24 ) #4 NEW_LINE ret double %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE %12 = alloca i32 NEW_LINE %13 = alloca i32 NEW_LINE %14 = alloca i32 NEW_LINE %15 = alloca i32 NEW_LINE %16 = alloca i32 NEW_LINE %17 = alloca i32 NEW_LINE %18 = alloca i32 NEW_LINE %19 = alloca i32 NEW_LINE %20 = alloca i32 NEW_LINE %21 = alloca i32 NEW_LINE %22 = alloca i32 NEW_LINE %23 = alloca i32 NEW_LINE %24 = alloca i32 NEW_LINE %25 = alloca i32 NEW_LINE %26 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %9 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %33 = load i32 %8 NEW_LINE %34 = load i32 %9 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE store i32 %35 %2 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %8 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %9 NEW_LINE %40 = load i32 %9 NEW_LINE %41 = add nsw i32 %40 , 1 NEW_LINE store i32 %41 %10 NEW_LINE %42 = load i32 %10 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %11 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %11 NEW_LINE %46 = load i32 %10 NEW_LINE %47 = load i32 %11 NEW_LINE %48 = add nsw i32 %46 , %47 NEW_LINE %49 = icmp slt i32 %45 , %48 NEW_LINE br i1 %49 , label %50 , label %40 NEW_LINE 50: NEW_LINE %51 = load i32 %11 NEW_LINE %52 = load i32 %10 NEW_LINE %53 = add nsw i32 %51 , 1 NEW_LINE store i32 %52 %12 NEW_LINE br label %54 NEW_LINE 54: NEW_LINE %55 = load i32 %12 NEW_LINE %56 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %55 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %32 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE store i32 %28 %6 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = load i32 %7 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %8 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = load i32 %9 NEW_LINE %40 = add nsw i32 %38 , %39 NEW_LINE %41 = load i32 %10 NEW_LINE %42 = add nsw i32 %40 , %41 NEW_LINE %43 = load i32 %11 NEW_LINE %44 = add nsw i32 %42 , %43 NEW_LINE %45 = load i32 %8 NEW_LINE %46 = add nsw i32 %44 , %45 NEW_LINE %47 = load i32 %11 NEW_LINE %48 = add nsw i32 %46 , %47 NEW_LINE %49 = load i32 %8 NEW_LINE %50 = add nsw i32 %48 , %49 NEW_LINE store i32 %50 %8 NEW_LINE %51 = load i32 %8 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 rad ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %5 = load * i32 %3 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load * i32 %4 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = sub nsw i32 %6 , %8 NEW_LINE ret i32 %9 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @dead_end ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = srem i32 %11 , 2 NEW_LINE %13 = icmp eq i32 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 1 %3 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 kazu ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %44 NEW_LINE 14: NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i32 %15 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = icmp eq i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %25 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %5 NEW_LINE br label %40 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = icmp slt i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %40 NEW_LINE 29: NEW_LINE %30 = load * i32 %3 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds i32 %30 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE store i32 %34 %7 NEW_LINE %35 = load i32 %5 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %6 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %5 NEW_LINE br label %37 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %6 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %6 NEW_LINE br label %10 NEW_LINE 44: NEW_LINE %45 = load i32 %5 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %9 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%d%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %5 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %23 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %17 = load i32 %6 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %5 NEW_LINE br label %11 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp sge i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 29: NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define < 8 x i64 > @_mm512_unpacklo_epi8 ( < 8 x i64 > byval ( < 8 x i64 > ) %0 < 8 x i64 > byval ( < 8 x i64 > ) %1 ) #22 { NEW_LINE %3 = alloca < 8 x i64 > NEW_LINE %4 = alloca < 8 x i64 > NEW_LINE %5 = load < 8 x i64 > %0 NEW_LINE %6 = load < 8 x i64 > %1 NEW_LINE store < 8 x i64 > %5 %3 NEW_LINE store < 8 x i64 > %6 %4 NEW_LINE %7 = load < 8 x i64 > %3 NEW_LINE %8 = bitcast < 8 x i64 > %7 to < 64 x i8 > NEW_LINE %9 = load < 8 x i64 > %4 NEW_LINE %10 = bitcast < 8 x i64 > %9 to < 64 x i8 > NEW_LINE %11 = shufflevector < 64 x i8 > %8 , < 64 x i8 > %10 , < 64 x i32 > < i32 0 , i32 64 , i32 1 , i32 65 , i32 2 , i32 66 , i32 3 , i32 67 , i32 4 , i32 68 , i32 5 , i32 69 , i32 6 , i32 70 , i32 7 , i32 71 , i32 16 , i32 80 , i32 17 , i32 81 , i32 18 , i32 82 , i32 19 , i32 83 , i32 20 , i32 84 , i32 21 , i32 85 , i32 22 , i32 86 , i32 23 , i32 87 , i32 32 , i32 96 , i32 33 , i32 97 , i32 34 , i32 98 , i32 35 , i32 99 , i32 36 , i32 100 , i32 37 , i32 101 , i32 38 , i32 102 , i32 39 , i32 103 , i32 48 , i32 112 , i32 49 , i32 113 , i32 50 , i32 114 , i32 51 , i32 115 , i32 52 , i32 116 , i32 53 , i32 117 , i32 54 , i32 118 , i32 55 , i32 119 > NEW_LINE %12 = bitcast < 64 x i8 > %11 to < 8 x i64 > NEW_LINE ret < 8 x i64 > %12 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %32 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE store i32 %28 %6 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = load i32 %7 NEW_LINE %35 = add nsw i32 %33 , %34 NEW_LINE %36 = load i32 %8 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %8 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = load i32 %9 NEW_LINE %40 = add nsw i32 %38 , %39 NEW_LINE %41 = load i32 %10 NEW_LINE %42 = add nsw i32 %40 , %41 NEW_LINE %43 = load i32 %11 NEW_LINE %44 = add nsw i32 %42 , %43 NEW_LINE %45 = load i32 %8 NEW_LINE %46 = add nsw i32 %44 , %45 NEW_LINE %47 = load i32 %11 NEW_LINE %48 = add nsw i32 %46 , %47 NEW_LINE %49 = load i32 %8 NEW_LINE %50 = add nsw i32 %48 , %49 NEW_LINE store i32 %50 %8 NEW_LINE %51 = load i32 %8 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define zeroext i16 @__uint16_identity ( i16 zeroext %0 ) #0 { NEW_LINE %2 = alloca i16 NEW_LINE store i16 %0 %2 NEW_LINE %3 = load i16 %2 NEW_LINE ret i16 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %14 ) NEW_LINE %34 = load double %14 NEW_LINE %35 = load double %14 NEW_LINE %36 = fadd double %34 , %35 NEW_LINE store double %36 %15 NEW_LINE %37 = load double %14 NEW_LINE %38 = load double %14 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %16 NEW_LINE %40 = load double %15 NEW_LINE %41 = load double %16 NEW_LINE %42 = fadd double %40 , %41 NEW_LINE store double %42 %18 NEW_LINE %43 = load double %2 NEW_LINE store double %43 %19 NEW_LINE br label %45 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load double %9 NEW_LINE %47 = load double %15 NEW_LINE %48 = fadd double %47 , %46 NEW_LINE store double %48 %17 NEW_LINE %49 = load double %17 NEW_LINE %50 = load double %18 NEW_LINE %51 = load double %19 NEW_LINE %52 = fadd double %51 , %50 NEW_LINE store double %52 %18 NEW_LINE %53 = load double %18 NEW_LINE %54 = load double %19 NEW_LINE %55 = fadd double %54 , %53 NEW_LINE store double %55 %19 NEW_LINE %56 = load double %18 NEW_LINE %57 = load double %19 NEW_LINE %58 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.8lf~0A~00" i64 0 i64 0 ) double %56 ) NEW_LINE ret i32 0 NEW_LINE }
define < 8 x double > @_mm512_set1_pd ( double %0 ) #17 { NEW_LINE %2 = alloca double NEW_LINE %3 = alloca < 8 x double > NEW_LINE store double %0 %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = insertelement < 8 x double > undef , double %4 , i32 0 NEW_LINE %6 = load double %2 NEW_LINE %7 = insertelement < 8 x double > %5 , double %6 , i32 1 NEW_LINE %8 = load double %2 NEW_LINE %9 = insertelement < 8 x double > %7 , double %8 , i32 2 NEW_LINE %10 = load double %2 NEW_LINE %11 = insertelement < 8 x double > %9 , double %10 , i32 3 NEW_LINE %12 = load double %2 NEW_LINE %13 = insertelement < 8 x double > %11 , double %12 , i32 4 NEW_LINE %14 = load double %2 NEW_LINE %15 = insertelement < 8 x double > %13 , double %14 , i32 5 NEW_LINE %16 = load double %2 NEW_LINE %17 = insertelement < 8 x double > %15 , double %16 , i32 6 NEW_LINE %18 = load double %2 NEW_LINE %19 = insertelement < 8 x double > %17 , double %18 , i32 7 NEW_LINE store < 8 x double > %19 %3 NEW_LINE %20 = load < 8 x double > %3 NEW_LINE ret < 8 x double > %20 NEW_LINE }
define dso_local double input_l ( ) #0 { NEW_LINE %1 = alloca double NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %1 ) NEW_LINE %3 = load double %1 NEW_LINE ret double %3 NEW_LINE }
define dso_local i32 @zt ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = call i32 @max ( i32 %5 i32 %6 ) NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @min ( i32 %8 i32 %9 ) NEW_LINE %11 = sub nsw i32 %7 , %10 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE store i32 1 %8 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %8 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %40 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = srem i32 %17 , 3 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %24 NEW_LINE 20: NEW_LINE %21 = load i32 %8 NEW_LINE %22 = srem i32 %21 , 5 NEW_LINE %23 = icmp eq i32 %22 , 0 NEW_LINE br i1 %23 , label %34 , label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %8 NEW_LINE %26 = srem i32 %25 , 3 NEW_LINE %27 = icmp eq i32 %26 , 0 NEW_LINE br i1 %27 , label %34 , label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %9 NEW_LINE %30 = srem i32 %29 , 5 NEW_LINE %31 = icmp eq i32 %30 , 0 NEW_LINE br i1 %31 , label %34 , label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %9 NEW_LINE store i32 %33 %10 NEW_LINE br label %36 NEW_LINE 34: NEW_LINE %35 = load i32 %9 NEW_LINE store i32 %35 %10 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %8 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %8 NEW_LINE br label %12 NEW_LINE 40: NEW_LINE %41 = load i32 %10 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp sgt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %21 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE store i32 %18 %4 NEW_LINE %19 = load i32 %3 NEW_LINE store i32 %19 %2 NEW_LINE %20 = load i32 %4 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d ▁ %d~0A~00" i64 0 i64 0 ) i32 %22 i32 %23 ) NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %5 , %6 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:a ▁ < ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %16 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:a ▁ > ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.3:a ▁ == ▁ b~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE %14 = alloca double NEW_LINE %15 = alloca double NEW_LINE %16 = alloca double NEW_LINE %17 = alloca double NEW_LINE %18 = alloca double NEW_LINE %19 = alloca double NEW_LINE %20 = alloca double NEW_LINE %21 = alloca double NEW_LINE %22 = alloca double NEW_LINE %23 = alloca double NEW_LINE %24 = alloca double NEW_LINE %25 = alloca double NEW_LINE %26 = alloca double NEW_LINE %27 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE store double 0.000000e+00 %9 NEW_LINE store double 0.000000e+00 %10 NEW_LINE store double 0.000000e+00 %11 NEW_LINE store double 0.000000e+00 %12 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load double %9 NEW_LINE %30 = load double %10 NEW_LINE %31 = fcmp slt double %29 , %30 NEW_LINE br i1 %31 , label %32 , label %44 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 ) NEW_LINE %34 = load double %2 NEW_LINE %35 = load double %3 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %5 NEW_LINE %38 = load double %6 NEW_LINE %39 = call double @@distance ( double %34 double %35 double %36 double %37 double %38 double %39 ) NEW_LINE %40 = load double %2 NEW_LINE store double %40 %12 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load double %9 NEW_LINE %43 = load double %10 NEW_LINE %44 = load double %11 NEW_LINE %45 = load double %12 NEW_LINE %46 = call i32 @@distance ( double %42 double %43 double %44 double %45 double %46 double %47 ) NEW_LINE store i32 %48 %13 NEW_LINE %47 = load i32 %13 NEW_LINE %48 = load i32 %14 NEW_LINE %49 = load double %15 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.1:%d ▁ %d ▁ %lf~0A~00" i64 0 i64 0 ) i32 %47 i32 %48 double %49 double %50 double %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @anananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananananan
define dso_local i32 @getint ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %5 = load double %2 NEW_LINE %6 = load double %2 NEW_LINE %7 = fmul double %5 , %6 NEW_LINE %8 = fmul double %7 , 0x400921FB5444261E NEW_LINE %9 = load double %2 NEW_LINE %10 = fmul double 2.000000e+00 , %9 NEW_LINE %11 = fmul double %10 , 0x400921FB5444261E NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str.1:%lf ▁ %lf~0A~00" i64 0 i64 0 ) double %8 double %11 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @same ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i32 @root ( i32 %5 ) NEW_LINE %7 = load i32 %4 NEW_LINE %8 = call i32 @root ( i32 %7 ) NEW_LINE %9 = icmp eq i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE br label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = call i32 @root ( i32 %13 ) NEW_LINE %15 = icmp eq i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %21 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = call i32 @root ( i32 %18 ) NEW_LINE %20 = load i32 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i32 ARR 2 %15 %16 , ARR 2 %20 %17 NEW_LINE %23 = load i32 %3 NEW_LINE ret i32 %23 NEW_LINE }
define i32 @__uint32_identity ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 1000 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:0~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i8 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %5 = load i8 %2 NEW_LINE %6 = sext i8 %5 to i32 NEW_LINE %7 = add nsw i32 %6 , 1 NEW_LINE %8 = trunc i32 %7 to i8 NEW_LINE store i8 %8 %3 NEW_LINE %9 = load i8 %3 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%c~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @get_int ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE %11 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %9 NEW_LINE store i32 0 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %18 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE store i32 %17 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE store i32 0 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %40 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %28 , %29 NEW_LINE store i32 %30 %9 NEW_LINE %31 = load i32 %9 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = icmp slt i32 %31 , %32 NEW_LINE br i1 %33 , label %34 , label %36 NEW_LINE 34: NEW_LINE %35 = load i32 %2 NEW_LINE store i32 %35 %10 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %2 NEW_LINE br label %23 NEW_LINE 40: NEW_LINE %41 = load i32 %6 NEW_LINE %42 = load i32 %7 NEW_LINE %43 = icmp sgt i32 %41 , %42 NEW_LINE br i1 %43 , label %44 , label %46 NEW_LINE 44: NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:Yes~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %48 NEW_LINE 46: NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:No~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %48 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 90 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 0 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%s ▁ %s~00" i64 0 i64 0 ) * i8 %6 * i8 getelementptr inbounds ( ARR 3 90 x i8 %2 i64 0 i64 0 ) ) NEW_LINE %8 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 0 NEW_LINE %9 = call i64 @strlen ( * i8 %8 ) #3 NEW_LINE %10 = trunc i64 %9 to i32 NEW_LINE store i32 %10 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %40 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i8 %18 NEW_LINE %20 = sext i8 %19 to i32 NEW_LINE %21 = icmp eq i32 %20 , 90 NEW_LINE br i1 %21 , label %22 , label %36 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i8 %25 NEW_LINE %27 = sext i8 %26 to i32 NEW_LINE %28 = icmp eq i32 %27 , 90 NEW_LINE br i1 %28 , label %29 , label %36 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 90 x i8 %2 , i64 0 , i64 %31 NEW_LINE %33 = load i8 %32 NEW_LINE %34 = sext i8 %33 to i32 NEW_LINE %35 = icmp eq i32 %34 , 90 NEW_LINE br i1 %35 , label %36 , label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %3 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %3 NEW_LINE br label %14 NEW_LINE 40: NEW_LINE %41 = load i32 %3 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @get_int ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %1 ) NEW_LINE %3 = load i32 %1 NEW_LINE ret i32 %3 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 1000 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:0~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:1~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = srem i32 %5 , 10 NEW_LINE store i32 %6 %3 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 3 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:bon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %23 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %23 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 6 NEW_LINE br i1 %19 , label %23 , label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 8 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:pon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.3:hon~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
