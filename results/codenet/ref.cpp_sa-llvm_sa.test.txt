define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @s NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @s NEW_LINE ret void NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE ret void NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE ret void NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE ret void NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 %2 NEW_LINE %5 = mul nsw i32 %3 , %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local double @pow2 ( double %0 ) #0 { NEW_LINE %2 = alloca double NEW_LINE store double %0 %2 NEW_LINE %3 = load double %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = fmul double %3 , %4 NEW_LINE ret double %5 NEW_LINE }
define dso_local double @pow2 ( double %0 ) #0 { NEW_LINE %2 = alloca double NEW_LINE store double %0 %2 NEW_LINE %3 = load double %2 NEW_LINE %4 = load double %2 NEW_LINE %5 = fmul double %3 , %4 NEW_LINE ret double %5 NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE ret void NEW_LINE }
define dso_local i32 @top ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = sub nsw i32 %1 , 1 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %3 NEW_LINE %5 = load i32 %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local i32 @top ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = sub nsw i32 %1 , 1 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 10 x i32 @data , i64 0 , i64 %3 NEW_LINE %5 = load i32 %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local i32 @top ( ) #0 { NEW_LINE %1 = load i32 @s NEW_LINE %2 = sub nsw i32 %1 , 1 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 10 x i32 @syr , i64 0 , i64 %3 NEW_LINE %5 = load i32 %4 NEW_LINE ret i32 %5 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @i NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 10 x i32 @data , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE ret void NEW_LINE }
define dso_local * i8 @stralloc ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE store i64 %0 %2 NEW_LINE %3 = load i64 %2 NEW_LINE %4 = add i64 %3 , 1 NEW_LINE %5 = call noalias * i8 @calloc ( i64 %4 i64 1 ) #6 NEW_LINE ret * i8 %5 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE %3 = load i32 @sp NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @stack_top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @stack_top NEW_LINE %3 = load i32 @stack_top NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 11 x i32 @stack , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE ret i32 %6 NEW_LINE }
define dso_local void @push ( ) #0 { NEW_LINE %1 = load i32 @num NEW_LINE %2 = load i32 @idx NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 100 x i32 @train , i64 0 , i64 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 @idx NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE store i32 %6 @idx NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @depot ( i32 0 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @sp NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @sp NEW_LINE %3 = load i32 @sp NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 11 x i32 @stack , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE ret i32 %6 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @s , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = load i32 @top NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @top NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @s , i64 0 , i64 %5 NEW_LINE %7 = load i32 %6 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local void @push ( ) #0 { NEW_LINE %1 = load i32 @num NEW_LINE %2 = load i32 @idx NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 100 x i32 @train , i64 0 , i64 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 @idx NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE store i32 %6 @idx NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @sp NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @sp NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @top NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 @top NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 11 x i32 @s , i64 0 , i64 %7 NEW_LINE store i32 %5 %8 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @sp NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @sp NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @top NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 @top NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 11 x i32 @s , i64 0 , i64 %7 NEW_LINE store i32 %5 %8 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @top NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 @top NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %7 NEW_LINE store i32 %5 %8 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @sp NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @sp NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @sp NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @sp NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 @sp NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %7 NEW_LINE store i32 %5 %8 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @stack_top NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @stack , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE %7 = load i32 @stack_top NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @stack_top NEW_LINE ret void NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @top NEW_LINE %3 = add nsw i32 %2 , -1 NEW_LINE store i32 %3 @top NEW_LINE %4 = sext i32 %2 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE store i32 %6 %1 NEW_LINE %7 = load i32 %1 NEW_LINE ret i32 %7 NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @idx NEW_LINE %2 = add nsw i32 %1 , -1 NEW_LINE store i32 %2 @idx NEW_LINE %3 = load i32 @idx NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 100 x i32 @train , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @top NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @top NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @sp NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 11 x i32 @stack , i64 0 , i64 %5 NEW_LINE store i32 %3 %6 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @sp NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE %2 = load i32 @i NEW_LINE %3 = mul nsw i32 %2 , %1 NEW_LINE store i32 %3 @i NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @pop ( ) #0 { NEW_LINE %1 = load i32 @idx NEW_LINE %2 = sub nsw i32 %1 , 1 NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds ARR 3 100 x i32 @train , i64 0 , i64 %3 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %5 ) NEW_LINE %7 = load i32 @idx NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 @idx NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %4 = load double %2 NEW_LINE %5 = call double @factorial ( double %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.0lf~0A~00" i64 0 i64 0 ) double %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE %2 = icmp ne i32 %1 , 0 NEW_LINE %3 = xor i1 %2 , true NEW_LINE %4 = zext i1 %3 to i32 NEW_LINE store i32 %4 @c NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @doit ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @sp NEW_LINE %3 = icmp sge i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %10 NEW_LINE 4: NEW_LINE %5 = load i32 @sp NEW_LINE %6 = add nsw i32 %5 , -1 NEW_LINE store i32 %6 @sp NEW_LINE %7 = sext i32 %5 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 100 x i32 @stack , i64 0 , i64 %7 NEW_LINE %9 = load i32 %8 NEW_LINE store i32 %9 %1 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %1 NEW_LINE ret i32 %11 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = call i64 @f ( i64 %5 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @sp NEW_LINE %4 = icmp slt i32 %3 , 99 NEW_LINE br i1 %4 , label %5 , label %11 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = add nsw i32 %7 , 1 NEW_LINE store i32 %8 @sp NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i32 @stack , i64 0 , i64 %9 NEW_LINE store i32 %6 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = load i32 @stack_p NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE store i32 %5 @stack_p NEW_LINE %6 = sext i32 %4 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i32 @stack , i64 0 , i64 %6 NEW_LINE store i32 %3 %7 NEW_LINE ret void NEW_LINE }
define dso_local i32 @push ( * i32 %0 i32 %1 i32 %2 ) #0 { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %6 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i32 %8 , i64 %10 NEW_LINE store i32 %7 %11 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %6 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp sgt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %12 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 @s NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 @syr , i64 0 , i64 %8 NEW_LINE store i32 %6 %9 NEW_LINE %10 = load i32 @s NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @s NEW_LINE br label %12 NEW_LINE 12: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @fact ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE %3 = icmp ne i32 %2 , 0 NEW_LINE %4 = xor i1 %3 , true NEW_LINE %5 = zext i1 %4 to i32 NEW_LINE call void @exit ( i32 %5 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @top NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @top NEW_LINE %5 = load i32 %2 NEW_LINE %6 = load i32 @top NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %7 NEW_LINE store i32 %5 %8 NEW_LINE %9 = load i32 @top NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE %2 = icmp ne i32 %1 , 0 NEW_LINE %3 = xor i1 %2 , true NEW_LINE %4 = zext i1 %3 to i32 NEW_LINE store i32 %4 @a NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @fact ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = icmp eq i32 %4 , 1 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE call void @factorial ( i64 %7 ) NEW_LINE br label %3 NEW_LINE 8: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp sgt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %12 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %8 NEW_LINE store i32 %6 %9 NEW_LINE %10 = load i32 @sp NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @sp NEW_LINE br label %12 NEW_LINE 12: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @f ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @factorial ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @swap ( * i32 %0 * i32 %1 ) #0 { NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %3 NEW_LINE store * i32 %1 %4 NEW_LINE %6 = load * i32 %3 NEW_LINE %7 = load i32 %6 NEW_LINE store i32 %7 %5 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %8 NEW_LINE %10 = load * i32 %3 NEW_LINE store i32 %9 %10 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load * i32 %4 NEW_LINE store i32 %11 %12 NEW_LINE ret void NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = icmp sgt i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %12 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 @sp NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 @data , i64 0 , i64 %8 NEW_LINE store i32 %6 %9 NEW_LINE %10 = load i32 @sp NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @sp NEW_LINE br label %12 NEW_LINE 12: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE call void @init ( ) NEW_LINE call void @operation ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @kaijo ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @factorial ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 20 x i8 @".str:2432902008176640000~00" i64 0 i64 0 ) ) NEW_LINE %3 = icmp ne i32 %2 , 0 NEW_LINE %4 = xor i1 %3 , true NEW_LINE %5 = zext i1 %4 to i32 NEW_LINE call void @exit ( i32 %5 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = call i64 @fanc ( i32 %5 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @N ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @area ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = mul nsw i32 %5 , %8 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32 %9 , %12 NEW_LINE ret i32 %13 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @stack_p NEW_LINE %3 = icmp eq i32 %2 , 0 NEW_LINE br i1 %3 , label %4 , label %5 NEW_LINE 4: NEW_LINE store i32 -1 %1 NEW_LINE br label %11 NEW_LINE 5: NEW_LINE %6 = load i32 @stack_p NEW_LINE %7 = add nsw i32 %6 , -1 NEW_LINE store i32 %7 @stack_p NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 @stack , i64 0 , i64 %8 NEW_LINE %10 = load i32 %9 NEW_LINE store i32 %10 %1 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %1 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp sgt i32 %5 , 96 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp slt i32 %10 , 123 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 false %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i64 @main ( ) #0 { NEW_LINE %1 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 @n ) NEW_LINE %2 = load i64 @n NEW_LINE %3 = call i64 @fact ( i64 %2 ) NEW_LINE %4 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %3 ) NEW_LINE ret i64 0 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp slt i32 %5 , 97 NEW_LINE br i1 %6 , label %12 , label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 122 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp sgt i32 %5 , 96 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp slt i32 %10 , 123 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 false %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp sgt i32 %5 , 96 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp slt i32 %10 , 123 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 false %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp sgt i32 %5 , 96 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp slt i32 %10 , 123 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 false %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @a ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE store * i8 %0 %2 NEW_LINE %3 = load * i8 %2 NEW_LINE %4 = load i8 %3 NEW_LINE %5 = sext i8 %4 to i32 NEW_LINE %6 = icmp sgt i32 %5 , 96 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp slt i32 %10 , 123 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 false %1 , ARR 2 %11 %7 NEW_LINE %14 = zext i1 %13 to i32 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE call void @fact ( i32 %4 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @fact ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = call i64 @factrial ( i64 %5 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = call i64 @fac ( i32 %5 ) NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @factorial ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @factorial ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @push ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 @isFull ( ) NEW_LINE %4 = icmp ne i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %7 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 23 x i8 @".str.2:?????????????????????~0A~00" i64 0 i64 0 ) ) NEW_LINE call void @exit ( i32 1 ) #3 NEW_LINE unreachable NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 @top NEW_LINE %10 = add nsw i32 %9 , 1 NEW_LINE store i32 %10 @top NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 101 x i32 @stack , i64 0 , i64 %11 NEW_LINE store i32 %8 %12 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @factorial ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @fact ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @fact ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local * STRUCT 2 i32 * %struct.stack @pop ( * STRUCT 2 i32 * %struct.stack %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE %3 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE store * STRUCT 2 i32 * %struct.stack %0 %2 NEW_LINE %4 = load * STRUCT 2 i32 * %struct.stack %2 NEW_LINE %5 = getelementptr inbounds STRUCT 2 i32 * %struct.stack %4 , i32 0 , i32 1 NEW_LINE %6 = load * STRUCT 2 i32 * %struct.stack %5 NEW_LINE store * STRUCT 2 i32 * %struct.stack %6 %3 NEW_LINE %7 = load * STRUCT 2 i32 * %struct.stack %2 NEW_LINE %8 = bitcast * STRUCT 2 i32 * %struct.stack %7 to * i8 NEW_LINE call void @free ( * i8 %8 ) #3 NEW_LINE %9 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE ret * STRUCT 2 i32 * %struct.stack %9 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @sub ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = call i32 @isEmpty ( ) NEW_LINE %2 = icmp ne i32 %1 , 0 NEW_LINE br i1 %2 , label %3 , label %5 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 24 x i8 @".str.3:??~C2~A2??????????????????~0A~00" i64 0 i64 0 ) ) NEW_LINE call void @exit ( i32 1 ) #3 NEW_LINE unreachable NEW_LINE 5: NEW_LINE %6 = load i32 @top NEW_LINE %7 = add nsw i32 %6 , -1 NEW_LINE store i32 %7 @top NEW_LINE %8 = sext i32 %6 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 101 x i32 @stack , i64 0 , i64 %8 NEW_LINE %10 = load i32 %9 NEW_LINE ret i32 %10 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = add nsw i32 %4 , 1 NEW_LINE %6 = sitofp i32 %5 to double NEW_LINE %7 = call double @tgamma ( double %6 ) #3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = load i32 @sp NEW_LINE %3 = sub nsw i32 %2 , 1 NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE %8 = load i32 @sp NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %10 NEW_LINE store i32 0 %11 NEW_LINE %12 = load i32 @sp NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @sp NEW_LINE %14 = load i32 %1 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = trunc i64 %4 to i32 NEW_LINE %6 = call i64 @factorial ( i32 %5 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %8 NEW_LINE 5: NEW_LINE %6 = call i32 @f0 ( i32 0 i32 1 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %6 ) NEW_LINE br label %2 NEW_LINE 8: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE call void @treasureHunt ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @c ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load * i8 %3 NEW_LINE %6 = load i8 %5 NEW_LINE %7 = sext i8 %6 to i32 NEW_LINE %8 = add nsw i32 26 , %7 NEW_LINE %9 = load * i8 %3 NEW_LINE %10 = getelementptr inbounds i8 %9 , i64 1 NEW_LINE %11 = load i8 %10 NEW_LINE %12 = sext i8 %11 to i32 NEW_LINE %13 = sub nsw i32 %8 , %12 NEW_LINE %14 = srem i32 %13 , 26 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp eq i32 %14 , %15 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %5 = load double %2 NEW_LINE %6 = call double @factorial ( double %5 ) NEW_LINE store double %6 %3 NEW_LINE %7 = load double %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @func_init ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 300 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i8 %8 , i64 %10 NEW_LINE store i8 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @fact ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @fac ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %5 = load double %2 NEW_LINE %6 = call double @factorial ( double %5 ) NEW_LINE store double %6 %3 NEW_LINE %7 = load double %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @func_init ( * i8 %0 ) #0 { NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca i32 NEW_LINE store * i8 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 300 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load * i8 %2 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i8 %8 , i64 %10 NEW_LINE store i8 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @calc ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @pop ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds ARR 3 10 x i32 @data , i64 0 , i64 %4 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = load i32 @j NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 100 x i32 @data2 , i64 0 , i64 %8 NEW_LINE store i32 %6 %9 NEW_LINE %10 = load i32 @j NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @j NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 @data , i64 0 , i64 %14 NEW_LINE store i32 0 %15 NEW_LINE ret void NEW_LINE }
define dso_local i64 @factorial ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 %0 %2 NEW_LINE store i64 1 %4 NEW_LINE %5 = load i32 %2 NEW_LINE store i32 %5 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp sgt i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = mul nsw i64 %10 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE ret i64 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = call i64 @factorial ( i32 %5 ) NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i64 %2 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = call i32 @kai ( i64 %5 i32 %6 ) NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i32 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE call void @sekibun ( i32 %7 ) NEW_LINE br label %3 NEW_LINE 8: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i64 @factorial ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = trunc i64 %4 to i32 NEW_LINE %6 = call i64 @fact ( i32 %5 ) NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %6 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = call i64 @Kaijo ( i32 %5 ) NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @push ( * STRUCT 2 i32 ARR 3 200 x i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store * STRUCT 2 i32 ARR 3 200 x i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %5 = load i32 %4 NEW_LINE %6 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %7 = getelementptr inbounds STRUCT 2 i32 ARR 3 200 x i32 %6 , i32 0 , i32 1 NEW_LINE %8 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %9 = getelementptr inbounds STRUCT 2 i32 ARR 3 200 x i32 %8 , i32 0 , i32 0 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 %9 NEW_LINE %12 = sext i32 %10 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 200 x i32 %7 , i64 0 , i64 %12 NEW_LINE store i32 %5 %13 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @squ ( i32 %8 ) NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 @num ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %11 NEW_LINE 5: NEW_LINE %6 = load i32 @num NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE call void @pop ( ) NEW_LINE br label %10 NEW_LINE 9: NEW_LINE call void @push ( ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @S ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @area ( i32 %8 ) NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = call i64 @calculate_area ( i64 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 @num ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %11 NEW_LINE 5: NEW_LINE %6 = load i32 @num NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE call void @pop ( ) NEW_LINE br label %10 NEW_LINE 9: NEW_LINE call void @push ( ) NEW_LINE br label %10 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @fact ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = sitofp i32 %6 to double NEW_LINE %8 = call double @tgamma ( double %7 ) #4 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %8 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE %11 = xor i1 %10 , true NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE call void @exit ( i32 %12 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = add nsw i32 %5 , 1 NEW_LINE %7 = sitofp i32 %6 to double NEW_LINE %8 = call double @tgamma ( double %7 ) #4 NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %8 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE %11 = xor i1 %10 , true NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE call void @exit ( i32 %12 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %6 = icmp eq i32 %5 , 1 NEW_LINE br i1 %6 , label %7 , label %11 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = call i64 @fact ( i64 %8 ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %9 ) NEW_LINE br label %4 NEW_LINE 11: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = call i64 @sieve ( i64 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%ld~0A~00" i64 0 i64 0 ) i64 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %2 NEW_LINE %11 = sext i32 %9 to i64 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %3 NEW_LINE br label %5 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %15 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i64 @factrial ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @trans ( * i8 %0 * i8 %1 i32 %2 ) #0 { NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %4 NEW_LINE store * i8 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %6 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE store i32 %9 %6 NEW_LINE %10 = icmp slt i32 %8 , 81 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load * i8 %4 NEW_LINE store i8 48 %12 NEW_LINE %13 = load * i8 %4 NEW_LINE %14 = getelementptr inbounds i8 %13 , i32 1 NEW_LINE store * i8 %14 %4 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load * i8 %4 NEW_LINE %17 = load * i8 %5 NEW_LINE %18 = call * i8 @strcat ( * i8 %16 * i8 %17 ) #6 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @pop ( * STRUCT 2 i32 ARR 3 200 x i32 %0 ) #0 { NEW_LINE %2 = alloca * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE store * STRUCT 2 i32 ARR 3 200 x i32 %0 %2 NEW_LINE %3 = load * STRUCT 2 i32 ARR 3 200 x i32 %2 NEW_LINE %4 = call i32 @is_empty ( * STRUCT 2 i32 ARR 3 200 x i32 %3 ) NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 23 x i8 @".str.2:Error: ▁ stack ▁ is ▁ empty.~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 8: NEW_LINE %9 = load * STRUCT 2 i32 ARR 3 200 x i32 %2 NEW_LINE %10 = getelementptr inbounds STRUCT 2 i32 ARR 3 200 x i32 %9 , i32 0 , i32 0 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 %10 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @s ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( * i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * i32 NEW_LINE store * i32 %0 %3 NEW_LINE %4 = load * i32 %3 NEW_LINE %5 = getelementptr inbounds i32 %4 , i64 0 NEW_LINE %6 = load i32 %5 NEW_LINE %7 = icmp sle i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE br label %22 NEW_LINE 9: NEW_LINE %10 = load * i32 %3 NEW_LINE %11 = getelementptr inbounds i32 %10 , i64 0 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE store i32 %13 %11 NEW_LINE %14 = load * i32 %3 NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = getelementptr inbounds i32 %15 , i64 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %14 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE store i32 %21 %2 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE ret i32 %23 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @sosu ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 600 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = call i32 @y ( i32 %9 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , %12 NEW_LINE store i32 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %4 NEW_LINE br label %5 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %9 NEW_LINE 5: NEW_LINE store i32 0 @s NEW_LINE %6 = load i32 @d NEW_LINE call void @getS ( i32 %6 ) NEW_LINE %7 = load i32 @s NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %7 ) NEW_LINE br label %2 NEW_LINE 9: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @f ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @pop ( * i32 %0 * i32 %1 i32 %2 * i32 %3 ) #0 { NEW_LINE %5 = alloca * i32 NEW_LINE %6 = alloca * i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i32 NEW_LINE store * i32 %0 %5 NEW_LINE store * i32 %1 %6 NEW_LINE store i32 %2 %7 NEW_LINE store * i32 %3 %8 NEW_LINE %9 = load i32 %7 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %7 NEW_LINE %11 = load * i32 %5 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds i32 %11 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load * i32 %6 NEW_LINE %17 = load * i32 %8 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds i32 %16 , i64 %19 NEW_LINE store i32 %15 %20 NEW_LINE %21 = load * i32 %8 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE %24 = load * i32 %8 NEW_LINE store i32 %23 %24 NEW_LINE %25 = load i32 %7 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local * STRUCT 2 i32 * %struct.stack @push ( i32 %0 * STRUCT 2 i32 * %struct.stack %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE %5 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE store i32 %0 %3 NEW_LINE store * STRUCT 2 i32 * %struct.stack %1 %4 NEW_LINE %6 = call noalias * i8 @malloc ( i64 8 ) #3 NEW_LINE %7 = bitcast * i8 %6 to * STRUCT 2 i32 * %struct.stack NEW_LINE store * STRUCT 2 i32 * %struct.stack %7 %5 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = load * STRUCT 2 i32 * %struct.stack %5 NEW_LINE %10 = getelementptr inbounds STRUCT 2 i32 * %struct.stack %9 , i32 0 , i32 0 NEW_LINE store i32 %8 %10 NEW_LINE %11 = load * STRUCT 2 i32 * %struct.stack %4 NEW_LINE %12 = load * STRUCT 2 i32 * %struct.stack %5 NEW_LINE %13 = getelementptr inbounds STRUCT 2 i32 * %struct.stack %12 , i32 0 , i32 1 NEW_LINE store * STRUCT 2 i32 * %struct.stack %11 %13 NEW_LINE %14 = load * STRUCT 2 i32 * %struct.stack %5 NEW_LINE ret * STRUCT 2 i32 * %struct.stack %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = call i32 @calc ( i32 %8 ) NEW_LINE store i32 %9 %2 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @integral ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sgt i64 1 , %6 NEW_LINE br i1 %7 , label %11 , label %8 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp slt i64 20 , %9 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = phi i1 ARR 2 true %5 , ARR 2 %10 %8 NEW_LINE br i1 %12 , label %3 , label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE %15 = call i64 @factorial ( i64 %14 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %15 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i64 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i64 %6 NEW_LINE %12 = call i64 @kaijo ( i64 %11 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %12 ) NEW_LINE br label %7 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @stackinit ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %13 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE call void @pop ( ) NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE call void @push ( i32 %11 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE br label %3 NEW_LINE 13: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %2 NEW_LINE %11 = sext i32 %9 to i64 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %3 NEW_LINE br label %5 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %15 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @push ( * i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE %6 = load * i32 %4 NEW_LINE %7 = getelementptr inbounds i32 %6 , i64 0 NEW_LINE %8 = load i32 %7 NEW_LINE %9 = icmp sge i32 %8 , 10 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 11: NEW_LINE %12 = load * i32 %4 NEW_LINE %13 = getelementptr inbounds i32 %12 , i64 0 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %13 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load * i32 %4 NEW_LINE %18 = load * i32 %4 NEW_LINE %19 = getelementptr inbounds i32 %18 , i64 0 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i32 %17 , i64 %21 NEW_LINE store i32 %16 %22 NEW_LINE %23 = load i32 %5 NEW_LINE store i32 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %5 = load float %2 NEW_LINE %6 = fadd float %5 , -1.000000e+00 NEW_LINE store float %6 %2 NEW_LINE store float %5 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load float %2 NEW_LINE %9 = fcmp une float %8 , 0.000000e+00 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load float %2 NEW_LINE %12 = fadd float %11 , -1.000000e+00 NEW_LINE store float %12 %2 NEW_LINE %13 = load float %3 NEW_LINE %14 = fmul float %13 , %11 NEW_LINE store float %14 %3 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE store i32 %6 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %2 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 600 , %7 NEW_LINE %9 = icmp slt i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %22 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = call i32 @f ( i32 %14 ) NEW_LINE %16 = mul nsw i32 %11 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %4 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE br label %5 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE ret i32 %23 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @mks ( i32 %8 ) NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = mul nsw i64 %11 , %10 NEW_LINE store i64 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %2 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = load i64 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @make_sosuu_num_list ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , 1 NEW_LINE br i1 %5 , label %6 , label %12 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 1000000 x i32 @sosuu_num , i64 0 , i64 %8 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %3 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp eq i32 %4 , 20 NEW_LINE br i1 %5 , label %6 , label %8 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 21 x i8 @".str.1:2432902008176640000~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %12 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = call i32 @factorial ( i32 %9 ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @swap ( * i32 %0 i32 %1 i32 %2 ) #0 { NEW_LINE %4 = alloca * i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store * i32 %0 %4 NEW_LINE store i32 %1 %5 NEW_LINE store i32 %2 %6 NEW_LINE %8 = load * i32 %4 NEW_LINE %9 = load i32 %5 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i32 %8 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE store i32 %12 %7 NEW_LINE %13 = load * i32 %4 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds i32 %13 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load * i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds i32 %18 , i64 %20 NEW_LINE store i32 %17 %21 NEW_LINE %22 = load i32 %7 NEW_LINE %23 = load * i32 %4 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds i32 %23 , i64 %25 NEW_LINE store i32 %22 %26 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @intStackTop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE call void @intStackPop ( ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @intStackPush ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE call void @intStackFree ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @top ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE call void @pop ( ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %5 = load float %2 NEW_LINE %6 = fadd float %5 , -1.000000e+00 NEW_LINE store float %6 %2 NEW_LINE store float %5 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load float %2 NEW_LINE %9 = fcmp ogt float %8 , 1.000000e+00 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load float %2 NEW_LINE %12 = fadd float %11 , -1.000000e+00 NEW_LINE store float %12 %2 NEW_LINE %13 = load float %3 NEW_LINE %14 = fmul float %13 , %11 NEW_LINE store float %14 %3 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 %10 , 1200 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 600 NEW_LINE %14 = mul nsw i32 %11 , %13 NEW_LINE %15 = mul nsw i32 %14 , 100 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %4 NEW_LINE 17: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul nsw i64 %13 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE br label %11 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @getarea ( i32 %8 ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE br label %3 NEW_LINE 11: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sge i64 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , -1 NEW_LINE store i64 %16 %3 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = srem i32 %8 , 96 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = call i32 @main ( i32 0 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %3 ) NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE ret i32 %16 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @top ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE call void @pop ( ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %17 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = call i32 @pop ( ) NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE call void @push ( i32 %15 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %4 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @init_stack ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @area ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 600 , %9 NEW_LINE %11 = mul nsw i32 100 , %10 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 1200 , %12 NEW_LINE %14 = mul nsw i32 %11 , %13 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %4 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE ret i32 %17 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = mul nsw i64 %11 , %10 NEW_LINE store i64 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %2 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = load i64 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %6 = load i32 %4 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp sgt i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = mul nsw i64 %16 , %15 NEW_LINE store i64 %17 %2 NEW_LINE br label %8 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%llu~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = load i64 %2 NEW_LINE %6 = load i64 %2 NEW_LINE %7 = sub i64 %6 , 1 NEW_LINE %8 = mul i64 %5 , %7 NEW_LINE store i64 %8 %3 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = sub i64 %9 , 2 NEW_LINE store i64 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %2 NEW_LINE %13 = icmp ugt i64 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = mul i64 %15 , %16 NEW_LINE store i64 %17 %3 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = add i64 %18 , -1 NEW_LINE store i64 %19 %2 NEW_LINE store i64 %18 %2 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @swap ( i32 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 31 x i32 @wires , i64 0 , i64 %7 NEW_LINE %9 = load i32 %8 NEW_LINE store i32 %9 %5 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 31 x i32 @wires , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 31 x i32 @wires , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 31 x i32 @wires , i64 0 , i64 %19 NEW_LINE store i32 %17 %20 NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %14 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE call void @push ( i32 %7 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = call i32 @top ( ) NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE call void @pop ( ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE br label %3 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @top ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE call void @pop ( ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @init ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = call i32 @integral ( i32 %11 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %7 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %5 = load float %2 NEW_LINE %6 = fadd float %5 , -1.000000e+00 NEW_LINE store float %6 %2 NEW_LINE store float %5 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load float %2 NEW_LINE %9 = fcmp ogt float %8 , 1.000000e+00 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load float %2 NEW_LINE %12 = fadd float %11 , -1.000000e+00 NEW_LINE store float %12 %2 NEW_LINE %13 = load float %3 NEW_LINE %14 = fmul float %13 , %11 NEW_LINE store float %14 %3 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %17 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = call i32 @pop ( ) NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE call void @push ( i32 %15 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %4 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %6 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sdiv i32 600 , %7 NEW_LINE store i32 %8 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = call i32 @f ( i32 %17 ) NEW_LINE %19 = mul nsw i32 %14 , %18 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE store i32 %22 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load double %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = fmul double %11 , %13 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 3 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 3 x i32 %3 to * i8 NEW_LINE call void @llvm.memcpy.p0i8.p0i8.i64 ( * i8 %5 * i8 bitcast ( * ARR 3 3 x i32 @__const.main.sum to * i8 ) i64 12 i1 false ) NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = getelementptr inbounds ARR 3 3 x i32 %3 , i64 0 , i64 0 NEW_LINE %9 = call i32 @factorial ( i32 %7 * i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %13 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.3:over ▁ flow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 3 x i32 %3 , i64 0 , i64 0 NEW_LINE %15 = call i32 @printLargeNumber ( * i32 %14 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %14 NEW_LINE 5: NEW_LINE %6 = load i32 @n NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = call i32 @pop ( ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 @n NEW_LINE call void @push ( i32 %12 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE br label %2 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sge i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i64 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = mul nsw i64 %9 , %11 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %2 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 @cp NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = load i32 @cp NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = call i32 @pop ( ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %18 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @a NEW_LINE %9 = sub nsw i32 600 , %8 NEW_LINE %10 = mul nsw i32 100 , %9 NEW_LINE %11 = load i32 @a NEW_LINE %12 = sub nsw i32 1200 , %11 NEW_LINE %13 = mul nsw i32 %10 , %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE %16 = xor i1 %15 , true NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE store i32 %17 @a NEW_LINE br label %2 NEW_LINE 18: NEW_LINE %19 = load i32 %1 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %18 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @a NEW_LINE %9 = sub nsw i32 600 , %8 NEW_LINE %10 = mul nsw i32 100 , %9 NEW_LINE %11 = load i32 @a NEW_LINE %12 = sub nsw i32 1200 , %11 NEW_LINE %13 = mul nsw i32 %10 , %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE %16 = xor i1 %15 , true NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE store i32 %17 @a NEW_LINE br label %2 NEW_LINE 18: NEW_LINE %19 = load i32 %1 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul nsw i64 %13 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp ne i64 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i64 %3 NEW_LINE %10 = load i64 %2 NEW_LINE %11 = mul nsw i64 %9 , %10 NEW_LINE store i64 %11 %3 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = add nsw i64 %12 , -1 NEW_LINE store i64 %13 %2 NEW_LINE br label %5 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %15 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %17 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = call i32 @fstack ( i32 0 i32 0 ) NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE br label %16 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = call i32 @fstack ( i32 1 i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %3 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @k NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %18 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 600 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 100 , %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sub nsw i32 %14 , 600 NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sgt i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = mul nsw i64 %11 , %10 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %2 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp sgt i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp sgt i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %14 NEW_LINE 11: NEW_LINE %12 = call i32 @pop ( ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 @cp NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = load i32 @cp NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = call i32 @pop ( ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store float 1.000000e+00 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sitofp i32 %11 to float NEW_LINE %13 = load float %4 NEW_LINE %14 = fmul float %13 , %12 NEW_LINE store float %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load float %4 NEW_LINE %20 = fpext float %19 to double NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %15 NEW_LINE 5: NEW_LINE %6 = load i32 @a NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = call i32 @pop ( ) NEW_LINE store i32 %9 @b NEW_LINE %10 = load i32 @b NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 @a NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %2 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %16 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %15 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = call i32 @push ( i32 %13 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE br label %3 NEW_LINE 16: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %18 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 1800 , %10 NEW_LINE %12 = mul nsw i32 %11 , 100 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fsub double 7.200000e+07 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.lf~0A~00" i64 0 i64 0 ) double %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sge i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load double %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double %9 , %11 NEW_LINE store double %12 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %2 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load double %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.0lf~0A~00" i64 0 i64 0 ) double %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , -1 NEW_LINE store i32 %11 %3 NEW_LINE %12 = sext i32 %10 to i64 NEW_LINE %13 = load i64 @f NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 @f NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i64 @f NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %16 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %20 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 600 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 100 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sub nsw i32 %16 , 600 NEW_LINE %18 = mul nsw i32 %15 , %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %4 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE ret i32 %21 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , -1 NEW_LINE store i32 %9 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %16 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = load i64 %3 NEW_LINE %15 = mul nsw i64 %14 , %13 NEW_LINE store i64 %15 %3 NEW_LINE br label %7 NEW_LINE 16: NEW_LINE %17 = load i64 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%llu~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = load i64 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = icmp uge i64 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = mul i64 %10 , %11 NEW_LINE store i64 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE %15 = add i64 %14 , -1 NEW_LINE store i64 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE %17 = load i64 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store double 1.000000e+00 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %4 NEW_LINE %14 = fmul double %13 , %12 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 @top NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%llu~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp ule i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @area ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE %4 = load i32 %2 NEW_LINE store i32 %4 @i NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 @i NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sub nsw i32 600 , %7 NEW_LINE %9 = icmp sle i32 %6 , %8 NEW_LINE br i1 %9 , label %10 , label %23 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 @i NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 @i NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE store i32 %15 @c NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 @c NEW_LINE %18 = add nsw i32 %16 , %17 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 @i NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 @i NEW_LINE br label %5 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = phi i1 ARR 2 false %4 , ARR 2 %10 %8 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE %14 = call i32 ( ... ) bitcast ( i32 * ( i32 ) @main to i32 * ( ... ) ) ( ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 1200 , %10 NEW_LINE %12 = mul nsw i32 %11 , 100 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = mul nsw i32 %12 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store double 1.000000e+00 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load double %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = fmul double %11 , %13 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%0.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load double %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = fmul double %11 , %13 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @read ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %14 NEW_LINE 5: NEW_LINE %6 = load i32 @read NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = call i32 @top ( ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE call void @pop ( ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 @read NEW_LINE call void @push ( i32 %12 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE br label %2 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %4 NEW_LINE %14 = fmul double %13 , %12 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 1200 , %10 NEW_LINE %12 = mul nsw i32 %11 , 100 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = mul nsw i32 %12 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%llu~00" i64 0 i64 0 ) * i64 %4 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %4 NEW_LINE %9 = icmp ule i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul i64 %12 , %11 NEW_LINE store i64 %13 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %2 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @run ( ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 1 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%ld~0A~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 0 %3 NEW_LINE store i64 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp eq i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %17 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = add nsw i64 %12 , 1 NEW_LINE store i64 %13 %3 NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE call void @push ( i32 %9 ) NEW_LINE br label %19 NEW_LINE 10: NEW_LINE %11 = call i32 @pop ( ) NEW_LINE store i32 %11 %3 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %18 NEW_LINE 17: NEW_LINE br label %20 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %4 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %16 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = call i32 @trainGone ( ) NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE br label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE call void @trainAdd ( i32 %14 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE br label %4 NEW_LINE 16: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = mul i64 %13 , %12 NEW_LINE store i64 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lu~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %4 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %4 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %4 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sgt i64 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , -1 NEW_LINE store i64 %16 %3 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %5 = load float %2 NEW_LINE %6 = fadd float %5 , -1.000000e+00 NEW_LINE store float %6 %2 NEW_LINE store float %5 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load float %2 NEW_LINE %9 = fcmp ogt float %8 , 1.000000e+00 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load float %2 NEW_LINE %12 = fadd float %11 , -1.000000e+00 NEW_LINE store float %12 %2 NEW_LINE %13 = load float %3 NEW_LINE %14 = fmul float %13 , %11 NEW_LINE store float %14 %3 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %17 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE call void @push ( i32 %11 ) NEW_LINE br label %16 NEW_LINE 12: NEW_LINE %13 = call i32 @pop ( ) NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %4 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sgt i64 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , -1 NEW_LINE store i64 %16 %3 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %19 NEW_LINE 5: NEW_LINE %6 = load i32 @n NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = call i32 @pop ( ) NEW_LINE %10 = load i32 @top NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = load i32 @n NEW_LINE call void @push ( i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %2 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %14 NEW_LINE 11: NEW_LINE %12 = call i32 @pop ( ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = phi i1 ARR 2 false %4 , ARR 2 %10 %8 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE %14 = call i32 @main ( i32 1 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = load i64 %2 NEW_LINE %6 = sub nsw i64 %5 , 1 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sge i64 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , -1 NEW_LINE store i64 %16 %3 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %2 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store double 1.000000e+00 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %3 NEW_LINE %14 = fmul double %12 , %13 NEW_LINE store double %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.0lf~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %3 = xor i32 %2 , -1 NEW_LINE %4 = icmp ne i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %15 NEW_LINE 5: NEW_LINE %6 = load i32 @d NEW_LINE %7 = sub nsw i32 600 , %6 NEW_LINE %8 = mul nsw i32 %7 , 100 NEW_LINE %9 = load i32 @d NEW_LINE %10 = sub nsw i32 1200 , %9 NEW_LINE %11 = mul nsw i32 %8 , %10 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE %13 = call i32 ( i32 ... ) bitcast ( i32 * ( ) @main to i32 * ( i32 ... ) ) ( i32 %12 ) NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 false %0 , ARR 2 %14 %5 NEW_LINE %17 = zext i1 %16 to i32 NEW_LINE %18 = load i32 %1 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %2 NEW_LINE br label %9 NEW_LINE 19: NEW_LINE %20 = load i64 %3 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @fact ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE store i64 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sgt i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %3 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 2 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %2 NEW_LINE %14 = fmul double %13 , %12 NEW_LINE store double %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE store i32 %6 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %2 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 600 , %10 NEW_LINE %12 = mul nsw i32 100 , %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 1200 , %13 NEW_LINE %15 = mul nsw i32 %12 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %2 ) NEW_LINE %5 = load float %2 NEW_LINE %6 = fadd float %5 , -1.000000e+00 NEW_LINE store float %6 %2 NEW_LINE store float %5 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load float %2 NEW_LINE %9 = fcmp ogt float %8 , 1.000000e+00 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load float %2 NEW_LINE %12 = fadd float %11 , -1.000000e+00 NEW_LINE store float %12 %2 NEW_LINE %13 = load float %3 NEW_LINE %14 = fmul float %13 , %11 NEW_LINE store float %14 %3 NEW_LINE br label %7 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %17 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = call i32 @fstack ( i32 0 i32 0 ) NEW_LINE store i32 %10 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE br label %16 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = call i32 @fstack ( i32 1 i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %3 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 600 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 100 , %12 NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = fsub double %14 , 6.000000e+04 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %17 , %15 NEW_LINE %19 = fptosi double %18 to i32 NEW_LINE store i32 %19 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE store i32 %6 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sge i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %2 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %6 = load i32 %4 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = mul i64 %13 , %12 NEW_LINE store i64 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sle i64 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %9 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE call void @depot ( * i32 getelementptr inbounds ( ARR 3 11 x i32 @main.train i64 0 i64 0 ) i32 %8 * i32 getelementptr inbounds ( ARR 3 10 x i32 @main.out_train i64 0 i64 0 ) ) NEW_LINE br label %4 NEW_LINE 9: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 %6 %4 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = icmp eq i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %22 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %19 NEW_LINE 13: NEW_LINE call void @pop ( ) NEW_LINE %14 = load i32 @sp NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %21 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE call void @push ( i32 %20 ) NEW_LINE br label %21 NEW_LINE 21: NEW_LINE br label %5 NEW_LINE 22: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul nsw i64 %13 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %5 = load i64 %3 NEW_LINE %6 = sub nsw i64 %5 , 1 NEW_LINE %7 = trunc i64 %6 to i32 NEW_LINE store i32 %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp sge i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = mul nsw i64 %12 , %14 NEW_LINE store i64 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %2 NEW_LINE br label %8 NEW_LINE 19: NEW_LINE %20 = load i64 %3 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp sle i64 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = mul nsw i64 %12 , %14 NEW_LINE store i64 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load i64 %3 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp ule i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul i64 %11 , %12 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %5 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lu~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %7 = load i64 %3 NEW_LINE store i64 %7 %4 NEW_LINE store i64 1 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = load i64 %4 NEW_LINE %11 = icmp ule i64 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i64 %5 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = mul i64 %13 , %14 NEW_LINE store i64 %15 %5 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 %2 NEW_LINE %18 = add i64 %17 , 1 NEW_LINE store i64 %18 %2 NEW_LINE br label %8 NEW_LINE 19: NEW_LINE %20 = load i64 %5 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lu~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i64 1 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %7 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = load i64 %6 NEW_LINE %17 = mul i64 %16 , %15 NEW_LINE store i64 %17 %6 NEW_LINE br label %9 NEW_LINE 18: NEW_LINE %19 = load i64 %6 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 900 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 100 , %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = fsub double %16 , 9.000000e+06 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %17 ) NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %2 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @k NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 1800 , %10 NEW_LINE %12 = sub nsw i32 720000 , %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = add nsw i32 %12 , %15 NEW_LINE %17 = mul nsw i32 100 , %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %18 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 600 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 100 , %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sub nsw i32 %14 , 600 NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @k NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double 1.800000e+05 , %11 NEW_LINE %13 = fsub double 7.200000e+07 , %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 100 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fadd double %13 , %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sle i64 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 2 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i32 %2 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp sgt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul i64 %15 , %14 NEW_LINE store i64 %16 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = load i64 %4 NEW_LINE %15 = mul nsw i64 %14 , %13 NEW_LINE store i64 %15 %4 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load i64 %4 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %14 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE call void @push ( i32 %7 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = call i32 @top ( ) NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE call void @pop ( ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE br label %3 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 101 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 -1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %13 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 101 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @pop ( * i32 %12 * i32 %4 ) NEW_LINE br label %16 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 101 x i32 %3 , i64 0 , i64 0 NEW_LINE %15 = load i32 %2 NEW_LINE call void @push ( * i32 %14 i32 %15 * i32 %4 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %5 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %4 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp slt i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = sub nsw i64 %11 , %12 NEW_LINE %14 = load i64 %3 NEW_LINE %15 = mul nsw i64 %14 , %13 NEW_LINE store i64 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = add nsw i64 %17 , 1 NEW_LINE store i64 %18 %4 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load i64 %3 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @x ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 @x NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 @top NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = call i32 @pop ( ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = load i32 @x NEW_LINE call void @push ( i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = call i32 @empty ( ) NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = call i32 @pop ( ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %18 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE call void @push ( i32 %11 ) NEW_LINE br label %17 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 @pop ( i32 %13 ) NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE br label %4 NEW_LINE 18: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE store i32 %6 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 %3 NEW_LINE %13 = sext i32 %11 to i64 NEW_LINE %14 = load i64 %4 NEW_LINE %15 = mul nsw i64 %14 , %13 NEW_LINE store i64 %15 %4 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %2 NEW_LINE br label %7 NEW_LINE 19: NEW_LINE %20 = load i64 %4 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %3 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = mul nsw i64 %11 , %13 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @make_prime ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE br label %9 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE call void @sosuu01 ( i32 %8 ) NEW_LINE br label %3 NEW_LINE 9: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %24 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = mul nsw i64 %14 , %16 NEW_LINE store i64 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i64 %4 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE br label %5 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 2 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i64 1 %8 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE store i32 1 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %7 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %23 NEW_LINE 15: NEW_LINE %16 = load i32 %7 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i64 %8 NEW_LINE %19 = mul nsw i64 %18 , %17 NEW_LINE store i64 %19 %8 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %7 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %7 NEW_LINE br label %10 NEW_LINE 23: NEW_LINE %24 = load i64 %8 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 20 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp sgt i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = call i32 @area ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %8 NEW_LINE 15: NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %4 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sle i64 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @E_sieve ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 2 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE call void @setPrimeFlag ( ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @getNumOfPrime ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 600 , %10 NEW_LINE %12 = mul nsw i32 %11 , 100 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 1200 , %13 NEW_LINE %15 = mul nsw i32 %12 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store double 1.000000e+00 %4 NEW_LINE store i32 2 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %4 NEW_LINE %14 = fmul double %13 , %12 NEW_LINE store double %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load double %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str.1:%0.0lf~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load i64 %3 NEW_LINE %10 = call i64 @prime ( i64 %9 ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %10 ) NEW_LINE br label %5 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @x ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 @x NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 @top NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = call i32 @pop ( ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = load i32 @x NEW_LINE call void @push ( i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 1200 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sub nsw i32 %14 , 600 NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = mul nsw i32 %16 , 100 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %4 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE ret i32 %20 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = load i32 %2 NEW_LINE %6 = call i64 @fact ( i32 %5 ) NEW_LINE store i64 %6 %3 NEW_LINE %7 = load i64 %3 NEW_LINE %8 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %7 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul nsw i64 %13 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE call void @init ( ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = call i32 @primeCounter ( i32 %11 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %7 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %24 NEW_LINE 8: NEW_LINE store i64 1 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %3 NEW_LINE %17 = mul nsw i64 %16 , %15 NEW_LINE store i64 %17 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %4 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i64 %3 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE br label %5 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i8 NEW_LINE %7 = alloca i64 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %7 ) NEW_LINE %9 = load i64 %7 NEW_LINE %10 = sub i64 %9 , 1 NEW_LINE %11 = trunc i64 %10 to i8 NEW_LINE store i8 %11 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i8 %6 NEW_LINE %14 = zext i8 %13 to i32 NEW_LINE %15 = icmp sgt i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i8 %6 NEW_LINE %18 = zext i8 %17 to i64 NEW_LINE %19 = load i64 %7 NEW_LINE %20 = mul i64 %19 , %18 NEW_LINE store i64 %20 %7 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i8 %6 NEW_LINE %23 = add i8 %22 , -1 NEW_LINE store i8 %23 %6 NEW_LINE br label %12 NEW_LINE 24: NEW_LINE %25 = load i64 %7 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp slt i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = mul nsw i64 %14 , %13 NEW_LINE store i64 %15 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load i64 %2 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @isPrime ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE store i32 2 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = load i32 %4 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp sle i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %21 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = srem i32 %12 , %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE store i32 0 %2 NEW_LINE br label %29 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %4 NEW_LINE br label %5 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp eq i32 %22 , 0 NEW_LINE br i1 %23 , label %27 , label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = icmp eq i32 %25 , 1 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE store i32 0 %2 NEW_LINE br label %29 NEW_LINE 28: NEW_LINE store i32 1 %2 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE %9 = load i32 @n NEW_LINE %10 = load i32 @n NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32 %9 , %12 NEW_LINE %14 = load i32 @n NEW_LINE %15 = mul nsw i32 2 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sub nsw i32 %15 , %16 NEW_LINE %18 = mul nsw i32 %13 , %17 NEW_LINE %19 = sdiv i32 %18 , 6 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %17 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE call void @push ( i32 %11 ) NEW_LINE br label %16 NEW_LINE 12: NEW_LINE %13 = call i32 @top ( ) NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE call void @pop ( ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %4 NEW_LINE 17: NEW_LINE %18 = load i32 %1 NEW_LINE ret i32 %18 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %18 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 600 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %12 , 100 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sub nsw i32 %14 , 600 NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %4 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE ret i32 %19 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sle i64 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i64 %3 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 @prime ( i32 999999 ) NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %11 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @prime ( i32 %8 ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE br label %4 NEW_LINE 11: NEW_LINE %12 = load i32 %1 NEW_LINE ret i32 %12 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = call i32 @empty ( ) NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = call i32 @pop ( ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = mul nsw i32 %6 , %7 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = call i32 ( ... ) bitcast ( i32 * ( i32 ) @main to i32 * ( ... ) ) ( ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE ret i32 %16 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load * i32 @p NEW_LINE %4 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i32 ... ) ) ( * i32 %3 ) NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %23 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i32 @p NEW_LINE %9 = load i32 %8 NEW_LINE %10 = sub nsw i32 %9 , 48 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * i32 @p NEW_LINE %14 = getelementptr inbounds i32 %13 , i32 1 NEW_LINE store * i32 %14 @p NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load * i32 @p NEW_LINE %17 = getelementptr inbounds i32 %16 , i32 -1 NEW_LINE store * i32 %17 @p NEW_LINE %18 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %17 ) NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = inttoptr i64 %19 to * i32 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi * i32 ARR 2 %13 %12 , ARR 2 %20 %15 NEW_LINE br label %2 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %4 = load i64 %2 NEW_LINE %5 = call i64 @jou ( i64 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %24 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = mul nsw i64 %16 , %15 NEW_LINE store i64 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i64 %4 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE br label %5 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca STRUCT 3 * i32 i32 i32 NEW_LINE store i32 0 %1 NEW_LINE call void @stack_init ( * STRUCT 3 * i32 i32 i32 %4 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = call i32 @stack_pop ( * STRUCT 3 * i32 i32 i32 %4 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE call void @stack_push ( * STRUCT 3 * i32 i32 i32 %4 i32 %15 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %5 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = call i32 @empty ( ) NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = call i32 @top ( ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE call void @pop ( ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE store i64 2 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %24 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load double %4 NEW_LINE %17 = fmul double %16 , %15 NEW_LINE store double %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load double %4 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %22 ) NEW_LINE store double 1.000000e+00 %4 NEW_LINE br label %5 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE store i64 2 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %5 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = load i64 %2 NEW_LINE store i64 %7 %3 NEW_LINE store i64 1 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i64 %4 NEW_LINE %10 = load i64 %2 NEW_LINE %11 = icmp sle i64 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i64 %5 NEW_LINE %14 = load i64 %3 NEW_LINE %15 = mul nsw i64 %13 , %14 NEW_LINE store i64 %15 %5 NEW_LINE %16 = load i64 %3 NEW_LINE %17 = add nsw i64 %16 , -1 NEW_LINE store i64 %17 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = add nsw i64 %19 , 1 NEW_LINE store i64 %20 %4 NEW_LINE br label %8 NEW_LINE 21: NEW_LINE %22 = load i64 %5 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @calclateIntegral ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i64 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE store i64 1 %8 NEW_LINE store i32 2 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %7 NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp sle i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %22 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = load i64 %8 NEW_LINE %18 = mul nsw i64 %17 , %16 NEW_LINE store i64 %18 %8 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %7 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %7 NEW_LINE br label %10 NEW_LINE 22: NEW_LINE %23 = load i64 %8 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %23 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load * i32 @p NEW_LINE %4 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i32 ... ) ) ( * i32 %3 ) NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %23 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i32 @p NEW_LINE %9 = load i32 %8 NEW_LINE %10 = sub nsw i32 %9 , 48 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * i32 @p NEW_LINE %14 = getelementptr inbounds i32 %13 , i32 1 NEW_LINE store * i32 %14 @p NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load * i32 @p NEW_LINE %17 = getelementptr inbounds i32 %16 , i32 -1 NEW_LINE store * i32 %17 @p NEW_LINE %18 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %17 ) NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = inttoptr i64 %19 to * i32 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi * i32 ARR 2 %13 %12 , ARR 2 %20 %15 NEW_LINE br label %2 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @k NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double 1.800000e+05 , %11 NEW_LINE %13 = fsub double 7.200000e+07 , %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 100 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fadd double %13 , %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %3 = xor i32 %2 , -1 NEW_LINE %4 = icmp ne i32 %3 , 0 NEW_LINE br i1 %4 , label %5 , label %19 NEW_LINE 5: NEW_LINE %6 = load i32 @d NEW_LINE %7 = sitofp i32 %6 to double NEW_LINE %8 = fmul double 1.800000e+05 , %7 NEW_LINE %9 = fsub double 7.200000e+07 , %8 NEW_LINE %10 = load i32 @d NEW_LINE %11 = mul nsw i32 100 , %10 NEW_LINE %12 = load i32 @d NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = fadd double %9 , %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%.f~0A~00" i64 0 i64 0 ) double %15 ) NEW_LINE %17 = call i32 ( i32 ... ) bitcast ( i32 * ( ) @main to i32 * ( i32 ... ) ) ( i32 %16 ) NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = phi i1 ARR 2 false %0 , ARR 2 %18 %5 NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE %22 = load i32 %1 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp sle i32 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %24 NEW_LINE 8: NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = mul i64 %16 , %15 NEW_LINE store i64 %17 %4 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %2 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i64 %4 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %14 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 false %7 , ARR 2 false %4 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %21 NEW_LINE 16: NEW_LINE %17 = call i32 @main ( i32 1 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %15 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %12 NEW_LINE 9: NEW_LINE %10 = call i32 @pop ( ) NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %14 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE call void @push ( i32 %13 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE br label %3 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i64 @fact ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE %4 = load i64 %3 NEW_LINE %5 = icmp eq i64 %4 , 1 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE store i64 1 %2 NEW_LINE br label %13 NEW_LINE 7: NEW_LINE %8 = load i64 %3 NEW_LINE %9 = load i64 %3 NEW_LINE %10 = sub nsw i64 %9 , 1 NEW_LINE %11 = call i64 @fact ( i64 %10 ) NEW_LINE %12 = mul nsw i64 %8 , %11 NEW_LINE store i64 %12 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE ret i64 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %4 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %2 NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %4 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %2 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %18 NEW_LINE 11: NEW_LINE %12 = call i32 @empty ( ) NEW_LINE %13 = icmp eq i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = call i32 @pop ( ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %15 , %14 NEW_LINE store i64 %16 %4 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %3 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %4 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %11 , %12 NEW_LINE store i64 %13 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %4 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %4 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i64 1 %2 NEW_LINE br label %21 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE store i64 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = icmp sgt i32 %13 , 1 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = mul nsw i64 %18 , %17 NEW_LINE store i64 %19 %2 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i64 %2 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca STRUCT 2 i32 ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds STRUCT 2 i32 ARR 3 10 x i32 %2 , i32 0 , i32 0 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %17 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = call i32 @pop ( * STRUCT 2 i32 ARR 3 10 x i32 %2 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %16 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE call void @push ( * STRUCT 2 i32 ARR 3 10 x i32 %2 i32 %15 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %5 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp slt i32 %6 , 20 NEW_LINE br i1 %7 , label %11 , label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %27 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp sgt i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = mul nsw i64 %17 , %19 NEW_LINE store i64 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE br label %13 NEW_LINE 24: NEW_LINE %25 = load i64 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp eq i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %12 NEW_LINE 11: NEW_LINE br label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = call i32 @stack ( i32 %13 ) NEW_LINE store i32 %14 %7 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i32 %7 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %8 NEW_LINE 21: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %5 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %2 NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %3 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 2 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %23 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 @pop ( ) NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 @stack_num NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 11 x i32 @stack_data , i64 0 , i64 %18 NEW_LINE store i32 %16 %19 NEW_LINE %20 = load i32 @stack_num NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @stack_num NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %4 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %24 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = trunc i64 %7 to i32 NEW_LINE store i32 %8 @i NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = icmp sgt i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 @i NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = mul i64 %16 , %15 NEW_LINE store i64 %17 %2 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @i NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 @i NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = load i64 %2 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE br label %3 NEW_LINE 24: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %7 = call i32 @feof ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %6 ) #3 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %14 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 @primecount ( i32 %11 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %4 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 -1 , %6 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = add nsw i32 %14 , %19 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE store i64 %16 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %9 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE store i64 1 %3 NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %23 NEW_LINE 5: NEW_LINE %6 = load i32 @n NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = call i32 @pop ( ) NEW_LINE %10 = load i32 @top NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %22 NEW_LINE 16: NEW_LINE %17 = load i32 @n NEW_LINE %18 = call i32 @push ( i32 %17 ) NEW_LINE %19 = load i32 @i NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 11 x i32 @d , i64 0 , i64 %20 NEW_LINE store i32 %18 %21 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %2 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @x ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %19 NEW_LINE 6: NEW_LINE %7 = load i32 @x NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 @top NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i32 @S , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE %15 = call i32 @pop ( ) NEW_LINE br label %18 NEW_LINE 16: NEW_LINE %17 = load i32 @x NEW_LINE call void @push ( i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %3 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 -1 , %6 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i64 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = mul nsw i32 %13 , %16 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = add nsw i64 %19 , %18 NEW_LINE store i64 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %9 NEW_LINE 25: NEW_LINE %26 = load i64 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %27 NEW_LINE 7: NEW_LINE store i32 0 %2 NEW_LINE %8 = load i32 @d NEW_LINE store i32 %8 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 @d NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %2 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @d NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %4 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %21 NEW_LINE 8: NEW_LINE %9 = load i32 @n NEW_LINE %10 = load i32 @n NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %10 , %11 NEW_LINE %13 = mul nsw i32 %9 , %12 NEW_LINE %14 = load i32 @n NEW_LINE %15 = mul nsw i32 2 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sub nsw i32 %15 , %16 NEW_LINE %18 = mul nsw i32 %13 , %17 NEW_LINE %19 = sdiv i32 %18 , 6 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %4 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE ret i32 %22 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 256 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 256 x i32 %3 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 256 x i32 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE store i64 1 %4 NEW_LINE br label %23 NEW_LINE 9: NEW_LINE store i32 1 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp sle i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %22 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = load i64 %4 NEW_LINE %18 = mul nsw i64 %17 , %16 NEW_LINE store i64 %18 %4 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE br label %10 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %24 ) NEW_LINE ret i32 0 NEW_LINE }
define i32 @isPrime ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 %0 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 2 NEW_LINE br i1 %6 , label %11 , label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = srem i32 %8 , 2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %12 , label %11 NEW_LINE 11: NEW_LINE store i32 0 %2 NEW_LINE br label %30 NEW_LINE 12: NEW_LINE store i32 3 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp sle i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %29 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = srem i32 %20 , %21 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %25 , label %24 NEW_LINE 24: NEW_LINE store i32 0 %2 NEW_LINE br label %30 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 2 NEW_LINE store i32 %28 %4 NEW_LINE br label %13 NEW_LINE 29: NEW_LINE store i32 1 %2 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 0 NEW_LINE %13 = call i32 @pop ( * i32 %3 * i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @push ( i32 %16 * i32 %3 * i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %5 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca ARR 3 21 x i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE %8 = bitcast * ARR 3 21 x i64 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 i8 0 i64 168 i1 false ) NEW_LINE store i64 1 %6 NEW_LINE store i64 1 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %10 = load i64 %2 NEW_LINE store i64 %10 %5 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %5 NEW_LINE %13 = icmp sgt i64 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i64 %7 NEW_LINE %16 = load i64 %5 NEW_LINE %17 = mul nsw i64 %15 , %16 NEW_LINE store i64 %17 %7 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %5 NEW_LINE %20 = add nsw i64 %19 , -1 NEW_LINE store i64 %20 %5 NEW_LINE br label %11 NEW_LINE 21: NEW_LINE %22 = load i64 %7 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE store i64 1 getelementptr inbounds ( ARR 3 25 x i64 @ans i64 0 i64 1 ) NEW_LINE store i32 2 @i NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @i NEW_LINE %5 = load i32 @n NEW_LINE %6 = icmp sle i32 %4 , %5 NEW_LINE br i1 %6 , label %7 , label %22 NEW_LINE 7: NEW_LINE %8 = load i32 @i NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 25 x i64 @ans , i64 0 , i64 %10 NEW_LINE %12 = load i64 %11 NEW_LINE %13 = load i32 @i NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = mul nsw i64 %12 , %14 NEW_LINE %16 = load i32 @i NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 25 x i64 @ans , i64 0 , i64 %17 NEW_LINE store i64 %15 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @i NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @i NEW_LINE br label %3 NEW_LINE 22: NEW_LINE %23 = load i32 @n NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 25 x i64 @ans , i64 0 , i64 %24 NEW_LINE %26 = load i64 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 @p NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 @p NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @p NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @p NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 @p NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 @p NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @p NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @p NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %7 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = icmp sle i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = add nsw i32 %15 , %20 NEW_LINE store i32 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %23 , %24 NEW_LINE store i32 %25 %4 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %6 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %26 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = call i32 @area ( i32 %18 i32 %19 ) NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %6 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %6 NEW_LINE br label %13 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %7 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 @x NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @x NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 @x NEW_LINE %14 = load i32 @x NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 @d NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 @d NEW_LINE %22 = load i32 @x NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 @x NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %4 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %2 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sge i64 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp sle i64 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %26 NEW_LINE 11: NEW_LINE store i64 1 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i64 %3 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = icmp sle i64 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = add nsw i64 %21 , 1 NEW_LINE store i64 %22 %3 NEW_LINE br label %12 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %25 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp sgt i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 @i NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %12 NEW_LINE store i32 %10 %13 NEW_LINE %14 = load i32 @i NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 @i NEW_LINE br label %24 NEW_LINE 16: NEW_LINE %17 = load i32 @i NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 @i NEW_LINE %19 = load i32 @i NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %3 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca STRUCT 2 ARR 3 100 x i32 i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @init ( * STRUCT 2 ARR 3 100 x i32 i32 %2 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = call i32 @pop ( * STRUCT 2 ARR 3 100 x i32 i32 %2 * i32 %3 ) NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = call i32 @push ( * STRUCT 2 ARR 3 100 x i32 i32 %2 i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %6 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %12 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @fun ( i32 %8 ) NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %4 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %11 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = phi i1 ARR 2 false %4 , ARR 2 %10 %7 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %21 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = call i32 @main ( i32 1 ) NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 i32 %18 ) NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi i1 ARR 2 false %13 , ARR 2 %20 %16 NEW_LINE %23 = zext i1 %22 to i32 NEW_LINE br label %4 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE ret i32 %25 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 @top NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.3:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , 1 NEW_LINE br i1 %5 , label %6 , label %16 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE call void @push ( i32 %10 ) NEW_LINE br label %15 NEW_LINE 11: NEW_LINE %12 = call i32 @pop ( ) NEW_LINE store i32 %12 %2 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE br label %3 NEW_LINE 16: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 11 x i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 11 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 44 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %21 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp sle i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 0 NEW_LINE %14 = call i32 @pop ( * i32 %13 ) NEW_LINE %15 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %14 ) NEW_LINE br label %20 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 0 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = call i32 @push ( * i32 %17 i32 %18 ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %6 NEW_LINE 21: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i64 %2 NEW_LINE store i64 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = sub nsw i64 600 , %12 NEW_LINE %14 = icmp sle i64 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i64 %2 NEW_LINE %17 = load i64 %3 NEW_LINE %18 = mul nsw i64 %16 , %17 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = mul nsw i64 %18 , %19 NEW_LINE %21 = load i64 %4 NEW_LINE %22 = add nsw i64 %21 , %20 NEW_LINE store i64 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 %2 NEW_LINE %25 = load i64 %3 NEW_LINE %26 = add nsw i64 %25 , %24 NEW_LINE store i64 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i64 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %23 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = call i32 @f ( i32 %14 ) NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %23 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = call i32 @f ( i32 %14 ) NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %28 NEW_LINE 6: NEW_LINE store i32 0 @i NEW_LINE store i32 0 @b NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @i NEW_LINE %9 = load i32 @a NEW_LINE %10 = sdiv i32 600 , %9 NEW_LINE %11 = icmp slt i32 %8 , %10 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 @a NEW_LINE %14 = load i32 @i NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 @a NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 @i NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 @i NEW_LINE %20 = mul nsw i32 %17 , %18 NEW_LINE %21 = load i32 @a NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 @b NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 @b NEW_LINE br label %7 NEW_LINE 25: NEW_LINE %26 = load i32 @b NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %2 NEW_LINE 28: NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %25 NEW_LINE 11: NEW_LINE store i32 2 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = mul nsw i64 %17 , %19 NEW_LINE store i64 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %3 NEW_LINE br label %12 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i64 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * STRUCT 2 i32 * i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call * STRUCT 2 i32 * i32 @createStack ( i32 100 ) NEW_LINE store * STRUCT 2 i32 * i32 %4 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = load * STRUCT 2 i32 * i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE call void @push ( * STRUCT 2 i32 * i32 %12 i32 %13 ) NEW_LINE br label %18 NEW_LINE 14: NEW_LINE %15 = load * STRUCT 2 i32 * i32 %2 NEW_LINE %16 = call i32 @pop ( * STRUCT 2 i32 * i32 %15 ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %5 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = call i64 @f ( i32 %16 ) NEW_LINE %18 = mul nsw i64 %15 , %17 NEW_LINE %19 = load i64 %4 NEW_LINE %20 = add nsw i64 %19 , %18 NEW_LINE store i64 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i64 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp sge i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp sle i32 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %27 NEW_LINE 11: NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = mul nsw i64 %17 , %19 NEW_LINE store i64 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %2 NEW_LINE br label %12 NEW_LINE 24: NEW_LINE %25 = load i64 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE %7 = alloca * i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 0 NEW_LINE store * i32 %9 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %12 = icmp eq i32 %11 , 1 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %8 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %20 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = load * i32 %7 NEW_LINE %19 = getelementptr inbounds i32 %18 , i32 1 NEW_LINE store * i32 %19 %7 NEW_LINE store i32 %17 %18 NEW_LINE br label %25 NEW_LINE 20: NEW_LINE %21 = load * i32 %7 NEW_LINE %22 = getelementptr inbounds i32 %21 , i32 -1 NEW_LINE store * i32 %22 %7 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %10 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %23 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = call i32 @f ( i32 %14 ) NEW_LINE %16 = mul nsw i32 %13 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call i32 @f ( i32 %14 ) NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %29 NEW_LINE 7: NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp sle i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %27 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp slt i32 %13 , 2 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1000000 x i32 @prime , i64 0 , i64 %17 NEW_LINE store i32 0 %18 NEW_LINE br label %23 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1000000 x i32 @prime , i64 0 , i64 %21 NEW_LINE store i32 1 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %8 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE call void @doit ( i32 %28 ) NEW_LINE br label %4 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %2 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp sle i64 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %24 NEW_LINE 11: NEW_LINE store i64 1 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i64 %3 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = icmp sle i64 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = add nsw i64 %21 , 1 NEW_LINE store i64 %22 %3 NEW_LINE br label %12 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i64 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %14 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE call void @furui ( i32 %9 ) NEW_LINE %10 = load i32 %3 NEW_LINE %11 = call i32 @count ( i32 %10 ) NEW_LINE store i32 %11 %4 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %12 ) NEW_LINE br label %5 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 @p NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 @p NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @p NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @p NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca STRUCT 2 ARR 3 10 x i32 i32 NEW_LINE store i32 0 %1 NEW_LINE call void @InitStack ( * STRUCT 2 ARR 3 10 x i32 i32 %3 ) NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %20 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %12 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE call void @push ( * STRUCT 2 ARR 3 10 x i32 i32 %3 i32 %11 ) NEW_LINE br label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %18 NEW_LINE 15: NEW_LINE %16 = call i32 @pop ( * STRUCT 2 ARR 3 10 x i32 i32 %3 ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %4 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %2 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 @p NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 @p NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @p NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @p NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %2 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 30 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 30 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 30 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = xor i32 %4 , -1 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %16 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = call i32 @pop ( ) NEW_LINE %12 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE br label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE call void @push ( i32 %14 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE br label %3 NEW_LINE 16: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %2 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %10 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = call i32 @sieve ( i32 %7 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %8 ) NEW_LINE br label %3 NEW_LINE 10: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call i32 @func ( i32 %14 ) NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %6 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %2 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = mul nsw i32 %15 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = icmp ne i32 -1 , %5 NEW_LINE br i1 %6 , label %7 , label %28 NEW_LINE 7: NEW_LINE %8 = load i64 %2 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = mul nsw i64 %8 , %9 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = mul nsw i64 %10 , %11 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = sdiv i64 600 , %13 NEW_LINE %15 = sub nsw i64 %14 , 1 NEW_LINE %16 = mul nsw i64 %12 , %15 NEW_LINE %17 = load i64 %2 NEW_LINE %18 = sdiv i64 600 , %17 NEW_LINE %19 = mul nsw i64 %16 , %18 NEW_LINE %20 = load i64 %2 NEW_LINE %21 = sdiv i64 600 , %20 NEW_LINE %22 = mul nsw i64 %21 , 2 NEW_LINE %23 = sub nsw i64 %22 , 1 NEW_LINE %24 = mul nsw i64 %19 , %23 NEW_LINE %25 = sdiv i64 %24 , 6 NEW_LINE store i64 %25 %3 NEW_LINE %26 = load i64 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %4 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %28 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = mul nsw i32 %14 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp slt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %26 NEW_LINE 10: NEW_LINE store i32 1 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp sle i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %23 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i64 %4 NEW_LINE %19 = mul i64 %18 , %17 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %11 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.2:%llu~0A~00" i64 0 i64 0 ) i64 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %5 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 @get_area ( i32 %14 i32 %15 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %4 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %10 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %23 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 1024 x i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = bitcast * ARR 3 1024 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 4096 i1 false ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %19 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 1024 x i32 %3 , i64 0 , i64 0 NEW_LINE %13 = call i32 @pop ( * i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = getelementptr inbounds ARR 3 1024 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @push ( i32 %16 * i32 %17 ) NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %5 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %27 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %19 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %4 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp sle i32 0 , %6 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = add nsw i32 %13 , %18 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @read ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %14 NEW_LINE 5: NEW_LINE %6 = load i32 @read NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %11 NEW_LINE 8: NEW_LINE %9 = call i32 @top ( ) NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %9 ) NEW_LINE call void @pop ( ) NEW_LINE br label %13 NEW_LINE 11: NEW_LINE %12 = load i32 @read NEW_LINE call void @push ( i32 %12 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE br label %2 NEW_LINE 14: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %26 NEW_LINE 7: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 @d NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE %12 = icmp slt i32 %9 , %11 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 @d NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = call i32 @f ( i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %2 NEW_LINE br label %8 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %4 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sgt i32 600 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i64 %4 NEW_LINE %21 = add nsw i64 %20 , %19 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i64 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp ne i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @prime_Eratos ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000001 x i32 @prime , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = icmp eq i32 %17 , 1 NEW_LINE br i1 %18 , label %19 , label %22 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %2 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = icmp ne i32 -1 , %5 NEW_LINE br i1 %6 , label %7 , label %28 NEW_LINE 7: NEW_LINE %8 = load i64 %2 NEW_LINE %9 = load i64 %2 NEW_LINE %10 = mul nsw i64 %8 , %9 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = mul nsw i64 %10 , %11 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = sdiv i64 600 , %13 NEW_LINE %15 = sub nsw i64 %14 , 1 NEW_LINE %16 = mul nsw i64 %12 , %15 NEW_LINE %17 = load i64 %2 NEW_LINE %18 = sdiv i64 600 , %17 NEW_LINE %19 = mul nsw i64 %16 , %18 NEW_LINE %20 = load i64 %2 NEW_LINE %21 = sdiv i64 600 , %20 NEW_LINE %22 = mul nsw i64 %21 , 2 NEW_LINE %23 = sub nsw i64 %22 , 1 NEW_LINE %24 = mul nsw i64 %19 , %23 NEW_LINE %25 = sdiv i64 %24 , 6 NEW_LINE store i64 %25 %3 NEW_LINE %26 = load i64 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %4 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = icmp slt i64 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i64 %4 NEW_LINE %15 = mul nsw i64 %13 , %14 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = mul nsw i64 %15 , %16 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = add nsw i64 %18 , %17 NEW_LINE store i64 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %2 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i64 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE store i64 0 %3 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = icmp sle i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 @sp NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %21 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = call i32 @stack_front ( ) NEW_LINE store i32 %15 %7 NEW_LINE call void @stack_pop ( ) NEW_LINE %16 = load i32 %7 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %20 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE call void @stack_push ( i32 %19 ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %8 NEW_LINE 21: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load * i32 @a NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = xor i32 %4 , -1 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %23 NEW_LINE 7: NEW_LINE %8 = load * i32 @a NEW_LINE %9 = load i32 %8 NEW_LINE %10 = srem i32 %9 , 12 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * i32 @a NEW_LINE %14 = getelementptr inbounds i32 %13 , i32 1 NEW_LINE store * i32 %14 @a NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load * i32 @a NEW_LINE %17 = getelementptr inbounds i32 %16 , i32 -1 NEW_LINE store * i32 %17 @a NEW_LINE %18 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %17 ) NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = inttoptr i64 %19 to * i32 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi * i32 ARR 2 %13 %12 , ARR 2 %20 %15 NEW_LINE br label %2 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %2 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE store i32 0 %2 NEW_LINE %10 = load i32 %5 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %2 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %11 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %4 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = add nsw i32 %14 , %19 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 getelementptr inbounds ( ARR 3 1000000 x i32 @table i64 0 i64 2 ) NEW_LINE store i32 3 @uncheck_min NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%i~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = call i32 @isprime ( i32 %14 ) NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %2 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 12 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 12 x i32 %3 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 12 x i32 %3 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp sle i32 0 , %6 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %4 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %15 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %2 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %24 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 @stack , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %23 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %2 NEW_LINE %21 = sext i32 %19 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 @stack , i64 0 , i64 %21 NEW_LINE store i32 %18 %22 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE br label %4 NEW_LINE 24: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i64 %3 NEW_LINE %10 = udiv i64 600 , %9 NEW_LINE %11 = sub i64 %10 , 1 NEW_LINE store i64 %11 %2 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul i64 %12 , %13 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = mul i64 %14 , %15 NEW_LINE %17 = load i64 %2 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = add i64 %18 , 1 NEW_LINE %20 = mul i64 %17 , %19 NEW_LINE %21 = load i64 %2 NEW_LINE %22 = mul i64 2 , %21 NEW_LINE %23 = add i64 %22 , 1 NEW_LINE %24 = mul i64 %20 , %23 NEW_LINE %25 = udiv i64 %24 , 6 NEW_LINE %26 = mul i64 %16 , %25 NEW_LINE store i64 %26 %4 NEW_LINE %27 = load i64 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lu~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = add nsw i32 %15 , %20 NEW_LINE store i32 %21 %5 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %23 , %24 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 %5 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = load i64 %3 NEW_LINE %12 = mul nsw i64 %11 , %10 NEW_LINE store i64 %12 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %2 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %16 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp sgt i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10000 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10000 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %2 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10000 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE br label %26 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %2 NEW_LINE %24 = sext i32 %22 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %24 NEW_LINE store i32 %21 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @d ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %26 NEW_LINE 6: NEW_LINE store i32 0 @s NEW_LINE store i32 0 @x NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @x NEW_LINE %9 = icmp slt i32 %8 , 600 NEW_LINE br i1 %9 , label %10 , label %22 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @x NEW_LINE %13 = load i32 @x NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = load i32 @d NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 @s NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 @s NEW_LINE %19 = load i32 @d NEW_LINE %20 = load i32 @x NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 @x NEW_LINE br label %7 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @s NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %2 NEW_LINE 26: NEW_LINE %27 = load i32 %1 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 @p NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 @p NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @p NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @p NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 @t , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %4 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %19 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %25 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i32 @sp NEW_LINE %11 = add nsw i32 %10 , -1 NEW_LINE store i32 %11 @sp NEW_LINE %12 = load i32 @sp NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 @stack , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 @sp NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 @stack , i64 0 , i64 %20 NEW_LINE store i32 %18 %21 NEW_LINE %22 = load i32 @sp NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 @sp NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %3 NEW_LINE 25: NEW_LINE %26 = load i32 %1 NEW_LINE ret i32 %26 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 128 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 128 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %25 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sub nsw i32 %18 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 128 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %11 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp slt i32 -1 , %6 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp ult i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %7 NEW_LINE 6: NEW_LINE br label %26 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 @sp NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 110 x i32 @Stack , i64 0 , i64 %13 NEW_LINE store i32 %11 %14 NEW_LINE %15 = load i32 @sp NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 @sp NEW_LINE br label %25 NEW_LINE 17: NEW_LINE %18 = load i32 @sp NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 @sp NEW_LINE %20 = load i32 @sp NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 110 x i32 @Stack , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %3 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 -1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %12 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = call i32 @f ( i32 %17 ) NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %4 NEW_LINE %12 = icmp slt i64 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i64 %4 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = mul nsw i64 %14 , %15 NEW_LINE %17 = load i64 %2 NEW_LINE %18 = mul nsw i64 %16 , %17 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = add nsw i64 %19 , %18 NEW_LINE store i64 %20 %3 NEW_LINE %21 = load i64 %2 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i64 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %25 ) NEW_LINE store i64 0 %4 NEW_LINE store i64 0 %3 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load * i32 @a NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = xor i32 %4 , -1 NEW_LINE %6 = icmp ne i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %23 NEW_LINE 7: NEW_LINE %8 = load * i32 @a NEW_LINE %9 = load i32 %8 NEW_LINE %10 = srem i32 %9 , 48 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * i32 @a NEW_LINE %14 = getelementptr inbounds i32 %13 , i32 1 NEW_LINE store * i32 %14 @a NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load * i32 @a NEW_LINE %17 = getelementptr inbounds i32 %16 , i32 -1 NEW_LINE store * i32 %17 @a NEW_LINE %18 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %17 ) NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = inttoptr i64 %19 to * i32 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = phi * i32 ARR 2 %13 %12 , ARR 2 %20 %15 NEW_LINE br label %2 NEW_LINE 23: NEW_LINE %24 = load i32 %1 NEW_LINE ret i32 %24 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %11 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i64 %4 NEW_LINE %21 = add nsw i64 %20 , %19 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i64 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = call double @pow ( double %16 double 3.000000e+00 ) #3 NEW_LINE %18 = fptosi double %17 to i32 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE %23 = mul nsw i32 %18 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %2 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %2 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 128 x i8 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE call void @init ( ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = getelementptr inbounds ARR 3 128 x i8 %6 , i64 0 , i64 0 NEW_LINE %10 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %11 = call * i8 @fgets ( * i8 %9 i32 128 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %10 ) NEW_LINE %12 = icmp ne * i8 %11 , null NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 128 x i8 %6 , i64 0 , i64 0 NEW_LINE %15 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %14 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) #3 NEW_LINE %16 = load i32 %7 NEW_LINE call void @printAnswer ( i32 %16 ) NEW_LINE br label %8 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp sgt i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %28 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , -1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = icmp sle i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i64 %4 NEW_LINE %21 = add nsw i64 %20 , %19 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i64 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE store i32 %16 %5 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %29 NEW_LINE 5: NEW_LINE store i32 1 @i NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 @i NEW_LINE %8 = load i32 @n NEW_LINE %9 = sdiv i32 600 , %8 NEW_LINE %10 = icmp slt i32 %7 , %9 NEW_LINE br i1 %10 , label %11 , label %26 NEW_LINE 11: NEW_LINE %12 = load i32 @n NEW_LINE %13 = load i32 @i NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = load i32 @n NEW_LINE %16 = load i32 @i NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = mul nsw i32 %14 , %17 NEW_LINE %19 = load i32 @n NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 @ans NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 @ans NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @i NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 @i NEW_LINE br label %6 NEW_LINE 26: NEW_LINE %27 = load i32 @ans NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE store i32 0 @ans NEW_LINE br label %2 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , %15 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp eq i32 %21 , 600 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE br label %25 NEW_LINE 24: NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = fmul double %16 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fadd double %24 , %22 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %5 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %25 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = call i32 @func ( i32 %17 i32 %18 ) NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %3 NEW_LINE br label %9 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %23 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 @pop ( ) NEW_LINE store i32 %12 %3 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 @stack_num NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 11 x i32 @stack_data , i64 0 , i64 %18 NEW_LINE store i32 %16 %19 NEW_LINE %20 = load i32 @stack_num NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @stack_num NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %4 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %30 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %11 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %30 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %12 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 21 x i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 0 NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp sle i32 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 1 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %11 NEW_LINE %13 = load i64 %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul i64 %13 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %18 NEW_LINE store i64 %16 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %5 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i64 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp sge i32 %9 , 1 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %27 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %30 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp ne i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , %16 NEW_LINE store i32 %18 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE store i32 %21 %5 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 30 x i32 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %5 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE store i64 %8 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %4 NEW_LINE %11 = icmp sgt i64 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %26 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = trunc i64 %13 to i32 NEW_LINE %15 = load i64 %4 NEW_LINE %16 = getelementptr inbounds ARR 3 30 x i32 %3 , i64 0 , i64 %15 NEW_LINE store i32 %14 %16 NEW_LINE %17 = load i64 %5 NEW_LINE %18 = load i64 %4 NEW_LINE %19 = getelementptr inbounds ARR 3 30 x i32 %3 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = mul nsw i64 %17 , %21 NEW_LINE store i64 %22 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = add nsw i64 %24 , -1 NEW_LINE store i64 %25 %4 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i64 %5 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 14 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 14 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 14 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 -1 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %2 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 105 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 105 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 105 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %2 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1024 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE %5 = bitcast * ARR 3 1024 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 4096 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %19 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE %17 = sext i32 %15 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %17 NEW_LINE store i32 %14 %18 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %6 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %18 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @i NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 99 x i32 @t , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 @i NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @i NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 99 x i32 @t , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %4 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %3 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE %29 = load i64 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %2 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp sgt i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %11 , %12 NEW_LINE %14 = icmp sle i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE store i64 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i64 %5 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = add nsw i64 %17 , %23 NEW_LINE store i64 %24 %5 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %25 , %26 NEW_LINE store i32 %27 %3 NEW_LINE br label %11 NEW_LINE 28: NEW_LINE %29 = load i64 %5 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i64 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i64 %2 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %2 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %4 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE %29 = load i64 %2 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %31 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double %16 , %18 NEW_LINE %20 = call double @pow ( double %19 double 2.000000e+00 ) #3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load i64 %4 NEW_LINE %25 = sitofp i64 %24 to double NEW_LINE %26 = fadd double %25 , %23 NEW_LINE %27 = fptosi double %26 to i64 NEW_LINE store i64 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %2 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i64 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @make_sosuu_num_list ( ) NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp eq i32 %4 , 1 NEW_LINE br i1 %5 , label %6 , label %12 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 1000000 x i32 @sosuu_num , i64 0 , i64 %8 NEW_LINE %10 = load i32 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %10 ) NEW_LINE br label %3 NEW_LINE 12: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 16 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 16 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %4 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 16 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 -1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100000 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100000 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @a ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %28 NEW_LINE 6: NEW_LINE store i32 0 @i NEW_LINE store i32 0 @b NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 @i NEW_LINE %9 = load i32 @a NEW_LINE %10 = sdiv i32 600 , %9 NEW_LINE %11 = icmp slt i32 %8 , %10 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 @a NEW_LINE %14 = load i32 @i NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 @a NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 @i NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 @i NEW_LINE %20 = mul nsw i32 %17 , %18 NEW_LINE %21 = load i32 @a NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 @b NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 @b NEW_LINE br label %7 NEW_LINE 25: NEW_LINE %26 = load i32 @b NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %2 NEW_LINE 28: NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %5 NEW_LINE br label %28 NEW_LINE 19: NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%ld~0A~00" i64 0 i64 0 ) * i64 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %31 NEW_LINE 12: NEW_LINE store i64 0 %8 NEW_LINE store i64 0 %7 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %7 NEW_LINE %15 = icmp slt i64 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i64 %7 NEW_LINE %18 = load i64 %7 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE %20 = load i64 %6 NEW_LINE %21 = mul nsw i64 %19 , %20 NEW_LINE %22 = load i64 %8 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %8 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i64 %6 NEW_LINE %26 = load i64 %7 NEW_LINE %27 = add nsw i64 %26 , %25 NEW_LINE store i64 %27 %7 NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i64 %8 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %9 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = mul nsw i32 %16 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %24 , %25 NEW_LINE store i32 %26 %4 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %18 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @i NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 @t , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 @i NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @i NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 @t , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE store i32 %22 %2 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %24 , %25 NEW_LINE store i32 %26 %4 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %11 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = add nsw i32 %16 , %21 NEW_LINE store i32 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp eq i64 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:1~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp slt i64 %11 , 21 NEW_LINE br i1 %12 , label %13 , label %28 NEW_LINE 13: NEW_LINE store i64 1 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = icmp sle i64 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = load i64 %3 NEW_LINE %21 = mul nsw i64 %19 , %20 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i64 %3 NEW_LINE %24 = add nsw i64 %23 , 1 NEW_LINE store i64 %24 %3 NEW_LINE br label %14 NEW_LINE 25: NEW_LINE %26 = load i64 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.2:%lld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %29 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = call i32 @f ( i32 %15 ) NEW_LINE %17 = mul nsw i32 %14 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %2 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %24 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %10 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %6 NEW_LINE call void @calcPoint ( * double %2 * double %3 * i32 %4 i32 %16 i32 %17 ) NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load double %2 NEW_LINE %20 = fptosi double %19 to i32 NEW_LINE %21 = load double %3 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %20 i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %31 NEW_LINE 10: NEW_LINE store i64 0 %3 NEW_LINE store i64 0 %4 NEW_LINE store i64 0 %5 NEW_LINE %11 = load i64 %2 NEW_LINE store i64 %11 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i64 %2 NEW_LINE %14 = icmp sgt i64 %13 , 599 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %28 NEW_LINE 16: NEW_LINE %17 = load i64 %6 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE %20 = load i64 %2 NEW_LINE %21 = mul nsw i64 %19 , %20 NEW_LINE store i64 %21 %3 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = load i64 %3 NEW_LINE %24 = add nsw i64 %22 , %23 NEW_LINE store i64 %24 %4 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = load i64 %6 NEW_LINE %27 = add nsw i64 %25 , %26 NEW_LINE store i64 %27 %2 NEW_LINE br label %12 NEW_LINE 28: NEW_LINE %29 = load i64 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %7 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = mul nsw i64 %17 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = mul nsw i64 %20 , %22 NEW_LINE %24 = load i64 %4 NEW_LINE %25 = add nsw i64 %24 , %23 NEW_LINE store i64 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %2 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %30 NEW_LINE 12: NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = icmp ne i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %27 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %7 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = add nsw i32 %17 , %22 NEW_LINE store i32 %23 %8 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = add nsw i32 %24 , %25 NEW_LINE store i32 %26 %7 NEW_LINE br label %13 NEW_LINE 27: NEW_LINE %28 = load i32 %8 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %9 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %34 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = srem i32 600 , %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %9 NEW_LINE 17: NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %6 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = icmp slt i32 %19 , 600 NEW_LINE br i1 %20 , label %21 , label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = call i32 @area ( i32 %22 i32 %23 ) NEW_LINE %25 = load i32 %8 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %8 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %6 NEW_LINE br label %18 NEW_LINE 31: NEW_LINE %32 = load i32 %8 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %9 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i64 0 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %32 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = load i64 %2 NEW_LINE %28 = add nsw i64 %27 , %26 NEW_LINE store i64 %28 %2 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %12 NEW_LINE 32: NEW_LINE %33 = load i64 %2 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %2 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = mul i64 %13 , %12 NEW_LINE store i64 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %28 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %18 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @n NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @n NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 @n NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @n NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp sle i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %27 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sub nsw i32 600 , %15 NEW_LINE %17 = mul nsw i32 %14 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sub nsw i32 600 , %18 NEW_LINE %20 = mul nsw i32 %17 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %2 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE store i32 %13 %4 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 %5 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = call i32 @f ( i32 %19 ) NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %22 , %23 NEW_LINE store i32 %24 %4 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = call i32 @f ( i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = load i64 %4 NEW_LINE %22 = add nsw i64 %21 , %20 NEW_LINE store i64 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i64 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %4 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lf~00" i64 0 i64 0 ) * double %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = load double %2 NEW_LINE %13 = fmul double %11 , %12 NEW_LINE %14 = fcmp olt double %13 , 6.000000e+02 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load double %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %2 NEW_LINE %20 = fmul double %18 , %19 NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = fmul double %16 , %21 NEW_LINE %23 = load double %4 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %4 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load double %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%.0f~0A~00" i64 0 i64 0 ) double %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp eq i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %32 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE %13 = load i32 %6 NEW_LINE store i32 %13 %7 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = icmp slt i32 %15 , 600 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 %7 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %8 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %8 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %6 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %7 NEW_LINE br label %14 NEW_LINE 29: NEW_LINE %30 = load i32 %8 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %9 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp eq i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %36 NEW_LINE 10: NEW_LINE store i64 0 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = load i64 %2 NEW_LINE %29 = add nsw i64 %28 , %27 NEW_LINE store i64 %29 %2 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %5 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %5 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i64 %2 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %34 ) NEW_LINE br label %6 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE store i64 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = add nsw i64 %25 , %24 NEW_LINE store i64 %26 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i64 %2 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = mul nsw i32 %15 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE store i64 0 %4 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %29 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = load i64 %4 NEW_LINE %24 = add nsw i64 %23 , %22 NEW_LINE store i64 %24 %4 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %3 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i64 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE store i64 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = mul nsw i64 %16 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = mul nsw i64 %19 , %21 NEW_LINE %23 = load i64 %3 NEW_LINE %24 = add nsw i64 %23 , %22 NEW_LINE store i64 %24 %3 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %4 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i64 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i64 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i64 %2 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %2 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %4 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE %29 = load i64 %2 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 @i NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @i NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 601 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE %16 = load i32 @i NEW_LINE %17 = load i32 @i NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 @a NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 @a NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 @i NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 @i NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 @a NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE store i32 0 @a NEW_LINE br label %4 NEW_LINE 30: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %2 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %30 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %11 , %12 NEW_LINE %14 = icmp sle i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %27 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %5 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i32 %5 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = call i32 @func ( i32 %18 ) NEW_LINE %20 = mul nsw i32 %15 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = load i64 %4 NEW_LINE %22 = add nsw i64 %21 , %20 NEW_LINE store i64 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %10 NEW_LINE 27: NEW_LINE %28 = load i64 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i64 1 %4 NEW_LINE store i32 2 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sle i32 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %4 NEW_LINE %14 = mul nsw i64 %13 , %12 NEW_LINE store i64 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %6 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %18 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @Cal_prime_number ( i32 %8 ) NEW_LINE store i32 %9 %3 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %14 NEW_LINE 12: NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 18 x i8 @".str.1:Allocation ▁ error~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE br label %4 NEW_LINE 18: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %25 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE %20 = sub nsw i32 %18 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %19 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @n NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @n NEW_LINE %14 = load i32 @n NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 @n NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 @n NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 @n NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %4 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 12 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 12 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 12 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 20 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 20 x i32 %5 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %28 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 20 x i32 %5 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %9 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sub nsw i32 %13 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sub nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = mul nsw i32 %12 , %19 NEW_LINE %21 = add nsw i32 %11 , %20 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %2 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = icmp sle i32 %26 , 600 NEW_LINE br i1 %27 , label %10 , label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %18 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %6 NEW_LINE call void @calcPoint ( * double %2 * double %3 * i32 %4 i32 %16 i32 %17 ) NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load double %2 NEW_LINE %20 = fptosi double %19 to i32 NEW_LINE %21 = load double %3 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %20 i32 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i32 ... ) ) ( * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = sub nsw i32 %15 , 48 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 0 ) , i64 %24 NEW_LINE %26 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i32 ARR 2 %19 %18 , ARR 2 %26 %21 NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = mul nsw i32 %15 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE store i32 %20 %2 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i64 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = load i64 %3 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %4 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE %29 = load i64 %3 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %25 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = call i32 @f ( i32 %15 i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , %19 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %3 NEW_LINE br label %9 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 29: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %34 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp slt i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = fmul double %18 , %21 NEW_LINE %23 = load i32 %8 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fadd double %24 , %22 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE store i32 %26 %8 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %2 NEW_LINE br label %13 NEW_LINE 31: NEW_LINE %32 = load i32 %8 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %9 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %5 NEW_LINE store i32 0 %3 NEW_LINE store i32 2 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = icmp sle i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %29 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = call i32 @function ( i32 %18 ) NEW_LINE %20 = mul nsw i32 %17 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %5 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %6 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = zext i32 %10 to i64 NEW_LINE %12 = call * i8 @llvm.stacksave ( ) NEW_LINE store * i8 %12 %4 NEW_LINE %13 = alloca i32 , i64 %11 NEW_LINE store i64 %11 %5 NEW_LINE %14 = load i32 %2 NEW_LINE call void @func_init_array ( * i32 %13 i32 %14 ) NEW_LINE %15 = load i32 %2 NEW_LINE %16 = call i32 @func_prime ( * i32 %13 i32 %15 ) NEW_LINE store i32 %16 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load * i8 %4 NEW_LINE call void @llvm.stackrestore ( * i8 %19 ) NEW_LINE br label %6 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = icmp ne i32 -1 , %9 NEW_LINE br i1 %10 , label %11 , label %28 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %24 , label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca STRUCT 2 ARR 3 100 x i32 i32 NEW_LINE store i32 0 %1 NEW_LINE call void @st ( * STRUCT 2 ARR 3 100 x i32 i32 %4 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds STRUCT 2 ARR 3 100 x i32 i32 %4 , i32 0 , i32 1 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp sgt i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %18 NEW_LINE 15: NEW_LINE %16 = call i32 @out ( * STRUCT 2 ARR 3 100 x i32 i32 %4 ) NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE call void @in ( * STRUCT 2 ARR 3 100 x i32 i32 %4 i32 %22 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %2 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = add nsw i64 %25 , %24 NEW_LINE store i64 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp sle i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %31 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = mul nsw i32 %18 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sub nsw i32 %24 , 1 NEW_LINE %26 = mul nsw i32 %23 , %25 NEW_LINE %27 = add nsw i32 %15 , %26 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca STRUCT 2 i32 * %struct.stack NEW_LINE %3 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * STRUCT 2 i32 * %struct.stack %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 16 i1 false ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %2 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %14 = call * STRUCT 2 i32 * %struct.stack @pop ( * STRUCT 2 i32 * %struct.stack %13 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %14 %3 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %18 = call * STRUCT 2 i32 * %struct.stack @push ( i32 %16 * STRUCT 2 i32 * %struct.stack %17 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %6 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sub nsw i32 %18 , 2 NEW_LINE store i32 %19 %3 NEW_LINE br label %25 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = add i64 %25 , %24 NEW_LINE store i64 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = load i32 %2 NEW_LINE call void @pop ( i32 %13 ) NEW_LINE br label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE call void @push ( i32 %15 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 @i NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %4 NEW_LINE 19: NEW_LINE store i32 0 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 @j NEW_LINE %23 = icmp slt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %33 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 100 x i32 @data2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %3 NEW_LINE br label %20 NEW_LINE 33: NEW_LINE %34 = load i32 %1 NEW_LINE ret i32 %34 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 11 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE store i32 %20 %2 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %2 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %4 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %31 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE store i32 0 %7 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = icmp slt i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = load i32 %7 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %8 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %8 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %6 NEW_LINE %26 = load i32 %7 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %7 NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i32 %8 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %9 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %3 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE %9 = load i32 %4 NEW_LINE store i32 %9 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %2 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = load i32 %2 NEW_LINE store i32 %6 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %4 NEW_LINE %9 = icmp sge i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %18 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = load i64 %3 NEW_LINE %14 = mul i64 %13 , %12 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %4 NEW_LINE br label %7 NEW_LINE 18: NEW_LINE %19 = load i64 %3 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp sle i64 %7 , %8 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %4 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i64 %3 NEW_LINE %16 = add nsw i64 %15 , 1 NEW_LINE store i64 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = call double @f ( i32 %17 ) NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %18 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %9 NEW_LINE 27: NEW_LINE %28 = load double %4 NEW_LINE %29 = fptosi double %28 to i32 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 101 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i64 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = icmp ne i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , %15 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = call double @pow ( double %21 double 2.000000e+00 ) #3 NEW_LINE %23 = fmul double %19 , %22 NEW_LINE %24 = load i64 %4 NEW_LINE %25 = sitofp i64 %24 to double NEW_LINE %26 = fadd double %25 , %23 NEW_LINE %27 = fptosi double %26 to i64 NEW_LINE store i64 %27 %4 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i64 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 1 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp ne i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 32 x i8 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = getelementptr inbounds ARR 3 32 x i8 %2 , i64 0 , i64 0 NEW_LINE %6 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %7 = call * i8 @fgets ( * i8 %5 i32 32 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %6 ) NEW_LINE %8 = icmp ne * i8 %7 , null NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 32 x i8 %2 , i64 0 , i64 0 NEW_LINE %11 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %10 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) #3 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = call i32 @integral ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %4 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %20 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @i NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 @p NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 @p NEW_LINE %16 = sext i32 %14 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %16 NEW_LINE store i32 %13 %17 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 @p NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 @p NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i32 ARR 2 %13 %12 , ARR 2 %24 %18 NEW_LINE br label %4 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 21 x i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 0 NEW_LINE store i64 1 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp sle i32 %6 , 20 NEW_LINE br i1 %7 , label %8 , label %23 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sub nsw i32 %9 , 1 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %11 NEW_LINE %13 = load i64 %12 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul i64 %13 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %18 NEW_LINE store i64 %16 %19 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %5 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 21 x i64 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i64 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %4 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %5 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp slt i32 %6 , 5 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @swap ( * i32 %17 ) NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @print ( * i32 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %21 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %4 NEW_LINE %19 = sext i32 %17 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %19 NEW_LINE store i32 0 %20 NEW_LINE br label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %25 NEW_LINE store i32 %22 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE %15 = icmp slt i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %5 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %11 NEW_LINE 30: NEW_LINE %31 = load i32 %5 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = add nsw i64 %25 , %24 NEW_LINE store i64 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE store i32 0 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %33 NEW_LINE 9: NEW_LINE store i32 1 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %2 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @k NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %24 NEW_LINE 12: NEW_LINE %13 = load i32 @i NEW_LINE %14 = load i32 @i NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 @s NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 @s NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 @i NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 @i NEW_LINE br label %9 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @s NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE %29 = xor i1 %28 , true NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE store i32 %30 @s NEW_LINE store i32 %30 @i NEW_LINE br label %4 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE ret i32 %32 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 101 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 101 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 404 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 101 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , 1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE br label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = icmp eq i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sub nsw i32 %22 , 1 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = load i32 %3 NEW_LINE %29 = sub nsw i32 %28 , 2 NEW_LINE store i32 %29 %3 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 101 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %3 NEW_LINE %4 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 1 NEW_LINE store i32 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %31 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %28 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %26 NEW_LINE store i32 0 %27 NEW_LINE br label %5 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE %13 = mul nsw i32 %10 , %12 NEW_LINE %14 = icmp sle i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = mul nsw i32 %16 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = mul nsw i32 %20 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 11 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE %5 = bitcast * ARR 3 11 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 44 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %25 NEW_LINE store i32 %23 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 101 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 101 x i32 %2 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sub nsw i32 %23 , 2 NEW_LINE store i32 %24 %3 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %4 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %31 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE store i32 %15 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sub nsw i32 %22 , 1 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , -1 NEW_LINE store i32 %29 %3 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 -1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %4 NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i32 %2 NEW_LINE store i32 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = icmp sle i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i64 %4 NEW_LINE %21 = add nsw i64 %20 , %19 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %10 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = load i64 %4 NEW_LINE %30 = mul nsw i64 %29 , %28 NEW_LINE store i64 %30 %4 NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %31 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %29 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %21 NEW_LINE 15: NEW_LINE %16 = load i32 %7 NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE %19 = sext i32 %17 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %19 NEW_LINE store i32 %16 %20 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %8 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %8 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %9 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %31 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 @c , i64 0 , i64 %13 NEW_LINE store i32 %11 %14 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE br label %30 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %29 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sub nsw i32 %21 , 1 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 @c , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , -1 NEW_LINE store i32 %28 %3 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %4 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %3 NEW_LINE br label %28 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %4 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %4 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 1 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = call i32 @f ( i32 %19 ) NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %5 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %2 NEW_LINE br label %12 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE store i64 0 %6 NEW_LINE store i64 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = mul nsw i64 %12 , %13 NEW_LINE %15 = icmp slt i64 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i64 %2 NEW_LINE %18 = load i64 %3 NEW_LINE %19 = load i64 %2 NEW_LINE %20 = mul nsw i64 %18 , %19 NEW_LINE %21 = mul nsw i64 %17 , %20 NEW_LINE %22 = load i64 %3 NEW_LINE %23 = load i64 %2 NEW_LINE %24 = mul nsw i64 %22 , %23 NEW_LINE %25 = mul nsw i64 %21 , %24 NEW_LINE %26 = load i64 %6 NEW_LINE %27 = add nsw i64 %26 , %25 NEW_LINE store i64 %27 %6 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i64 %3 NEW_LINE %30 = add nsw i64 %29 , 1 NEW_LINE store i64 %30 %3 NEW_LINE br label %11 NEW_LINE 31: NEW_LINE %32 = load i64 %6 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %32 ) NEW_LINE br label %7 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %36 NEW_LINE 11: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sdiv i32 600 , %14 NEW_LINE %16 = icmp slt i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE store i32 %23 %4 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE store i32 %26 %5 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %7 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %6 NEW_LINE br label %12 NEW_LINE 33: NEW_LINE %34 = load i32 %7 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %8 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = add nsw i32 %15 , %24 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10000 x i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %25 NEW_LINE 6: NEW_LINE %7 = load i32 @n NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , -1 NEW_LINE store i32 %11 @i NEW_LINE %12 = load i32 @i NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10000 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 @n NEW_LINE %19 = load i32 @i NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10000 x i32 %2 , i64 0 , i64 %20 NEW_LINE store i32 %18 %21 NEW_LINE %22 = load i32 @i NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 @i NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %3 NEW_LINE 25: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @a NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %18 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @i NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @i NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 @t , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 @i NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 @i NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 @t , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %4 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE ret i32 %26 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE store i32 %9 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 0 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %29 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sub nsw i32 %21 , 2 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i32 ARR 2 %17 %19 , ARR 2 %26 %20 NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 -1 , %6 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %9 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = mul nsw i32 %28 , %29 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = mul nsw i32 %15 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = add nsw i64 %25 , %24 NEW_LINE store i64 %26 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %2 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %2 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %9 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = mul nsw i32 %29 , %28 NEW_LINE store i32 %30 %3 NEW_LINE %31 = load i32 %3 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE store double 0.000000e+00 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %34 NEW_LINE 9: NEW_LINE store i32 1 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %31 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load double %4 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load double %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.0lf~0A~00" i64 0 i64 0 ) double %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %28 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %22 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %22 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %4 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %20 ) NEW_LINE br label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %25 NEW_LINE store i32 %23 %26 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %22 , %25 NEW_LINE %27 = add nsw i32 %17 , %26 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 81 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %20 NEW_LINE 8: NEW_LINE %9 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %10 = call i32 @scan ( * i8 %9 * i32 %4 ) NEW_LINE store i32 %10 %3 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 100 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE br label %20 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = call i32 @charPlus ( * i8 %15 i32 %16 ) NEW_LINE %18 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.5:%s~0A~00" i64 0 i64 0 ) * i8 %18 ) NEW_LINE br label %5 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE call void @search_prime ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000000 x i8 @prime , i64 0 , i64 %15 NEW_LINE %17 = load i8 %16 NEW_LINE %18 = icmp ne i8 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %22 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i32 ... ) ) ( * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = sub nsw i32 %15 , 48 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %24 NEW_LINE %26 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i32 ARR 2 %19 %18 , ARR 2 %26 %21 NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %4 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load double %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%.0lf~0A~00" i64 0 i64 0 ) double %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i64 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE store i64 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %4 NEW_LINE %13 = icmp slt i64 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i64 %4 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = mul nsw i64 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = mul nsw i64 %17 , %19 NEW_LINE %21 = load i64 %3 NEW_LINE %22 = add nsw i64 %21 , %20 NEW_LINE store i64 %22 %3 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = load i64 %4 NEW_LINE %27 = add nsw i64 %26 , %25 NEW_LINE store i64 %27 %4 NEW_LINE br label %11 NEW_LINE 28: NEW_LINE %29 = load i64 %3 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE store i32 0 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %28 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE store i32 %18 %4 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = call i32 @func ( i32 %20 ) NEW_LINE %22 = mul nsw i32 %19 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %5 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %2 NEW_LINE br label %10 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%lu~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE store i64 1 %3 NEW_LINE %10 = load i64 %2 NEW_LINE store i64 %10 %4 NEW_LINE store i64 0 %5 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = udiv i64 600 , %13 NEW_LINE %15 = icmp ult i64 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %29 NEW_LINE 16: NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i64 %4 NEW_LINE %19 = mul i64 %17 , %18 NEW_LINE %20 = load i64 %2 NEW_LINE %21 = mul i64 %19 , %20 NEW_LINE %22 = load i64 %5 NEW_LINE %23 = add i64 %22 , %21 NEW_LINE store i64 %23 %5 NEW_LINE %24 = load i64 %2 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = add i64 %25 , %24 NEW_LINE store i64 %26 %4 NEW_LINE %27 = load i64 %3 NEW_LINE %28 = add i64 %27 , 1 NEW_LINE store i64 %28 %3 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i64 %5 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lu~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE br label %6 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %30 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 0 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %35 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 600 , %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 %12 , %13 NEW_LINE %15 = icmp sle i32 %10 , %14 NEW_LINE br i1 %15 , label %16 , label %32 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = load i64 %4 NEW_LINE %28 = add nsw i64 %27 , %26 NEW_LINE store i64 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE %33 = load i64 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %33 ) NEW_LINE br label %5 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 30 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %22 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 30 x i32 %4 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %21 NEW_LINE 21: NEW_LINE br label %28 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE %26 = sext i32 %24 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 30 x i32 %4 , i64 0 , i64 %26 NEW_LINE store i32 %23 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %27 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = call double @pow ( double %16 double 2.000000e+00 ) #3 NEW_LINE %18 = fmul double %14 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fadd double %20 , %18 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %9 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 600 , %10 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %5 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp sgt i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %4 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sub nsw i32 %25 , %26 NEW_LINE store i32 %27 %3 NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %22 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = sext i32 %18 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %20 NEW_LINE store i32 0 %21 NEW_LINE br label %28 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE %26 = sext i32 %24 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %26 NEW_LINE store i32 %23 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %4 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE %15 = icmp slt i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %5 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %11 NEW_LINE 30: NEW_LINE %31 = load i32 %5 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %22 , %25 NEW_LINE %27 = add nsw i32 %17 , %26 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %5 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 100 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 400 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @i NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 @p NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 @p NEW_LINE %16 = sext i32 %14 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %16 NEW_LINE store i32 %13 %17 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 @p NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 @p NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i32 ARR 2 %13 %12 , ARR 2 %24 %18 NEW_LINE br label %4 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %35 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sub nsw i32 600 , %24 NEW_LINE %26 = icmp eq i32 %23 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE br label %32 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %5 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = call double @pow ( double %18 double 2.000000e+00 ) #3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fadd double %24 , %22 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %28 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %4 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 %12 , %13 NEW_LINE %15 = icmp sle i32 %11 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = fadd double %18 , %24 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %28 , %29 NEW_LINE store i32 %30 %4 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i64 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %32 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %17 , %24 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = load i64 %5 NEW_LINE %28 = add nsw i64 %27 , %26 NEW_LINE store i64 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %12 NEW_LINE 32: NEW_LINE %33 = load i64 %5 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %2 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %35 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %32 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = load i64 %4 NEW_LINE %28 = add nsw i64 %27 , %26 NEW_LINE store i64 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE %33 = load i64 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %33 ) NEW_LINE br label %5 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @prime ( ) NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %23 NEW_LINE 7: NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 80000 x i32 @pri , i64 0 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp sgt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %20 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %3 NEW_LINE br label %8 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE br label %4 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 101 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %23 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 101 x i32 %3 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 %4 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 101 x i32 %3 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE br label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 101 x i32 %3 , i64 0 , i64 %26 NEW_LINE store i32 %24 %27 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %12 = icmp ne i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %33 NEW_LINE 13: NEW_LINE %14 = load i32 %8 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 10 x i32 %9 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %4 NEW_LINE br label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %8 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %9 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %10 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %3 NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sub nsw i32 %15 , 1 NEW_LINE %17 = icmp sle i32 %14 , %16 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = mul nsw i32 %23 , %26 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %7 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %2 NEW_LINE store i32 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = call double @pow ( double %18 double 2.000000e+00 ) #3 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load i64 %2 NEW_LINE %24 = sitofp i64 %23 to double NEW_LINE %25 = fadd double %24 , %22 NEW_LINE %26 = fptosi double %25 to i64 NEW_LINE store i64 %26 %2 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i64 %2 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE store i64 0 %2 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 32: NEW_LINE %33 = load i32 %1 NEW_LINE ret i32 %33 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %21 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %4 NEW_LINE call void @move ( * double %2 * double %3 i32 %16 i32 %17 ) NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sub nsw i32 %19 , %18 NEW_LINE store i32 %20 %6 NEW_LINE br label %7 NEW_LINE 21: NEW_LINE %22 = load double %2 NEW_LINE %23 = fptosi double %22 to i32 NEW_LINE %24 = load double %3 NEW_LINE %25 = fptosi double %24 to i32 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %23 i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @f ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %29 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 600 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 %12 , %13 NEW_LINE %15 = icmp slt i32 %11 , %14 NEW_LINE br i1 %15 , label %16 , label %29 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %5 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %10 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = mul nsw i32 %30 , %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp eq i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %35 NEW_LINE 10: NEW_LINE store i32 0 %5 NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE store i32 %15 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = add nsw i32 %16 , %21 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sub nsw i32 600 , %24 NEW_LINE %26 = icmp eq i32 %23 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE br label %32 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %12 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %33 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE store i32 %19 %5 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %6 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %7 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %3 NEW_LINE br label %13 NEW_LINE 30: NEW_LINE %31 = load i32 %7 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @get_input_num ( ) NEW_LINE store i32 0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 %2 NEW_LINE %5 = load i32 @input_num NEW_LINE %6 = icmp ult i32 %4 , %5 NEW_LINE br i1 %6 , label %7 , label %11 NEW_LINE 7: NEW_LINE call void @get_input ( * i64 getelementptr inbounds ( ARR 3 10 x i64 @input1 i64 0 i64 0 ) * i32 @input1_sz ) NEW_LINE call void @get_input ( * i64 getelementptr inbounds ( ARR 3 10 x i64 @input2 i64 0 i64 0 ) * i32 @input2_sz ) NEW_LINE call void @get_output ( ) NEW_LINE call void @print_output ( ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %9 , 1 NEW_LINE store i32 %10 %2 NEW_LINE br label %3 NEW_LINE 11: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = add nsw i32 %17 , %26 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 11 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 11 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 44 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %30 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp slt i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %24 NEW_LINE 23: NEW_LINE br label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 11 x i32 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 11 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = bitcast * ARR 3 11 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 44 i1 false ) NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %5 NEW_LINE br label %29 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sub nsw i32 %21 , 1 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %27 , -1 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %7 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca STRUCT 2 i32 * %struct.stack NEW_LINE %3 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * STRUCT 2 i32 * %struct.stack %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 16 i1 false ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %2 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %14 = call * STRUCT 2 i32 * %struct.stack @pop ( * STRUCT 2 i32 * %struct.stack %13 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %14 %3 NEW_LINE br label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %18 = call * STRUCT 2 i32 * %struct.stack @push ( i32 %16 * STRUCT 2 i32 * %struct.stack %17 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %6 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp sgt i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %4 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load double %4 NEW_LINE %32 = fptosi double %31 to i32 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %36 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %22 , %25 NEW_LINE store i32 %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %27 , %28 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %10 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %6 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %23 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %23 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sub nsw i32 %15 , 1 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sub nsw i32 %21 , 2 NEW_LINE store i32 %22 %3 NEW_LINE br label %28 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %26 NEW_LINE store i32 %24 %27 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp eq i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %4 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE store i32 %27 %3 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 601 , %13 NEW_LINE %15 = icmp slt i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %33 NEW_LINE 10: NEW_LINE store i32 1 %4 NEW_LINE store i64 0 %6 NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE store i32 %20 %5 NEW_LINE %21 = load i64 %6 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = add nsw i64 %21 , %23 NEW_LINE store i64 %24 %6 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = mul nsw i32 %27 , %28 NEW_LINE store i32 %29 %3 NEW_LINE br label %12 NEW_LINE 30: NEW_LINE %31 = load i64 %6 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %7 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE %9 = load i64 %2 NEW_LINE store i64 %9 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %3 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = sub nsw i64 600 , %12 NEW_LINE %14 = icmp sle i64 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = sitofp i64 %16 to double NEW_LINE %18 = call double @pow ( double %17 double 2.000000e+00 ) #3 NEW_LINE %19 = load i64 %2 NEW_LINE %20 = sitofp i64 %19 to double NEW_LINE %21 = fmul double %18 , %20 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = sitofp i64 %22 to double NEW_LINE %24 = fadd double %23 , %21 NEW_LINE %25 = fptosi double %24 to i64 NEW_LINE store i64 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i64 %2 NEW_LINE %28 = load i64 %3 NEW_LINE %29 = add nsw i64 %28 , %27 NEW_LINE store i64 %29 %3 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = add nsw i32 %17 , %26 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 %12 , %13 NEW_LINE %15 = icmp slt i32 %11 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %30 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %27 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = call i32 @f ( i32 %17 ) NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , %20 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %2 NEW_LINE br label %11 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %38 NEW_LINE 9: NEW_LINE store i32 1 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %35 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = load i64 %3 NEW_LINE %17 = mul nsw i64 %15 , %16 NEW_LINE store i64 %17 %4 NEW_LINE %18 = load i64 %4 NEW_LINE %19 = load i64 %3 NEW_LINE %20 = sub nsw i64 600 , %19 NEW_LINE %21 = icmp sgt i64 %18 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE br label %35 NEW_LINE 23: NEW_LINE %24 = load i64 %4 NEW_LINE %25 = load i64 %4 NEW_LINE %26 = mul nsw i64 %25 , %24 NEW_LINE store i64 %26 %4 NEW_LINE %27 = load i64 %4 NEW_LINE %28 = load i64 %3 NEW_LINE %29 = mul nsw i64 %27 , %28 NEW_LINE %30 = load i64 %2 NEW_LINE %31 = add nsw i64 %30 , %29 NEW_LINE store i64 %31 %2 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %5 NEW_LINE br label %10 NEW_LINE 35: NEW_LINE %36 = load i64 %2 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %36 ) NEW_LINE store i64 0 %2 NEW_LINE br label %6 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %3 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sub nsw i32 %10 , %11 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sub nsw i32 %16 , %15 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 600 , %19 NEW_LINE %21 = mul nsw i32 %18 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sub nsw i32 600 , %22 NEW_LINE %24 = mul nsw i32 %21 , %23 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = load i64 %4 NEW_LINE %27 = add nsw i64 %26 , %25 NEW_LINE store i64 %27 %4 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i64 %4 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %29 ) NEW_LINE store i64 0 %4 NEW_LINE store i32 600 %3 NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i64 2 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %30 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = call i32 @check ( i64 %14 ) NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = icmp eq i64 %21 , 2 NEW_LINE br i1 %22 , label %23 , label %26 NEW_LINE 23: NEW_LINE %24 = load i64 %3 NEW_LINE %25 = sub nsw i64 %24 , 1 NEW_LINE store i64 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %3 NEW_LINE %29 = add nsw i64 %28 , 2 NEW_LINE store i64 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i64 2 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %30 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = call i32 @check ( i64 %14 ) NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = icmp eq i64 %21 , 2 NEW_LINE br i1 %22 , label %23 , label %26 NEW_LINE 23: NEW_LINE %24 = load i64 %3 NEW_LINE %25 = sub nsw i64 %24 , 1 NEW_LINE store i64 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %3 NEW_LINE %29 = add nsw i64 %28 , 2 NEW_LINE store i64 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sub nsw i32 %25 , 1 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %27 NEW_LINE store i32 0 %28 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sub nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i8 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %21 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %6 NEW_LINE call void @set_point ( * double %2 * double %3 i32 %19 i32 %20 * i32 %4 ) NEW_LINE br label %8 NEW_LINE 21: NEW_LINE %22 = load double %2 NEW_LINE %23 = fptosi double %22 to i32 NEW_LINE %24 = load double %3 NEW_LINE %25 = fptosi double %24 to i32 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %23 i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE %7 = bitcast * ARR 3 10 x i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 40 i1 false ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %30 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %17 NEW_LINE store i32 %15 %18 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %5 NEW_LINE br label %29 NEW_LINE 21: NEW_LINE %22 = load i32 %5 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %5 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %8 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %35 NEW_LINE 9: NEW_LINE store i32 1 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE store i32 0 %5 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %6 NEW_LINE store i32 1 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %18 , %25 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %5 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %3 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %2 NEW_LINE %37 = icmp eq i32 %36 , 0 NEW_LINE br i1 %37 , label %38 , label %39 NEW_LINE 38: NEW_LINE br label %40 NEW_LINE 39: NEW_LINE br label %7 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = mul nsw i32 %21 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str:%d%d%d%d%d~00" i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 1 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 2 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 3 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 4 i64 0 ) ) NEW_LINE %3 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 ) @M ) NEW_LINE %4 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) NEW_LINE %5 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 1 i64 0 ) NEW_LINE %6 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 2 i64 0 ) NEW_LINE %7 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 3 i64 0 ) NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 4 i64 0 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %4 i32 %5 i32 %6 i32 %7 i32 %8 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca ARR 3 10 x i8 NEW_LINE store i32 0 %1 NEW_LINE store i8 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i8 %3 ) NEW_LINE %7 = load i8 %3 NEW_LINE %8 = icmp ne i8 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %15 NEW_LINE 9: NEW_LINE %10 = load i8 %3 NEW_LINE %11 = load i8 %2 NEW_LINE %12 = add i8 %11 , 1 NEW_LINE store i8 %12 %2 NEW_LINE %13 = sext i8 %11 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i8 %4 , i64 0 , i64 %13 NEW_LINE store i8 %10 %14 NEW_LINE br label %28 NEW_LINE 15: NEW_LINE %16 = load i8 %2 NEW_LINE %17 = icmp ne i8 %16 , 0 NEW_LINE br i1 %17 , label %19 , label %18 NEW_LINE 18: NEW_LINE ret i32 0 NEW_LINE 19: NEW_LINE %20 = load i8 %2 NEW_LINE %21 = add i8 %20 , -1 NEW_LINE store i8 %21 %2 NEW_LINE %22 = sext i8 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i8 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %35 NEW_LINE 10: NEW_LINE store i32 0 %6 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %6 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %13 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %7 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = icmp sle i32 %10 , %13 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %4 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sub nsw i32 600 , %13 NEW_LINE %15 = icmp sle i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp eq i32 %5 , 0 NEW_LINE br i1 %6 , label %7 , label %8 NEW_LINE 7: NEW_LINE store i64 1 %2 NEW_LINE br label %21 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE store i64 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = icmp sgt i32 %13 , 1 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = mul nsw i64 %18 , %17 NEW_LINE store i64 %19 %2 NEW_LINE br label %11 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i64 %2 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE br label %5 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE %9 = load i32 %3 NEW_LINE store i32 %9 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %10 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %36 NEW_LINE 10: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %6 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = mul nsw i32 %12 , %13 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sub nsw i32 600 , %15 NEW_LINE %17 = icmp sgt i32 %14 , %16 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %33 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %5 NEW_LINE %31 = load i32 %6 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %6 NEW_LINE br label %11 NEW_LINE 33: NEW_LINE %34 = load i32 %5 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %7 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 16 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %19 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 16 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 16 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @t i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %32 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 9 x i32 @t , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 9 x i32 @t , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = phi i32 ARR 2 %21 %20 , ARR 2 %29 %23 NEW_LINE br label %4 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE ret i32 %33 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @init ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = call zeroext i1 @is_prime ( i32 %14 ) NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE store i32 %12 %3 NEW_LINE store i32 0 %6 NEW_LINE store i32 1 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE store i32 %26 %5 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %6 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %7 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %33 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %36 NEW_LINE 9: NEW_LINE store i32 1 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sub nsw i32 600 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sdiv i32 %13 , %14 NEW_LINE %16 = icmp sle i32 %11 , %15 NEW_LINE br i1 %16 , label %17 , label %33 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %3 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %5 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %5 NEW_LINE br label %10 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE %13 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 32 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %6 * double %7 * double %8 * double %9 * double %10 * double %11 * double %12 * double %13 ) NEW_LINE %16 = icmp ne i32 %15 , -1 NEW_LINE br i1 %16 , label %17 , label %26 NEW_LINE 17: NEW_LINE %18 = load double %6 NEW_LINE %19 = load double %7 NEW_LINE %20 = load double %8 NEW_LINE %21 = load double %9 NEW_LINE %22 = load double %10 NEW_LINE %23 = load double %11 NEW_LINE %24 = load double %12 NEW_LINE %25 = load double %13 NEW_LINE call void @isInTriangle ( double %18 double %19 double %20 double %21 double %22 double %23 double %24 double %25 ) NEW_LINE br label %14 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 16 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = bitcast * ARR 3 16 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 64 i1 false ) NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %23 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = getelementptr inbounds ARR 3 16 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @push ( i32 %15 * i32 %5 * i32 %16 ) NEW_LINE br label %22 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 16 x i32 %4 , i64 0 , i64 0 NEW_LINE %19 = call i32 @pop ( * i32 %5 * i32 %18 ) NEW_LINE store i32 %19 %6 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %20 ) NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %8 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %36 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE store i32 1 %7 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = sdiv i32 600 , %15 NEW_LINE %17 = icmp slt i32 %14 , %16 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = mul nsw i32 %23 , %26 NEW_LINE %28 = load i32 %8 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %8 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %7 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %7 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i32 %8 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %9 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %37 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sub nsw i32 %14 , 1 NEW_LINE %16 = icmp slt i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %34 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %21 , %25 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %5 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %2 NEW_LINE br label %12 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %6 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = load * i32 @p NEW_LINE %3 = bitcast * i32 %2 to * i8 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 %3 * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 1 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 2 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 3 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 4 i64 0 ) ) NEW_LINE %5 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 ) @M ) NEW_LINE %6 = load * i32 @p NEW_LINE %7 = bitcast * i32 %6 to * i8 NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) NEW_LINE %9 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 1 i64 0 ) NEW_LINE %10 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 2 i64 0 ) NEW_LINE %11 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 3 i64 0 ) NEW_LINE %12 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 4 i64 0 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 %7 i32 %8 i32 %9 i32 %10 i32 %11 i32 %12 ) NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 15 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %24 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 15 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sub nsw i32 %18 , 1 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 15 x i32 %2 , i64 0 , i64 %20 NEW_LINE store i32 0 %21 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE br label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 15 x i32 %2 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE store i32 0 %3 NEW_LINE store i32 2 %4 NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %5 NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %6 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sub nsw i32 600 , %15 NEW_LINE %17 = icmp sle i32 %14 , %16 NEW_LINE br i1 %17 , label %18 , label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = add nsw i32 %19 , %24 NEW_LINE store i32 %25 %3 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %6 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %13 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %7 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %19 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp eq i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %14 NEW_LINE 10: NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = load i32 %2 NEW_LINE call void @pop ( i32 %13 ) NEW_LINE br label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE call void @push ( i32 %15 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 @i NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %4 NEW_LINE 19: NEW_LINE store i32 0 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 @j NEW_LINE %23 = icmp slt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %33 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 100 x i32 @data2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %3 NEW_LINE br label %20 NEW_LINE 33: NEW_LINE %34 = load i32 %1 NEW_LINE ret i32 %34 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %36 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE store i32 1 %7 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = load i32 %6 NEW_LINE %16 = mul nsw i32 %14 , %15 NEW_LINE %17 = icmp slt i32 %16 , 600 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = load i32 %6 NEW_LINE %20 = load i32 %7 NEW_LINE %21 = load i32 %6 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = mul nsw i32 %23 , %26 NEW_LINE %28 = load i32 %8 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %8 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %7 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %7 NEW_LINE br label %13 NEW_LINE 33: NEW_LINE %34 = load i32 %8 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %9 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 @last_turn NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %6 * double %7 ) NEW_LINE %10 = load double %6 NEW_LINE %11 = load double %7 NEW_LINE %12 = call double @walk ( double %10 double %11 * double %4 * double %5 ) NEW_LINE %13 = load double @last_turn NEW_LINE %14 = fadd double %13 , %12 NEW_LINE store double %14 @last_turn NEW_LINE %15 = load double %6 NEW_LINE %16 = fcmp oeq double %15 , 0.000000e+00 NEW_LINE br i1 %16 , label %17 , label %21 NEW_LINE 17: NEW_LINE %18 = load double %7 NEW_LINE %19 = fcmp oeq double %18 , 0.000000e+00 NEW_LINE br i1 %19 , label %20 , label %21 NEW_LINE 20: NEW_LINE br label %22 NEW_LINE 21: NEW_LINE br label %8 NEW_LINE 22: NEW_LINE %23 = load double %4 NEW_LINE %24 = fptosi double %23 to i32 NEW_LINE %25 = load double %5 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %24 i32 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %2 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE store i32 %20 %2 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE %4 = bitcast * ARR 3 10 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 40 i1 false ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %29 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %25 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %28 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %2 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d ▁ ~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %30 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE %10 = load i32 %2 NEW_LINE store i32 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %24 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %4 NEW_LINE br label %11 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = mul nsw i32 %26 , %25 NEW_LINE store i32 %27 %3 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %4 = load i32 %2 NEW_LINE %5 = call i64 @factorial ( i32 %4 ) NEW_LINE %6 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %5 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %28 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , -1 NEW_LINE store i32 %18 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %4 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %31 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE %17 = sext i32 %15 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %22 NEW_LINE 21: NEW_LINE br label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sub nsw i32 %23 , 2 NEW_LINE store i32 %24 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i32 ARR 2 %19 %21 , ARR 2 %28 %22 NEW_LINE br label %4 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE ret i32 %32 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = mul nsw i32 %18 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = mul nsw i32 %22 , %25 NEW_LINE %27 = add nsw i32 %17 , %26 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %12 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 32 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double @ix1 * double @iy1 * double @ix2 * double @iy2 * double @ix3 * double @iy3 * double @ixp * double @iyp ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %13 NEW_LINE 5: NEW_LINE %6 = call i32 @solve1 ( ) NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %10 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:YES~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %12 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:NO~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE br label %2 NEW_LINE 13: NEW_LINE %14 = load i32 %1 NEW_LINE ret i32 %14 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %25 NEW_LINE store i32 %23 %26 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %2 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %2 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %4 NEW_LINE br label %30 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 0 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE store i32 %9 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %29 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sub nsw i32 %21 , 2 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i32 ARR 2 %17 %19 , ARR 2 %26 %20 NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %38 NEW_LINE 11: NEW_LINE store i32 0 %6 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %7 NEW_LINE store i32 0 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %7 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %35 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE store i32 %26 %5 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = mul nsw i32 %27 , %28 NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %6 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %3 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %3 NEW_LINE br label %14 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %8 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:~8B~01+~06~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = call i32 @sort ( * i32 %16 ) NEW_LINE store i32 4 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp sge i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %34 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp eq i32 %26 , 0 NEW_LINE %28 = zext i1 %27 to i64 NEW_LINE %29 = select i1 %27 , i32 10 , i32 32 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %25 i32 %29 ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , -1 NEW_LINE store i32 %33 %3 NEW_LINE br label %18 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %33 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sle i32 1 , %20 NEW_LINE br i1 %21 , label %22 , label %32 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = icmp sle i32 %23 , 10 NEW_LINE br i1 %24 , label %25 , label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %32 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %6 NEW_LINE br label %14 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 600 %2 NEW_LINE store i64 0 %6 NEW_LINE store i64 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %4 NEW_LINE store i64 0 %6 NEW_LINE store i32 0 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %34 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = load i64 %6 NEW_LINE %30 = add nsw i64 %29 , %28 NEW_LINE store i64 %30 %6 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %5 NEW_LINE br label %14 NEW_LINE 34: NEW_LINE %35 = load i64 %6 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %35 ) NEW_LINE br label %8 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %13 ) NEW_LINE store i32 %14 %2 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %4 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE store i32 0 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %39 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = icmp sgt i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %33 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE call void @push ( i32 %32 ) NEW_LINE br label %35 NEW_LINE 33: NEW_LINE %34 = call i32 @pop ( ) NEW_LINE br label %35 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %3 NEW_LINE br label %18 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call noalias * i8 @malloc ( i64 804 ) #3 NEW_LINE %5 = bitcast * i8 %4 to * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE store * STRUCT 2 i32 ARR 3 200 x i32 %5 %3 NEW_LINE %6 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE call void @initialize ( * STRUCT 2 i32 ARR 3 200 x i32 %6 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %21 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %15 = call i32 @pop ( * STRUCT 2 i32 ARR 3 200 x i32 %14 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE br label %20 NEW_LINE 17: NEW_LINE %18 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE call void @push ( * STRUCT 2 i32 ARR 3 200 x i32 %18 i32 %19 ) NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %7 NEW_LINE 21: NEW_LINE %22 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %23 = bitcast * STRUCT 2 i32 ARR 3 200 x i32 %22 to * i8 NEW_LINE call void @free ( * i8 %23 ) #3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE store i32 %6 @i NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp sgt i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 @p NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 @p NEW_LINE %16 = sext i32 %14 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %16 NEW_LINE store i32 %13 %17 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 @p NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 @p NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 @s , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i32 ARR 2 %13 %12 , ARR 2 %24 %18 NEW_LINE br label %4 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE ret i32 %28 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %35 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = icmp slt i32 %10 , %13 NEW_LINE br i1 %14 , label %15 , label %32 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE %19 = mul nsw i32 %16 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE %24 = mul nsw i32 %21 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %5 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE store i32 1 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sub nsw i32 600 , %18 NEW_LINE %20 = icmp ne i32 %17 , %19 NEW_LINE br i1 %20 , label %21 , label %35 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = mul nsw i32 %28 , %29 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = mul nsw i32 %30 , %31 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = add nsw i32 %33 , %32 NEW_LINE store i32 %34 %4 NEW_LINE br label %14 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %5 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE store i32 0 %7 NEW_LINE %12 = load i32 %6 NEW_LINE store i32 %12 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp slt i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %7 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %7 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %6 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %13 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %8 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%llu~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %5 = load i64 %2 NEW_LINE %6 = icmp uge i64 %5 , 1 NEW_LINE br i1 %6 , label %7 , label %30 NEW_LINE 7: NEW_LINE %8 = load i64 %2 NEW_LINE %9 = icmp ule i64 %8 , 20 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE store i64 %11 %3 NEW_LINE %12 = load i64 %3 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = sub i64 %13 , 1 NEW_LINE %15 = mul i64 %12 , %14 NEW_LINE store i64 %15 %3 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = sub i64 %16 , 2 NEW_LINE store i64 %17 %2 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = icmp ugt i64 %19 , 1 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i64 %3 NEW_LINE %23 = load i64 %2 NEW_LINE %24 = mul i64 %22 , %23 NEW_LINE store i64 %24 %3 NEW_LINE %25 = load i64 %2 NEW_LINE %26 = sub i64 %25 , 1 NEW_LINE store i64 %26 %2 NEW_LINE br label %18 NEW_LINE 27: NEW_LINE %28 = load i64 %3 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE call void @setPrime ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 2 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %23 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000000 x i32 @prime , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , %17 NEW_LINE store i32 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %2 NEW_LINE br label %9 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %32 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %31 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp sge i32 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %30 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %4 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %7 NEW_LINE %23 = load i32 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %5 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %36 NEW_LINE 11: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %6 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %3 NEW_LINE store i32 0 %7 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE store i32 %21 %5 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = add nsw i32 %25 , %24 NEW_LINE store i32 %26 %6 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %4 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %7 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %7 NEW_LINE br label %14 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %8 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 4 x i8 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 0 NEW_LINE store * i32 %6 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = getelementptr inbounds ARR 3 4 x i8 %4 , i64 0 , i64 0 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %8 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %26 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 4 x i8 %4 , i64 0 , i64 0 NEW_LINE %13 = call i32 @atoi ( * i8 %12 ) #3 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %20 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load * i32 %3 NEW_LINE %19 = getelementptr inbounds i32 %18 , i32 1 NEW_LINE store * i32 %19 %3 NEW_LINE store i32 %17 %18 NEW_LINE br label %25 NEW_LINE 20: NEW_LINE %21 = load * i32 %3 NEW_LINE %22 = getelementptr inbounds i32 %21 , i32 -1 NEW_LINE store * i32 %22 %3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %7 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %5 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sub nsw i32 %16 , 1 NEW_LINE %18 = icmp slt i32 %15 , %17 NEW_LINE br i1 %18 , label %19 , label %34 NEW_LINE 19: NEW_LINE %20 = load i32 %6 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE store i32 %22 %6 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %7 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = mul nsw i32 %27 , %28 NEW_LINE %30 = add nsw i32 %26 , %29 NEW_LINE store i32 %30 %3 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %4 NEW_LINE br label %14 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %8 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 @last_turn NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %6 * double %7 ) NEW_LINE %10 = load double %6 NEW_LINE %11 = load double %7 NEW_LINE %12 = call double @walk ( double %10 double %11 * double %4 * double %5 ) NEW_LINE %13 = load double @last_turn NEW_LINE %14 = fadd double %13 , %12 NEW_LINE store double %14 @last_turn NEW_LINE %15 = load double %6 NEW_LINE %16 = fcmp oeq double %15 , 0.000000e+00 NEW_LINE br i1 %16 , label %17 , label %21 NEW_LINE 17: NEW_LINE %18 = load double %7 NEW_LINE %19 = fcmp oeq double %18 , 0.000000e+00 NEW_LINE br i1 %19 , label %20 , label %21 NEW_LINE 20: NEW_LINE br label %22 NEW_LINE 21: NEW_LINE br label %8 NEW_LINE 22: NEW_LINE %23 = load double %4 NEW_LINE %24 = fptosi double %23 to i32 NEW_LINE %25 = load double %5 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %24 i32 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @isprime ( i64 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i64 %0 %3 NEW_LINE %6 = load i64 %3 NEW_LINE %7 = sub i64 %6 , 1 NEW_LINE store i64 %7 %5 NEW_LINE %8 = load i64 %3 NEW_LINE %9 = icmp ult i64 %8 , 2 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 0 %2 NEW_LINE br label %40 NEW_LINE 11: NEW_LINE %12 = load i64 %3 NEW_LINE %13 = icmp eq i64 %12 , 2 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE store i32 1 %2 NEW_LINE br label %40 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = urem i64 %16 , 2 NEW_LINE %18 = icmp ne i64 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %37 NEW_LINE 19: NEW_LINE store i64 3 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %4 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = mul i64 %21 , %22 NEW_LINE %24 = load i64 %3 NEW_LINE %25 = icmp ule i64 %23 , %24 NEW_LINE br i1 %25 , label %26 , label %36 NEW_LINE 26: NEW_LINE %27 = load i64 %3 NEW_LINE %28 = load i64 %4 NEW_LINE %29 = urem i64 %27 , %28 NEW_LINE %30 = icmp eq i64 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %32 NEW_LINE 31: NEW_LINE store i32 0 %2 NEW_LINE br label %40 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i64 %4 NEW_LINE %35 = add i64 %34 , 2 NEW_LINE store i64 %35 %4 NEW_LINE br label %20 NEW_LINE 36: NEW_LINE store i32 1 %2 NEW_LINE br label %40 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %39 NEW_LINE 39: NEW_LINE store i32 0 %2 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %2 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE %16 = sext i32 %14 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %16 NEW_LINE store i32 %13 %17 NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1024 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %21 NEW_LINE store i32 0 %22 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %3 NEW_LINE br label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = icmp slt i32 %10 , %12 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %9 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %32 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE %17 = sext i32 %15 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %29 , label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sub nsw i32 %22 , 2 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i1 ARR 2 true %14 , ARR 2 %28 %21 NEW_LINE %31 = zext i1 %30 to i32 NEW_LINE br label %4 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE ret i32 %33 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %5 NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sub nsw i32 %14 , 1 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = mul nsw i32 %20 , %23 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %2 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %12 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = bitcast * ARR 3 5 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 20 i1 false ) NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %6 , 5 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @func_sort ( * i32 %17 ) NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @func_output ( * i32 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE br label %24 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %19 %23 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE %14 = icmp slt i32 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %31 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE store i32 0 %7 NEW_LINE %12 = load i32 %6 NEW_LINE store i32 %12 %2 NEW_LINE store i32 1 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp slt i32 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %7 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %7 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %6 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %2 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %13 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %8 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %31 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %30 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 0 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %6 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %5 = icmp ne i32 %4 , -1 NEW_LINE br i1 %5 , label %6 , label %16 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdout NEW_LINE %11 = call i32 @pop ( ) NEW_LINE %12 = call i32 ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 * i8 ... ) @fprintf ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %10 * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %11 ) NEW_LINE br label %15 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE call void @push ( i32 %14 ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE br label %3 NEW_LINE 16: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call noalias * i8 @malloc ( i64 804 ) #3 NEW_LINE %5 = bitcast * i8 %4 to * STRUCT 2 i32 ARR 3 200 x i32 NEW_LINE store * STRUCT 2 i32 ARR 3 200 x i32 %5 %3 NEW_LINE %6 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE call void @initialize ( * STRUCT 2 i32 ARR 3 200 x i32 %6 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %22 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %18 NEW_LINE 13: NEW_LINE %14 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %15 = call i32 @top ( * STRUCT 2 i32 ARR 3 200 x i32 %14 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE call void @pop ( * STRUCT 2 i32 ARR 3 200 x i32 %17 ) NEW_LINE br label %21 NEW_LINE 18: NEW_LINE %19 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %20 = load i32 %2 NEW_LINE call void @push ( * STRUCT 2 i32 ARR 3 200 x i32 %19 i32 %20 ) NEW_LINE br label %21 NEW_LINE 21: NEW_LINE br label %7 NEW_LINE 22: NEW_LINE %23 = load * STRUCT 2 i32 ARR 3 200 x i32 %3 NEW_LINE %24 = bitcast * STRUCT 2 i32 ARR 3 200 x i32 %23 to * i8 NEW_LINE call void @free ( * i8 %24 ) #3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 11 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %21 NEW_LINE store i32 0 %22 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %3 NEW_LINE br label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE %15 = icmp slt i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %31 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , %25 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %6 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %6 NEW_LINE br label %11 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %7 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = icmp eq i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sub nsw i32 %22 , 1 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , -1 NEW_LINE store i32 %29 %4 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %4 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = load * i32 @a NEW_LINE %11 = getelementptr inbounds i32 %10 , i32 -1 NEW_LINE store * i32 %11 @a NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 9 NEW_LINE %15 = call i32 @main ( i32 23 ) NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE %18 = xor i1 %17 , true NEW_LINE %19 = zext i1 %18 to i32 NEW_LINE br label %24 NEW_LINE 20: NEW_LINE %21 = load * i32 @a NEW_LINE %22 = getelementptr inbounds i32 %21 , i64 -5 NEW_LINE %23 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %22 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %19 %9 , ARR 2 %23 %20 NEW_LINE %26 = load * i32 @a NEW_LINE store i32 %25 %26 NEW_LINE %27 = load i32 %2 NEW_LINE ret i32 %27 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %6 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 * i32 %5 * i32 %6 * i32 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = bitcast * i32 %9 to * i8 NEW_LINE call void @qsort ( * i8 %10 i64 5 i64 4 i32 * ( * i8 * i8 ) @compare_int ) NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %16 i32 %18 i32 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %35 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %6 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %3 NEW_LINE store i32 1 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %32 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %6 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %14 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 11 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 11 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 44 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %24 NEW_LINE store i32 %22 %25 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %38 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = call double @llvm.round.f64 ( double %12 ) NEW_LINE %14 = fptosi double %13 to i32 NEW_LINE store i32 %14 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = sub nsw i32 600 , %22 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = call double @pow ( double %24 double 2.000000e+00 ) #4 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double %25 , %27 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fadd double %30 , %28 NEW_LINE %32 = fptosi double %31 to i32 NEW_LINE store i32 %32 %4 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %5 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %6 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE store i64 %7 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %17 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = mul nsw i64 %13 , %15 NEW_LINE store i64 %16 %4 NEW_LINE br label %8 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %18 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE store i64 1 %3 NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp sge i64 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %26 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp sle i64 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %26 NEW_LINE 11: NEW_LINE %12 = load i64 %2 NEW_LINE %13 = trunc i64 %12 to i32 NEW_LINE store i32 %13 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = icmp sgt i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %25 NEW_LINE 17: NEW_LINE %18 = load i64 %3 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = mul i64 %18 , %20 NEW_LINE store i64 %21 %3 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %4 NEW_LINE br label %14 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i64 %3 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%llu~0A~00" i64 0 i64 0 ) i64 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = bitcast * ARR 3 100 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 400 i1 false ) NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = sext i32 %6 to i64 NEW_LINE %8 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %7 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %29 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %3 NEW_LINE br label %28 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , -1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * STRUCT 3 i32 i32 * i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call * STRUCT 3 i32 i32 * i32 @CreateStack ( ) NEW_LINE store * STRUCT 3 i32 i32 * i32 %5 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load * STRUCT 3 i32 i32 * i32 %4 NEW_LINE %8 = load i32 %2 NEW_LINE call void @Push ( * STRUCT 3 i32 i32 * i32 %7 i32 %8 ) NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %16 NEW_LINE 13: NEW_LINE %14 = load * STRUCT 3 i32 i32 * i32 %4 NEW_LINE %15 = load i32 %3 NEW_LINE call void @Push ( * STRUCT 3 i32 i32 * i32 %14 i32 %15 ) NEW_LINE br label %26 NEW_LINE 16: NEW_LINE %17 = load * STRUCT 3 i32 i32 * i32 %4 NEW_LINE %18 = call i32 @Top ( * STRUCT 3 i32 i32 * i32 %17 ) NEW_LINE %19 = icmp eq i32 %18 , -2147483648 NEW_LINE br i1 %19 , label %20 , label %21 NEW_LINE 20: NEW_LINE br label %27 NEW_LINE 21: NEW_LINE %22 = load * STRUCT 3 i32 i32 * i32 %4 NEW_LINE %23 = call i32 @Pop ( * STRUCT 3 i32 i32 * i32 %22 ) NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %9 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %34 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp sle i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %31 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = srem i32 %14 , %15 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , %21 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE store i32 %26 %5 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %10 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %6 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i64 0 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sub nsw i32 %14 , 1 NEW_LINE %16 = icmp slt i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE %21 = mul nsw i32 %18 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = call i64 @area ( i32 %21 i32 %22 ) NEW_LINE %24 = load i64 %5 NEW_LINE %25 = add nsw i64 %24 , %23 NEW_LINE store i64 %25 %5 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %12 NEW_LINE 29: NEW_LINE %30 = load i64 %5 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %30 ) NEW_LINE br label %6 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %6 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %33 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %16 , %18 NEW_LINE %20 = load double %2 NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 %2 NEW_LINE %22 = load double %4 NEW_LINE %23 = load double %5 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %3 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %3 NEW_LINE %28 = load double %6 NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = load double %5 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %5 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %2 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double %3 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE store i32 0 %1 NEW_LINE %6 = call * i8 @E_sieve ( i32 999999 ) NEW_LINE store * i8 %6 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE store i32 0 %4 NEW_LINE store i32 2 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp sle i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %31 NEW_LINE 15: NEW_LINE %16 = load * i8 %5 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i8 %16 , i64 %18 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = trunc i8 %20 to i1 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = icmp eq i32 %22 , 1 NEW_LINE br i1 %23 , label %24 , label %27 NEW_LINE 24: NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %11 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %7 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = load i32 @p NEW_LINE %3 = sext i32 %2 to i64 NEW_LINE %4 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @s i64 0 i64 0 ) , i64 %3 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 @p NEW_LINE %10 = add nsw i32 %9 , 1 NEW_LINE store i32 %10 @p NEW_LINE %11 = sext i32 %9 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %23 NEW_LINE 16: NEW_LINE %17 = load i32 @p NEW_LINE %18 = sub nsw i32 %17 , 2 NEW_LINE store i32 %18 @p NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @s to * ARR 3 0 x i32 ) , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 %13 %15 , ARR 2 %22 %16 NEW_LINE %25 = call i32 ( i32 ... ) bitcast ( i32 * ( ) @main to i32 * ( i32 ... ) ) ( i32 %24 ) NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = phi i1 ARR 2 false %0 , ARR 2 %26 %23 NEW_LINE %29 = zext i1 %28 to i32 NEW_LINE %30 = load i32 %1 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %36 NEW_LINE 9: NEW_LINE store i32 0 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %11 , 600 NEW_LINE br i1 %12 , label %13 , label %33 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = sub nsw i32 600 , %17 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = sub nsw i32 600 , %21 NEW_LINE %23 = mul nsw i32 %18 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = add nsw i32 %14 , %25 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = load i32 %3 NEW_LINE %32 = add nsw i32 %31 , %30 NEW_LINE store i32 %32 %3 NEW_LINE br label %10 NEW_LINE 33: NEW_LINE %34 = load i32 %4 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %6 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i64 0 %3 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = srem i32 600 , %9 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %34 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %4 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp slt i32 %16 , 600 NEW_LINE br i1 %17 , label %18 , label %31 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = load i64 %3 NEW_LINE %26 = add i64 %25 , %24 NEW_LINE store i64 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %4 NEW_LINE br label %15 NEW_LINE 31: NEW_LINE %32 = load i64 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%lu~0A~00" i64 0 i64 0 ) i64 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load double @c NEW_LINE %12 = call double @sin ( double %11 ) #4 NEW_LINE %13 = fmul double %10 , %12 NEW_LINE %14 = load double @x NEW_LINE %15 = fadd double %14 , %13 NEW_LINE store double %15 @x NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double @c NEW_LINE %19 = call double @cos ( double %18 ) #4 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double @y NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 @y NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @d NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 5.730000e+01 NEW_LINE %27 = load double @c NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 @c NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load double @x NEW_LINE %31 = fptosi double %30 to i32 NEW_LINE store i32 %31 @d NEW_LINE %32 = load double @y NEW_LINE %33 = fptosi double %32 to i32 NEW_LINE store i32 %33 %3 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %31 i32 %33 ) NEW_LINE %35 = icmp ne i32 %34 , 0 NEW_LINE %36 = xor i1 %35 , true NEW_LINE %37 = zext i1 %36 to i32 NEW_LINE call void @exit ( i32 %37 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 100000 x i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = getelementptr inbounds ARR 3 100000 x i32 %6 , i64 0 , i64 0 NEW_LINE %8 = call i32 @getprimes ( * i32 %7 i32 1000000 ) NEW_LINE store i32 %8 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %11 = icmp eq i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %34 NEW_LINE 12: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %31 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 100000 x i32 %6 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = icmp sgt i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE br label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %3 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %2 NEW_LINE br label %13 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %9 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 11 x i32 @x i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %30 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 11 x i32 @x , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 @x , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i32 ARR 2 %20 %18 , ARR 2 %27 %21 NEW_LINE br label %4 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 5 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %18 i32 %20 i32 %22 i32 %24 i32 %26 i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i64 2 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = load i64 %2 NEW_LINE %12 = icmp sle i64 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %30 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = call i32 @check ( i64 %14 ) NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %20 NEW_LINE 17: NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %3 NEW_LINE %22 = icmp eq i64 %21 , 2 NEW_LINE br i1 %22 , label %23 , label %26 NEW_LINE 23: NEW_LINE %24 = load i64 %3 NEW_LINE %25 = sub nsw i64 %24 , 1 NEW_LINE store i64 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i64 %3 NEW_LINE %29 = add nsw i64 %28 , 2 NEW_LINE store i64 %29 %3 NEW_LINE br label %9 NEW_LINE 30: NEW_LINE %31 = load i64 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %31 ) NEW_LINE br label %5 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %40 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i64 %3 NEW_LINE %11 = icmp slt i64 %10 , 600 NEW_LINE br i1 %11 , label %12 , label %37 NEW_LINE 12: NEW_LINE %13 = load i64 %3 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = mul nsw i64 %13 , %14 NEW_LINE %16 = load i64 %2 NEW_LINE %17 = mul nsw i64 %15 , %16 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE %20 = load i64 %3 NEW_LINE %21 = mul nsw i64 %19 , %20 NEW_LINE %22 = load i64 %4 NEW_LINE %23 = add nsw i64 %22 , %21 NEW_LINE store i64 %23 %4 NEW_LINE %24 = load i64 %4 NEW_LINE %25 = srem i64 %24 , 72000000 NEW_LINE store i64 %25 %4 NEW_LINE %26 = load i64 %3 NEW_LINE %27 = load i64 %2 NEW_LINE %28 = mul nsw i64 %26 , %27 NEW_LINE %29 = load i64 %2 NEW_LINE %30 = sub nsw i64 600 , %29 NEW_LINE %31 = icmp eq i64 %28 , %30 NEW_LINE br i1 %31 , label %32 , label %33 NEW_LINE 32: NEW_LINE br label %37 NEW_LINE 33: NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i64 %3 NEW_LINE %36 = add nsw i64 %35 , 1 NEW_LINE store i64 %36 %3 NEW_LINE br label %9 NEW_LINE 37: NEW_LINE %38 = load i64 %4 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %38 ) NEW_LINE br label %5 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1024 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %25 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %21 NEW_LINE store i32 0 %22 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %3 NEW_LINE br label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load double @c NEW_LINE %12 = call double @sin ( double %11 ) #4 NEW_LINE %13 = fmul double %10 , %12 NEW_LINE %14 = load double @x NEW_LINE %15 = fadd double %14 , %13 NEW_LINE store double %15 @x NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double @c NEW_LINE %19 = call double @cos ( double %18 ) #4 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double @y NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 @y NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @d NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 5.729600e+01 NEW_LINE %27 = load double @c NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 @c NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load double @x NEW_LINE %31 = fptosi double %30 to i32 NEW_LINE store i32 %31 @d NEW_LINE %32 = load double @y NEW_LINE %33 = fptosi double %32 to i32 NEW_LINE store i32 %33 %3 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %31 i32 %33 ) NEW_LINE %35 = icmp ne i32 %34 , 0 NEW_LINE %36 = xor i1 %35 , true NEW_LINE %37 = zext i1 %36 to i32 NEW_LINE call void @exit ( i32 %37 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i16 NEW_LINE %3 = alloca i16 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i16 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %40 NEW_LINE 8: NEW_LINE store i64 0 %4 NEW_LINE store i16 1 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i16 %2 NEW_LINE %11 = zext i16 %10 to i32 NEW_LINE %12 = load i16 %3 NEW_LINE %13 = zext i16 %12 to i32 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE %15 = icmp slt i32 %11 , %14 NEW_LINE br i1 %15 , label %16 , label %37 NEW_LINE 16: NEW_LINE %17 = load i16 %2 NEW_LINE %18 = zext i16 %17 to i32 NEW_LINE %19 = load i16 %3 NEW_LINE %20 = zext i16 %19 to i32 NEW_LINE %21 = mul nsw i32 %18 , %20 NEW_LINE %22 = load i16 %2 NEW_LINE %23 = zext i16 %22 to i32 NEW_LINE %24 = load i16 %3 NEW_LINE %25 = zext i16 %24 to i32 NEW_LINE %26 = mul nsw i32 %23 , %25 NEW_LINE %27 = mul nsw i32 %21 , %26 NEW_LINE %28 = load i16 %3 NEW_LINE %29 = zext i16 %28 to i32 NEW_LINE %30 = mul nsw i32 %27 , %29 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = load i64 %4 NEW_LINE %33 = add nsw i64 %32 , %31 NEW_LINE store i64 %33 %4 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i16 %2 NEW_LINE %36 = add i16 %35 , 1 NEW_LINE store i16 %36 %2 NEW_LINE br label %9 NEW_LINE 37: NEW_LINE %38 = load i64 %4 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %38 ) NEW_LINE br label %5 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %8 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %7 NEW_LINE %23 = load i32 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %5 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load double @c NEW_LINE %12 = call double @sin ( double %11 ) #4 NEW_LINE %13 = fmul double %10 , %12 NEW_LINE %14 = load double @x NEW_LINE %15 = fadd double %14 , %13 NEW_LINE store double %15 @x NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double @c NEW_LINE %19 = call double @cos ( double %18 ) #4 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double @y NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 @y NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @d NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 5.729580e+01 NEW_LINE %27 = load double @c NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 @c NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load double @x NEW_LINE %31 = fptosi double %30 to i32 NEW_LINE store i32 %31 @d NEW_LINE %32 = load double @y NEW_LINE %33 = fptosi double %32 to i32 NEW_LINE store i32 %33 %3 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %31 i32 %33 ) NEW_LINE %35 = icmp ne i32 %34 , 0 NEW_LINE %36 = xor i1 %35 , true NEW_LINE %37 = zext i1 %36 to i32 NEW_LINE call void @exit ( i32 %37 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %21 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE br label %36 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %34 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = icmp sle i32 %25 , 10 NEW_LINE br i1 %26 , label %27 , label %34 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %30 NEW_LINE store i32 %28 %31 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %4 NEW_LINE br label %35 NEW_LINE 34: NEW_LINE br label %37 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %5 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 20 x i32 NEW_LINE %7 = alloca ARR 3 20 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %32 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 20 x i32 %6 , i64 0 , i64 %17 NEW_LINE store i32 %15 %18 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %4 NEW_LINE br label %31 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %4 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 20 x i32 %6 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %5 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %8 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE store i32 -1 %3 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %36 NEW_LINE 10: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE %15 = icmp slt i32 %12 , %14 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = call double @pow ( double %21 double 2.000000e+00 ) #3 NEW_LINE %23 = fptosi double %22 to i32 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = add nsw i32 %17 , %25 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %11 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = icmp ne i32 %34 , -1 NEW_LINE br i1 %35 , label %5 , label %36 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %5 NEW_LINE store i64 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %39 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE store i64 %12 %5 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = icmp slt i32 %16 , %18 NEW_LINE br i1 %19 , label %20 , label %36 NEW_LINE 20: NEW_LINE %21 = load i64 %6 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = load i64 %5 NEW_LINE %25 = mul nsw i64 %23 , %24 NEW_LINE %26 = load i64 %5 NEW_LINE %27 = mul nsw i64 %25 , %26 NEW_LINE %28 = add nsw i64 %21 , %27 NEW_LINE store i64 %28 %6 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = load i64 %5 NEW_LINE %32 = add nsw i64 %31 , %30 NEW_LINE store i64 %32 %5 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %3 NEW_LINE br label %15 NEW_LINE 36: NEW_LINE %37 = load i64 %6 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %37 ) NEW_LINE store i64 0 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load double %4 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sdiv i32 600 , %11 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = fcmp olt double %10 , %13 NEW_LINE br i1 %14 , label %15 , label %35 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double %16 , %18 NEW_LINE %20 = load double %4 NEW_LINE %21 = fmul double %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fadd double %29 , %27 NEW_LINE %31 = fptosi double %30 to i32 NEW_LINE store i32 %31 %3 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load double %4 NEW_LINE %34 = fadd double %33 , 1.000000e+00 NEW_LINE store double %34 %4 NEW_LINE br label %9 NEW_LINE 35: NEW_LINE %36 = load i32 %3 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %5 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp eq i32 %6 , 1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %24 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp sgt i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %23 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sub nsw i32 %15 , 1 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE %21 = load i32 %4 NEW_LINE %22 = add nsw i32 %21 , -1 NEW_LINE store i32 %22 %4 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE br label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %30 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %22 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %15 ) NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %18 NEW_LINE store i32 0 %19 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %3 NEW_LINE br label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %3 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %25 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sub nsw i32 %23 , 1 NEW_LINE store i32 %24 %2 NEW_LINE br label %35 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %34 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %2 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE br label %4 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %39 NEW_LINE 11: NEW_LINE store i64 0 %7 NEW_LINE %12 = load i32 %2 NEW_LINE store i32 %12 %4 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %36 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %6 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = load i64 %7 NEW_LINE %32 = add nsw i64 %31 , %30 NEW_LINE store i64 %32 %7 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %3 NEW_LINE br label %15 NEW_LINE 36: NEW_LINE %37 = load i64 %7 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %37 ) NEW_LINE br label %8 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %41 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %21 , 0x400921FB53C8D4F1 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %5 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %5 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB53C8D4F1 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %6 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = add nsw i32 %39 , %38 NEW_LINE store i32 %40 %4 NEW_LINE br label %9 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE store i32 %43 %7 NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE store i32 %45 %8 NEW_LINE %46 = load i32 %7 NEW_LINE %47 = load i32 %8 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %46 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 11 x i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = bitcast * ARR 3 11 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 44 i1 false ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 0 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %12 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 0 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %21 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 11 x i32 %3 , i64 0 , i64 %24 NEW_LINE store i32 %20 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %13 ) NEW_LINE store i32 %14 %2 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %4 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE store i32 0 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = icmp slt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %39 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = icmp sgt i32 %26 , 0 NEW_LINE br i1 %27 , label %28 , label %33 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 100 x i32 %6 , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE call void @push ( i32 %32 ) NEW_LINE br label %35 NEW_LINE 33: NEW_LINE %34 = call i32 @pop ( ) NEW_LINE br label %35 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %3 NEW_LINE br label %18 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @t i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = mul nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %32 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @t to * ARR 3 0 x i32 ) , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE br label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %3 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @t to * ARR 3 0 x i32 ) , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = phi i32 ARR 2 %21 %20 , ARR 2 %29 %23 NEW_LINE br label %4 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE ret i32 %33 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %35 NEW_LINE 9: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %5 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp sle i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %5 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE br label %6 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i8 NEW_LINE %4 = alloca ARR 3 100 x i8 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %20 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x i8 %4 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.2: ▁ %100s ▁ %100s~00" i64 0 i64 0 ) * i8 %10 * i8 %11 ) NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i8 %4 , i64 0 , i64 0 NEW_LINE %15 = call * i8 @add_bignum ( * i8 %13 * i8 %14 ) NEW_LINE %16 = call i32 @puts ( * i8 %15 ) NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %2 NEW_LINE br label %6 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca * STRUCT 2 i32 * %struct.stack NEW_LINE store i32 0 %1 NEW_LINE %4 = call noalias * i8 @malloc ( i64 8 ) #3 NEW_LINE %5 = bitcast * i8 %4 to * STRUCT 2 i32 * %struct.stack NEW_LINE store * STRUCT 2 i32 * %struct.stack %5 %3 NEW_LINE %6 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %7 = getelementptr inbounds STRUCT 2 i32 * %struct.stack %6 , i32 0 , i32 1 NEW_LINE store * STRUCT 2 i32 * %struct.stack null %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = xor i32 %9 , -1 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %26 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %18 = call * STRUCT 2 i32 * %struct.stack @push ( i32 %16 * STRUCT 2 i32 * %struct.stack %17 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %18 %3 NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %21 = call i32 @read_top ( * STRUCT 2 i32 * %struct.stack %20 ) NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE %23 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %24 = call * STRUCT 2 i32 * %struct.stack @pop ( * STRUCT 2 i32 * %struct.stack %23 ) NEW_LINE store * STRUCT 2 i32 * %struct.stack %24 %3 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %8 NEW_LINE 26: NEW_LINE %27 = load * STRUCT 2 i32 * %struct.stack %3 NEW_LINE %28 = bitcast * STRUCT 2 i32 * %struct.stack %27 to * i8 NEW_LINE call void @free ( * i8 %28 ) #3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca * i8 NEW_LINE %9 = alloca i64 NEW_LINE %10 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 10 %6 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = zext i32 %11 to i64 NEW_LINE %13 = call * i8 @llvm.stacksave ( ) NEW_LINE store * i8 %13 %8 NEW_LINE %14 = alloca i32 , i64 %12 NEW_LINE store i64 %12 %9 NEW_LINE store i32 0 %10 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%u~0A~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %17 = icmp eq i32 1 , %16 NEW_LINE br i1 %17 , label %18 , label %34 NEW_LINE 18: NEW_LINE %19 = load i32 %7 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %27 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = load i32 %10 NEW_LINE %24 = add i32 %23 , 1 NEW_LINE store i32 %24 %10 NEW_LINE %25 = zext i32 %23 to i64 NEW_LINE %26 = getelementptr inbounds i32 %14 , i64 %25 NEW_LINE store i32 %22 %26 NEW_LINE br label %15 NEW_LINE 27: NEW_LINE %28 = load i32 %10 NEW_LINE %29 = add i32 %28 , -1 NEW_LINE store i32 %29 %10 NEW_LINE %30 = zext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds i32 %14 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%u~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %15 NEW_LINE 34: NEW_LINE store i32 0 %3 NEW_LINE %35 = load * i8 %8 NEW_LINE call void @llvm.stackrestore ( * i8 %35 ) NEW_LINE %36 = load i32 %3 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE %6 = load i32 %4 NEW_LINE %7 = add nsw i32 %6 , 1 NEW_LINE store i32 %7 %4 NEW_LINE %8 = sext i32 %6 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %13 = icmp ne i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %31 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %30 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE %28 = sext i32 %26 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %28 NEW_LINE store i32 %25 %29 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %11 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %38 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %5 NEW_LINE br label %37 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %33 NEW_LINE store i32 %31 %34 NEW_LINE %35 = load i32 %5 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %5 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE br label %6 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %22 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE %12 = zext i1 %11 to i64 NEW_LINE %13 = select i1 %11 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d ▁ ~00" i64 0 i64 0 ) NEW_LINE %14 = load * i32 @a NEW_LINE %15 = getelementptr inbounds i32 %14 , i32 -1 NEW_LINE store * i32 %15 @a NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 @main ( i32 0 ) NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 %13 i32 %16 i32 %17 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE %20 = xor i1 %19 , true NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE br label %26 NEW_LINE 22: NEW_LINE %23 = load * i32 @a NEW_LINE %24 = getelementptr inbounds i32 %23 , i64 -5 NEW_LINE %25 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %24 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = phi i32 ARR 2 %21 %9 , ARR 2 %25 %22 NEW_LINE %28 = load * i32 @a NEW_LINE store i32 %27 %28 NEW_LINE %29 = load i32 %2 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %6 = load i64 %2 NEW_LINE %7 = icmp ult i64 0 , %6 NEW_LINE br i1 %7 , label %8 , label %28 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = icmp ule i64 %9 , 20 NEW_LINE br i1 %10 , label %11 , label %28 NEW_LINE 11: NEW_LINE %12 = load i64 %2 NEW_LINE store i64 %12 %4 NEW_LINE %13 = load i64 %2 NEW_LINE %14 = sub i64 %13 , 1 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = icmp ugt i64 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i64 %4 NEW_LINE %20 = load i64 %3 NEW_LINE %21 = mul i64 %19 , %20 NEW_LINE store i64 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i64 %3 NEW_LINE %24 = add i64 %23 , -1 NEW_LINE store i64 %24 %3 NEW_LINE br label %15 NEW_LINE 25: NEW_LINE %26 = load i64 %4 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %36 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %33 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sitofp i32 %15 to double NEW_LINE %17 = load i32 %5 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @pow ( double %20 double 2.000000e+00 ) #3 NEW_LINE %22 = fmul double %16 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fadd double %24 , %22 NEW_LINE %26 = fptosi double %25 to i32 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = add nsw i32 %31 , %30 NEW_LINE store i32 %32 %2 NEW_LINE br label %11 NEW_LINE 33: NEW_LINE %34 = load i32 %4 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %5 NEW_LINE br label %6 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double %18 , 0x3F91DF46A2529D44 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %17 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double %26 , 0x3F91DF46A2529D44 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = fmul double %25 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @s i64 0 i64 1 ) i32 5 i32 4 i32 * ( * i32 ) @M ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @m NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 @m NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @m NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 9 x i32 @s , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load i32 @m NEW_LINE %24 = sub nsw i32 %23 , 1 NEW_LINE %25 = icmp ne i32 %24 , 0 NEW_LINE %26 = zext i1 %25 to i64 NEW_LINE %27 = select i1 %25 , i32 32 , i32 10 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %22 i32 %27 ) NEW_LINE br label %13 NEW_LINE 29: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = load i64 %4 NEW_LINE %10 = mul nsw i64 %9 , %8 NEW_LINE store i64 %10 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %6 NEW_LINE 15: NEW_LINE %16 = load i64 %4 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %16 ) NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE %19 = xor i1 %18 , true NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE call void @exit ( i32 %20 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %7 NEW_LINE %23 = load i32 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %5 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 11 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = bitcast * ARR 3 11 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 44 i1 false ) NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp eq i32 0 , %12 NEW_LINE br i1 %13 , label %22 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %18 NEW_LINE store i32 %15 %19 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %5 NEW_LINE br label %36 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = icmp sge i32 %23 , 1 NEW_LINE br i1 %24 , label %25 , label %28 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %5 NEW_LINE br label %29 NEW_LINE 28: NEW_LINE br label %37 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 11 x i32 %4 , i64 0 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %8 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1000 x i32 NEW_LINE %5 = alloca ARR 3 1000 x i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 1000 x i32 %5 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE %12 = icmp eq i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE br label %36 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 1000 x i32 %5 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %31 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sub nsw i32 %21 , 1 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 1000 x i32 %5 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , -1 NEW_LINE store i32 %28 %3 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , -1 NEW_LINE store i32 %30 %3 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %3 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sle i32 %6 , 9 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %10 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE store i32 0 %4 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %18 = icmp sle i32 0 , %17 NEW_LINE br i1 %18 , label %19 , label %38 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %25 NEW_LINE store i32 %23 %26 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %37 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , -1 NEW_LINE store i32 %31 %4 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %37 NEW_LINE 37: NEW_LINE br label %16 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i64 %2 NEW_LINE %10 = srem i64 600 , %9 NEW_LINE %11 = icmp ne i64 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %5 NEW_LINE 13: NEW_LINE store i64 0 %4 NEW_LINE %14 = load i64 %2 NEW_LINE store i64 %14 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i64 %3 NEW_LINE %17 = load i64 %2 NEW_LINE %18 = sub nsw i64 600 , %17 NEW_LINE %19 = icmp sle i64 %16 , %18 NEW_LINE br i1 %19 , label %20 , label %31 NEW_LINE 20: NEW_LINE %21 = load i64 %2 NEW_LINE %22 = load i64 %3 NEW_LINE %23 = mul nsw i64 %21 , %22 NEW_LINE %24 = load i64 %3 NEW_LINE %25 = mul nsw i64 %23 , %24 NEW_LINE %26 = load i64 %4 NEW_LINE %27 = add nsw i64 %26 , %25 NEW_LINE store i64 %27 %4 NEW_LINE %28 = load i64 %2 NEW_LINE %29 = load i64 %3 NEW_LINE %30 = add nsw i64 %29 , %28 NEW_LINE store i64 %30 %3 NEW_LINE br label %15 NEW_LINE 31: NEW_LINE %32 = load i64 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i64 NEW_LINE %8 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i64 %2 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %40 NEW_LINE 12: NEW_LINE store i64 0 %7 NEW_LINE store i64 0 %4 NEW_LINE store i64 1 %3 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i64 %3 NEW_LINE %15 = icmp sle i64 %14 , 600 NEW_LINE br i1 %15 , label %16 , label %37 NEW_LINE 16: NEW_LINE store i64 0 %6 NEW_LINE store i64 0 %5 NEW_LINE store i64 0 %8 NEW_LINE %17 = load i64 %4 NEW_LINE %18 = load i64 %2 NEW_LINE %19 = mul nsw i64 %17 , %18 NEW_LINE %20 = load i64 %4 NEW_LINE %21 = mul nsw i64 %19 , %20 NEW_LINE %22 = load i64 %2 NEW_LINE %23 = mul nsw i64 %21 , %22 NEW_LINE store i64 %23 %6 NEW_LINE %24 = load i64 %2 NEW_LINE store i64 %24 %5 NEW_LINE %25 = load i64 %5 NEW_LINE %26 = load i64 %6 NEW_LINE %27 = mul nsw i64 %25 , %26 NEW_LINE store i64 %27 %8 NEW_LINE %28 = load i64 %8 NEW_LINE %29 = load i64 %7 NEW_LINE %30 = add nsw i64 %29 , %28 NEW_LINE store i64 %30 %7 NEW_LINE %31 = load i64 %4 NEW_LINE %32 = add nsw i64 %31 , 1 NEW_LINE store i64 %32 %4 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i64 %2 NEW_LINE %35 = load i64 %3 NEW_LINE %36 = add nsw i64 %35 , %34 NEW_LINE store i64 %36 %3 NEW_LINE br label %13 NEW_LINE 37: NEW_LINE %38 = load i64 %7 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %38 ) NEW_LINE br label %9 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %38 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %6 NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = icmp slt i32 %16 , %18 NEW_LINE br i1 %19 , label %20 , label %35 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %5 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %7 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %4 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str:%lld~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %41 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sdiv i32 600 , %10 NEW_LINE store i32 %11 %4 NEW_LINE store i64 0 %2 NEW_LINE store i32 1 %5 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %38 NEW_LINE 16: NEW_LINE %17 = load i64 %2 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = mul nsw i64 %19 , %21 NEW_LINE %23 = sub nsw i64 600 , %22 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = mul nsw i64 %25 , %27 NEW_LINE %29 = sub nsw i64 600 , %28 NEW_LINE %30 = mul nsw i64 %23 , %29 NEW_LINE %31 = load i32 %3 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = mul nsw i64 %30 , %32 NEW_LINE %34 = add nsw i64 %17 , %33 NEW_LINE store i64 %34 %2 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %5 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %5 NEW_LINE br label %12 NEW_LINE 38: NEW_LINE %39 = load i64 %2 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%lld~0A~00" i64 0 i64 0 ) i64 %39 ) NEW_LINE br label %6 NEW_LINE 41: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i64 1 %4 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i64 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %3 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = icmp ult i64 %7 , %10 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i64 %4 NEW_LINE %14 = load i64 %3 NEW_LINE %15 = mul i64 %13 , %14 NEW_LINE store i64 %15 %4 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 %3 NEW_LINE %18 = add i64 %17 , 1 NEW_LINE store i64 %18 %3 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE %20 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdout NEW_LINE %21 = load i64 %4 NEW_LINE %22 = call i32 ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 * i8 ... ) @fprintf ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %20 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %21 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %5 NEW_LINE br label %32 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = icmp eq i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %31 NEW_LINE 22: NEW_LINE %23 = load i32 %5 NEW_LINE %24 = sub nsw i32 %23 , 1 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , -1 NEW_LINE store i32 %30 %5 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %33 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %29 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sub nsw i32 %19 , 1 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %23 ) NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %4 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %5 NEW_LINE br label %32 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %6 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp slt i32 %15 , %16 NEW_LINE br i1 %17 , label %18 , label %32 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = mul nsw i32 %19 , %22 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %4 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %6 NEW_LINE br label %14 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 105 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %29 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE switch i32 %10 , label %19 [ NEW_LINE i32 0 , label %11 NEW_LINE ] NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %5 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 105 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %26 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 105 x i32 %2 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %5 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %4 NEW_LINE br label %6 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @n NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @n NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @m NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %28 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 @m NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @m NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 @m NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %21 i32 %26 ) NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca ARR 3 15 x i32 NEW_LINE store i32 0 %1 NEW_LINE %10 = bitcast * ARR 3 15 x i32 %9 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %10 i8 0 i64 60 i1 false ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %13 = icmp ne i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %35 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %23 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 0 NEW_LINE %20 = call i32 @sub ( * i32 %19 ) NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 %21 NEW_LINE store i32 %18 %22 NEW_LINE br label %34 NEW_LINE 23: NEW_LINE %24 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 0 NEW_LINE %25 = call i32 @saidai ( * i32 %24 ) NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE %30 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 0 NEW_LINE %31 = call i32 @saidai ( * i32 %30 ) NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 15 x i32 %9 , i64 0 , i64 %32 NEW_LINE store i32 0 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %11 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @t i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE store i32 %9 getelementptr inbounds ( ARR 3 9 x i32 @t i64 0 i64 0 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %30 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 9 x i32 @t , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 9 x i32 @t , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i32 ARR 2 %19 %18 , ARR 2 %27 %21 NEW_LINE br label %4 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = xor i32 %9 , -1 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %40 NEW_LINE 12: NEW_LINE store i32 0 %6 NEW_LINE store i32 1 %4 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = icmp slt i32 %16 , %18 NEW_LINE br i1 %19 , label %20 , label %37 NEW_LINE 20: NEW_LINE %21 = load i32 %6 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = mul nsw i32 %24 , %27 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = mul nsw i32 %28 , %29 NEW_LINE %31 = add nsw i32 %21 , %30 NEW_LINE store i32 %31 %6 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %4 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %3 NEW_LINE br label %15 NEW_LINE 37: NEW_LINE %38 = load i32 %6 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %38 ) NEW_LINE br label %8 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load double @c NEW_LINE %12 = call double @sin ( double %11 ) #4 NEW_LINE %13 = fmul double %10 , %12 NEW_LINE %14 = load double @x NEW_LINE %15 = fadd double %14 , %13 NEW_LINE store double %15 @x NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double @c NEW_LINE %19 = call double @cos ( double %18 ) #4 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double @y NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 @y NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 @d NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 0x404CA5DC1E7967CB NEW_LINE %27 = load double @c NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 @c NEW_LINE br label %4 NEW_LINE 29: NEW_LINE %30 = load double @x NEW_LINE %31 = fptosi double %30 to i32 NEW_LINE store i32 %31 @d NEW_LINE %32 = load double @y NEW_LINE %33 = fptosi double %32 to i32 NEW_LINE store i32 %33 %3 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %31 i32 %33 ) NEW_LINE %35 = icmp ne i32 %34 , 0 NEW_LINE %36 = xor i1 %35 , true NEW_LINE %37 = zext i1 %36 to i32 NEW_LINE call void @exit ( i32 %37 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @m NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 @m NEW_LINE br label %2 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:~8B~01+~06~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE store i32 0 %8 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %7 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %8 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 ) NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %7 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %43 NEW_LINE 19: NEW_LINE %20 = load i32 %8 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %21 , 0x400921FB5443D6F4 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %9 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %9 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB5443D6F4 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = load i32 %6 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = fmul double %34 , %36 NEW_LINE %38 = load double %10 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %10 NEW_LINE %40 = load i32 %7 NEW_LINE %41 = load i32 %8 NEW_LINE %42 = add nsw i32 %41 , %40 NEW_LINE store i32 %42 %8 NEW_LINE br label %11 NEW_LINE 43: NEW_LINE %44 = load double %9 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE %47 = load double %10 NEW_LINE %48 = fptosi double %47 to i32 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 8 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sle i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 0 NEW_LINE %17 = call i32 @sort ( * i32 %16 i32 5 ) NEW_LINE %18 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 1 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 4 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x i32 %3 , i64 0 , i64 5 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %19 i32 %21 i32 %23 i32 %25 i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load * i32 @a NEW_LINE %5 = getelementptr inbounds i32 %4 , i32 1 NEW_LINE store * i32 %5 @a NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %22 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE %12 = zext i1 %11 to i64 NEW_LINE %13 = select i1 %11 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d ▁ ~00" i64 0 i64 0 ) NEW_LINE %14 = load * i32 @a NEW_LINE %15 = getelementptr inbounds i32 %14 , i32 -1 NEW_LINE store * i32 %15 @a NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 @main ( i32 0 ) NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 %13 i32 %16 i32 %17 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE %20 = xor i1 %19 , true NEW_LINE %21 = zext i1 %20 to i32 NEW_LINE br label %26 NEW_LINE 22: NEW_LINE %23 = load * i32 @a NEW_LINE %24 = getelementptr inbounds i32 %23 , i64 -5 NEW_LINE %25 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 %24 i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 19 x i8 @".str.3:YXZRPQ~8B~00+~02~E3~83~86~CE~B4~E3~80~82~00" i64 0 i64 0 ) ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = phi i32 ARR 2 %21 %9 , ARR 2 %25 %22 NEW_LINE %28 = load * i32 @a NEW_LINE store i32 %27 %28 NEW_LINE %29 = load i32 %2 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %39 NEW_LINE 11: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %2 NEW_LINE %12 = load i32 %7 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = fdiv double 6.000000e+02 , %13 NEW_LINE %15 = fptosi double %14 to i32 NEW_LINE store i32 %15 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sub nsw i32 %18 , 1 NEW_LINE %20 = icmp slt i32 %17 , %19 NEW_LINE br i1 %20 , label %21 , label %36 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %3 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE store i32 %27 %4 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = mul nsw i32 %28 , %29 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = add nsw i32 %31 , %30 NEW_LINE store i32 %32 %2 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %6 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %6 NEW_LINE br label %16 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %37 ) NEW_LINE br label %8 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %6 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %33 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %16 , %18 NEW_LINE %20 = load double %2 NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 %2 NEW_LINE %22 = load double %4 NEW_LINE %23 = load double %5 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %3 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %3 NEW_LINE %28 = load double %6 NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = load double %5 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %5 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %2 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double %3 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %35 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %32 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = and i32 %20 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE %28 = zext i1 %27 to i64 NEW_LINE %29 = select i1 %27 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %30 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %29 ) NEW_LINE %31 = icmp ne i32 %30 , 0 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = phi i1 ARR 2 true %11 , ARR 2 %31 %15 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %33 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sle i32 1 , %20 NEW_LINE br i1 %21 , label %22 , label %32 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = icmp sle i32 %23 , 10 NEW_LINE br i1 %24 , label %25 , label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %5 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp eq i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %13 NEW_LINE 12: NEW_LINE br label %33 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %24 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %5 NEW_LINE 33: NEW_LINE %34 = load i32 %1 NEW_LINE ret i32 %34 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 9.000000e+01 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %4 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = load double %3 NEW_LINE %11 = fdiv double %10 , 1.800000e+02 NEW_LINE %12 = fmul double %11 , 0x400921FB54442D18 NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %9 , %13 NEW_LINE %15 = load double %5 NEW_LINE %16 = fsub double %15 , %14 NEW_LINE store double %16 %5 NEW_LINE %17 = load double %2 NEW_LINE %18 = load double %3 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = call double @sin ( double %20 ) #3 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %6 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %6 NEW_LINE %25 = load double %4 NEW_LINE %26 = load double %3 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %3 NEW_LINE %28 = load double %2 NEW_LINE %29 = fcmp oeq double %28 , 0.000000e+00 NEW_LINE br i1 %29 , label %30 , label %34 NEW_LINE 30: NEW_LINE %31 = load double %4 NEW_LINE %32 = fcmp oeq double %31 , 0.000000e+00 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %35 NEW_LINE 34: NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %5 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %6 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %31 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %25 NEW_LINE 20: NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i1 ARR 2 false %15 , ARR 2 %24 %20 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %29 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %28 ) NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %11 , ARR 2 %30 %25 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE br label %2 NEW_LINE 34: NEW_LINE %35 = load i32 %1 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE call void @PrimeSearch_Eratos ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000000 x i8 @Prime , i64 0 , i64 %15 NEW_LINE %17 = load i8 %16 NEW_LINE %18 = icmp ne i8 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %22 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %31 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %25 NEW_LINE 20: NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i1 ARR 2 false %15 , ARR 2 %24 %20 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %29 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %28 ) NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %11 , ARR 2 %30 %25 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE br label %2 NEW_LINE 34: NEW_LINE %35 = load i32 %1 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %35 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %32 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE %20 = zext i1 %19 to i32 NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = and i32 %20 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE %28 = zext i1 %27 to i64 NEW_LINE %29 = select i1 %27 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %30 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %29 ) NEW_LINE %31 = icmp ne i32 %30 , 0 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = phi i1 ARR 2 true %11 , ARR 2 %31 %15 NEW_LINE %34 = zext i1 %33 to i32 NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 32 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %12 = icmp ne i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %27 NEW_LINE 13: NEW_LINE %14 = load double %2 NEW_LINE %15 = load double %3 NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = load double %6 NEW_LINE %19 = load double %7 NEW_LINE %20 = load double %8 NEW_LINE %21 = load double %9 NEW_LINE %22 = call i32 @chk ( double %14 double %15 double %16 double %17 double %18 double %19 double %20 double %21 ) NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE %24 = zext i1 %23 to i64 NEW_LINE %25 = select i1 %23 , * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:YES~0A~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:NO~0A~00" i64 0 i64 0 ) NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 %25 ) NEW_LINE br label %10 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca * i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %8 = call noalias * i8 @malloc ( i64 20 ) #3 NEW_LINE %9 = bitcast * i8 %8 to * i32 NEW_LINE store * i32 %9 %7 NEW_LINE %10 = load * i32 %7 NEW_LINE call void @init ( * i32 %10 ) NEW_LINE %11 = load * i32 %7 NEW_LINE call void @sort ( * i32 %11 ) NEW_LINE store i32 0 %6 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp slt i32 %13 , 4 NEW_LINE br i1 %14 , label %15 , label %25 NEW_LINE 15: NEW_LINE %16 = load * i32 %7 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i32 %16 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d ▁ ~00" i64 0 i64 0 ) i32 %20 ) NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %6 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %6 NEW_LINE br label %12 NEW_LINE 25: NEW_LINE %26 = load * i32 %7 NEW_LINE %27 = getelementptr inbounds i32 %26 , i64 4 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %31 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %25 NEW_LINE 20: NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i1 ARR 2 false %15 , ARR 2 %24 %20 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %29 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %28 ) NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %11 , ARR 2 %30 %25 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE br label %2 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %4 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %4 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:~8B~01+~06~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d ▁ ~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp eq i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %26 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %25 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = add nsw i32 %21 , 1 NEW_LINE store i32 %22 %3 NEW_LINE %23 = sext i32 %21 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %23 NEW_LINE store i32 %20 %24 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %5 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str:%d%d%d%d%d~00" i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 1 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 2 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 3 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 4 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 5 i64 0 ) ) NEW_LINE %3 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) i32 %2 i32 4 i32 * ( * i32 ) @M ) NEW_LINE %4 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) NEW_LINE %5 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 1 i64 0 ) NEW_LINE %6 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 2 i64 0 ) NEW_LINE %7 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 3 i64 0 ) NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 4 i64 0 ) NEW_LINE %9 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %4 i32 %5 i32 %6 i32 %7 i32 %8 ) NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE %11 = xor i1 %10 , true NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE call void @exit ( i32 %12 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:~8B~01+~06~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @judgeprime ( i64 %0 ) #0 { NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i64 %0 %2 NEW_LINE store i32 1 %3 NEW_LINE %5 = load i64 %2 NEW_LINE %6 = srem i64 %5 , 2 NEW_LINE %7 = icmp eq i64 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE br label %30 NEW_LINE 9: NEW_LINE store i32 3 %4 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load i64 %2 NEW_LINE %14 = sitofp i64 %13 to double NEW_LINE %15 = call double @sqrt ( double %14 ) #3 NEW_LINE %16 = fadd double %15 , 1.000000e+00 NEW_LINE %17 = fcmp olt double %12 , %16 NEW_LINE br i1 %17 , label %18 , label %29 NEW_LINE 18: NEW_LINE %19 = load i64 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = srem i64 %19 , %21 NEW_LINE %23 = icmp eq i64 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE store i32 0 %3 NEW_LINE br label %29 NEW_LINE 25: NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = add nsw i32 %27 , 2 NEW_LINE store i32 %28 %4 NEW_LINE br label %10 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i64 %2 NEW_LINE %32 = icmp eq i64 %31 , 0 NEW_LINE br i1 %32 , label %36 , label %33 NEW_LINE 33: NEW_LINE %34 = load i64 %2 NEW_LINE %35 = icmp eq i64 %34 , 1 NEW_LINE br i1 %35 , label %36 , label %37 NEW_LINE 36: NEW_LINE store i32 0 %3 NEW_LINE br label %42 NEW_LINE 37: NEW_LINE %38 = load i64 %2 NEW_LINE %39 = icmp eq i64 %38 , 2 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE store i32 1 %3 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %3 NEW_LINE ret i32 %43 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE %7 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %39 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %31 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %2 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i32 %7 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %7 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %38 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = load i32 %2 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %34 NEW_LINE store i32 %32 %35 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %2 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %8 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1000000 x i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = getelementptr inbounds ARR 3 1000000 x i32 %4 , i64 0 , i64 0 NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %7 , 1000000 NEW_LINE br i1 %8 , label %9 , label %24 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sub nsw i32 %10 , 1 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 1000000 x i32 %4 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = call i32 @isPrime ( i32 %15 ) NEW_LINE %17 = add nsw i32 %14 , %16 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1000000 x i32 %4 , i64 0 , i64 %19 NEW_LINE store i32 %17 %20 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %3 NEW_LINE br label %6 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %27 = icmp ne i32 %26 , -1 NEW_LINE br i1 %27 , label %28 , label %34 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i32 %4 , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %25 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE call void @tbl ( ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %29 NEW_LINE 8: NEW_LINE store i32 0 %4 NEW_LINE store i32 2 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp sle i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %26 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 1000000 x i32 @TBL , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = icmp eq i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %22 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %2 NEW_LINE br label %9 NEW_LINE 26: NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %5 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp slt i32 %7 , 10 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %39 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %26 NEW_LINE store i32 %24 %27 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %38 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , -1 NEW_LINE store i32 %32 %4 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %17 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %38 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %6 NEW_LINE %14 = load i32 %2 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = icmp slt i32 %16 , %18 NEW_LINE br i1 %19 , label %20 , label %35 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE store i32 %23 %3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %5 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %7 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %4 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %44 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE store i32 1 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sub nsw i32 600 , %14 NEW_LINE %16 = icmp slt i32 %13 , %15 NEW_LINE br i1 %16 , label %17 , label %32 NEW_LINE 17: NEW_LINE %18 = load i32 %5 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = mul nsw i32 %25 , %26 NEW_LINE %28 = add nsw i32 %18 , %27 NEW_LINE store i32 %28 %5 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %10 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = load i32 %4 NEW_LINE %35 = sub nsw i32 600 , %34 NEW_LINE %36 = load i32 %4 NEW_LINE %37 = sub nsw i32 600 , %36 NEW_LINE %38 = mul nsw i32 %35 , %37 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = mul nsw i32 %38 , %39 NEW_LINE %41 = add nsw i32 %33 , %40 NEW_LINE store i32 %41 %5 NEW_LINE %42 = load i32 %5 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE br label %6 NEW_LINE 44: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @x i64 0 i64 0 ) , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = xor i32 %8 , -1 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %30 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 9 x i32 @x , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %3 NEW_LINE br label %28 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 9 x i32 @x , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i32 ARR 2 %20 %18 , ARR 2 %27 %21 NEW_LINE br label %4 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @n NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @n NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @m NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 @m NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @m NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 @m NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %21 i32 %26 ) NEW_LINE %28 = load i32 @n NEW_LINE %29 = sdiv i32 %28 , %27 NEW_LINE store i32 %29 @n NEW_LINE br label %13 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:~8B~01+~06~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 30 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 30 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 120 i1 false ) NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 30 x i32 %2 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %27 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 30 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca ARR 3 10 x i8 NEW_LINE store i32 0 %1 NEW_LINE %4 = bitcast * ARR 3 10 x i8 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %4 i8 0 i64 10 i1 false ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i8 %2 ) NEW_LINE %7 = load i8 %2 NEW_LINE %8 = icmp ne i8 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %14 NEW_LINE 9: NEW_LINE %10 = load i8 %2 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 0 NEW_LINE %12 = call i64 @strlen ( * i8 %11 ) #4 NEW_LINE %13 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 %12 NEW_LINE store i8 %10 %13 NEW_LINE br label %32 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 0 NEW_LINE %16 = load i8 %15 NEW_LINE %17 = icmp ne i8 %16 , 0 NEW_LINE br i1 %17 , label %19 , label %18 NEW_LINE 18: NEW_LINE ret i32 0 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 0 NEW_LINE %21 = call i64 @strlen ( * i8 %20 ) #4 NEW_LINE %22 = sub i64 %21 , 1 NEW_LINE %23 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i8 %23 NEW_LINE %25 = sext i8 %24 to i32 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 0 NEW_LINE %28 = call i64 @strlen ( * i8 %27 ) #4 NEW_LINE %29 = sub i64 %28 , 1 NEW_LINE %30 = getelementptr inbounds ARR 3 10 x i8 %3 , i64 0 , i64 %29 NEW_LINE store i8 0 %30 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %5 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @i NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %18 NEW_LINE 15: NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 @i NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = call i32 @top ( ) NEW_LINE %20 = load i32 @k NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 @out , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE %23 = load i32 @k NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 @k NEW_LINE call void @pop ( ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %3 NEW_LINE 26: NEW_LINE store i32 0 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 @k NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %40 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 100 x i32 @out , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %2 NEW_LINE br label %27 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @func_output ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %6 = load i32 %4 NEW_LINE store i32 %6 %5 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sle i32 80 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.2:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %40 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp sge i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %28 NEW_LINE 18: NEW_LINE %19 = load * i8 %3 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i8 %19 , i64 %21 NEW_LINE %23 = load i8 %22 NEW_LINE %24 = sext i8 %23 to i32 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %5 NEW_LINE br label %38 NEW_LINE 28: NEW_LINE %29 = load * i8 %3 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds i8 %29 , i64 %31 NEW_LINE %33 = load i8 %32 NEW_LINE %34 = sext i8 %33 to i32 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %5 NEW_LINE %37 = add nsw i32 %36 , -1 NEW_LINE store i32 %37 %5 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %12 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE ret void NEW_LINE }
define dso_local void @func_output ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %6 = load i32 %4 NEW_LINE store i32 %6 %5 NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp sle i32 80 , %7 NEW_LINE br i1 %8 , label %9 , label %11 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.2:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %40 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp sge i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %28 NEW_LINE 18: NEW_LINE %19 = load * i8 %3 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds i8 %19 , i64 %21 NEW_LINE %23 = load i8 %22 NEW_LINE %24 = sext i8 %23 to i32 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %5 NEW_LINE br label %38 NEW_LINE 28: NEW_LINE %29 = load * i8 %3 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds i8 %29 , i64 %31 NEW_LINE %33 = load i8 %32 NEW_LINE %34 = sext i8 %33 to i32 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %5 NEW_LINE %37 = add nsw i32 %36 , -1 NEW_LINE store i32 %37 %5 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %12 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0xBFF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %3 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %33 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = load double %2 NEW_LINE %19 = fmul double %17 , %18 NEW_LINE %20 = load double %4 NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 %4 NEW_LINE %22 = load double %6 NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = load double %2 NEW_LINE %25 = fmul double %23 , %24 NEW_LINE %26 = load double %5 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %5 NEW_LINE %28 = load double %3 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = load double %6 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %6 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %4 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double %5 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = sub nsw i32 0 , %37 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %38 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %8 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %7 NEW_LINE %23 = load i32 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %5 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %6 = load double %2 NEW_LINE %7 = fcmp une double %6 , 0.000000e+00 NEW_LINE br i1 %7 , label %11 , label %8 NEW_LINE 8: NEW_LINE %9 = load double %3 NEW_LINE %10 = fcmp une double %9 , 0.000000e+00 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = phi i1 ARR 2 true %4 , ARR 2 %10 %8 NEW_LINE br i1 %12 , label %13 , label %33 NEW_LINE 13: NEW_LINE %14 = load double %2 NEW_LINE %15 = load double @a NEW_LINE %16 = fmul double %15 , 0x400921FB54442D18 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %14 , %18 NEW_LINE %20 = load double @x NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 @x NEW_LINE %22 = load double %2 NEW_LINE %23 = load double @a NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE %26 = call double @cos ( double %25 ) #3 NEW_LINE %27 = fmul double %22 , %26 NEW_LINE %28 = load double @y NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 @y NEW_LINE %30 = load double %3 NEW_LINE %31 = load double @a NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 @a NEW_LINE br label %4 NEW_LINE 33: NEW_LINE %34 = load double @x NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double @y NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 32 x i8 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i32 @calc_prime ( ) NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = getelementptr inbounds ARR 3 32 x i8 %3 , i64 0 , i64 0 NEW_LINE %7 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %8 = call * i8 @fgets ( * i8 %6 i32 32 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %7 ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE br i1 %9 , label %10 , label %15 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 32 x i8 %3 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @atoi to i32 * ( * i8 ... ) ) ( * i8 %11 ) NEW_LINE %13 = call i32 @count ( i32 %12 ) NEW_LINE %14 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %13 ) NEW_LINE br label %5 NEW_LINE 15: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sdiv i32 600 , %13 NEW_LINE store i32 %14 %4 NEW_LINE store i32 0 %8 NEW_LINE store i32 1 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE store i32 %22 %7 NEW_LINE %23 = load i32 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE store i32 %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE store i32 %28 %5 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %8 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %8 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %2 NEW_LINE br label %15 NEW_LINE 35: NEW_LINE %36 = load i32 %8 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %3 NEW_LINE %39 = icmp eq i32 %38 , 0 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE br label %42 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = load i32 @d NEW_LINE %8 = or i32 %6 , %7 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %32 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double @c NEW_LINE %14 = call double @sin ( double %13 ) #4 NEW_LINE %15 = fmul double %12 , %14 NEW_LINE %16 = load double @x NEW_LINE %17 = fadd double %16 , %15 NEW_LINE store double %17 @x NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load double @c NEW_LINE %21 = call double @cos ( double %20 ) #4 NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load double @y NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 @y NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 @d NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double %27 , 0x400921FB54442D18 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = load double @c NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 @c NEW_LINE br label %4 NEW_LINE 32: NEW_LINE %33 = load double @x NEW_LINE %34 = fptosi double %33 to i32 NEW_LINE store i32 %34 @d NEW_LINE %35 = load double @y NEW_LINE %36 = fptosi double %35 to i32 NEW_LINE store i32 %36 %3 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %34 i32 %36 ) NEW_LINE %38 = icmp ne i32 %37 , 0 NEW_LINE %39 = xor i1 %38 , true NEW_LINE %40 = zext i1 %39 to i32 NEW_LINE call void @exit ( i32 %40 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %43 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @d NEW_LINE %11 = or i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %20 , label %13 NEW_LINE 13: NEW_LINE %14 = load double @x NEW_LINE %15 = fptosi double %14 to i32 NEW_LINE store i32 %15 @d NEW_LINE %16 = load double @y NEW_LINE %17 = fptosi double %16 to i32 NEW_LINE store i32 %17 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %17 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = phi i1 ARR 2 true %8 , ARR 2 %19 %13 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double @c NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double @x NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 @x NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = load double @c NEW_LINE %33 = call double @cos ( double %32 ) #3 NEW_LINE %34 = fmul double %31 , %33 NEW_LINE %35 = load double @y NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 @y NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 @d NEW_LINE %39 = sitofp i32 %38 to double NEW_LINE %40 = fdiv double %39 , 5.730000e+01 NEW_LINE %41 = load double @c NEW_LINE %42 = fadd double %41 , %40 NEW_LINE store double %42 @c NEW_LINE br label %4 NEW_LINE 43: NEW_LINE %44 = load i32 %2 NEW_LINE ret i32 %44 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %43 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 @d NEW_LINE %11 = or i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %20 , label %13 NEW_LINE 13: NEW_LINE %14 = load double @x NEW_LINE %15 = fptosi double %14 to i32 NEW_LINE store i32 %15 @d NEW_LINE %16 = load double @y NEW_LINE %17 = fptosi double %16 to i32 NEW_LINE store i32 %17 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %15 i32 %17 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = phi i1 ARR 2 true %8 , ARR 2 %19 %13 NEW_LINE %22 = zext i1 %21 to i32 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double @c NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double @x NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 @x NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = load double @c NEW_LINE %33 = call double @cos ( double %32 ) #3 NEW_LINE %34 = fmul double %31 , %33 NEW_LINE %35 = load double @y NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 @y NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 @d NEW_LINE %39 = sitofp i32 %38 to double NEW_LINE %40 = fdiv double %39 , 5.730000e+01 NEW_LINE %41 = load double @c NEW_LINE %42 = fadd double %41 , %40 NEW_LINE store double %42 @c NEW_LINE br label %4 NEW_LINE 43: NEW_LINE %44 = load i32 %2 NEW_LINE ret i32 %44 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %33 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = load double %2 NEW_LINE %14 = fmul double %13 , 0x400921FB54442D18 NEW_LINE %15 = fdiv double %14 , 1.800000e+02 NEW_LINE %16 = call double @sin ( double %15 ) #3 NEW_LINE %17 = fmul double %12 , %16 NEW_LINE %18 = load double %3 NEW_LINE %19 = fadd double %18 , %17 NEW_LINE store double %19 %3 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %2 NEW_LINE %23 = fmul double %22 , 0x400921FB54442D18 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @cos ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load double %4 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %4 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load double %2 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %2 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %3 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double %4 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp slt i32 %7 , 100 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE store i32 0 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %40 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %29 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE %27 = sext i32 %25 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %27 NEW_LINE store i32 %24 %28 NEW_LINE br label %39 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , -1 NEW_LINE store i32 %31 %5 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %5 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %37 NEW_LINE store i32 0 %38 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %17 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %6 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %33 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %16 , %18 NEW_LINE %20 = load double %2 NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 %2 NEW_LINE %22 = load double %4 NEW_LINE %23 = load double %5 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %3 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %3 NEW_LINE %28 = load double %6 NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = load double %5 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %5 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %2 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = load double %3 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %35 i32 %37 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double %18 , 0x3F91DF46A2529D39 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %17 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double %26 , 0x3F91DF46A2529D39 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = fmul double %25 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = call i32 @isfull ( ) NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %25 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %17 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE call void @push ( i32 %16 ) NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = call i32 @top ( ) NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %20 NEW_LINE store i32 %18 %21 NEW_LINE call void @pop ( ) NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %4 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE store i32 0 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %40 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %3 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %3 NEW_LINE br label %27 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0x3FF921FB54442D18 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %4 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %5 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %5 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %4 NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %6 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %6 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = fmul double %32 , 0x400921FB54442D18 NEW_LINE %34 = load double %4 NEW_LINE %35 = fsub double %34 , %33 NEW_LINE store double %35 %4 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %5 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %6 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %5 * double %6 ) NEW_LINE %9 = load double %5 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load double %2 NEW_LINE %17 = fmul double %16 , 3.141500e+00 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @sin ( double %18 ) #3 NEW_LINE %20 = load double %5 NEW_LINE %21 = fmul double %19 , %20 NEW_LINE %22 = load double %3 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %3 NEW_LINE %24 = load double %2 NEW_LINE %25 = fmul double %24 , 3.141500e+00 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = load double %5 NEW_LINE %29 = fmul double %27 , %28 NEW_LINE %30 = load double %4 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %4 NEW_LINE %32 = load double %6 NEW_LINE %33 = load double %2 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %2 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %3 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %4 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 601 x i64 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %40 NEW_LINE 8: NEW_LINE %9 = getelementptr inbounds ARR 3 601 x i64 %4 , i64 0 , i64 0 NEW_LINE %10 = bitcast * i64 %9 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %10 i8 0 i64 4808 i1 false ) NEW_LINE %11 = load i32 %3 NEW_LINE store i32 %11 %2 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 601 x i64 %4 , i64 0 , i64 %17 NEW_LINE %19 = load i64 %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = mul nsw i32 %22 , %23 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = add nsw i64 %19 , %25 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %27 , %28 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 601 x i64 %4 , i64 0 , i64 %30 NEW_LINE store i64 %26 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %3 NEW_LINE %34 = load i32 %2 NEW_LINE %35 = add nsw i32 %34 , %33 NEW_LINE store i32 %35 %2 NEW_LINE br label %12 NEW_LINE 36: NEW_LINE %37 = getelementptr inbounds ARR 3 601 x i64 %4 , i64 0 , i64 600 NEW_LINE %38 = load i64 %37 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i64 %38 ) NEW_LINE br label %5 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double %18 , 0x3F91DF46A2529D39 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %17 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double %26 , 0x3F91DF46A2529D39 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = fmul double %25 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %5 NEW_LINE %7 = load float %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 2 NEW_LINE %10 = srem i32 %9 , 6 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %11 NEW_LINE %13 = load float %12 NEW_LINE %14 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %15 = fsub float %13 , %14 NEW_LINE %16 = fmul float %7 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 3 NEW_LINE %19 = srem i32 %18 , 6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %20 NEW_LINE %22 = load float %21 NEW_LINE %23 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %25 NEW_LINE %27 = load float %26 NEW_LINE %28 = fsub float %23 , %27 NEW_LINE %29 = fmul float %22 , %28 NEW_LINE %30 = fadd float %16 , %29 NEW_LINE %31 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 7 ) NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %33 NEW_LINE %35 = load float %34 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 2 NEW_LINE %38 = srem i32 %37 , 6 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %39 NEW_LINE %41 = load float %40 NEW_LINE %42 = fsub float %35 , %41 NEW_LINE %43 = fmul float %31 , %42 NEW_LINE %44 = fadd float %30 , %43 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE %7 = bitcast * ARR 3 10 x i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 40 i1 false ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp eq i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %25 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %5 NEW_LINE br label %33 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %5 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 10 x i32 %6 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %8 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = fcmp une double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load double %3 NEW_LINE %13 = fcmp une double %12 , 0.000000e+00 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load double %6 NEW_LINE %18 = fmul double %17 , 0x400921FB54442D18 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = load double %2 NEW_LINE %22 = fmul double %20 , %21 NEW_LINE %23 = load double %4 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %4 NEW_LINE %25 = load double %6 NEW_LINE %26 = fmul double %25 , 0x400921FB54442D18 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = load double %2 NEW_LINE %30 = fmul double %28 , %29 NEW_LINE %31 = load double %5 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %5 NEW_LINE %33 = load double %3 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0x3FF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str: ▁ %d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fsub double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %6 NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 11 x i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = bitcast * ARR 3 11 x i32 %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %9 i8 0 i64 44 i1 false ) NEW_LINE store i32 0 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %12 = icmp ne i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %32 NEW_LINE 13: NEW_LINE %14 = load i32 %7 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %23 NEW_LINE 16: NEW_LINE %17 = load i32 %8 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %8 NEW_LINE %19 = load i32 %7 NEW_LINE %20 = load i32 %8 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE br label %31 NEW_LINE 23: NEW_LINE %24 = load i32 %8 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %8 NEW_LINE %30 = add nsw i32 %29 , -1 NEW_LINE store i32 %30 %8 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %10 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %5 NEW_LINE %7 = load float %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 2 NEW_LINE %10 = srem i32 %9 , 6 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %11 NEW_LINE %13 = load float %12 NEW_LINE %14 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %15 = fsub float %13 , %14 NEW_LINE %16 = fmul float %7 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 3 NEW_LINE %19 = srem i32 %18 , 6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %20 NEW_LINE %22 = load float %21 NEW_LINE %23 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %25 NEW_LINE %27 = load float %26 NEW_LINE %28 = fsub float %23 , %27 NEW_LINE %29 = fmul float %22 , %28 NEW_LINE %30 = fadd float %16 , %29 NEW_LINE %31 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 7 ) NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %33 NEW_LINE %35 = load float %34 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 2 NEW_LINE %38 = srem i32 %37 , 6 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %39 NEW_LINE %41 = load float %40 NEW_LINE %42 = fsub float %35 , %41 NEW_LINE %43 = fmul float %31 , %42 NEW_LINE %44 = fadd float %30 , %43 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp slt i32 %7 , 10 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d ▁ ~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %42 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %30 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %26 NEW_LINE store i32 %24 %27 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %5 NEW_LINE br label %41 NEW_LINE 30: NEW_LINE %31 = load i32 %5 NEW_LINE %32 = add nsw i32 %31 , -1 NEW_LINE store i32 %32 %5 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %5 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %39 NEW_LINE store i32 0 %40 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %17 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 @n ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %28 NEW_LINE 5: NEW_LINE %6 = load i32 @n NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %20 NEW_LINE 8: NEW_LINE %9 = load i32 @flag NEW_LINE %10 = add nsw i32 %9 , -1 NEW_LINE store i32 %10 @flag NEW_LINE %11 = load i32 @flag NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 15 x i32 @stack , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = load i32 @aflag NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 15 x i32 @ans , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE %18 = load i32 @aflag NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 @aflag NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 @n NEW_LINE %22 = load i32 @flag NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 15 x i32 @stack , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 @flag NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 @flag NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %2 NEW_LINE 28: NEW_LINE store i32 0 @i NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 @i NEW_LINE %31 = load i32 @aflag NEW_LINE %32 = icmp slt i32 %30 , %31 NEW_LINE br i1 %32 , label %33 , label %42 NEW_LINE 33: NEW_LINE %34 = load i32 @i NEW_LINE %35 = sext i32 %34 to i64 NEW_LINE %36 = getelementptr inbounds ARR 3 15 x i32 @ans , i64 0 , i64 %35 NEW_LINE %37 = load i32 %36 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %37 ) NEW_LINE br label %39 NEW_LINE 39: NEW_LINE %40 = load i32 @i NEW_LINE %41 = add nsw i32 %40 , 1 NEW_LINE store i32 %41 @i NEW_LINE br label %29 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1000 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %43 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 %5 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 0 %15 NEW_LINE store i32 0 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp slt i32 %17 , 600 NEW_LINE br i1 %18 , label %19 , label %37 NEW_LINE 19: NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 1000 x i32 %4 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %3 NEW_LINE %26 = mul nsw i32 %24 , %25 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = mul nsw i32 %26 , %27 NEW_LINE %29 = add nsw i32 %23 , %28 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 1000 x i32 %4 , i64 0 , i64 %31 NEW_LINE store i32 %29 %32 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = load i32 %2 NEW_LINE %36 = add nsw i32 %34 , %35 NEW_LINE store i32 %36 %3 NEW_LINE br label %16 NEW_LINE 37: NEW_LINE %38 = load i32 %5 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 1000 x i32 %4 , i64 0 , i64 %39 NEW_LINE %41 = load i32 %40 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE br label %7 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %5 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %5 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %6 NEW_LINE %18 = fmul double %17 , 0x400921FAFC8B007A NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = fmul double %16 , %20 NEW_LINE %22 = load double %2 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %2 NEW_LINE %24 = load double %4 NEW_LINE %25 = load double %6 NEW_LINE %26 = fmul double %25 , 0x400921FAFC8B007A NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %24 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE %32 = load double %5 NEW_LINE %33 = load double %6 NEW_LINE %34 = fsub double %33 , %32 NEW_LINE store double %34 %6 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %2 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %3 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %5 * double %6 ) NEW_LINE %9 = load double %5 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE %18 = fmul double %17 , 0x400921FB54442D18 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = load double %5 NEW_LINE %21 = fmul double %19 , %20 NEW_LINE %22 = load double %2 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %2 NEW_LINE %24 = load double %4 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE %26 = fmul double %25 , 0x400921FB54442D18 NEW_LINE %27 = call double @sin ( double %26 ) #3 NEW_LINE %28 = load double %5 NEW_LINE %29 = fmul double %27 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE %32 = load double %6 NEW_LINE %33 = load double %4 NEW_LINE %34 = fsub double %33 , %32 NEW_LINE store double %34 %4 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %2 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %3 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %5 NEW_LINE %7 = load float %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 2 NEW_LINE %10 = srem i32 %9 , 6 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %11 NEW_LINE %13 = load float %12 NEW_LINE %14 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %15 = fsub float %13 , %14 NEW_LINE %16 = fmul float %7 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 3 NEW_LINE %19 = srem i32 %18 , 6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %20 NEW_LINE %22 = load float %21 NEW_LINE %23 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %25 NEW_LINE %27 = load float %26 NEW_LINE %28 = fsub float %23 , %27 NEW_LINE %29 = fmul float %22 , %28 NEW_LINE %30 = fadd float %16 , %29 NEW_LINE %31 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 7 ) NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %33 NEW_LINE %35 = load float %34 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 2 NEW_LINE %38 = srem i32 %37 , 6 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %39 NEW_LINE %41 = load float %40 NEW_LINE %42 = fsub float %35 , %41 NEW_LINE %43 = fmul float %31 , %42 NEW_LINE %44 = fadd float %30 , %43 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %5 NEW_LINE %7 = load float %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 2 NEW_LINE %10 = srem i32 %9 , 6 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %11 NEW_LINE %13 = load float %12 NEW_LINE %14 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %15 = fsub float %13 , %14 NEW_LINE %16 = fmul float %7 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 3 NEW_LINE %19 = srem i32 %18 , 6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %20 NEW_LINE %22 = load float %21 NEW_LINE %23 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %25 NEW_LINE %27 = load float %26 NEW_LINE %28 = fsub float %23 , %27 NEW_LINE %29 = fmul float %22 , %28 NEW_LINE %30 = fadd float %16 , %29 NEW_LINE %31 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 7 ) NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %33 NEW_LINE %35 = load float %34 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 2 NEW_LINE %38 = srem i32 %37 , 6 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %39 NEW_LINE %41 = load float %40 NEW_LINE %42 = fsub float %35 , %41 NEW_LINE %43 = fmul float %31 , %42 NEW_LINE %44 = fadd float %30 , %43 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %6 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %12 NEW_LINE 11: NEW_LINE br label %32 NEW_LINE 12: NEW_LINE %13 = load double %4 NEW_LINE %14 = load double %5 NEW_LINE %15 = fdiv double %14 , 1.800000e+02 NEW_LINE %16 = fmul double %15 , 0x400921FB54442D18 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = fmul double %13 , %17 NEW_LINE %19 = load double %2 NEW_LINE %20 = fadd double %19 , %18 NEW_LINE store double %20 %2 NEW_LINE %21 = load double %4 NEW_LINE %22 = load double %5 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load double %3 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %3 NEW_LINE %29 = load double %6 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE br label %7 NEW_LINE 32: NEW_LINE %33 = load double %3 NEW_LINE %34 = fptosi double %33 to i32 NEW_LINE %35 = load double %2 NEW_LINE %36 = fptosi double %35 to i32 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %34 i32 %36 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @intsort ( * i32 %16 i32 5 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @reverse ( * i32 %17 i32 5 ) NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 1 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 2 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 3 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 4 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %19 i32 %21 i32 %23 i32 %25 i32 %27 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = icmp slt i32 %6 , 10 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %10 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE store i32 0 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %18 = icmp ne i32 %17 , -1 NEW_LINE br i1 %18 , label %19 , label %40 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = icmp eq i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %32 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %30 NEW_LINE store i32 0 %31 NEW_LINE br label %39 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = load i32 %2 NEW_LINE %35 = sext i32 %34 to i64 NEW_LINE %36 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %35 NEW_LINE store i32 %33 %36 NEW_LINE %37 = load i32 %2 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %2 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %16 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = mul nsw i32 %11 , %12 NEW_LINE %14 = mul nsw i32 %10 , %13 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = mul nsw i32 %14 , %17 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , %18 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sub nsw i32 600 , %24 NEW_LINE %26 = icmp eq i32 %23 , %25 NEW_LINE br i1 %26 , label %27 , label %28 NEW_LINE 27: NEW_LINE br label %31 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %9 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %5 NEW_LINE 34: NEW_LINE %35 = load i32 %1 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @f ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE store i32 %0 %2 NEW_LINE %3 = load i32 %2 NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %5 NEW_LINE %7 = load float %6 NEW_LINE %8 = load i32 %2 NEW_LINE %9 = add nsw i32 %8 , 2 NEW_LINE %10 = srem i32 %9 , 6 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %11 NEW_LINE %13 = load float %12 NEW_LINE %14 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %15 = fsub float %13 , %14 NEW_LINE %16 = fmul float %7 , %15 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 3 NEW_LINE %19 = srem i32 %18 , 6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %20 NEW_LINE %22 = load float %21 NEW_LINE %23 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 6 ) NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %25 NEW_LINE %27 = load float %26 NEW_LINE %28 = fsub float %23 , %27 NEW_LINE %29 = fmul float %22 , %28 NEW_LINE %30 = fadd float %16 , %29 NEW_LINE %31 = load float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 7 ) NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %33 NEW_LINE %35 = load float %34 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 2 NEW_LINE %38 = srem i32 %37 , 6 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 8 x float @c , i64 0 , i64 %39 NEW_LINE %41 = load float %40 NEW_LINE %42 = fsub float %35 , %41 NEW_LINE %43 = fmul float %31 , %42 NEW_LINE %44 = fadd float %30 , %43 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE ret i32 %45 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %32 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %24 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sub nsw i32 %12 , 1 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %16 ) NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sub nsw i32 %18 , 1 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %20 NEW_LINE store i32 0 %21 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %3 NEW_LINE br label %31 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sle i32 %5 , 999999 NEW_LINE br i1 %6 , label %7 , label %24 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = call i32 @IsPrime ( i32 %8 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sub nsw i32 %10 , 1 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 1000000 x i32 @Primes , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = add nsw i32 %9 , %14 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1000000 x i32 @Primes , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = add nsw i32 %19 , %15 NEW_LINE store i32 %20 %18 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %2 NEW_LINE br label %4 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %27 = icmp ne i32 %26 , -1 NEW_LINE br i1 %27 , label %28 , label %34 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i32 @Primes , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %25 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %34 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sub nsw i32 %16 , 1 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %22 NEW_LINE store i32 %20 %23 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = sub nsw i32 %24 , 1 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sub nsw i32 %30 , 1 NEW_LINE store i32 %31 %6 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %5 NEW_LINE br label %41 NEW_LINE 34: NEW_LINE %35 = load i32 %4 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %37 NEW_LINE store i32 %35 %38 NEW_LINE %39 = load i32 %6 NEW_LINE %40 = add nsw i32 %39 , 1 NEW_LINE store i32 %40 %6 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %9 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 @getprimes ( * i32 getelementptr inbounds ( ARR 3 100000 x i32 @primes i64 0 i64 0 ) i32 1000000 ) NEW_LINE store i32 %6 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp eq i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %32 NEW_LINE 10: NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp slt i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %29 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 100000 x i32 @primes , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = icmp sgt i32 %19 , %20 NEW_LINE br i1 %21 , label %22 , label %23 NEW_LINE 22: NEW_LINE br label %29 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %2 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %7 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = fmul double 0x400921FB54442D18 , %16 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @sin ( double %18 ) #3 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load double %4 NEW_LINE %26 = fmul double 0x400921FB54442D18 , %25 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %3 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %3 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %4 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %6 NEW_LINE %20 = fmul double %19 , 0x3F91DF46A2529D34 NEW_LINE %21 = call double @sin ( double %20 ) #3 NEW_LINE %22 = fmul double %18 , %21 NEW_LINE %23 = fadd double %16 , %22 NEW_LINE store double %23 %4 NEW_LINE %24 = load double %5 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %6 NEW_LINE %28 = fmul double %27 , 0x3F91DF46A2529D34 NEW_LINE %29 = call double @cos ( double %28 ) #3 NEW_LINE %30 = fmul double %26 , %29 NEW_LINE %31 = fadd double %24 , %30 NEW_LINE store double %31 %5 NEW_LINE %32 = load double %6 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = sitofp i32 %33 to double NEW_LINE %35 = fadd double %32 , %34 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca * i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = call * i8 @malloc ( i64 4000000 ) NEW_LINE %8 = bitcast * i8 %7 to * i32 NEW_LINE store * i32 %8 %6 NEW_LINE store i32 0 %3 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp slt i32 %10 , 1000000 NEW_LINE br i1 %11 , label %12 , label %22 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 @isprimefunc ( i32 %13 ) NEW_LINE %15 = load * i32 %6 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds i32 %15 , i64 %17 NEW_LINE store i32 %14 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE br label %9 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %25 = icmp ne i32 %24 , -1 NEW_LINE br i1 %25 , label %26 , label %48 NEW_LINE 26: NEW_LINE store i32 0 %5 NEW_LINE store i32 2 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp sle i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %45 NEW_LINE 31: NEW_LINE %32 = load * i32 %6 NEW_LINE %33 = load i32 %3 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds i32 %32 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br i1 %37 , label %38 , label %41 NEW_LINE 38: NEW_LINE %39 = load i32 %5 NEW_LINE %40 = add nsw i32 %39 , 1 NEW_LINE store i32 %40 %5 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %3 NEW_LINE %44 = add nsw i32 %43 , 1 NEW_LINE store i32 %44 %3 NEW_LINE br label %27 NEW_LINE 45: NEW_LINE %46 = load i32 %5 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %46 ) NEW_LINE br label %23 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %4 NEW_LINE store i32 1 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp sle i32 %6 , 10 NEW_LINE br i1 %7 , label %8 , label %13 NEW_LINE 8: NEW_LINE %9 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 10 NEW_LINE store i32 0 %9 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = add nsw i32 %11 , 1 NEW_LINE store i32 %12 %4 NEW_LINE br label %5 NEW_LINE 13: NEW_LINE store i32 1 %4 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %16 = icmp ne i32 %15 , -1 NEW_LINE br i1 %16 , label %17 , label %40 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %39 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = icmp eq i32 %28 , 0 NEW_LINE br i1 %29 , label %30 , label %38 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , -1 NEW_LINE store i32 %32 %4 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %14 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca %struct.STACK NEW_LINE store i32 0 %1 NEW_LINE call void @initStack ( * %struct.STACK %4 ) NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %7 = call i32 ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 * i8 ... ) @__isoc99_fscanf ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %6 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %23 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = call i32 @pop ( * %struct.STACK %4 ) NEW_LINE store i32 %13 %3 NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp ne i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %19 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %22 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE call void @push ( * %struct.STACK %4 i32 %21 ) NEW_LINE br label %22 NEW_LINE 22: NEW_LINE br label %5 NEW_LINE 23: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 16 x i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca ARR 3 4 x i8 NEW_LINE store i32 0 %1 NEW_LINE %5 = getelementptr inbounds ARR 3 16 x i32 %2 , i64 0 , i64 0 NEW_LINE store * i32 %5 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = getelementptr inbounds ARR 3 4 x i8 %4 , i64 0 , i64 0 NEW_LINE %8 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %9 = call * i8 @fgets ( * i8 %7 i32 4 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %8 ) NEW_LINE %10 = icmp ne * i8 %9 , null NEW_LINE br i1 %10 , label %11 , label %27 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 4 x i8 %4 , i64 0 , i64 0 NEW_LINE %13 = load * i32 %3 NEW_LINE %14 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %12 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %13 ) #3 NEW_LINE %15 = load * i32 %3 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %23 NEW_LINE 18: NEW_LINE %19 = load * i32 %3 NEW_LINE %20 = getelementptr inbounds i32 %19 , i32 -1 NEW_LINE store * i32 %20 %3 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE br label %26 NEW_LINE 23: NEW_LINE %24 = load * i32 %3 NEW_LINE %25 = getelementptr inbounds i32 %24 , i32 1 NEW_LINE store * i32 %25 %3 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %6 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local * i8 @decode ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load * i8 %3 NEW_LINE %8 = getelementptr inbounds i8 %7 , i64 -1 NEW_LINE store * i8 %8 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load * i8 %5 NEW_LINE %11 = getelementptr inbounds i8 %10 , i32 1 NEW_LINE store * i8 %11 %5 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = icmp ne i8 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %46 NEW_LINE 14: NEW_LINE %15 = load * i8 %5 NEW_LINE %16 = call i32 @a ( * i8 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %45 NEW_LINE 18: NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %6 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = icmp sgt i32 %24 , 122 NEW_LINE br i1 %25 , label %26 , label %31 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE %28 = sub nsw i32 %27 , 26 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE %30 = load * i8 %5 NEW_LINE store i8 %29 %30 NEW_LINE br label %44 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = icmp slt i32 %32 , 97 NEW_LINE br i1 %33 , label %34 , label %39 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add nsw i32 %35 , 26 NEW_LINE %37 = trunc i32 %36 to i8 NEW_LINE %38 = load * i8 %5 NEW_LINE store i8 %37 %38 NEW_LINE br label %43 NEW_LINE 39: NEW_LINE %40 = load i32 %6 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE %42 = load * i8 %5 NEW_LINE store i8 %41 %42 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE br label %9 NEW_LINE 46: NEW_LINE %47 = load * i8 %3 NEW_LINE ret * i8 %47 NEW_LINE }
define dso_local * i8 @decode ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load * i8 %3 NEW_LINE %8 = getelementptr inbounds i8 %7 , i64 -1 NEW_LINE store * i8 %8 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load * i8 %5 NEW_LINE %11 = getelementptr inbounds i8 %10 , i32 1 NEW_LINE store * i8 %11 %5 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = icmp ne i8 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %46 NEW_LINE 14: NEW_LINE %15 = load * i8 %5 NEW_LINE %16 = call i32 @a ( * i8 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %45 NEW_LINE 18: NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %6 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = icmp sgt i32 %24 , 122 NEW_LINE br i1 %25 , label %26 , label %31 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE %28 = sub nsw i32 %27 , 26 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE %30 = load * i8 %5 NEW_LINE store i8 %29 %30 NEW_LINE br label %44 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = icmp slt i32 %32 , 97 NEW_LINE br i1 %33 , label %34 , label %39 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add nsw i32 %35 , 26 NEW_LINE %37 = trunc i32 %36 to i8 NEW_LINE %38 = load * i8 %5 NEW_LINE store i8 %37 %38 NEW_LINE br label %43 NEW_LINE 39: NEW_LINE %40 = load i32 %6 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE %42 = load * i8 %5 NEW_LINE store i8 %41 %42 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE br label %9 NEW_LINE 46: NEW_LINE %47 = load * i8 %3 NEW_LINE ret * i8 %47 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %26 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %11 ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %15 * i8 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = call i64 @strlen ( * i8 %17 ) #5 NEW_LINE %19 = icmp ule i64 %18 , 80 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %21 ) NEW_LINE br label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = call double @sin ( double %16 ) #3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load double %6 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = fmul double %32 , 0x400921FB54442D11 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local * i8 @decode ( * i8 %0 i32 %1 ) #0 { NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i32 NEW_LINE store * i8 %0 %3 NEW_LINE store i32 %1 %4 NEW_LINE %7 = load * i8 %3 NEW_LINE %8 = getelementptr inbounds i8 %7 , i64 -1 NEW_LINE store * i8 %8 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load * i8 %5 NEW_LINE %11 = getelementptr inbounds i8 %10 , i32 1 NEW_LINE store * i8 %11 %5 NEW_LINE %12 = load i8 %11 NEW_LINE %13 = icmp ne i8 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %46 NEW_LINE 14: NEW_LINE %15 = load * i8 %5 NEW_LINE %16 = call i32 @a ( * i8 %15 ) NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %45 NEW_LINE 18: NEW_LINE %19 = load * i8 %5 NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %21 , %22 NEW_LINE store i32 %23 %6 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = icmp sgt i32 %24 , 122 NEW_LINE br i1 %25 , label %26 , label %31 NEW_LINE 26: NEW_LINE %27 = load i32 %6 NEW_LINE %28 = sub nsw i32 %27 , 26 NEW_LINE %29 = trunc i32 %28 to i8 NEW_LINE %30 = load * i8 %5 NEW_LINE store i8 %29 %30 NEW_LINE br label %44 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = icmp slt i32 %32 , 97 NEW_LINE br i1 %33 , label %34 , label %39 NEW_LINE 34: NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add nsw i32 %35 , 26 NEW_LINE %37 = trunc i32 %36 to i8 NEW_LINE %38 = load * i8 %5 NEW_LINE store i8 %37 %38 NEW_LINE br label %43 NEW_LINE 39: NEW_LINE %40 = load i32 %6 NEW_LINE %41 = trunc i32 %40 to i8 NEW_LINE %42 = load * i8 %5 NEW_LINE store i8 %41 %42 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE br label %44 NEW_LINE 44: NEW_LINE br label %45 NEW_LINE 45: NEW_LINE br label %9 NEW_LINE 46: NEW_LINE %47 = load * i8 %3 NEW_LINE ret * i8 %47 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 610 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %43 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sdiv i32 600 , %12 NEW_LINE store i32 %13 %5 NEW_LINE store i32 0 %3 NEW_LINE %14 = getelementptr inbounds ARR 3 610 x i32 %4 , i64 0 , i64 0 NEW_LINE store i32 0 %14 NEW_LINE store i32 0 %7 NEW_LINE store i32 1 %6 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = icmp slt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %38 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %20 , %21 NEW_LINE store i32 %22 %3 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = mul nsw i32 %23 , %24 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 610 x i32 %4 , i64 0 , i64 %27 NEW_LINE store i32 %25 %28 NEW_LINE %29 = load i32 %7 NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 610 x i32 %4 , i64 0 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = add nsw i32 %29 , %33 NEW_LINE store i32 %34 %7 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %6 NEW_LINE br label %15 NEW_LINE 38: NEW_LINE %39 = load i32 %7 NEW_LINE %40 = load i32 %2 NEW_LINE %41 = mul nsw i32 %39 , %40 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE br label %8 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %5 * double %6 ) NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE %11 = load double %5 NEW_LINE %12 = fcmp oeq double %11 , 0.000000e+00 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE br label %34 NEW_LINE 14: NEW_LINE %15 = load double %5 NEW_LINE %16 = load double %4 NEW_LINE %17 = fmul double 0x400921FB54442D28 , %16 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @sin ( double %18 ) #3 NEW_LINE %20 = fmul double %15 , %19 NEW_LINE %21 = load double %2 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %2 NEW_LINE %23 = load double %5 NEW_LINE %24 = load double %4 NEW_LINE %25 = fmul double 0x400921FB54442D28 , %24 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = fmul double %23 , %27 NEW_LINE %29 = load double %3 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %3 NEW_LINE %31 = load double %6 NEW_LINE %32 = load double %4 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %4 NEW_LINE br label %7 NEW_LINE 34: NEW_LINE %35 = load double %2 NEW_LINE %36 = fptosi double %35 to i32 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load double %3 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 @y NEW_LINE store double 0.000000e+00 @x NEW_LINE store double 0.000000e+00 @c NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 @a * i32 @b ) NEW_LINE %4 = icmp ne i32 %3 , -1 NEW_LINE br i1 %4 , label %5 , label %35 NEW_LINE 5: NEW_LINE %6 = load i32 @a NEW_LINE %7 = icmp eq i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %12 NEW_LINE 8: NEW_LINE %9 = load i32 @b NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %12 NEW_LINE 11: NEW_LINE br label %35 NEW_LINE 12: NEW_LINE %13 = load i32 @a NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = load double @c NEW_LINE %16 = fmul double 0x400921FB54442D18 , %15 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %14 , %18 NEW_LINE %20 = load double @x NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 @x NEW_LINE %22 = load i32 @a NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = load double @c NEW_LINE %25 = fmul double 0x400921FB54442D18 , %24 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = fmul double %23 , %27 NEW_LINE %29 = load double @y NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 @y NEW_LINE %31 = load i32 @b NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double @c NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 @c NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load double @x NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double @y NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %37 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 @d NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 5.730000e+01 NEW_LINE %33 = load float @z NEW_LINE %34 = fpext float %33 to double NEW_LINE %35 = fsub double %34 , %32 NEW_LINE %36 = fptrunc double %35 to float NEW_LINE store float %36 @z NEW_LINE br label %4 NEW_LINE 37: NEW_LINE %38 = load float @x NEW_LINE %39 = fptosi float %38 to i32 NEW_LINE store i32 %39 @d NEW_LINE %40 = load float @y NEW_LINE %41 = fptosi float %40 to i32 NEW_LINE store i32 %41 %3 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %39 i32 %41 ) NEW_LINE %43 = icmp ne i32 %42 , 0 NEW_LINE %44 = xor i1 %43 , true NEW_LINE %45 = zext i1 %44 to i32 NEW_LINE store i32 %45 @d NEW_LINE %46 = load i32 %2 NEW_LINE ret i32 %46 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp slt i32 %7 , 100 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE store i32 0 %5 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %40 NEW_LINE 20: NEW_LINE %21 = load i32 %4 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %29 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE %27 = sext i32 %25 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %27 NEW_LINE store i32 %24 %28 NEW_LINE br label %39 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , -1 NEW_LINE store i32 %31 %5 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %5 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %37 NEW_LINE store i32 0 %38 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %17 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %5 * double %6 ) NEW_LINE %9 = load double %5 NEW_LINE %10 = fcmp une double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load double %6 NEW_LINE %13 = fcmp une double %12 , 0.000000e+00 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load double %5 NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double 0x400921FB54442D18 , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load double %5 NEW_LINE %26 = load double %4 NEW_LINE %27 = fmul double 0x400921FB54442D18 , %26 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = call double @sin ( double %28 ) #3 NEW_LINE %30 = fmul double %25 , %29 NEW_LINE %31 = load double %3 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %3 NEW_LINE %33 = load double %6 NEW_LINE %34 = load double %4 NEW_LINE %35 = fsub double %34 , %33 NEW_LINE store double %35 %4 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %2 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %3 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %38 NEW_LINE 16: NEW_LINE %17 = load double %6 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE store double %19 %7 NEW_LINE %20 = load double %7 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %4 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %4 NEW_LINE %27 = load double %7 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %5 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %5 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 8 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %16 NEW_LINE 7: NEW_LINE %8 = getelementptr inbounds ARR 3 8 x i32 %2 , i64 0 , i64 0 NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds i32 %8 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %4 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 8 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = bitcast * i32 %17 to * i8 NEW_LINE call void @qsort ( * i8 %18 i64 5 i64 4 i32 * ( * i8 * i8 ) bitcast ( i32 * ( * i32 * i32 ) @cmp to i32 * ( * i8 * i8 ) ) ) NEW_LINE store i32 0 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %35 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 8 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp eq i32 %27 , 4 NEW_LINE %29 = zext i1 %28 to i64 NEW_LINE %30 = select i1 %28 , i32 10 , i32 32 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %26 i32 %30 ) NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %3 NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 %3 NEW_LINE br label %19 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 10 x i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = bitcast * ARR 3 10 x i32 %4 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %36 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %21 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %5 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %5 NEW_LINE br label %35 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = icmp sle i32 1 , %22 NEW_LINE br i1 %23 , label %24 , label %34 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = icmp sle i32 %25 , 10 NEW_LINE br i1 %26 , label %27 , label %34 NEW_LINE 27: NEW_LINE %28 = load i32 %5 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %5 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 10 x i32 %4 , i64 0 , i64 %32 NEW_LINE store i32 %30 %33 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE br label %7 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %37 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = fmul double %15 , %20 NEW_LINE %22 = load double %5 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %5 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %25 , %30 NEW_LINE %32 = load double %6 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %6 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = load i32 %4 NEW_LINE %36 = sub nsw i32 %35 , %34 NEW_LINE store i32 %36 %4 NEW_LINE br label %7 NEW_LINE 37: NEW_LINE %38 = load double %5 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = load double %6 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %39 i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double 0x400921FB54442D18 , %17 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double 0x400921FB54442D18 , %27 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %4 NEW_LINE %28 = fmul double %27 , 0x400921FB54442D18 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load double %3 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %3 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %4 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %42 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %3 NEW_LINE br label %41 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %40 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %3 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %31 NEW_LINE store i32 %29 %32 NEW_LINE %33 = load i32 %2 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE %38 = load i32 %2 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %2 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %7 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %6 = icmp ne i32 -1 , %5 NEW_LINE br i1 %6 , label %7 , label %30 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp sgt i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 @siding , i64 0 , i64 %13 NEW_LINE store i32 %11 %14 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %2 NEW_LINE br label %29 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %28 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = add nsw i32 %21 , -1 NEW_LINE store i32 %22 %2 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 @siding , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %4 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE %6 = call noalias * i8 @malloc ( i64 4 ) #3 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE store * i32 %7 %2 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %44 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %17 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %4 NEW_LINE br label %26 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = load * i32 %2 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds i32 %20 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load * i32 %2 NEW_LINE %28 = bitcast * i32 %27 to * i8 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = mul i64 %30 , 4 NEW_LINE %32 = call * i8 @realloc ( * i8 %28 i64 %31 ) #3 NEW_LINE %33 = bitcast * i8 %32 to * i32 NEW_LINE store * i32 %33 %2 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = icmp ne i32 %34 , 0 NEW_LINE br i1 %35 , label %36 , label %43 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = load * i32 %2 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = sub nsw i32 %39 , 1 NEW_LINE %41 = sext i32 %40 to i64 NEW_LINE %42 = getelementptr inbounds i32 %38 , i64 %41 NEW_LINE store i32 %37 %42 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE br label %8 NEW_LINE 44: NEW_LINE %45 = load * i32 %2 NEW_LINE %46 = bitcast * i32 %45 to * i8 NEW_LINE call void @free ( * i8 %46 ) #3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load double %6 NEW_LINE %12 = call double @cos ( double %11 ) #3 NEW_LINE %13 = fmul double %10 , %12 NEW_LINE %14 = load double %4 NEW_LINE %15 = fadd double %14 , %13 NEW_LINE store double %15 %4 NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = call double @sin ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %5 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %5 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %24 , 0x3F91DF46A2529D39 NEW_LINE %26 = load double %6 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %6 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = icmp eq i32 %28 , 0 NEW_LINE br i1 %29 , label %30 , label %34 NEW_LINE 30: NEW_LINE %31 = load i32 %3 NEW_LINE %32 = icmp eq i32 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %35 NEW_LINE 34: NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %5 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %4 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %25 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %17 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = sext i32 %13 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %15 NEW_LINE store i32 %12 %16 NEW_LINE br label %24 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %4 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %5 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %17 , 0x400921FB53C8D4F1 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double %27 , 0x400921FB53C8D4F1 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %3 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %4 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %2 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = load double %3 NEW_LINE %11 = fadd double %9 , %10 NEW_LINE %12 = fcmp une double %11 , 0.000000e+00 NEW_LINE br i1 %12 , label %13 , label %33 NEW_LINE 13: NEW_LINE %14 = load double %2 NEW_LINE %15 = load double %6 NEW_LINE %16 = fmul double %15 , 0x400921FB54442D18 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE %18 = call double @sin ( double %17 ) #3 NEW_LINE %19 = fmul double %14 , %18 NEW_LINE %20 = load double %4 NEW_LINE %21 = fadd double %20 , %19 NEW_LINE store double %21 %4 NEW_LINE %22 = load double %2 NEW_LINE %23 = load double %6 NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE %26 = call double @cos ( double %25 ) #3 NEW_LINE %27 = fmul double %22 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load double %3 NEW_LINE %31 = load double %6 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %6 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE %34 = load double %4 NEW_LINE %35 = fptosi double %34 to i32 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE %37 = load double %5 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %38 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0x3FF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load double %6 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fneg double %37 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %39 i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %6 = getelementptr inbounds i32 %5 , i64 1 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds i32 %7 , i64 2 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %10 = getelementptr inbounds i32 %9 , i64 3 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds i32 %11 , i64 4 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 * i32 %8 * i32 %10 * i32 %12 ) NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %15 = bitcast * i32 %14 to * i8 NEW_LINE call void @qsort ( * i8 %15 i64 5 i64 4 i32 * ( * i8 * i8 ) @cmp ) NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 1 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 4 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %17 i32 %19 i32 %21 i32 %23 i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 40 i1 false ) NEW_LINE %8 = bitcast * ARR 3 10 x i32 %3 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %8 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %31 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %18 NEW_LINE store i32 %16 %19 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %30 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %4 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %9 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i8 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %5 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %6 = call * i8 @fgets ( * i8 %4 i32 100 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %5 ) NEW_LINE %7 = icmp ne * i8 %6 , null NEW_LINE br i1 %7 , label %8 , label %20 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %11 = call i32 @judge ( * i8 %10 ) NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %16 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @slide ( * i8 %15 ) NEW_LINE br label %9 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%s~00" i64 0 i64 0 ) * i8 %18 ) NEW_LINE br label %3 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp slt i32 %26 , 4 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call noalias * i8 @malloc ( i64 2000000 ) #3 NEW_LINE %7 = bitcast * i8 %6 to * i32 NEW_LINE store * i32 %7 %2 NEW_LINE %8 = load * i32 %2 NEW_LINE %9 = icmp eq * i32 %8 , null NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE store i32 1 %1 NEW_LINE br label %37 NEW_LINE 11: NEW_LINE %12 = load * i32 %2 NEW_LINE call void @enum_prime ( * i32 %12 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %15 = icmp ne i32 %14 , -1 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load * i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds i32 %18 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = icmp sle i32 %22 , %23 NEW_LINE br i1 %24 , label %25 , label %31 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %17 NEW_LINE 31: NEW_LINE %32 = load i32 %5 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE br label %13 NEW_LINE 34: NEW_LINE %35 = load * i32 %2 NEW_LINE %36 = bitcast * i32 %35 to * i8 NEW_LINE call void @free ( * i8 %36 ) #3 NEW_LINE store * i32 null %2 NEW_LINE store i32 0 %1 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %1 NEW_LINE ret i32 %38 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0xBFF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load double %6 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = fmul double %32 , 0x400921FB54442D18 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = sub nsw i32 0 , %40 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %7 * double %8 ) NEW_LINE %11 = load double %7 NEW_LINE %12 = fcmp oeq double %11 , 0.000000e+00 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load double %8 NEW_LINE %15 = fcmp oeq double %14 , 0.000000e+00 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %37 NEW_LINE 17: NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double %18 , 3.141500e+00 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @sin ( double %20 ) #3 NEW_LINE %22 = load double %7 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load double %4 NEW_LINE %27 = fmul double %26 , 3.141500e+00 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = call double @cos ( double %28 ) #3 NEW_LINE %30 = load double %7 NEW_LINE %31 = fmul double %29 , %30 NEW_LINE %32 = load double %6 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %6 NEW_LINE %34 = load double %8 NEW_LINE %35 = load double %4 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %4 NEW_LINE br label %9 NEW_LINE 37: NEW_LINE %38 = load double %5 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = load double %6 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %39 i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @qsort ( * i32 %16 i32 0 i32 4 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %18 i32 %20 i32 %22 i32 %24 i32 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = icmp slt i32 %7 , 10 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %2 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %39 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp eq i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %31 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , -1 NEW_LINE store i32 %30 %4 NEW_LINE br label %38 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %4 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = load i32 %4 NEW_LINE %36 = sext i32 %35 to i64 NEW_LINE %37 = getelementptr inbounds ARR 3 10 x i32 %5 , i64 0 , i64 %36 NEW_LINE store i32 %34 %37 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %17 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %31 NEW_LINE 10: NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE store i32 %17 %5 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = mul nsw i32 %19 , %20 NEW_LINE %22 = add nsw i32 %18 , %21 NEW_LINE store i32 %22 %6 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %24 , %25 NEW_LINE store i32 %26 %3 NEW_LINE br label %11 NEW_LINE 27: NEW_LINE %28 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdout NEW_LINE %29 = load i32 %6 NEW_LINE %30 = call i32 ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 * i8 ... ) @fprintf ( * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %28 * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %7 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = fcmp une double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load double %3 NEW_LINE %13 = fcmp une double %12 , 0.000000e+00 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %34 NEW_LINE 16: NEW_LINE %17 = load double %2 NEW_LINE %18 = load double %4 NEW_LINE %19 = call double @sin ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %5 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %5 NEW_LINE %23 = load double %2 NEW_LINE %24 = load double %4 NEW_LINE %25 = call double @cos ( double %24 ) #3 NEW_LINE %26 = fmul double %23 , %25 NEW_LINE %27 = load double %6 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %6 NEW_LINE %29 = load double %3 NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = load double %4 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %4 NEW_LINE br label %7 NEW_LINE 34: NEW_LINE %35 = load double %5 NEW_LINE %36 = fptosi double %35 to i32 NEW_LINE %37 = load double %6 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %36 i32 %38 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 getelementptr inbounds ( ARR 3 1000000 x i32 @primeFlag i64 0 i64 0 ) NEW_LINE store i32 1 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp sle i32 %5 , 999999 NEW_LINE br i1 %6 , label %7 , label %22 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sub nsw i32 %8 , 1 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 1000000 x i32 @primeFlag , i64 0 , i64 %10 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = call i32 @IsPrime ( i32 %13 ) NEW_LINE %15 = add nsw i32 %12 , %14 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1000000 x i32 @primeFlag , i64 0 , i64 %17 NEW_LINE store i32 %15 %18 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE br label %4 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %25 = icmp ne i32 %24 , -1 NEW_LINE br i1 %25 , label %26 , label %36 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = icmp eq i32 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %30 NEW_LINE 29: NEW_LINE br label %36 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 1000000 x i32 @primeFlag , i64 0 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %23 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %38 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double 0x400921FB54442D18 , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE store double %20 %7 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = load double %7 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %2 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %2 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load double %7 NEW_LINE %31 = call double @cos ( double %30 ) #3 NEW_LINE %32 = fmul double %29 , %31 NEW_LINE %33 = load double %3 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %3 NEW_LINE %35 = load i32 %5 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , %35 NEW_LINE store i32 %37 %6 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 11 x i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %7 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE %13 = icmp ne i32 %12 , -1 NEW_LINE br i1 %13 , label %14 , label %43 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %40 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %7 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %7 NEW_LINE %24 = load i32 %7 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %38 NEW_LINE 29: NEW_LINE %30 = load i32 %7 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE %35 = load i32 %7 NEW_LINE %36 = sext i32 %35 to i64 NEW_LINE %37 = getelementptr inbounds ARR 3 11 x i32 %6 , i64 0 , i64 %36 NEW_LINE store i32 0 %37 NEW_LINE br label %39 NEW_LINE 38: NEW_LINE br label %21 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %7 NEW_LINE %42 = add nsw i32 %41 , 1 NEW_LINE store i32 %42 %7 NEW_LINE br label %8 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 101 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %27 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %18 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 %3 NEW_LINE br label %26 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %3 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 101 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double %18 , 3.141600e+00 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @sin ( double %20 ) #3 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %4 NEW_LINE %28 = fmul double %27 , 3.141600e+00 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @cos ( double %29 ) #3 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load double %3 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %3 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %4 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %38 NEW_LINE 16: NEW_LINE %17 = load double %6 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE store double %19 %7 NEW_LINE %20 = load double %7 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %4 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %4 NEW_LINE %27 = load double %7 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %5 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %5 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE store i32 0 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %33 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = icmp eq i32 %25 , 4 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 10 , i32 32 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %24 i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %2 NEW_LINE br label %17 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE %7 = alloca float NEW_LINE %8 = alloca float NEW_LINE %9 = alloca float NEW_LINE store i32 0 %1 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 17 x i8 @".str:%f%f%f%f%f%f%f%f~00" i64 0 i64 0 ) * float %2 * float %3 * float %4 * float %5 * float %6 * float %7 * float %8 * float %9 ) NEW_LINE %12 = icmp sgt i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %27 NEW_LINE 13: NEW_LINE %14 = load float %2 NEW_LINE %15 = load float %3 NEW_LINE %16 = load float %4 NEW_LINE %17 = load float %5 NEW_LINE %18 = load float %6 NEW_LINE %19 = load float %7 NEW_LINE %20 = load float %8 NEW_LINE %21 = load float %9 NEW_LINE %22 = call i32 @is_inner_triangle ( float %14 float %15 float %16 float %17 float %18 float %19 float %20 float %21 ) NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE %24 = zext i1 %23 to i64 NEW_LINE %25 = select i1 %23 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %26 = call i32 @puts ( * i8 %25 ) NEW_LINE br label %10 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0x3FF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str: ▁ %d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fsub double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %6 NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @gen_prime ( * i32 %5 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %33 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %14 NEW_LINE 12: NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:0~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %32 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE store i32 %15 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = icmp eq i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %26 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %3 NEW_LINE br label %16 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %28 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %5 ) NEW_LINE %9 = load double %4 NEW_LINE %10 = fcmp une double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load double %5 NEW_LINE %13 = fcmp une double %12 , 0.000000e+00 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE %17 = load double %4 NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double 0x400921FB54442D18 , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #4 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load double %4 NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double 0x400921FB54442D18 , %26 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = call double @sin ( double %28 ) #4 NEW_LINE %30 = fmul double %25 , %29 NEW_LINE %31 = load double %3 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %3 NEW_LINE %33 = load double %5 NEW_LINE %34 = load double %6 NEW_LINE %35 = fsub double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %2 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %3 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE call void @exit ( i32 0 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 1 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 0 x i32 bitcast ( * ARR 3 1 x i32 @a to * ARR 3 0 x i32 ) , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE %22 = call i32 @main ( i32 %21 ) NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %19 i32 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = xor i1 %24 , true NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @a i64 1 i64 0 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i32 ARR 2 %26 %10 , ARR 2 %28 %27 NEW_LINE store i32 %30 getelementptr inbounds ( ARR 3 1 x i32 @a i64 0 i64 0 ) NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 8 x i8 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = getelementptr inbounds ARR 3 8 x i8 %2 , i64 0 , i64 0 NEW_LINE %8 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %9 = call * i8 @fgets ( * i8 %7 i32 8 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %8 ) NEW_LINE %10 = icmp ne * i8 %9 , null NEW_LINE br i1 %10 , label %11 , label %32 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 8 x i8 %2 , i64 0 , i64 0 NEW_LINE %13 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %12 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) #3 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp slt i32 %15 , 600 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %5 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %3 NEW_LINE br label %14 NEW_LINE 29: NEW_LINE %30 = load i32 %5 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %6 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0x3FF921FB54442D18 %4 NEW_LINE store i32 0 %7 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %15 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 false %9 , ARR 2 %14 %12 NEW_LINE %17 = xor i1 %16 , true NEW_LINE br i1 %17 , label %18 , label %40 NEW_LINE 18: NEW_LINE %19 = load i32 %5 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load double %4 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %4 NEW_LINE %29 = call double @sin ( double %28 ) #3 NEW_LINE %30 = fmul double %27 , %29 NEW_LINE %31 = load double %3 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %3 NEW_LINE %33 = load i32 %6 NEW_LINE %34 = sitofp i32 %33 to double NEW_LINE %35 = fmul double %34 , 0x400921FB54442D18 NEW_LINE %36 = fdiv double %35 , 1.800000e+02 NEW_LINE %37 = load double %4 NEW_LINE %38 = fsub double %37 , %36 NEW_LINE store double %38 %4 NEW_LINE %39 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE br label %9 NEW_LINE 40: NEW_LINE %41 = load double %2 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %3 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 9.000000e+01 %6 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = fmul double %16 , 0x400921FB54442D18 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load double %4 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %4 NEW_LINE %25 = load double %6 NEW_LINE %26 = fmul double %25 , 0x400921FB54442D18 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %5 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %5 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i8 NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %9 = call * i8 @fgets ( * i8 %7 i32 100 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %8 ) NEW_LINE %10 = icmp ne * i8 %9 , null NEW_LINE br i1 %10 , label %11 , label %32 NEW_LINE 11: NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %13 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %12 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) #3 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp slt i32 %15 , 600 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %3 NEW_LINE %22 = mul nsw i32 %20 , %21 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , %22 NEW_LINE store i32 %24 %4 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %3 NEW_LINE br label %14 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %30 ) NEW_LINE br label %6 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %4 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load double %2 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB54442D18 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = fadd double %16 , %24 NEW_LINE store double %25 %2 NEW_LINE %26 = load double %3 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %6 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %30 , 0x400921FB54442D18 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = fadd double %26 , %34 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sub nsw i32 %36 , %37 NEW_LINE store i32 %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %2 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = fmul double %10 , 0x400921FB5444261E NEW_LINE %12 = fdiv double %11 , 1.800000e+02 NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fmul double %13 , %15 NEW_LINE %17 = load double %2 NEW_LINE %18 = fadd double %17 , %16 NEW_LINE store double %18 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB5444261E NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fmul double %23 , %25 NEW_LINE %27 = load double %3 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %3 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sub nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = icmp ne i32 %33 , 0 NEW_LINE br i1 %34 , label %35 , label %38 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = phi i1 ARR 2 false %32 , ARR 2 %37 %35 NEW_LINE br i1 %39 , label %7 , label %40 NEW_LINE 40: NEW_LINE %41 = load double %2 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE %44 = load double %3 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %39 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %4 NEW_LINE %20 = fmul double 0x400921FB54442D18 , %19 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %18 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %4 NEW_LINE %29 = fmul double 0x400921FB54442D18 , %28 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = call double @sin ( double %30 ) #3 NEW_LINE %32 = fmul double %27 , %31 NEW_LINE %33 = load double %3 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %3 NEW_LINE %35 = load i32 %6 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = load double %4 NEW_LINE %38 = fsub double %37 , %36 NEW_LINE store double %38 %4 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %2 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %41 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %17 , 1.000000e+00 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB54442D18 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = fmul double %28 , 1.000000e+00 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %6 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = add nsw i32 %39 , %38 NEW_LINE store i32 %40 %4 NEW_LINE br label %7 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %43 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @BubbleSort ( * i32 %16 i32 5 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %18 i32 %20 i32 %22 i32 %24 i32 %26 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %31 , label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @m NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @m NEW_LINE %13 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %12 i32 4 * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:~8B~01+~06~C3~00" i64 0 i64 0 ) ) NEW_LINE %14 = load i32 @m NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 @m NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @m NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 @m NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %21 i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i1 ARR 2 false %10 , ARR 2 %28 %17 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %2 , ARR 2 %30 %29 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %2 NEW_LINE 34: NEW_LINE %35 = load i32 %1 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 600 %3 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %12 = icmp ne i32 %11 , -1 NEW_LINE br i1 %12 , label %13 , label %45 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sub nsw i32 %14 , %15 NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sdiv i32 %16 , %17 NEW_LINE store i32 %18 %6 NEW_LINE store i32 0 %9 NEW_LINE %19 = load i32 %2 NEW_LINE store i32 %19 %4 NEW_LINE store i32 1 %7 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %7 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = icmp sle i32 %21 , %22 NEW_LINE br i1 %23 , label %24 , label %38 NEW_LINE 24: NEW_LINE %25 = load i32 %5 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call i32 @f ( i32 %26 ) NEW_LINE %28 = mul nsw i32 %25 , %27 NEW_LINE store i32 %28 %8 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE %32 = load i32 %8 NEW_LINE %33 = load i32 %9 NEW_LINE %34 = add nsw i32 %33 , %32 NEW_LINE store i32 %34 %9 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %7 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %7 NEW_LINE br label %20 NEW_LINE 38: NEW_LINE %39 = load i32 %9 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE %41 = load i32 %5 NEW_LINE %42 = icmp eq i32 %41 , 0 NEW_LINE br i1 %42 , label %43 , label %44 NEW_LINE 43: NEW_LINE br label %45 NEW_LINE 44: NEW_LINE br label %10 NEW_LINE 45: NEW_LINE %46 = load i32 %1 NEW_LINE ret i32 %46 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %40 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB54442D18 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %30 , 0x400921FB54442D18 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = load i32 %4 NEW_LINE %39 = sub nsw i32 %38 , %37 NEW_LINE store i32 %39 %4 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %39 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %6 NEW_LINE %20 = fmul double %19 , 3.141590e+00 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @sin ( double %21 ) #3 NEW_LINE %23 = fmul double %18 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %6 NEW_LINE %29 = fmul double %28 , 3.141590e+00 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = call double @cos ( double %30 ) #3 NEW_LINE %32 = fmul double %27 , %31 NEW_LINE %33 = load double %5 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %5 NEW_LINE %35 = load i32 %3 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = load double %6 NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %39 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %12 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %36 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , -1 NEW_LINE store i32 %19 %3 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %34 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE %31 = load i32 %3 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %32 NEW_LINE store i32 0 %33 NEW_LINE br label %35 NEW_LINE 34: NEW_LINE br label %17 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %3 NEW_LINE br label %4 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0x3FF921FB54411744 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %7 * double %3 ) NEW_LINE %13 = load double %7 NEW_LINE %14 = fcmp oeq double %13 , 0.000000e+00 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load double %3 NEW_LINE %17 = fcmp oeq double %16 , 0.000000e+00 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %39 NEW_LINE 19: NEW_LINE %20 = load double %7 NEW_LINE %21 = load double %2 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load double %7 NEW_LINE %27 = load double %2 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %26 , %28 NEW_LINE %30 = load double %6 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %6 NEW_LINE %32 = load double %3 NEW_LINE %33 = fneg double %32 NEW_LINE %34 = fmul double %33 , 0x400921FB54411744 NEW_LINE %35 = fdiv double %34 , 1.800000e+02 NEW_LINE store double %35 %4 NEW_LINE %36 = load double %4 NEW_LINE %37 = load double %2 NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 %2 NEW_LINE br label %11 NEW_LINE 39: NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE store i32 %41 %9 NEW_LINE %42 = load double %6 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE store i32 %43 %10 NEW_LINE %44 = load i32 %9 NEW_LINE %45 = load i32 %10 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %31 , label %10 NEW_LINE 10: NEW_LINE %11 = load i32 @m NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @m NEW_LINE %13 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %12 i32 4 * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:~8B~01+~06~C3~83~00" i64 0 i64 0 ) ) NEW_LINE %14 = load i32 @m NEW_LINE %15 = mul nsw i32 %13 , %14 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %29 NEW_LINE 17: NEW_LINE %18 = load i32 @m NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @m NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 @m NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %21 i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i1 ARR 2 false %10 , ARR 2 %28 %17 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %2 , ARR 2 %30 %29 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %2 NEW_LINE 34: NEW_LINE %35 = load i32 %1 NEW_LINE ret i32 %35 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , -1 NEW_LINE store i32 %14 %4 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %23 NEW_LINE store i32 %21 %24 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE br label %6 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %4 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double %11 , 0x400921FAFC8B007A NEW_LINE %13 = fdiv double %12 , 1.800000e+02 NEW_LINE store double %13 %5 NEW_LINE %14 = load i32 %2 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load double %5 NEW_LINE %17 = call double @sin ( double %16 ) #3 NEW_LINE %18 = fmul double %15 , %17 NEW_LINE %19 = load double %6 NEW_LINE %20 = fadd double %19 , %18 NEW_LINE store double %20 %6 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = load double %5 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %7 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %7 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %4 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = icmp ne i32 %32 , 0 NEW_LINE br i1 %33 , label %37 , label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = phi i1 ARR 2 true %31 , ARR 2 %36 %34 NEW_LINE br i1 %38 , label %8 , label %39 NEW_LINE 39: NEW_LINE %40 = load double %6 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %7 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0x3FF921FB54442D18 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %6 * i32 %5 ) NEW_LINE %9 = load i32 %6 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load double %4 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %2 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %2 NEW_LINE %23 = load double %4 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = load i32 %6 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %3 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %3 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sub nsw i32 0 , %30 NEW_LINE %32 = srem i32 %31 , 360 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = fmul double %33 , 0x400921FB54442D18 NEW_LINE %35 = fdiv double %34 , 1.800000e+02 NEW_LINE %36 = load double %4 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %20 NEW_LINE 14: NEW_LINE %15 = load double %2 NEW_LINE %16 = fptosi double %15 to i32 NEW_LINE %17 = load double %3 NEW_LINE %18 = fptosi double %17 to i32 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %16 i32 %18 ) NEW_LINE ret i32 0 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = load double %4 NEW_LINE %24 = fmul double %23 , 2.000000e+00 NEW_LINE %25 = fmul double %24 , 0x400921FB54442D18 NEW_LINE %26 = fdiv double %25 , 3.600000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = fmul double %22 , %27 NEW_LINE %29 = load double %2 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %2 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double %4 NEW_LINE %34 = fmul double %33 , 2.000000e+00 NEW_LINE %35 = fmul double %34 , 0x400921FB54442D18 NEW_LINE %36 = fdiv double %35 , 3.600000e+02 NEW_LINE %37 = call double @sin ( double %36 ) #3 NEW_LINE %38 = fmul double %32 , %37 NEW_LINE %39 = load double %3 NEW_LINE %40 = fadd double %39 , %38 NEW_LINE store double %40 %3 NEW_LINE %41 = load i32 %6 NEW_LINE %42 = sitofp i32 %41 to double NEW_LINE %43 = load double %4 NEW_LINE %44 = fsub double %43 , %42 NEW_LINE store double %44 %4 NEW_LINE br label %7 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %5 NEW_LINE store i64 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = icmp ult i64 %7 , 1000000 NEW_LINE br i1 %8 , label %9 , label %19 NEW_LINE 9: NEW_LINE %10 = load i64 %2 NEW_LINE %11 = add i64 %10 , 1 NEW_LINE %12 = call i32 @isprime ( i64 %11 ) NEW_LINE %13 = trunc i32 %12 to i8 NEW_LINE %14 = load i64 %2 NEW_LINE %15 = getelementptr inbounds ARR 3 1000000 x i8 @prime , i64 0 , i64 %14 NEW_LINE store i8 %13 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i64 %2 NEW_LINE %18 = add i64 %17 , 1 NEW_LINE store i64 %18 %2 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %4 ) NEW_LINE %22 = icmp ne i32 %21 , -1 NEW_LINE br i1 %22 , label %23 , label %42 NEW_LINE 23: NEW_LINE store i64 0 %5 NEW_LINE store i64 1 %2 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i64 %2 NEW_LINE %26 = load i64 %4 NEW_LINE %27 = icmp ule i64 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %39 NEW_LINE 28: NEW_LINE %29 = load i64 %2 NEW_LINE %30 = sub i64 %29 , 1 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i8 @prime , i64 0 , i64 %30 NEW_LINE %32 = load i8 %31 NEW_LINE %33 = sext i8 %32 to i64 NEW_LINE %34 = load i64 %5 NEW_LINE %35 = add i64 %34 , %33 NEW_LINE store i64 %35 %5 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i64 %2 NEW_LINE %38 = add i64 %37 , 1 NEW_LINE store i64 %38 %2 NEW_LINE br label %24 NEW_LINE 39: NEW_LINE %40 = load i64 %5 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %40 ) NEW_LINE br label %20 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load i32 @t NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = fdiv double %12 , 5.730000e+01 NEW_LINE %14 = call double @cos ( double %13 ) #3 NEW_LINE %15 = fmul double %10 , %14 NEW_LINE %16 = load float @y NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = fadd double %17 , %15 NEW_LINE %19 = fptrunc double %18 to float NEW_LINE store float %19 @y NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 @t NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fdiv double %23 , 5.730000e+01 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load float @x NEW_LINE %28 = fpext float %27 to double NEW_LINE %29 = fsub double %28 , %26 NEW_LINE %30 = fptrunc double %29 to float NEW_LINE store float %30 @x NEW_LINE %31 = load i32 @d NEW_LINE %32 = load i32 @t NEW_LINE %33 = sub nsw i32 %32 , %31 NEW_LINE store i32 %33 @t NEW_LINE br label %43 NEW_LINE 34: NEW_LINE %35 = load float @x NEW_LINE %36 = fptosi float %35 to i32 NEW_LINE store i32 %36 %3 NEW_LINE %37 = load float @y NEW_LINE %38 = fptosi float %37 to i32 NEW_LINE store i32 %38 @t NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %36 i32 %38 ) NEW_LINE %40 = icmp ne i32 %39 , 0 NEW_LINE %41 = xor i1 %40 , true NEW_LINE %42 = zext i1 %41 to i32 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = phi i32 ARR 2 %33 %8 , ARR 2 %42 %34 NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE br i1 %45 , label %46 , label %47 NEW_LINE 46: NEW_LINE br label %4 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE ret i32 %48 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A] ▁ ~00" i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @c i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %39 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 @p NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 96 NEW_LINE br i1 %11 , label %12 , label %18 NEW_LINE 12: NEW_LINE %13 = load * i8 @p NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = srem i32 %15 , 26 NEW_LINE %17 = add nsw i32 %16 , 97 NEW_LINE br label %22 NEW_LINE 18: NEW_LINE %19 = load * i8 @p NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = phi i32 ARR 2 %17 %12 , ARR 2 %21 %18 NEW_LINE %24 = trunc i32 %23 to i8 NEW_LINE %25 = load * i8 @p NEW_LINE %26 = getelementptr inbounds i8 %25 , i32 1 NEW_LINE store * i8 %26 @p NEW_LINE store i8 %24 %25 NEW_LINE %27 = sext i8 %24 to i32 NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br i1 %28 , label %33 , label %29 NEW_LINE 29: NEW_LINE store * i8 bitcast ( * ARR 3 1 x i32 @c to * i8 ) @p NEW_LINE %30 = call * i8 @strstr ( * i8 bitcast ( * ARR 3 1 x i32 @c to * i8 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %31 = icmp ne * i8 %30 , null NEW_LINE %32 = xor i1 %31 , true NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = phi i1 ARR 2 true %22 , ARR 2 %32 %29 NEW_LINE br i1 %34 , label %35 , label %36 NEW_LINE 35: NEW_LINE br label %7 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @c i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 39: NEW_LINE %40 = load i32 %1 NEW_LINE ret i32 %40 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = sext i32 %11 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %13 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE %19 = zext i1 %18 to i64 NEW_LINE %20 = select i1 %18 , i32 32 , i32 10 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE br i1 %29 , label %30 , label %35 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 @i NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.2:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %4 NEW_LINE %19 = call double @radians ( i32 %18 ) NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = fmul double %17 , %20 NEW_LINE %22 = load double %5 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %5 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load i32 %4 NEW_LINE %27 = call double @radians ( i32 %26 ) NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %25 , %28 NEW_LINE %30 = load double %6 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %6 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = sub nsw i32 %33 , %32 NEW_LINE store i32 %34 %4 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %5 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %6 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %26 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %11 ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %15 * i8 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = call i64 @strlen ( * i8 %17 ) #5 NEW_LINE %19 = icmp ule i64 %18 , 80 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %21 ) NEW_LINE br label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %26 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %11 ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %15 * i8 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = call i64 @strlen ( * i8 %17 ) #5 NEW_LINE %19 = icmp ule i64 %18 , 80 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %21 ) NEW_LINE br label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = add nsw i32 %37 , %36 NEW_LINE store i32 %38 %4 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %6 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i64 1 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp sgt i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = load i64 %2 NEW_LINE %13 = mul nsw i64 %12 , %11 NEW_LINE store i64 %13 %2 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = load i64 %2 NEW_LINE %19 = sdiv i64 %18 , 1000000000 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%u~00" i64 0 i64 0 ) i64 %19 ) NEW_LINE %21 = load i64 %2 NEW_LINE %22 = srem i64 %21 , 1000000000 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%u~0A~00" i64 0 i64 0 ) i64 %22 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %41 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %41 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %21 , 0x400921FB54442D18 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %5 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %5 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %6 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = add nsw i32 %39 , %38 NEW_LINE store i32 %40 %4 NEW_LINE br label %7 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %43 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %3 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load double %2 NEW_LINE %17 = load double %4 NEW_LINE %18 = fmul double %17 , 0x400921FB54442D11 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %16 , %20 NEW_LINE %22 = load double %6 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %6 NEW_LINE %24 = load double %2 NEW_LINE %25 = load double %4 NEW_LINE %26 = fmul double %25 , 0x400921FB54442D11 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = fmul double %24 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load double %3 NEW_LINE %33 = load double %4 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %4 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %6 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %37 ) NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A] ▁ ~00" i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call * i8 @strstr ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %11 = icmp ne * i8 %10 , null NEW_LINE %12 = xor i1 %11 , true NEW_LINE br i1 %12 , label %13 , label %35 NEW_LINE 13: NEW_LINE store * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) @p NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load * i8 @p NEW_LINE %16 = load i8 %15 NEW_LINE %17 = sext i8 %16 to i32 NEW_LINE store i32 %17 %3 NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %34 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp sgt i32 %20 , 96 NEW_LINE br i1 %21 , label %22 , label %27 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = srem i32 %23 , 122 NEW_LINE %25 = srem i32 %24 , 96 NEW_LINE %26 = add nsw i32 %25 , 97 NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i32 ARR 2 %26 %22 , ARR 2 %28 %27 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE %32 = load * i8 @p NEW_LINE %33 = getelementptr inbounds i8 %32 , i32 1 NEW_LINE store * i8 %33 @p NEW_LINE store i8 %31 %32 NEW_LINE br label %14 NEW_LINE 34: NEW_LINE br label %9 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE br label %4 NEW_LINE 38: NEW_LINE %39 = load i32 %2 NEW_LINE ret i32 %39 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 @i NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %26 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i32 @data , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %18 NEW_LINE 15: NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , 1 NEW_LINE store i32 %17 @i NEW_LINE br label %25 NEW_LINE 18: NEW_LINE %19 = call i32 @top ( ) NEW_LINE %20 = load i32 @k NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 @out , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE %23 = load i32 @k NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 @k NEW_LINE call void @pop ( ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %3 NEW_LINE 26: NEW_LINE store i32 0 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 @k NEW_LINE %30 = icmp slt i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %40 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 100 x i32 @out , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %35 ) NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %2 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %2 NEW_LINE br label %27 NEW_LINE 40: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %4 NEW_LINE %7 = icmp slt i32 %6 , 10 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %10 NEW_LINE store i32 0 %11 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %4 NEW_LINE br label %5 NEW_LINE 15: NEW_LINE store i32 0 %4 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %18 = icmp ne i32 %17 , -1 NEW_LINE br i1 %18 , label %19 , label %43 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp eq i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %35 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sub nsw i32 %23 , 1 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sub nsw i32 %29 , 1 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %31 NEW_LINE store i32 0 %32 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = add nsw i32 %33 , -1 NEW_LINE store i32 %34 %4 NEW_LINE br label %42 NEW_LINE 35: NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sext i32 %37 to i64 NEW_LINE %39 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %38 NEW_LINE store i32 %36 %39 NEW_LINE %40 = load i32 %4 NEW_LINE %41 = add nsw i32 %40 , 1 NEW_LINE store i32 %41 %4 NEW_LINE br label %42 NEW_LINE 42: NEW_LINE br label %16 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %40 NEW_LINE 17: NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double 0x400921FB4D12D84A , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %2 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %2 NEW_LINE %27 = load double %6 NEW_LINE %28 = fmul double 0x400921FB4D12D84A , %27 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %3 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %5 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load double %6 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %6 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %2 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %9 = load double %2 NEW_LINE %10 = fcmp oeq double %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load double %3 NEW_LINE %13 = fcmp oeq double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %35 NEW_LINE 15: NEW_LINE %16 = load double %2 NEW_LINE %17 = load double %6 NEW_LINE %18 = fmul double 0x400921FAFC8B007A , %17 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = fmul double %16 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE %24 = load double %2 NEW_LINE %25 = load double %6 NEW_LINE %26 = fmul double 0x400921FAFC8B007A , %25 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %24 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load double %3 NEW_LINE %33 = load double %6 NEW_LINE %34 = fsub double %33 , %32 NEW_LINE store double %34 %6 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %4 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %37 ) NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 9.000000e+01 %6 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %15 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %15 , label %14 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = fmul double %16 , 0x400921FB54442D18 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load double %4 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %4 NEW_LINE %25 = load double %6 NEW_LINE %26 = fmul double %25 , 0x400921FB54442D18 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %5 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %5 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %15 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 true %8 , ARR 2 %14 %12 NEW_LINE br i1 %16 , label %17 , label %40 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load double %6 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = fmul double %21 , 0x400921FB54442D18 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %19 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load double %6 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = fmul double %30 , 0x400921FB54442D18 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %28 , %32 NEW_LINE %34 = load double %4 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %4 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load double %6 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %6 NEW_LINE br label %8 NEW_LINE 40: NEW_LINE %41 = load double %4 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %40 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %40 NEW_LINE 17: NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double %18 , 0x400921FAFC8B007A NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @sin ( double %20 ) #3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load double %4 NEW_LINE %28 = fmul double %27 , 0x400921FAFC8B007A NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @cos ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load double %4 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %4 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 12 x i32 NEW_LINE %3 = alloca * i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = getelementptr inbounds ARR 3 12 x i32 %2 , i64 0 , i64 0 NEW_LINE store * i32 %6 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %5 NEW_LINE %9 = icmp slt i32 %8 , 12 NEW_LINE br i1 %9 , label %10 , label %17 NEW_LINE 10: NEW_LINE %11 = load i32 %5 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds ARR 3 12 x i32 %2 , i64 0 , i64 %12 NEW_LINE store i32 -1 %13 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %5 NEW_LINE br label %7 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %20 = icmp ne i32 %19 , -1 NEW_LINE br i1 %20 , label %21 , label %39 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %29 NEW_LINE 24: NEW_LINE %25 = load * i32 %3 NEW_LINE %26 = getelementptr inbounds i32 %25 , i32 1 NEW_LINE store * i32 %26 %3 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = load * i32 %3 NEW_LINE store i32 %27 %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = icmp ne i32 %30 , 0 NEW_LINE br i1 %31 , label %38 , label %32 NEW_LINE 32: NEW_LINE %33 = load * i32 %3 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load * i32 %3 NEW_LINE %37 = getelementptr inbounds i32 %36 , i32 -1 NEW_LINE store * i32 %37 %3 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %18 NEW_LINE 39: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %38 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = call double @to_radian ( i32 %19 ) NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = fmul double %18 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load i32 %4 NEW_LINE %28 = call double @to_radian ( i32 %27 ) NEW_LINE %29 = call double @sin ( double %28 ) #3 NEW_LINE %30 = fmul double %26 , %29 NEW_LINE %31 = load double %3 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %3 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sub nsw i32 %33 , %34 NEW_LINE %36 = add nsw i32 %35 , 360 NEW_LINE %37 = srem i32 %36 , 360 NEW_LINE store i32 %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %4 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %17 , 0x400921FB54442D18 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double %27 , 0x400921FB54442D18 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE %36 = load i32 %4 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %3 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %6 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str:%lf%*c%lf~00" i64 0 i64 0 ) * double %4 * double %7 ) NEW_LINE %10 = load double %4 NEW_LINE %11 = fcmp oeq double %10 , 0.000000e+00 NEW_LINE %12 = zext i1 %11 to i32 NEW_LINE %13 = load double %7 NEW_LINE %14 = fcmp oeq double %13 , 0.000000e+00 NEW_LINE %15 = zext i1 %14 to i32 NEW_LINE %16 = and i32 %12 , %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %24 NEW_LINE 18: NEW_LINE %19 = load double %2 NEW_LINE %20 = fptosi double %19 to i32 NEW_LINE %21 = load double %3 NEW_LINE %22 = fptosi double %21 to i32 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %20 i32 %22 ) NEW_LINE br label %44 NEW_LINE 24: NEW_LINE %25 = load double %4 NEW_LINE %26 = load double %5 NEW_LINE %27 = fmul double %26 , 0x400921FB54442D18 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = call double @sin ( double %28 ) #3 NEW_LINE %30 = fmul double %25 , %29 NEW_LINE %31 = load double %2 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %2 NEW_LINE %33 = load double %4 NEW_LINE %34 = load double %5 NEW_LINE %35 = fmul double %34 , 0x400921FB54442D18 NEW_LINE %36 = fdiv double %35 , 1.800000e+02 NEW_LINE %37 = call double @cos ( double %36 ) #3 NEW_LINE %38 = fmul double %33 , %37 NEW_LINE %39 = load double %3 NEW_LINE %40 = fadd double %39 , %38 NEW_LINE store double %40 %3 NEW_LINE %41 = load double %7 NEW_LINE %42 = load double %5 NEW_LINE %43 = fadd double %42 , %41 NEW_LINE store double %43 %5 NEW_LINE br label %8 NEW_LINE 44: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %42 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %42 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double 0x401921FB54442D18 , %21 NEW_LINE %23 = fdiv double %22 , 3.600000e+02 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %4 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %4 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double 0x401921FB54442D18 , %31 NEW_LINE %33 = fdiv double %32 , 3.600000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %5 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %5 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = sub nsw i32 0 , %38 NEW_LINE %40 = load i32 %6 NEW_LINE %41 = add nsw i32 %40 , %39 NEW_LINE store i32 %41 %6 NEW_LINE br label %7 NEW_LINE 42: NEW_LINE %43 = load double %4 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %5 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A] ▁ ~00" i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @c i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %40 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load * i8 @p NEW_LINE %9 = load i8 %8 NEW_LINE %10 = sext i8 %9 to i32 NEW_LINE %11 = icmp sgt i32 %10 , 96 NEW_LINE br i1 %11 , label %12 , label %19 NEW_LINE 12: NEW_LINE %13 = load * i8 @p NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = srem i32 %15 , 96 NEW_LINE %17 = srem i32 %16 , 26 NEW_LINE %18 = add nsw i32 %17 , 97 NEW_LINE br label %23 NEW_LINE 19: NEW_LINE %20 = load * i8 @p NEW_LINE %21 = load i8 %20 NEW_LINE %22 = sext i8 %21 to i32 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = phi i32 ARR 2 %18 %12 , ARR 2 %22 %19 NEW_LINE %25 = trunc i32 %24 to i8 NEW_LINE %26 = load * i8 @p NEW_LINE %27 = getelementptr inbounds i8 %26 , i32 1 NEW_LINE store * i8 %27 @p NEW_LINE store i8 %25 %26 NEW_LINE %28 = sext i8 %25 to i32 NEW_LINE %29 = icmp ne i32 %28 , 0 NEW_LINE br i1 %29 , label %34 , label %30 NEW_LINE 30: NEW_LINE store * i8 bitcast ( * ARR 3 1 x i32 @c to * i8 ) @p NEW_LINE %31 = call * i8 @strstr ( * i8 bitcast ( * ARR 3 1 x i32 @c to * i8 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %32 = icmp ne * i8 %31 , null NEW_LINE %33 = xor i1 %32 , true NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = phi i1 ARR 2 true %23 , ARR 2 %33 %30 NEW_LINE br i1 %35 , label %36 , label %37 NEW_LINE 36: NEW_LINE br label %7 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = call i32 ( * i32 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i32 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @c i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 40: NEW_LINE %41 = load i32 %1 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 10 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 10 NEW_LINE br i1 %6 , label %7 , label %14 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %9 NEW_LINE store i32 0 %10 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %2 NEW_LINE br label %4 NEW_LINE 14: NEW_LINE store i32 0 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %18 ) NEW_LINE %20 = icmp ne i32 %19 , -1 NEW_LINE br i1 %20 , label %21 , label %44 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE br i1 %26 , label %40 , label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sub nsw i32 %28 , 2 NEW_LINE store i32 %29 %2 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE %36 = load i32 %2 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE %38 = sext i32 %37 to i64 NEW_LINE %39 = getelementptr inbounds ARR 3 10 x i32 %3 , i64 0 , i64 %38 NEW_LINE store i32 0 %39 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %2 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %2 NEW_LINE br label %15 NEW_LINE 44: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %4 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = fmul double %19 , 0x400921FB5443D6F4 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %4 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE %29 = fmul double %28 , 0x400921FB5443D6F4 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load double %3 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %3 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %4 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %4 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %2 NEW_LINE %40 = fneg double %39 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A] ▁ ~00" i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %38 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE store * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) @t NEW_LINE %8 = call * i8 @strstr ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE %10 = xor i1 %9 , true NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load * i8 @t NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = sub nsw i32 %15 , 97 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %23 NEW_LINE 18: NEW_LINE %19 = load * i8 @t NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = ashr i32 %21 , 6 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %22 %18 , ARR 2 -25 %23 NEW_LINE %26 = load * i8 @t NEW_LINE %27 = getelementptr inbounds i8 %26 , i32 1 NEW_LINE store * i8 %27 @t NEW_LINE %28 = load i8 %26 NEW_LINE %29 = sext i8 %28 to i32 NEW_LINE %30 = sub nsw i32 %29 , %25 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE store i8 %31 %26 NEW_LINE %32 = icmp ne i8 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %12 NEW_LINE 34: NEW_LINE br label %7 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 38: NEW_LINE %39 = load i32 %1 NEW_LINE ret i32 %39 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %38 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %38 NEW_LINE 17: NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double %18 , 0x3F91DF46A2529D39 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double %26 , 0x3F91DF46A2529D39 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %4 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %4 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fsub double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %39 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double 0x400921FB54442D18 , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE store double %20 %7 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = load double %7 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %4 NEW_LINE %27 = fsub double %26 , %25 NEW_LINE store double %27 %4 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load double %7 NEW_LINE %31 = call double @sin ( double %30 ) #3 NEW_LINE %32 = fmul double %29 , %31 NEW_LINE %33 = load double %5 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %5 NEW_LINE %35 = load i32 %3 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = add nsw i32 %36 , %35 NEW_LINE store i32 %37 %6 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE br label %8 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0x3FF921FB54442D18 %8 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %9 * i32 %10 ) NEW_LINE %13 = load i32 %9 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %10 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %40 NEW_LINE 19: NEW_LINE %20 = load double %8 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %9 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %6 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %6 NEW_LINE %27 = load double %8 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %9 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %7 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %7 NEW_LINE %34 = load i32 %10 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fdiv double %35 , 1.800000e+02 NEW_LINE %37 = fmul double %36 , 0x400921FB54442D18 NEW_LINE %38 = load double %8 NEW_LINE %39 = fsub double %38 , %37 NEW_LINE store double %39 %8 NEW_LINE br label %11 NEW_LINE 40: NEW_LINE %41 = load double %6 NEW_LINE %42 = call double @modf ( double %41 * double %6 ) #3 NEW_LINE %43 = load double %7 NEW_LINE %44 = call double @modf ( double %43 * double %7 ) #3 NEW_LINE %45 = load double %6 NEW_LINE %46 = load double %7 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:%.0lf~0A%.0lf~0A~00" i64 0 i64 0 ) double %45 double %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %49 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #4 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #4 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = icmp ne i32 %37 , 0 NEW_LINE br i1 %38 , label %46 , label %39 NEW_LINE 39: NEW_LINE %40 = load float @x NEW_LINE %41 = fptosi float %40 to i32 NEW_LINE store i32 %41 @d NEW_LINE %42 = load float @y NEW_LINE %43 = fptosi float %42 to i32 NEW_LINE store i32 %43 %3 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE br label %46 NEW_LINE 46: NEW_LINE %47 = phi i1 ARR 2 true %36 , ARR 2 %45 %39 NEW_LINE %48 = zext i1 %47 to i32 NEW_LINE br label %4 NEW_LINE 49: NEW_LINE call void @exit ( i32 0 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double 0x400921FB53C8D4F1 , %17 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double 0x400921FB53C8D4F1 , %27 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %3 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %5 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %2 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i8 NEW_LINE %5 = alloca ARR 3 101 x i8 NEW_LINE %6 = alloca ARR 3 101 x i8 NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %31 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 101 x i8 %6 , i64 0 , i64 0 NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %15 ) NEW_LINE %17 = call * i32 @__errno_location ( ) #5 NEW_LINE store i32 0 %17 NEW_LINE %18 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 101 x i8 %6 , i64 0 , i64 0 NEW_LINE %20 = call i32 @add ( * i8 %18 * i8 %19 * * i8 %4 ) NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.2:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 24: NEW_LINE %25 = load * i8 %4 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%s~0A~00" i64 0 i64 0 ) * i8 %25 ) NEW_LINE %27 = load * i8 %4 NEW_LINE call void @free ( * i8 %27 ) #6 NEW_LINE store * i8 null %4 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %8 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @comp ) NEW_LINE store i32 0 %2 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = icmp slt i32 %19 , 4 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %18 NEW_LINE 30: NEW_LINE %31 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 4 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FAFC8B007A NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FAFC8B007A NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %4 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %42 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %6 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load i32 %6 NEW_LINE %39 = sitofp i32 %38 to double NEW_LINE %40 = fsub double %39 , %37 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE store i32 %41 %6 NEW_LINE br label %7 NEW_LINE 42: NEW_LINE %43 = load double %4 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %5 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %38 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double 0x400921FB54442D18 , %18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #4 NEW_LINE %22 = fmul double %17 , %21 NEW_LINE %23 = load double %5 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %5 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %6 NEW_LINE %28 = fmul double 0x400921FB54442D18 , %27 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #4 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load double %4 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %4 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = load double %6 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE br label %7 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = call double @h ( double %39 ) NEW_LINE store double %40 %4 NEW_LINE %41 = load double %5 NEW_LINE %42 = call double @h ( double %41 ) NEW_LINE store double %42 %5 NEW_LINE %43 = load double %4 NEW_LINE %44 = load double %5 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.1:%.0f~0A%.0f~0A~00" i64 0 i64 0 ) double %43 double %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 6 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 6 x i32 @a , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE %22 = call i32 @main ( i32 %21 ) NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %19 i32 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = xor i1 %24 , true NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 6 x i32 @a i64 0 i64 1 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i32 ARR 2 %26 %10 , ARR 2 %28 %27 NEW_LINE store i32 %30 getelementptr inbounds ( ARR 3 6 x i32 @a i64 0 i64 0 ) NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %34 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %21 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %4 NEW_LINE br label %33 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %4 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %29 NEW_LINE store i32 %27 %30 NEW_LINE %31 = load i32 %5 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %5 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %6 NEW_LINE 34: NEW_LINE store i32 0 %4 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = load i32 %5 NEW_LINE %38 = icmp slt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %48 NEW_LINE 39: NEW_LINE %40 = load i32 %4 NEW_LINE %41 = sext i32 %40 to i64 NEW_LINE %42 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %41 NEW_LINE %43 = load i32 %42 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %43 ) NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load i32 %4 NEW_LINE %47 = add nsw i32 %46 , 1 NEW_LINE store i32 %47 %4 NEW_LINE br label %35 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 24 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE %6 = bitcast * ARR 3 24 x i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 96 i1 false ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %33 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE store i32 %11 %3 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp slt i32 %13 , 600 NEW_LINE br i1 %14 , label %15 , label %30 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 24 x i32 %5 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = add nsw i32 %24 , %20 NEW_LINE store i32 %25 %23 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 %3 NEW_LINE br label %12 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %7 NEW_LINE 33: NEW_LINE store i32 0 %3 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE %36 = load i32 %4 NEW_LINE %37 = icmp slt i32 %35 , %36 NEW_LINE br i1 %37 , label %38 , label %47 NEW_LINE 38: NEW_LINE %39 = load i32 %3 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE %41 = getelementptr inbounds ARR 3 24 x i32 %5 , i64 0 , i64 %40 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i32 %3 NEW_LINE %46 = add nsw i32 %45 , 1 NEW_LINE store i32 %46 %3 NEW_LINE br label %34 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %49 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %3 NEW_LINE %38 = icmp ne i32 %37 , 0 NEW_LINE br i1 %38 , label %46 , label %39 NEW_LINE 39: NEW_LINE %40 = load float @x NEW_LINE %41 = fptosi float %40 to i32 NEW_LINE store i32 %41 @d NEW_LINE %42 = load float @y NEW_LINE %43 = fptosi float %42 to i32 NEW_LINE store i32 %43 %3 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE br label %46 NEW_LINE 46: NEW_LINE %47 = phi i1 ARR 2 true %36 , ARR 2 %45 %39 NEW_LINE %48 = zext i1 %47 to i32 NEW_LINE br label %4 NEW_LINE 49: NEW_LINE %50 = load i32 %2 NEW_LINE ret i32 %50 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE %5 = alloca ARR 3 100 x i8 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %8 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %9 = call * i8 @fgets ( * i8 %7 i32 100 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %8 ) NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %11 = call i32 ( * i8 * i8 ... ) @__isoc99_sscanf ( * i8 %10 * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) #3 NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %26 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 %3 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp slt i32 %17 , 0 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE ret i32 0 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %32 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE %30 = sext i32 %28 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %30 NEW_LINE store i32 %27 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %6 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %21 NEW_LINE 15: NEW_LINE %16 = load double %6 NEW_LINE %17 = fptosi double %16 to i32 NEW_LINE %18 = load double %5 NEW_LINE %19 = fptosi double %18 to i32 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %17 i32 %19 ) NEW_LINE ret i32 0 NEW_LINE 21: NEW_LINE %22 = call double @atan ( double 1.000000e+00 ) #3 NEW_LINE %23 = fmul double 4.000000e+00 , %22 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sub nsw i32 90 , %24 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = fmul double %23 , %26 NEW_LINE %28 = fdiv double %27 , 1.800000e+02 NEW_LINE store double %28 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load double %7 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %2 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load double %7 NEW_LINE %39 = call double @cos ( double %38 ) #3 NEW_LINE %40 = fmul double %37 , %39 NEW_LINE %41 = load double %6 NEW_LINE %42 = fadd double %41 , %40 NEW_LINE store double %42 %6 NEW_LINE %43 = load i32 %3 NEW_LINE %44 = load i32 %4 NEW_LINE %45 = add nsw i32 %44 , %43 NEW_LINE store i32 %45 %4 NEW_LINE br label %8 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%d%*c%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load i32 %4 NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = fdiv double %12 , 1.800000e+02 NEW_LINE %14 = fmul double %13 , 3.141590e+00 NEW_LINE %15 = call double @cos ( double %14 ) #3 NEW_LINE %16 = fmul double %10 , %15 NEW_LINE %17 = load double %5 NEW_LINE %18 = fadd double %17 , %16 NEW_LINE store double %18 %5 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = fmul double %23 , 3.141590e+00 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %20 , %25 NEW_LINE %27 = load double %6 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %6 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sub nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %2 NEW_LINE %34 = icmp ne i32 %33 , 0 NEW_LINE br i1 %34 , label %38 , label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %3 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = phi i1 ARR 2 true %32 , ARR 2 %37 %35 NEW_LINE br i1 %39 , label %7 , label %40 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE store i32 1 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %21 , 5 NEW_LINE br i1 %22 , label %23 , label %32 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1: ▁ %d~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %20 NEW_LINE 32: NEW_LINE %33 = call i32 @putchar ( i32 10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %6 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 * i32 %5 * i32 %6 * i32 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %9 ) NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %11 = load i32 %10 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %15 = load i32 %14 NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %11 i32 %13 i32 %15 i32 %17 i32 %19 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE br i1 %29 , label %30 , label %35 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 @i NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double 0x400921FB54442D18 , %17 NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double 0x400921FB54442D18 , %27 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %31 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE store i32 1 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = mul nsw i32 %10 , %11 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = load i32 %3 NEW_LINE %20 = mul nsw i32 %18 , %19 NEW_LINE %21 = mul nsw i32 %17 , %20 NEW_LINE %22 = load i32 %3 NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = add nsw i32 %24 , %23 NEW_LINE store i32 %25 %2 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %4 NEW_LINE br label %9 NEW_LINE 28: NEW_LINE %29 = load i32 %2 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %5 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %42 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %16 , -1 NEW_LINE store i32 %17 %3 NEW_LINE %18 = load double %6 NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %22 , 0x400921FB53C8D4F1 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %20 , %25 NEW_LINE %27 = fadd double %18 , %26 NEW_LINE store double %27 %6 NEW_LINE %28 = load double %5 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %32 , 0x400921FB53C8D4F1 NEW_LINE %34 = fdiv double %33 , 1.800000e+02 NEW_LINE %35 = call double @cos ( double %34 ) #3 NEW_LINE %36 = fmul double %30 , %35 NEW_LINE %37 = fadd double %28 , %36 NEW_LINE store double %37 %5 NEW_LINE %38 = load i32 %4 NEW_LINE %39 = load i32 %3 NEW_LINE %40 = add nsw i32 %38 , %39 NEW_LINE %41 = srem i32 %40 , 360 NEW_LINE store i32 %41 %4 NEW_LINE br label %7 NEW_LINE 42: NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %6 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %7 ) NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %8 ) NEW_LINE %11 = load i32 %7 NEW_LINE call void @init ( i32 %11 ) NEW_LINE %12 = load i32 %8 NEW_LINE call void @shuffle ( i32 %12 ) NEW_LINE store i32 0 %6 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = icmp slt i32 %14 , %15 NEW_LINE br i1 %16 , label %17 , label %27 NEW_LINE 17: NEW_LINE %18 = load * i32 @lots NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds i32 %18 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %6 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %6 NEW_LINE br label %13 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1024 x i32 NEW_LINE %3 = alloca ARR 3 1024 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1024 x i32 %2 , i64 0 , i64 %17 NEW_LINE store i32 %15 %18 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %6 NEW_LINE br label %34 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE %23 = sub nsw i32 %22 , 1 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 1024 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 1024 x i32 %3 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %6 NEW_LINE %31 = add nsw i32 %30 , -1 NEW_LINE store i32 %31 %6 NEW_LINE %32 = load i32 %7 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %7 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %8 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %6 NEW_LINE %38 = load i32 %7 NEW_LINE %39 = icmp slt i32 %37 , %38 NEW_LINE br i1 %39 , label %40 , label %48 NEW_LINE 40: NEW_LINE %41 = load i32 %6 NEW_LINE %42 = sext i32 %41 to i64 NEW_LINE %43 = getelementptr inbounds ARR 3 1024 x i32 %3 , i64 0 , i64 %42 NEW_LINE %44 = load i32 %43 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE %46 = load i32 %6 NEW_LINE %47 = add nsw i32 %46 , 1 NEW_LINE store i32 %47 %6 NEW_LINE br label %36 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %9 = load i32 %6 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = fmul double %10 , 0x400921FB54411744 NEW_LINE %12 = fdiv double %11 , 1.800000e+02 NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fmul double %13 , %15 NEW_LINE %17 = load double %2 NEW_LINE %18 = fadd double %17 , %16 NEW_LINE store double %18 %2 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB54411744 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = load i32 %4 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fmul double %23 , %25 NEW_LINE %27 = load double %3 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %3 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sub nsw i32 %30 , %29 NEW_LINE store i32 %31 %6 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = icmp ne i32 %33 , 0 NEW_LINE br i1 %34 , label %38 , label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %5 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = phi i1 ARR 2 true %32 , ARR 2 %37 %35 NEW_LINE br i1 %39 , label %7 , label %40 NEW_LINE 40: NEW_LINE %41 = load double %2 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %3 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %3 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %4 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %2 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %3 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %6 , 5 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @bubblesort ( * i32 %17 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp slt i32 %19 , 4 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %18 NEW_LINE 30: NEW_LINE %31 = getelementptr inbounds ARR 3 5 x i32 %4 , i64 0 , i64 4 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %6 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 * i32 %5 * i32 %6 * i32 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = bitcast * i32 %9 to * i8 NEW_LINE call void @qsort ( * i8 %10 i64 5 i64 4 i32 * ( * i8 * i8 ) @cmp ) NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %16 i32 %18 i32 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE %6 = bitcast * ARR 3 100 x i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 400 i1 false ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %32 NEW_LINE 10: NEW_LINE store i32 0 %3 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp slt i32 %12 , 600 NEW_LINE br i1 %13 , label %14 , label %29 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = load i32 %3 NEW_LINE %17 = mul nsw i32 %15 , %16 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = mul nsw i32 %17 , %18 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = add nsw i32 %23 , %19 NEW_LINE store i32 %24 %22 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , %26 NEW_LINE store i32 %28 %3 NEW_LINE br label %11 NEW_LINE 29: NEW_LINE %30 = load i32 %4 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %4 NEW_LINE br label %7 NEW_LINE 32: NEW_LINE store i32 0 %3 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = load i32 %4 NEW_LINE %36 = icmp slt i32 %34 , %35 NEW_LINE br i1 %36 , label %37 , label %46 NEW_LINE 37: NEW_LINE %38 = load i32 %3 NEW_LINE %39 = sext i32 %38 to i64 NEW_LINE %40 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %39 NEW_LINE %41 = load i32 %40 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i32 %3 NEW_LINE %45 = add nsw i32 %44 , 1 NEW_LINE store i32 %45 %3 NEW_LINE br label %33 NEW_LINE 46: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %6 , 5 NEW_LINE br i1 %7 , label %8 , label %16 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sext i32 %9 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %5 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = call i32 ( * i32 i32 i64 i32 * ( * i32 * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i64 i32 * ( * i32 * i32 ) ... ) ) ( * i32 %17 i32 5 i64 4 i32 * ( * i32 * i32 ) @comp ) NEW_LINE store i32 0 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %36 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %27 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE store i32 -1 %4 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:%d~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %3 NEW_LINE br label %19 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.3:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000000 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %5 NEW_LINE %8 = icmp slt i32 %7 , 1000000 NEW_LINE br i1 %8 , label %9 , label %28 NEW_LINE 9: NEW_LINE %10 = load i32 %5 NEW_LINE %11 = call i32 @isPrime ( i32 %10 ) NEW_LINE %12 = load i32 %5 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %13 NEW_LINE store i32 %11 %14 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = add nsw i32 %19 , %15 NEW_LINE store i32 %20 %18 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE store i32 %24 %4 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %5 NEW_LINE %27 = add nsw i32 %26 , 1 NEW_LINE store i32 %27 %5 NEW_LINE br label %6 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %31 = icmp ne i32 %30 , -1 NEW_LINE br i1 %31 , label %32 , label %38 NEW_LINE 32: NEW_LINE %33 = load i32 %3 NEW_LINE %34 = sext i32 %33 to i64 NEW_LINE %35 = getelementptr inbounds ARR 3 1000000 x i32 %2 , i64 0 , i64 %34 NEW_LINE %36 = load i32 %35 NEW_LINE %37 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %36 ) NEW_LINE br label %29 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 ) NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %42 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %5 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE %22 = fmul double %20 , %21 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %18 , %24 NEW_LINE %26 = load double %6 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %6 NEW_LINE %28 = load i32 %3 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %5 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE %33 = fmul double %31 , %32 NEW_LINE %34 = fdiv double %33 , 1.800000e+02 NEW_LINE %35 = call double @sin ( double %34 ) #3 NEW_LINE %36 = fmul double %29 , %35 NEW_LINE %37 = load double %7 NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 %7 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = load i32 %5 NEW_LINE %41 = sub nsw i32 %40 , %39 NEW_LINE store i32 %41 %5 NEW_LINE br label %8 NEW_LINE 42: NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %7 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %2 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %3 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 false %7 , ARR 2 %13 %11 NEW_LINE %16 = xor i1 %15 , true NEW_LINE br i1 %16 , label %17 , label %39 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %2 NEW_LINE %21 = call double @toRad ( i32 %20 ) NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %19 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %2 NEW_LINE %29 = call double @toRad ( i32 %28 ) NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %27 , %30 NEW_LINE %32 = load double %6 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %6 NEW_LINE %34 = load i32 %2 NEW_LINE %35 = load i32 %3 NEW_LINE %36 = sub nsw i32 %34 , %35 NEW_LINE %37 = add nsw i32 %36 , 360 NEW_LINE %38 = srem i32 %37 , 360 NEW_LINE store i32 %38 %2 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %6 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %8 = icmp eq i32 %7 , 1 NEW_LINE br i1 %8 , label %9 , label %46 NEW_LINE 9: NEW_LINE store i32 0 %5 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 bitcast ( * ARR 3 1000000 x i32 @a to * i8 ) i8 0 i64 4000000 i1 false ) NEW_LINE store i64 2 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i64 %2 NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = icmp sle i64 %11 , %13 NEW_LINE br i1 %14 , label %15 , label %43 NEW_LINE 15: NEW_LINE %16 = load i64 %2 NEW_LINE %17 = getelementptr inbounds ARR 3 1000000 x i32 @a , i64 0 , i64 %16 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = icmp eq i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %39 NEW_LINE 20: NEW_LINE %21 = load i64 %2 NEW_LINE %22 = load i64 %2 NEW_LINE %23 = mul nsw i64 %21 , %22 NEW_LINE store i64 %23 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i64 %3 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = icmp sle i64 %25 , %27 NEW_LINE br i1 %28 , label %29 , label %36 NEW_LINE 29: NEW_LINE %30 = load i64 %3 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i32 @a , i64 0 , i64 %30 NEW_LINE store i32 -1 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i64 %2 NEW_LINE %34 = load i64 %3 NEW_LINE %35 = add nsw i64 %34 , %33 NEW_LINE store i64 %35 %3 NEW_LINE br label %24 NEW_LINE 36: NEW_LINE %37 = load i32 %5 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %5 NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i64 %2 NEW_LINE %42 = add nsw i64 %41 , 1 NEW_LINE store i64 %42 %2 NEW_LINE br label %10 NEW_LINE 43: NEW_LINE %44 = load i32 %5 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE br label %6 NEW_LINE 46: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load i32 @t NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = fdiv double %12 , 5.730000e+01 NEW_LINE %14 = call double @cos ( double %13 ) #3 NEW_LINE %15 = fmul double %10 , %14 NEW_LINE %16 = load float @y NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = fadd double %17 , %15 NEW_LINE %19 = fptrunc double %18 to float NEW_LINE store float %19 @y NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 @t NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fdiv double %23 , 5.730000e+01 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load float @x NEW_LINE %28 = fpext float %27 to double NEW_LINE %29 = fsub double %28 , %26 NEW_LINE %30 = fptrunc double %29 to float NEW_LINE store float %30 @x NEW_LINE %31 = load i32 @d NEW_LINE %32 = load i32 @t NEW_LINE %33 = sub nsw i32 %32 , %31 NEW_LINE store i32 %33 @t NEW_LINE br label %43 NEW_LINE 34: NEW_LINE %35 = load float @x NEW_LINE %36 = fptosi float %35 to i32 NEW_LINE store i32 %36 @t NEW_LINE %37 = load float @y NEW_LINE %38 = fptosi float %37 to i32 NEW_LINE store i32 %38 @d NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %36 i32 %38 ) NEW_LINE %40 = icmp ne i32 %39 , 0 NEW_LINE %41 = xor i1 %40 , true NEW_LINE %42 = zext i1 %41 to i32 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = phi i32 ARR 2 %33 %8 , ARR 2 %42 %34 NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE br i1 %45 , label %46 , label %47 NEW_LINE 46: NEW_LINE br label %4 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE ret i32 %48 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %34 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %21 NEW_LINE 14: NEW_LINE %15 = load i32 %5 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %17 NEW_LINE store i32 %15 %18 NEW_LINE %19 = load i32 %6 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %6 NEW_LINE br label %33 NEW_LINE 21: NEW_LINE %22 = load i32 %6 NEW_LINE %23 = add nsw i32 %22 , -1 NEW_LINE store i32 %23 %6 NEW_LINE %24 = load i32 %6 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %29 NEW_LINE store i32 %27 %30 NEW_LINE %31 = load i32 %7 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %7 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %8 NEW_LINE 34: NEW_LINE store i32 0 %4 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = load i32 %7 NEW_LINE %38 = icmp slt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %48 NEW_LINE 39: NEW_LINE %40 = load i32 %4 NEW_LINE %41 = sext i32 %40 to i64 NEW_LINE %42 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %41 NEW_LINE %43 = load i32 %42 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %43 ) NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load i32 %4 NEW_LINE %47 = add nsw i32 %46 , 1 NEW_LINE store i32 %47 %4 NEW_LINE br label %35 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca * i8 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE store i32 0 %4 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = load i32 %5 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %33 NEW_LINE 13: NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.3:%a[0-9]%n~0A~00" i64 0 i64 0 ) * * i8 %2 * i32 %6 ) NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str.3:%a[0-9]%n~0A~00" i64 0 i64 0 ) * * i8 %3 * i32 %7 ) NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %7 NEW_LINE %18 = icmp sgt i32 %16 , %17 NEW_LINE br i1 %18 , label %19 , label %24 NEW_LINE 19: NEW_LINE %20 = load * i8 %2 NEW_LINE %21 = load * i8 %3 NEW_LINE %22 = load i32 %6 NEW_LINE %23 = load i32 %7 NEW_LINE call void @plus ( * i8 %20 * i8 %21 i32 %22 i32 %23 ) NEW_LINE br label %29 NEW_LINE 24: NEW_LINE %25 = load * i8 %3 NEW_LINE %26 = load * i8 %2 NEW_LINE %27 = load i32 %7 NEW_LINE %28 = load i32 %6 NEW_LINE call void @plus ( * i8 %25 * i8 %26 i32 %27 i32 %28 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %9 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = fmul double %18 , 0x3F91DF46A2529D44 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %17 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %22 , %21 NEW_LINE store double %23 %4 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = load double %6 NEW_LINE %27 = fmul double %26 , 0x3F91DF46A2529D44 NEW_LINE %28 = call double @cos ( double %27 ) #3 NEW_LINE %29 = fmul double %25 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %5 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store float 0.000000e+00 %6 NEW_LINE store float 0.000000e+00 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %3 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = load i32 %3 NEW_LINE %11 = or i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %39 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fdiv double %17 , 5.730000e+01 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %15 , %19 NEW_LINE %21 = load float %6 NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = fadd double %22 , %20 NEW_LINE %24 = fptrunc double %23 to float NEW_LINE store float %24 %6 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = fdiv double %28 , 5.730000e+01 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load float %5 NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %2 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %2 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load float %5 NEW_LINE %41 = fptosi float %40 to i32 NEW_LINE store i32 %41 %2 NEW_LINE %42 = load float %6 NEW_LINE %43 = fptosi float %42 to i32 NEW_LINE store i32 %43 %3 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE %46 = xor i1 %45 , true NEW_LINE %47 = zext i1 %46 to i32 NEW_LINE ret i32 %47 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE %36 = load i32 %3 NEW_LINE %37 = xor i32 %36 , -1 NEW_LINE br label %47 NEW_LINE 38: NEW_LINE %39 = load float @x NEW_LINE %40 = fptosi float %39 to i32 NEW_LINE store i32 %40 @d NEW_LINE %41 = load float @y NEW_LINE %42 = fptosi float %41 to i32 NEW_LINE store i32 %42 %3 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE %44 = icmp ne i32 %43 , 0 NEW_LINE %45 = xor i1 %44 , true NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE %48 = phi i32 ARR 2 %37 %8 , ARR 2 %46 %38 NEW_LINE %49 = icmp ne i32 %48 , 0 NEW_LINE br i1 %49 , label %50 , label %51 NEW_LINE 50: NEW_LINE br label %4 NEW_LINE 51: NEW_LINE %52 = load i32 %2 NEW_LINE ret i32 %52 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %11 = load double %2 NEW_LINE %12 = fcmp oeq double %11 , 0.000000e+00 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load double %3 NEW_LINE %15 = fcmp oeq double %14 , 0.000000e+00 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %35 NEW_LINE 17: NEW_LINE %18 = load double %2 NEW_LINE %19 = load double %6 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = fmul double %18 , %20 NEW_LINE %22 = load double %4 NEW_LINE %23 = fadd double %21 , %22 NEW_LINE store double %23 %4 NEW_LINE %24 = load double %2 NEW_LINE %25 = load double %6 NEW_LINE %26 = call double @cos ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %27 , %28 NEW_LINE store double %29 %5 NEW_LINE %30 = load double %3 NEW_LINE %31 = fmul double 0x400921FB54442D18 , %30 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = load double %6 NEW_LINE %34 = fadd double %32 , %33 NEW_LINE store double %34 %6 NEW_LINE br label %9 NEW_LINE 35: NEW_LINE %36 = load double %4 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE store i32 %37 %7 NEW_LINE %38 = load double %5 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE store i32 %39 %8 NEW_LINE %40 = load i32 %7 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %40 ) NEW_LINE %42 = load i32 %8 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE store i32 %30 @j NEW_LINE br i1 %29 , label %31 , label %36 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @i NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 @i NEW_LINE %35 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %34 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 36: NEW_LINE %37 = load i32 %1 NEW_LINE ret i32 %37 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %34 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %14 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = load i32 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %26 NEW_LINE store i32 %24 %27 NEW_LINE %28 = load i32 %5 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %5 NEW_LINE br label %33 NEW_LINE 30: NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %6 NEW_LINE 34: NEW_LINE store i32 0 %4 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = load i32 %5 NEW_LINE %38 = icmp slt i32 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %48 NEW_LINE 39: NEW_LINE %40 = load i32 %4 NEW_LINE %41 = sext i32 %40 to i64 NEW_LINE %42 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %41 NEW_LINE %43 = load i32 %42 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %43 ) NEW_LINE br label %45 NEW_LINE 45: NEW_LINE %46 = load i32 %4 NEW_LINE %47 = add nsw i32 %46 , 1 NEW_LINE store i32 %47 %4 NEW_LINE br label %35 NEW_LINE 48: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE %36 = load i32 %3 NEW_LINE %37 = xor i32 %36 , -1 NEW_LINE br label %47 NEW_LINE 38: NEW_LINE %39 = load float @x NEW_LINE %40 = fptosi float %39 to i32 NEW_LINE store i32 %40 @d NEW_LINE %41 = load float @y NEW_LINE %42 = fptosi float %41 to i32 NEW_LINE store i32 %42 %3 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE %44 = icmp ne i32 %43 , 0 NEW_LINE %45 = xor i1 %44 , true NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE %48 = phi i32 ARR 2 %37 %8 , ARR 2 %46 %38 NEW_LINE %49 = icmp ne i32 %48 , 0 NEW_LINE br i1 %49 , label %50 , label %51 NEW_LINE 50: NEW_LINE br label %4 NEW_LINE 51: NEW_LINE %52 = load i32 %2 NEW_LINE ret i32 %52 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE %36 = load i32 %3 NEW_LINE %37 = xor i32 %36 , -1 NEW_LINE br label %47 NEW_LINE 38: NEW_LINE %39 = load float @x NEW_LINE %40 = fptosi float %39 to i32 NEW_LINE store i32 %40 @d NEW_LINE %41 = load float @y NEW_LINE %42 = fptosi float %41 to i32 NEW_LINE store i32 %42 %3 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE %44 = icmp ne i32 %43 , 0 NEW_LINE %45 = xor i1 %44 , true NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE %48 = phi i32 ARR 2 %37 %8 , ARR 2 %46 %38 NEW_LINE %49 = icmp ne i32 %48 , 0 NEW_LINE br i1 %49 , label %50 , label %51 NEW_LINE 50: NEW_LINE br label %4 NEW_LINE 51: NEW_LINE %52 = load i32 %2 NEW_LINE ret i32 %52 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i8 NEW_LINE %3 = alloca ARR 3 100 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%[^~0A]~00" i64 0 i64 0 ) * i8 %6 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %32 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %12 = call * i8 @strcpy ( * i8 %10 * i8 %11 ) #7 NEW_LINE store i32 1 %4 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp sle i32 %14 , 26 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %19 = call * i8 @strcpy ( * i8 %17 * i8 %18 ) #7 NEW_LINE %20 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %21 = load i32 %4 NEW_LINE call void @henkan ( * i8 %20 i32 %21 ) NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i8 %2 , i64 0 , i64 0 NEW_LINE %23 = call i32 @check ( * i8 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %26 NEW_LINE 25: NEW_LINE br label %30 NEW_LINE 26: NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %4 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %4 NEW_LINE br label %13 NEW_LINE 30: NEW_LINE %31 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%*c~00" i64 0 i64 0 ) ) NEW_LINE br label %5 NEW_LINE 32: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A] ▁ ~00" i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %38 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE store * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) @t NEW_LINE %8 = call * i8 @strstr ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE %10 = xor i1 %9 , true NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load * i8 @t NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = sub nsw i32 %15 , 97 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %23 NEW_LINE 18: NEW_LINE %19 = load * i8 @t NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = ashr i32 %21 , 6 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %22 %18 , ARR 2 -25 %23 NEW_LINE %26 = load * i8 @t NEW_LINE %27 = getelementptr inbounds i8 %26 , i32 1 NEW_LINE store * i8 %27 @t NEW_LINE %28 = load i8 %26 NEW_LINE %29 = sext i8 %28 to i32 NEW_LINE %30 = sub nsw i32 %29 , %25 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE store i8 %31 %26 NEW_LINE %32 = icmp ne i8 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %12 NEW_LINE 34: NEW_LINE br label %7 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 38: NEW_LINE %39 = load i32 %1 NEW_LINE ret i32 %39 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @e NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @e NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @d i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @d i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 ) @c ) NEW_LINE store i32 5 @e NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @e NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 @e NEW_LINE %16 = icmp ne i32 %14 , 0 NEW_LINE br i1 %16 , label %17 , label %28 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @e NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 @d , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load i32 @e NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %22 i32 %26 ) NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 4 NEW_LINE br i1 %19 , label %20 , label %29 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %17 NEW_LINE 29: NEW_LINE %30 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %37 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sitofp i32 %13 to double NEW_LINE %15 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE %16 = fmul double %14 , %15 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE store double %17 %7 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load double %7 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = fmul double %19 , %21 NEW_LINE %23 = load double %2 NEW_LINE %24 = fadd double %23 , %22 NEW_LINE store double %24 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %7 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %26 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = load i32 %6 NEW_LINE %34 = sub nsw i32 %32 , %33 NEW_LINE %35 = add nsw i32 %34 , 360 NEW_LINE %36 = srem i32 %35 , 360 NEW_LINE store i32 %36 %4 NEW_LINE br label %8 NEW_LINE 37: NEW_LINE %38 = load double %2 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE %41 = load double %3 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store float 0.000000e+00 %4 NEW_LINE store float 0.000000e+00 %5 NEW_LINE store float 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%f,%f~00" i64 0 i64 0 ) * float %2 * float %3 ) NEW_LINE %9 = load float %2 NEW_LINE %10 = fcmp oeq float %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load float %3 NEW_LINE %13 = fcmp oeq float %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %43 NEW_LINE 15: NEW_LINE %16 = load float %2 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = load float %6 NEW_LINE %19 = fpext float %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load float %4 NEW_LINE %25 = fpext float %24 to double NEW_LINE %26 = fadd double %25 , %23 NEW_LINE %27 = fptrunc double %26 to float NEW_LINE store float %27 %4 NEW_LINE %28 = load float %2 NEW_LINE %29 = fpext float %28 to double NEW_LINE %30 = load float %6 NEW_LINE %31 = fpext float %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load float %5 NEW_LINE %37 = fpext float %36 to double NEW_LINE %38 = fadd double %37 , %35 NEW_LINE %39 = fptrunc double %38 to float NEW_LINE store float %39 %5 NEW_LINE %40 = load float %3 NEW_LINE %41 = load float %6 NEW_LINE %42 = fsub float %41 , %40 NEW_LINE store float %42 %6 NEW_LINE br label %7 NEW_LINE 43: NEW_LINE %44 = load float %4 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE %46 = load float %5 NEW_LINE %47 = fptosi float %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE %8 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE store double %8 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 %2 ) NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %43 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %7 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @cos ( double %24 ) #3 NEW_LINE %26 = fmul double %19 , %25 NEW_LINE %27 = load double %5 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %5 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double %7 NEW_LINE %34 = fmul double %32 , %33 NEW_LINE %35 = fdiv double %34 , 1.800000e+02 NEW_LINE %36 = call double @sin ( double %35 ) #3 NEW_LINE %37 = fmul double %30 , %36 NEW_LINE %38 = load double %6 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %6 NEW_LINE %40 = load i32 %2 NEW_LINE %41 = load i32 %4 NEW_LINE %42 = sub nsw i32 %41 , %40 NEW_LINE store i32 %42 %4 NEW_LINE br label %9 NEW_LINE 43: NEW_LINE %44 = load double %5 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = load double %6 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i32 NEW_LINE %3 = alloca ARR 3 1000 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp eq i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %12 NEW_LINE 11: NEW_LINE br label %35 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %22 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %18 NEW_LINE store i32 %16 %19 NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %4 NEW_LINE br label %34 NEW_LINE 22: NEW_LINE %23 = load i32 %4 NEW_LINE %24 = add nsw i32 %23 , -1 NEW_LINE store i32 %24 %4 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 1000 x i32 %2 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %30 NEW_LINE store i32 %28 %31 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %5 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %8 NEW_LINE 35: NEW_LINE store i32 0 %7 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %7 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = icmp slt i32 %37 , %38 NEW_LINE br i1 %39 , label %40 , label %49 NEW_LINE 40: NEW_LINE %41 = load i32 %7 NEW_LINE %42 = sext i32 %41 to i64 NEW_LINE %43 = getelementptr inbounds ARR 3 1000 x i32 %3 , i64 0 , i64 %42 NEW_LINE %44 = load i32 %43 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE br label %46 NEW_LINE 46: NEW_LINE %47 = load i32 %7 NEW_LINE %48 = add nsw i32 %47 , 1 NEW_LINE store i32 %48 %7 NEW_LINE br label %36 NEW_LINE 49: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE %36 = load i32 %3 NEW_LINE %37 = xor i32 %36 , -1 NEW_LINE br label %47 NEW_LINE 38: NEW_LINE %39 = load float @x NEW_LINE %40 = fptosi float %39 to i32 NEW_LINE store i32 %40 @d NEW_LINE %41 = load float @y NEW_LINE %42 = fptosi float %41 to i32 NEW_LINE store i32 %42 %3 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE %44 = icmp ne i32 %43 , 0 NEW_LINE %45 = xor i1 %44 , true NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE %48 = phi i32 ARR 2 %37 %8 , ARR 2 %46 %38 NEW_LINE %49 = icmp ne i32 %48 , 0 NEW_LINE br i1 %49 , label %50 , label %51 NEW_LINE 50: NEW_LINE br label %4 NEW_LINE 51: NEW_LINE %52 = load i32 %2 NEW_LINE ret i32 %52 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0x400921FB53C8D4F1 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %42 NEW_LINE 16: NEW_LINE %17 = load double %6 NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %5 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %19 , %25 NEW_LINE %27 = fadd double %17 , %26 NEW_LINE store double %27 %6 NEW_LINE %28 = load double %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double %5 NEW_LINE %34 = fmul double %32 , %33 NEW_LINE %35 = fdiv double %34 , 1.800000e+02 NEW_LINE %36 = call double @cos ( double %35 ) #3 NEW_LINE %37 = fmul double %30 , %36 NEW_LINE %38 = fadd double %28 , %37 NEW_LINE store double %38 %7 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = load i32 %3 NEW_LINE %41 = add nsw i32 %39 , %40 NEW_LINE store i32 %41 %4 NEW_LINE br label %8 NEW_LINE 42: NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %7 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = load i32 %2 NEW_LINE %5 = icmp slt i32 %4 , 5 NEW_LINE br i1 %5 , label %6 , label %14 NEW_LINE 6: NEW_LINE %7 = load i32 %2 NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 @data , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE store i32 %13 %2 NEW_LINE br label %3 NEW_LINE 14: NEW_LINE call void @sort ( ) NEW_LINE store i32 0 %2 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = icmp slt i32 %16 , 5 NEW_LINE br i1 %17 , label %18 , label %32 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i32 @data , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %15 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %6 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str: ▁ %d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 * i32 %5 * i32 %6 * i32 %7 ) NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = bitcast * i32 %9 to * i8 NEW_LINE call void @qsort ( * i8 %10 i64 5 i64 4 i32 * ( * i8 * i8 ) @compare ) NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = load i32 %11 NEW_LINE %13 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %14 = load i32 %13 NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %16 = load i32 %15 NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %12 i32 %14 i32 %16 i32 %18 i32 %20 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE call void @calc ( ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %7 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %7 NEW_LINE br label %9 NEW_LINE 17: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %38 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load float @z NEW_LINE %12 = fpext float %11 to double NEW_LINE %13 = call double @cos ( double %12 ) #4 NEW_LINE %14 = fmul double %10 , %13 NEW_LINE %15 = load float @y NEW_LINE %16 = fpext float %15 to double NEW_LINE %17 = fadd double %16 , %14 NEW_LINE %18 = fptrunc double %17 to float NEW_LINE store float %18 @y NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load float @z NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = call double @sin ( double %22 ) #4 NEW_LINE %24 = fmul double %20 , %23 NEW_LINE %25 = load float @x NEW_LINE %26 = fpext float %25 to double NEW_LINE %27 = fsub double %26 , %24 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 @x NEW_LINE %29 = load i32 @d NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 5.730000e+01 NEW_LINE %32 = load float @z NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = fsub double %33 , %31 NEW_LINE %35 = fptrunc double %34 to float NEW_LINE store float %35 @z NEW_LINE %36 = load i32 %3 NEW_LINE %37 = xor i32 %36 , -1 NEW_LINE br label %47 NEW_LINE 38: NEW_LINE %39 = load float @x NEW_LINE %40 = fptosi float %39 to i32 NEW_LINE store i32 %40 @d NEW_LINE %41 = load float @y NEW_LINE %42 = fptosi float %41 to i32 NEW_LINE store i32 %42 %3 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %40 i32 %42 ) NEW_LINE %44 = icmp ne i32 %43 , 0 NEW_LINE %45 = xor i1 %44 , true NEW_LINE %46 = zext i1 %45 to i32 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE %48 = phi i32 ARR 2 %37 %8 , ARR 2 %46 %38 NEW_LINE %49 = icmp ne i32 %48 , 0 NEW_LINE br i1 %49 , label %50 , label %51 NEW_LINE 50: NEW_LINE br label %4 NEW_LINE 51: NEW_LINE call void @exit ( i32 0 ) #5 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @d NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @d NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 ) @c ) NEW_LINE store i32 5 @d NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @d NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 @d NEW_LINE %16 = icmp ne i32 %14 , 0 NEW_LINE br i1 %16 , label %17 , label %28 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @d NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load i32 @d NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %22 i32 %26 ) NEW_LINE br label %13 NEW_LINE 28: NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 101 x i8 NEW_LINE %5 = alloca ARR 3 101 x i8 NEW_LINE %6 = alloca * i8 NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %30 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 101 x i8 %4 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %15 ) NEW_LINE %17 = getelementptr inbounds ARR 3 101 x i8 %4 , i64 0 , i64 0 NEW_LINE %18 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %19 = call i32 @add ( * i8 %17 * i8 %18 * * i8 %6 ) NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %23 NEW_LINE 21: NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.2:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %27 NEW_LINE 23: NEW_LINE %24 = load * i8 %6 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%s~0A~00" i64 0 i64 0 ) * i8 %24 ) NEW_LINE %26 = load * i8 %6 NEW_LINE call void @free ( * i8 %26 ) #4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %8 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @bubbleSort ( * i32 %16 ) NEW_LINE store i32 0 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %2 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 @putchar ( i32 10 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %7 , 10 NEW_LINE br i1 %8 , label %9 , label %16 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %11 NEW_LINE store i32 0 %12 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = add nsw i32 %14 , 1 NEW_LINE store i32 %15 %3 NEW_LINE br label %6 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %19 = icmp ne i32 %18 , -1 NEW_LINE br i1 %19 , label %20 , label %42 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = icmp eq i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %34 NEW_LINE 23: NEW_LINE %24 = load i32 %4 NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 %4 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %32 NEW_LINE store i32 0 %33 NEW_LINE br label %41 NEW_LINE 34: NEW_LINE %35 = load i32 %5 NEW_LINE %36 = load i32 %4 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %37 NEW_LINE store i32 %35 %38 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = add nsw i32 %39 , 1 NEW_LINE store i32 %40 %4 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %17 NEW_LINE 42: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store float 0.000000e+00 %2 NEW_LINE store float 0.000000e+00 %3 NEW_LINE store i32 90 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %10 = load i32 %5 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %6 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %45 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double %18 , 0x400921FB54411744 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = fptrunc double %20 to float NEW_LINE store float %21 %4 NEW_LINE %22 = load i32 %5 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = load float %4 NEW_LINE %25 = fpext float %24 to double NEW_LINE %26 = call double @cos ( double %25 ) #3 NEW_LINE %27 = fmul double %23 , %26 NEW_LINE %28 = load float %2 NEW_LINE %29 = fpext float %28 to double NEW_LINE %30 = fadd double %29 , %27 NEW_LINE %31 = fptrunc double %30 to float NEW_LINE store float %31 %2 NEW_LINE %32 = load i32 %5 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load float %4 NEW_LINE %35 = fpext float %34 to double NEW_LINE %36 = call double @sin ( double %35 ) #3 NEW_LINE %37 = fmul double %33 , %36 NEW_LINE %38 = load float %3 NEW_LINE %39 = fpext float %38 to double NEW_LINE %40 = fadd double %39 , %37 NEW_LINE %41 = fptrunc double %40 to float NEW_LINE store float %41 %3 NEW_LINE %42 = load i32 %6 NEW_LINE %43 = load i32 %7 NEW_LINE %44 = sub nsw i32 %43 , %42 NEW_LINE store i32 %44 %7 NEW_LINE br label %8 NEW_LINE 45: NEW_LINE %46 = load float %2 NEW_LINE %47 = fptosi float %46 to i32 NEW_LINE %48 = load float %3 NEW_LINE %49 = fptosi float %48 to i32 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A]~0A~00" i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %38 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE store * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) @t NEW_LINE %8 = call * i8 @strstr ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE %10 = xor i1 %9 , true NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load * i8 @t NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = sub nsw i32 %15 , 97 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %23 NEW_LINE 18: NEW_LINE %19 = load * i8 @t NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = ashr i32 %21 , 6 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %22 %18 , ARR 2 -25 %23 NEW_LINE %26 = load * i8 @t NEW_LINE %27 = getelementptr inbounds i8 %26 , i32 1 NEW_LINE store * i8 %27 @t NEW_LINE %28 = load i8 %26 NEW_LINE %29 = sext i8 %28 to i32 NEW_LINE %30 = sub nsw i32 %29 , %25 NEW_LINE %31 = trunc i32 %30 to i8 NEW_LINE store i8 %31 %26 NEW_LINE %32 = icmp ne i8 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %34 NEW_LINE 33: NEW_LINE br label %12 NEW_LINE 34: NEW_LINE br label %7 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 38: NEW_LINE %39 = load i32 %1 NEW_LINE ret i32 %39 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %40 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %5 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %3 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %3 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = mul nsw i32 %36 , -1 NEW_LINE %38 = load i32 %4 NEW_LINE %39 = add nsw i32 %38 , %37 NEW_LINE store i32 %39 %4 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %2 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE %44 = load double %3 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store i32 90 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %38 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = fmul double %19 , 3.141590e+00 NEW_LINE store double %20 %6 NEW_LINE %21 = load double %4 NEW_LINE %22 = load double %6 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fmul double %23 , %25 NEW_LINE %27 = fadd double %21 , %26 NEW_LINE store double %27 %4 NEW_LINE %28 = load double %5 NEW_LINE %29 = load double %6 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = fadd double %28 , %33 NEW_LINE store double %34 %5 NEW_LINE %35 = load i32 %7 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = sub nsw i32 %35 , %36 NEW_LINE store i32 %37 %7 NEW_LINE br label %8 NEW_LINE 38: NEW_LINE %39 = load double %4 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %40 ) NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %40 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB54442D18 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %30 , 0x400921FB54442D18 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = load i32 %4 NEW_LINE %39 = add nsw i32 %38 , %37 NEW_LINE store i32 %39 %4 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %6 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = xor i32 %5 , -1 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %35 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load i32 @t NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = fdiv double %12 , 5.730000e+01 NEW_LINE %14 = fptrunc double %13 to float NEW_LINE store float %14 @z NEW_LINE %15 = fpext float %14 to double NEW_LINE %16 = call double @cos ( double %15 ) #3 NEW_LINE %17 = fmul double %10 , %16 NEW_LINE %18 = load float @y NEW_LINE %19 = fpext float %18 to double NEW_LINE %20 = fadd double %19 , %17 NEW_LINE %21 = fptrunc double %20 to float NEW_LINE store float %21 @y NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = load float @z NEW_LINE %25 = fpext float %24 to double NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %23 , %26 NEW_LINE %28 = load float @x NEW_LINE %29 = fpext float %28 to double NEW_LINE %30 = fsub double %29 , %27 NEW_LINE %31 = fptrunc double %30 to float NEW_LINE store float %31 @x NEW_LINE %32 = load i32 @d NEW_LINE %33 = load i32 @t NEW_LINE %34 = sub nsw i32 %33 , %32 NEW_LINE store i32 %34 @t NEW_LINE br label %44 NEW_LINE 35: NEW_LINE %36 = load float @x NEW_LINE %37 = fptosi float %36 to i32 NEW_LINE store i32 %37 @t NEW_LINE %38 = load float @y NEW_LINE %39 = fptosi float %38 to i32 NEW_LINE store i32 %39 @d NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE %41 = icmp ne i32 %40 , 0 NEW_LINE %42 = xor i1 %41 , true NEW_LINE %43 = zext i1 %42 to i32 NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = phi i32 ARR 2 %34 %8 , ARR 2 %43 %35 NEW_LINE %46 = icmp ne i32 %45 , 0 NEW_LINE br i1 %46 , label %47 , label %48 NEW_LINE 47: NEW_LINE br label %4 NEW_LINE 48: NEW_LINE %49 = load i32 %2 NEW_LINE ret i32 %49 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 @x NEW_LINE store double 0.000000e+00 @y NEW_LINE store i32 90 %2 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 @len * i32 @arg ) NEW_LINE %5 = icmp ne i32 -1 , %4 NEW_LINE br i1 %5 , label %6 , label %14 NEW_LINE 6: NEW_LINE %7 = load i32 @len NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %12 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @arg NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = phi i1 ARR 2 true %6 , ARR 2 %11 %9 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 false %3 , ARR 2 %13 %12 NEW_LINE br i1 %15 , label %16 , label %42 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double @PAI NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = fmul double %18 , %20 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = load i32 @len NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double @x NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 @x NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load double @PAI NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = fmul double %29 , %31 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = load i32 @len NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fmul double %33 , %35 NEW_LINE %37 = load double @y NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 @y NEW_LINE %39 = load i32 @arg NEW_LINE %40 = load i32 %2 NEW_LINE %41 = sub nsw i32 %40 , %39 NEW_LINE store i32 %41 %2 NEW_LINE br label %3 NEW_LINE 42: NEW_LINE %43 = load double @x NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double @y NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort01 ( * i32 %16 i32 5 ) NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE store i32 1 %3 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp slt i32 %21 , 5 NEW_LINE br i1 %22 , label %23 , label %32 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1: ▁ %d~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %3 NEW_LINE br label %20 NEW_LINE 32: NEW_LINE %33 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 1 x i8 @.str.2 i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %42 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %6 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = sitofp i32 %36 to double NEW_LINE %38 = load i32 %6 NEW_LINE %39 = sitofp i32 %38 to double NEW_LINE %40 = fsub double %39 , %37 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE store i32 %41 %6 NEW_LINE br label %7 NEW_LINE 42: NEW_LINE %43 = load double %4 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %5 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 @d ) NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp ne i32 %6 , 0 NEW_LINE br i1 %7 , label %8 , label %34 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = load i32 @t NEW_LINE %12 = sitofp i32 %11 to double NEW_LINE %13 = fdiv double %12 , 5.730000e+01 NEW_LINE %14 = call double @cos ( double %13 ) #3 NEW_LINE %15 = fmul double %10 , %14 NEW_LINE %16 = load float @y NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = fadd double %17 , %15 NEW_LINE %19 = fptrunc double %18 to float NEW_LINE store float %19 @y NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 @t NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fdiv double %23 , 5.730000e+01 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load float @x NEW_LINE %28 = fpext float %27 to double NEW_LINE %29 = fsub double %28 , %26 NEW_LINE %30 = fptrunc double %29 to float NEW_LINE store float %30 @x NEW_LINE %31 = load i32 @d NEW_LINE %32 = load i32 @t NEW_LINE %33 = sub nsw i32 %32 , %31 NEW_LINE store i32 %33 @t NEW_LINE br label %43 NEW_LINE 34: NEW_LINE %35 = load float @x NEW_LINE %36 = fptosi float %35 to i32 NEW_LINE store i32 %36 @t NEW_LINE %37 = load float @y NEW_LINE %38 = fptosi float %37 to i32 NEW_LINE store i32 %38 @d NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %36 i32 %38 ) NEW_LINE %40 = icmp ne i32 %39 , 0 NEW_LINE %41 = xor i1 %40 , true NEW_LINE %42 = zext i1 %41 to i32 NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = phi i32 ARR 2 %33 %8 , ARR 2 %42 %34 NEW_LINE %45 = icmp ne i32 %44 , 0 NEW_LINE br i1 %45 , label %46 , label %47 NEW_LINE 46: NEW_LINE br label %4 NEW_LINE 47: NEW_LINE %48 = load i32 %2 NEW_LINE ret i32 %48 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0x3FF921FB54442D18 %8 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %9 * i32 %10 ) NEW_LINE %13 = load i32 %9 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %10 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %40 NEW_LINE 19: NEW_LINE %20 = load double %8 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %9 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %6 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %6 NEW_LINE %27 = load double %8 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = load i32 %9 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double %28 , %30 NEW_LINE %32 = load double %7 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %7 NEW_LINE %34 = load i32 %10 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fdiv double %35 , 1.800000e+02 NEW_LINE %37 = fmul double %36 , 0x400921FB54442D18 NEW_LINE %38 = load double %8 NEW_LINE %39 = fsub double %38 , %37 NEW_LINE store double %39 %8 NEW_LINE br label %11 NEW_LINE 40: NEW_LINE %41 = load double %6 NEW_LINE %42 = call double @modf ( double %41 * double %6 ) #3 NEW_LINE %43 = load double %7 NEW_LINE %44 = call double @modf ( double %43 * double %7 ) #3 NEW_LINE %45 = load double %6 NEW_LINE %46 = load double %7 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:%.0lf~0A%.0lf~0A~00" i64 0 i64 0 ) double %45 double %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE %9 = call double @atan ( double 1.000000e+00 ) #3 NEW_LINE %10 = fmul double %9 , 4.000000e+00 NEW_LINE store double %10 %7 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %4 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %42 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %7 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE store double %24 %8 NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sitofp i32 %25 to double NEW_LINE %27 = load double %8 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %26 , %28 NEW_LINE %30 = load double %5 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %5 NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = load double %8 NEW_LINE %35 = call double @cos ( double %34 ) #3 NEW_LINE %36 = fmul double %33 , %35 NEW_LINE %37 = load double %6 NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 %6 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = load i32 %3 NEW_LINE %41 = add nsw i32 %40 , %39 NEW_LINE store i32 %41 %3 NEW_LINE br label %11 NEW_LINE 42: NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %6 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 128 x i32 NEW_LINE %3 = alloca ARR 3 128 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %27 NEW_LINE 14: NEW_LINE %15 = load i32 %4 NEW_LINE %16 = sub nsw i32 %15 , 1 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 128 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %5 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 128 x i32 %3 , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %5 NEW_LINE %25 = load i32 %4 NEW_LINE %26 = add nsw i32 %25 , -1 NEW_LINE store i32 %26 %4 NEW_LINE br label %34 NEW_LINE 27: NEW_LINE %28 = load i32 %6 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 128 x i32 %2 , i64 0 , i64 %30 NEW_LINE store i32 %28 %31 NEW_LINE %32 = load i32 %4 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %4 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %8 NEW_LINE 35: NEW_LINE store i32 0 %7 NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %7 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = icmp slt i32 %37 , %38 NEW_LINE br i1 %39 , label %40 , label %49 NEW_LINE 40: NEW_LINE %41 = load i32 %7 NEW_LINE %42 = sext i32 %41 to i64 NEW_LINE %43 = getelementptr inbounds ARR 3 128 x i32 %3 , i64 0 , i64 %42 NEW_LINE %44 = load i32 %43 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE br label %46 NEW_LINE 46: NEW_LINE %47 = load i32 %7 NEW_LINE %48 = add nsw i32 %47 , 1 NEW_LINE store i32 %48 %7 NEW_LINE br label %36 NEW_LINE 49: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sitofp i32 %8 to double NEW_LINE store double %9 %6 NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %41 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double 0x3F91DF46A2529E84 , %23 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load double %5 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %5 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double 0x3F91DF46A2529E84 , %32 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = fmul double %30 , %34 NEW_LINE %36 = load double %6 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %6 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = add nsw i32 %39 , %38 NEW_LINE store i32 %40 %4 NEW_LINE br label %11 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %43 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 0 %5 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %6 * i32 %7 ) NEW_LINE %10 = load i32 %5 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double %11 , 0x400921FB54524550 NEW_LINE %13 = fdiv double %12 , 1.800000e+02 NEW_LINE store double %13 %4 NEW_LINE %14 = load double %4 NEW_LINE %15 = call double @cos ( double %14 ) #3 NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %15 , %17 NEW_LINE %19 = load double %2 NEW_LINE %20 = fadd double %19 , %18 NEW_LINE store double %20 %2 NEW_LINE %21 = load double %4 NEW_LINE %22 = call double @sin ( double %21 ) #3 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %3 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %3 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = load i32 %5 NEW_LINE %30 = add nsw i32 %29 , %28 NEW_LINE store i32 %30 %5 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %6 NEW_LINE %33 = icmp ne i32 %32 , 0 NEW_LINE br i1 %33 , label %37 , label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = phi i1 ARR 2 true %31 , ARR 2 %36 %34 NEW_LINE br i1 %38 , label %8 , label %39 NEW_LINE 39: NEW_LINE %40 = load double %3 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %2 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %26 NEW_LINE 10: NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = phi i32 ARR 2 1 %9 , ARR 2 %25 %10 NEW_LINE %28 = load i32 @i NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 @i NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %35 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 999999 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %7 , 999999 NEW_LINE br i1 %8 , label %9 , label %19 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE %12 = call i32 @hantei ( i32 %11 ) NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 999999 x i32 %5 , i64 0 , i64 %14 NEW_LINE store i32 %12 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %3 NEW_LINE br label %6 NEW_LINE 19: NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %22 = icmp ne i32 %21 , -1 NEW_LINE br i1 %22 , label %23 , label %41 NEW_LINE 23: NEW_LINE store i32 -1 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %38 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 999999 x i32 %5 , i64 0 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = add nsw i32 %33 , %32 NEW_LINE store i32 %34 %4 NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %3 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %3 NEW_LINE br label %24 NEW_LINE 38: NEW_LINE %39 = load i32 %4 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE br label %20 NEW_LINE 41: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %3 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %40 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FAFC8B007A NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FAFC8B007A NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = fmul double %27 , %32 NEW_LINE %34 = load double %6 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = mul nsw i32 %36 , -1 NEW_LINE %38 = load i32 %2 NEW_LINE %39 = add nsw i32 %38 , %37 NEW_LINE store i32 %39 %2 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %7 * i32 %8 ) NEW_LINE %11 = load i32 %7 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %8 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %41 NEW_LINE 17: NEW_LINE %18 = load i32 %7 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %21 , 0x400921FB5443D6F4 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %2 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %2 NEW_LINE %28 = load i32 %7 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB5443D6F4 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %3 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %3 NEW_LINE %38 = load i32 %8 NEW_LINE %39 = load i32 %6 NEW_LINE %40 = sub nsw i32 %39 , %38 NEW_LINE store i32 %40 %6 NEW_LINE br label %9 NEW_LINE 41: NEW_LINE %42 = load double %2 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE store i32 %43 %4 NEW_LINE %44 = load double %3 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE store i32 %45 %5 NEW_LINE %46 = load i32 %4 NEW_LINE %47 = load i32 %5 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %46 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = sitofp i32 %9 to double NEW_LINE %11 = fmul double %10 , 0x400921FB5444261E NEW_LINE %12 = fdiv double %11 , 1.800000e+02 NEW_LINE %13 = call double @cos ( double %12 ) #3 NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fmul double %13 , %15 NEW_LINE %17 = load double %2 NEW_LINE %18 = fadd double %17 , %16 NEW_LINE store double %18 %2 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double %20 , 0x400921FB5444261E NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @sin ( double %22 ) #3 NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fmul double %23 , %25 NEW_LINE %27 = load double %3 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %3 NEW_LINE %29 = load i32 %6 NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sub nsw i32 %30 , %29 NEW_LINE store i32 %31 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %5 NEW_LINE %34 = icmp ne i32 %33 , 0 NEW_LINE br i1 %34 , label %35 , label %38 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = icmp ne i32 %36 , 0 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = phi i1 ARR 2 false %32 , ARR 2 %37 %35 NEW_LINE br i1 %39 , label %7 , label %40 NEW_LINE 40: NEW_LINE %41 = load double %2 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE %44 = load double %3 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store i32 90 %6 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %14 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 false %8 , ARR 2 %13 %11 NEW_LINE %16 = xor i1 %15 , true NEW_LINE br i1 %16 , label %17 , label %43 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double 0x400921FB54442D18 , %21 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %4 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %4 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double 0x400921FB54442D18 , %31 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %5 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %5 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = sub nsw i32 0 , %38 NEW_LINE %40 = load i32 %6 NEW_LINE %41 = add nsw i32 %40 , %39 NEW_LINE store i32 %41 %6 NEW_LINE %42 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE br label %8 NEW_LINE 43: NEW_LINE %44 = load double %4 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = load double %5 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %2 = load * i32 @s NEW_LINE %3 = bitcast * i32 %2 to * i8 NEW_LINE %4 = call i32 ( * i8 ... ) @scanf ( * i8 %3 * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 1 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 2 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 3 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 4 i64 0 ) * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 5 i64 0 ) ) NEW_LINE %5 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) i32 %4 i32 4 i32 * ( * i32 ) @M ) NEW_LINE %6 = load * i32 @s NEW_LINE %7 = bitcast * i32 %6 to * i8 NEW_LINE %8 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 0 i64 0 ) NEW_LINE %9 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 1 i64 0 ) NEW_LINE %10 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 2 i64 0 ) NEW_LINE %11 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 3 i64 0 ) NEW_LINE %12 = load i32 getelementptr inbounds ( ARR 3 1 x i32 @n i64 4 i64 0 ) NEW_LINE %13 = call i32 ( * i8 ... ) @printf ( * i8 %7 i32 %8 i32 %9 i32 %10 i32 %11 i32 %12 ) NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE %15 = xor i1 %14 , true NEW_LINE %16 = zext i1 %15 to i32 NEW_LINE call void @exit ( i32 %16 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 25 x i8 @".str:%lf%lf%lf%lf%lf%lf%lf%lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %12 = icmp sgt i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %27 NEW_LINE 13: NEW_LINE %14 = load double %2 NEW_LINE %15 = load double %3 NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = load double %6 NEW_LINE %19 = load double %7 NEW_LINE %20 = load double %8 NEW_LINE %21 = load double %9 NEW_LINE %22 = call i32 @is_inner_triangle ( double %14 double %15 double %16 double %17 double %18 double %19 double %20 double %21 ) NEW_LINE %23 = icmp ne i32 %22 , 0 NEW_LINE %24 = zext i1 %23 to i64 NEW_LINE %25 = select i1 %23 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %26 = call i32 @puts ( * i8 %25 ) NEW_LINE br label %10 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 10 x i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = bitcast * ARR 3 10 x i32 %2 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %5 i8 0 i64 40 i1 false ) NEW_LINE store i32 0 %4 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %8 = icmp ne i32 %7 , -1 NEW_LINE br i1 %8 , label %9 , label %38 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %23 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = sub nsw i32 %13 , 1 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %15 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %17 ) NEW_LINE %19 = load i32 %4 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %4 NEW_LINE %21 = sext i32 %19 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %21 NEW_LINE store i32 0 %22 NEW_LINE br label %37 NEW_LINE 23: NEW_LINE %24 = load i32 %3 NEW_LINE %25 = icmp sle i32 1 , %24 NEW_LINE br i1 %25 , label %26 , label %35 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp sle i32 %27 , 10 NEW_LINE br i1 %28 , label %29 , label %35 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = load i32 %4 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %4 NEW_LINE %33 = sext i32 %31 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 10 x i32 %2 , i64 0 , i64 %33 NEW_LINE store i32 %30 %34 NEW_LINE br label %36 NEW_LINE 35: NEW_LINE br label %6 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE br label %6 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %2 NEW_LINE store float 0.000000e+00 %5 NEW_LINE store float 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 ) NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %45 NEW_LINE 15: NEW_LINE %16 = load float %6 NEW_LINE %17 = fpext float %16 to double NEW_LINE %18 = load i32 %3 NEW_LINE %19 = sitofp i32 %18 to float NEW_LINE %20 = fpext float %19 to double NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %22 , 0x400921FB54442D11 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %20 , %25 NEW_LINE %27 = fadd double %17 , %26 NEW_LINE %28 = fptrunc double %27 to float NEW_LINE store float %28 %6 NEW_LINE %29 = load float %5 NEW_LINE %30 = fpext float %29 to double NEW_LINE %31 = load i32 %3 NEW_LINE %32 = sitofp i32 %31 to float NEW_LINE %33 = fpext float %32 to double NEW_LINE %34 = load i32 %2 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fmul double %35 , 0x400921FB54442D11 NEW_LINE %37 = fdiv double %36 , 1.800000e+02 NEW_LINE %38 = call double @cos ( double %37 ) #3 NEW_LINE %39 = fmul double %33 , %38 NEW_LINE %40 = fadd double %30 , %39 NEW_LINE %41 = fptrunc double %40 to float NEW_LINE store float %41 %5 NEW_LINE %42 = load i32 %2 NEW_LINE %43 = load i32 %4 NEW_LINE %44 = sub nsw i32 %42 , %43 NEW_LINE store i32 %44 %2 NEW_LINE br label %7 NEW_LINE 45: NEW_LINE %46 = load float %5 NEW_LINE %47 = fptosi float %46 to i32 NEW_LINE %48 = load float %6 NEW_LINE %49 = fptosi float %48 to i32 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %42 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %5 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %42 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %8 NEW_LINE %23 = fmul double %22 , 0x400921FB54442D18 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @cos ( double %24 ) #3 NEW_LINE %26 = fmul double %21 , %25 NEW_LINE %27 = load double %2 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %2 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load double %8 NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %30 , %34 NEW_LINE %36 = load double %3 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %3 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = sitofp i32 %38 to double NEW_LINE %40 = load double %8 NEW_LINE %41 = fsub double %40 , %39 NEW_LINE store double %41 %8 NEW_LINE br label %9 NEW_LINE 42: NEW_LINE %43 = load double %2 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE store i32 %44 %6 NEW_LINE %45 = load double %3 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE store i32 %46 %7 NEW_LINE %47 = load i32 %6 NEW_LINE %48 = load i32 %7 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d, ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sub nsw i32 0 , %16 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %6 NEW_LINE %20 = fmul double %19 , 0x400921FB54442D18 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @sin ( double %21 ) #3 NEW_LINE %23 = fmul double %18 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %6 NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = call double @cos ( double %30 ) #3 NEW_LINE %32 = fmul double %27 , %31 NEW_LINE %33 = load double %5 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %5 NEW_LINE %35 = load i32 %3 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = load double %6 NEW_LINE %38 = fsub double %37 , %36 NEW_LINE store double %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @i NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 10010 x i32 @data i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 i32 * ( * i32 * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 10010 x i32 @data i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 * i32 ) @cmp ) NEW_LINE store i32 4 @i NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @i NEW_LINE %15 = icmp sge i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %29 NEW_LINE 16: NEW_LINE %17 = load i32 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 10010 x i32 @data , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = load i32 @i NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = zext i1 %22 to i64 NEW_LINE %24 = select i1 %22 , i32 32 , i32 10 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %20 i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 @i NEW_LINE %28 = add nsw i32 %27 , -1 NEW_LINE store i32 %28 @i NEW_LINE br label %13 NEW_LINE 29: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 101 x i8 NEW_LINE %5 = alloca ARR 3 101 x i8 NEW_LINE %6 = alloca * i8 NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %3 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp slt i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %31 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 101 x i8 %4 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %15 ) NEW_LINE %17 = call * i32 @__errno_location ( ) #5 NEW_LINE store i32 0 %17 NEW_LINE %18 = getelementptr inbounds ARR 3 101 x i8 %4 , i64 0 , i64 0 NEW_LINE %19 = getelementptr inbounds ARR 3 101 x i8 %5 , i64 0 , i64 0 NEW_LINE %20 = call i32 @add ( * i8 %18 * i8 %19 * * i8 %6 ) NEW_LINE %21 = icmp ne i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %24 NEW_LINE 22: NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.2:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %28 NEW_LINE 24: NEW_LINE %25 = load * i8 %6 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%s~0A~00" i64 0 i64 0 ) * i8 %25 ) NEW_LINE %27 = load * i8 %6 NEW_LINE call void @free ( * i8 %27 ) #6 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %3 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %3 NEW_LINE br label %8 NEW_LINE 31: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%d,%d,~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %39 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load double %6 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = fmul double %20 , 0x400921FB54442D18 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %18 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %6 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = call double @sin ( double %30 ) #3 NEW_LINE %32 = fmul double %27 , %31 NEW_LINE %33 = load double %4 NEW_LINE %34 = fadd double %33 , %32 NEW_LINE store double %34 %4 NEW_LINE %35 = load i32 %3 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = load double %6 NEW_LINE %38 = fadd double %37 , %36 NEW_LINE store double %38 %6 NEW_LINE br label %8 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %41 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @d NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @d NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 i32 * ( * i32 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 i32 * ( * i32 ) ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 5 i32 4 i32 * ( * i32 ) @c ) NEW_LINE store i32 5 @d NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @d NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 @d NEW_LINE %16 = icmp ne i32 %14 , 0 NEW_LINE br i1 %16 , label %17 , label %28 NEW_LINE 17: NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 @d NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = load i32 @d NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = zext i1 %24 to i64 NEW_LINE %26 = select i1 %24 , i32 32 , i32 10 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %22 i32 %26 ) NEW_LINE br label %13 NEW_LINE 28: NEW_LINE call void @exit ( i32 0 ) #3 NEW_LINE unreachable NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @FuncCmpInt ) NEW_LINE store i32 0 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp slt i32 %19 , 5 NEW_LINE br i1 %20 , label %21 , label %37 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp slt i32 %27 , 4 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = call i32 @putchar ( i32 32 ) NEW_LINE br label %33 NEW_LINE 31: NEW_LINE %32 = call i32 @putchar ( i32 10 ) NEW_LINE br label %33 NEW_LINE 33: NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %3 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %3 NEW_LINE br label %18 NEW_LINE 37: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str:%[^~0A]~0A~00" i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE %4 = xor i32 %3 , -1 NEW_LINE %5 = icmp ne i32 %4 , 0 NEW_LINE br i1 %5 , label %6 , label %40 NEW_LINE 6: NEW_LINE br label %7 NEW_LINE 7: NEW_LINE store * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) @t NEW_LINE %8 = call * i8 @strstr ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:th~00" i64 0 i64 0 ) ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE %10 = xor i1 %9 , true NEW_LINE br i1 %10 , label %11 , label %37 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load * i8 @t NEW_LINE %14 = load i8 %13 NEW_LINE %15 = sext i8 %14 to i32 NEW_LINE %16 = sub nsw i32 %15 , 97 NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %23 NEW_LINE 18: NEW_LINE %19 = load * i8 @t NEW_LINE %20 = load i8 %19 NEW_LINE %21 = sext i8 %20 to i32 NEW_LINE %22 = ashr i32 %21 , 6 NEW_LINE br label %24 NEW_LINE 23: NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = phi i32 ARR 2 %22 %18 , ARR 2 -25 %23 NEW_LINE %26 = load * i8 @t NEW_LINE %27 = load i8 %26 NEW_LINE %28 = sext i8 %27 to i32 NEW_LINE %29 = sub nsw i32 %28 , %25 NEW_LINE %30 = trunc i32 %29 to i8 NEW_LINE store i8 %30 %26 NEW_LINE %31 = icmp ne i8 %30 , 0 NEW_LINE br i1 %31 , label %32 , label %36 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load * i8 @t NEW_LINE %35 = getelementptr inbounds i8 %34 , i32 1 NEW_LINE store * i8 %35 @t NEW_LINE br label %12 NEW_LINE 36: NEW_LINE br label %7 NEW_LINE 37: NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 getelementptr inbounds ( ARR 3 99 x i8 @s i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 40: NEW_LINE %41 = load i32 %1 NEW_LINE ret i32 %41 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * i8 NEW_LINE %6 = alloca i64 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 0 %4 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %10 = load i32 %3 NEW_LINE %11 = zext i32 %10 to i64 NEW_LINE %12 = call * i8 @llvm.stacksave ( ) NEW_LINE store * i8 %12 %5 NEW_LINE %13 = alloca i32 , i64 %11 NEW_LINE store i64 %11 %6 NEW_LINE %14 = load i32 %3 NEW_LINE call void @func_arrayInit ( * i32 %13 i32 %14 ) NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE store i32 0 %2 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = icmp slt i32 %17 , %18 NEW_LINE br i1 %19 , label %20 , label %27 NEW_LINE 20: NEW_LINE store i32 0 %7 NEW_LINE store i32 0 %8 NEW_LINE %21 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%d,%d~00" i64 0 i64 0 ) * i32 %7 * i32 %8 ) NEW_LINE %22 = load i32 %7 NEW_LINE %23 = load i32 %8 NEW_LINE call void @func_swap ( * i32 %13 i32 %22 i32 %23 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %2 NEW_LINE br label %16 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE call void @func_output ( * i32 %13 i32 %28 ) NEW_LINE store i32 0 %1 NEW_LINE %29 = load * i8 %5 NEW_LINE call void @llvm.stackrestore ( * i8 %29 ) NEW_LINE %30 = load i32 %1 NEW_LINE ret i32 %30 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 %4 ) NEW_LINE %9 = load i32 %3 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %41 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double 0x400921FB54442D18 , %20 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %3 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double 0x400921FB54442D18 , %30 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %2 NEW_LINE %38 = load i32 %4 NEW_LINE %39 = sub nsw i32 %37 , %38 NEW_LINE %40 = srem i32 %39 , 360 NEW_LINE store i32 %40 %2 NEW_LINE br label %7 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = load double %6 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %43 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %14 , label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %6 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = phi i1 ARR 2 true %7 , ARR 2 %13 %11 NEW_LINE br i1 %15 , label %16 , label %43 NEW_LINE 16: NEW_LINE %17 = load i32 %5 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = fmul double %21 , 0x400921FB54442D18 NEW_LINE %23 = call double @sin ( double %22 ) #4 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %3 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %3 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = call double @cos ( double %32 ) #4 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %2 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %2 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = load i32 %6 NEW_LINE %39 = sub nsw i32 %37 , %38 NEW_LINE %40 = srem i32 %39 , 360 NEW_LINE %41 = add nsw i32 %40 , 360 NEW_LINE %42 = srem i32 %41 , 360 NEW_LINE store i32 %42 %4 NEW_LINE br label %7 NEW_LINE 43: NEW_LINE %44 = load double %2 NEW_LINE %45 = call i32 @round0 ( double %44 ) NEW_LINE %46 = load double %3 NEW_LINE %47 = call i32 @round0 ( double %46 ) NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %41 NEW_LINE 17: NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB5444261E NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = load double %2 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %2 NEW_LINE %28 = load i32 %6 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %29 , 0x400921FB5444261E NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = call double @sin ( double %31 ) #3 NEW_LINE %33 = load i32 %4 NEW_LINE %34 = sitofp i32 %33 to double NEW_LINE %35 = fmul double %32 , %34 NEW_LINE %36 = load double %3 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %3 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = load i32 %6 NEW_LINE %40 = sub nsw i32 %39 , %38 NEW_LINE store i32 %40 %6 NEW_LINE br label %9 NEW_LINE 41: NEW_LINE %42 = load double %2 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE store i32 %43 %7 NEW_LINE %44 = load double %3 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE store i32 %45 %8 NEW_LINE %46 = load i32 %7 NEW_LINE %47 = load i32 %8 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %46 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store float 0.000000e+00 %2 NEW_LINE store float 0.000000e+00 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %5 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %44 NEW_LINE 15: NEW_LINE %16 = load i32 %4 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load i32 %6 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %19 , 0x400921FB5444261E NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @sin ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load float %2 NEW_LINE %25 = fpext float %24 to double NEW_LINE %26 = fadd double %25 , %23 NEW_LINE %27 = fptrunc double %26 to float NEW_LINE store float %27 %2 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB5444261E NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @cos ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load float %3 NEW_LINE %37 = fpext float %36 to double NEW_LINE %38 = fadd double %37 , %35 NEW_LINE %39 = fptrunc double %38 to float NEW_LINE store float %39 %3 NEW_LINE %40 = load i32 %6 NEW_LINE %41 = load i32 %5 NEW_LINE %42 = add nsw i32 %40 , %41 NEW_LINE %43 = srem i32 %42 , 360 NEW_LINE store i32 %43 %6 NEW_LINE br label %7 NEW_LINE 44: NEW_LINE %45 = load float %2 NEW_LINE %46 = fptosi float %45 to i32 NEW_LINE %47 = load float %3 NEW_LINE %48 = fptosi float %47 to i32 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %46 i32 %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 9.000000e+01 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %9 = load i32 %5 NEW_LINE %10 = load i32 %6 NEW_LINE %11 = add nsw i32 %9 , %10 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %37 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = load double %4 NEW_LINE %17 = fdiv double %16 , 1.800000e+02 NEW_LINE %18 = fmul double %17 , 0x400921FB53C8D4F1 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %15 , %19 NEW_LINE %21 = load double %2 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %2 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %4 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = fmul double %26 , 0x400921FB53C8D4F1 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %24 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %6 NEW_LINE %34 = sitofp i32 %33 to double NEW_LINE %35 = load double %4 NEW_LINE %36 = fsub double %35 , %34 NEW_LINE store double %36 %4 NEW_LINE br label %7 NEW_LINE 37: NEW_LINE %38 = load double %2 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = load double %3 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %39 i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %45 NEW_LINE 18: NEW_LINE %19 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE store double %19 %9 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %9 NEW_LINE %23 = load i32 %4 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = fmul double %21 , %27 NEW_LINE %29 = load double %7 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %7 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double %9 NEW_LINE %34 = load i32 %4 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fmul double %33 , %35 NEW_LINE %37 = fdiv double %36 , 1.800000e+02 NEW_LINE %38 = call double @sin ( double %37 ) #3 NEW_LINE %39 = fmul double %32 , %38 NEW_LINE %40 = load double %8 NEW_LINE %41 = fadd double %40 , %39 NEW_LINE store double %41 %8 NEW_LINE %42 = load i32 %3 NEW_LINE %43 = load i32 %4 NEW_LINE %44 = sub nsw i32 %43 , %42 NEW_LINE store i32 %44 %4 NEW_LINE br label %10 NEW_LINE 45: NEW_LINE %46 = load double %7 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE store i32 %47 %5 NEW_LINE %48 = load double %8 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE store i32 %49 %6 NEW_LINE %50 = load i32 %5 NEW_LINE %51 = load i32 %6 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %50 i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str: ▁ %d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE store i32 0 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:%d~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %2 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.3:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @m NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @m NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = load i32 @m NEW_LINE %13 = add nsw i32 %12 , -1 NEW_LINE store i32 %13 @m NEW_LINE %14 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 9 x i32 @a i64 0 i64 0 ) i32 %13 i32 4 * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1:YXZQQQ~8B~00+~02~C3~83~00" i64 0 i64 0 ) ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 @m NEW_LINE %17 = icmp ne i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %30 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 @m NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 9 x i32 @a , i64 0 , i64 %21 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = load i32 @m NEW_LINE %25 = add nsw i32 %24 , -1 NEW_LINE store i32 %25 @m NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , i32 32 , i32 10 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:%d%c~00" i64 0 i64 0 ) i32 %23 i32 %28 ) NEW_LINE br label %15 NEW_LINE 30: NEW_LINE %31 = load i32 %1 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @tanishi_sort ( * i32 %16 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 4 NEW_LINE br i1 %19 , label %20 , label %29 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %3 NEW_LINE %28 = add nsw i32 %27 , 1 NEW_LINE store i32 %28 %3 NEW_LINE br label %17 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %3 ) NEW_LINE %9 = load double %5 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = fmul double %11 , 1.000000e+00 NEW_LINE %13 = fdiv double %12 , 1.800000e+02 NEW_LINE %14 = call double @atan ( double 1.000000e+00 ) #3 NEW_LINE %15 = fmul double %14 , 4.000000e+00 NEW_LINE %16 = fmul double %13 , %15 NEW_LINE %17 = call double @sin ( double %16 ) #3 NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = fadd double %9 , %20 NEW_LINE store double %21 %5 NEW_LINE %22 = load double %6 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %24 , 1.000000e+00 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @atan ( double 1.000000e+00 ) #3 NEW_LINE %28 = fmul double %27 , 4.000000e+00 NEW_LINE %29 = fmul double %26 , %28 NEW_LINE %30 = call double @cos ( double %29 ) #3 NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = fadd double %22 , %33 NEW_LINE store double %34 %6 NEW_LINE %35 = load i32 %2 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = add nsw i32 %35 , %36 NEW_LINE store i32 %37 %2 NEW_LINE br label %38 NEW_LINE 38: NEW_LINE %39 = load i32 %3 NEW_LINE %40 = icmp ne i32 %39 , 0 NEW_LINE br i1 %40 , label %44 , label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %4 NEW_LINE %43 = icmp ne i32 %42 , 0 NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = phi i1 ARR 2 true %38 , ARR 2 %43 %41 NEW_LINE br i1 %45 , label %7 , label %46 NEW_LINE 46: NEW_LINE %47 = load double %5 NEW_LINE %48 = fptosi double %47 to i32 NEW_LINE %49 = load double %6 NEW_LINE %50 = fptosi double %49 to i32 NEW_LINE %51 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %48 i32 %50 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE %11 = load double %2 NEW_LINE %12 = fcmp oeq double %11 , 0.000000e+00 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load double %3 NEW_LINE %15 = fcmp oeq double %14 , 0.000000e+00 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %37 NEW_LINE 17: NEW_LINE %18 = load double %2 NEW_LINE %19 = load double %4 NEW_LINE %20 = fmul double %19 , 0x400921FB53C8D4F1 NEW_LINE %21 = fdiv double %20 , 1.800000e+02 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %18 , %22 NEW_LINE %24 = load double %5 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %5 NEW_LINE %26 = load double %2 NEW_LINE %27 = load double %4 NEW_LINE %28 = fmul double %27 , 0x400921FB53C8D4F1 NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = fmul double %26 , %30 NEW_LINE %32 = load double %6 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %6 NEW_LINE %34 = load double %3 NEW_LINE %35 = load double %4 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %4 NEW_LINE br label %9 NEW_LINE 37: NEW_LINE %38 = load double %5 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE store i32 %39 %7 NEW_LINE %40 = load double %6 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE store i32 %41 %8 NEW_LINE %42 = load i32 %8 NEW_LINE %43 = load i32 %7 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %43 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local void @sort ( * i32 %0 ) #0 { NEW_LINE %2 = alloca * i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE store * i32 %0 %2 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %7 , 5 NEW_LINE br i1 %8 , label %9 , label %55 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 %4 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = icmp slt i32 %13 , 5 NEW_LINE br i1 %14 , label %15 , label %51 NEW_LINE 15: NEW_LINE %16 = load * i32 %2 NEW_LINE %17 = load i32 %3 NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds i32 %16 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = load * i32 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds i32 %21 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = icmp slt i32 %20 , %25 NEW_LINE br i1 %26 , label %27 , label %47 NEW_LINE 27: NEW_LINE %28 = load * i32 %2 NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds i32 %28 , i64 %30 NEW_LINE %32 = load i32 %31 NEW_LINE store i32 %32 %5 NEW_LINE %33 = load * i32 %2 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = sext i32 %34 to i64 NEW_LINE %36 = getelementptr inbounds i32 %33 , i64 %35 NEW_LINE %37 = load i32 %36 NEW_LINE %38 = load * i32 %2 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE %41 = getelementptr inbounds i32 %38 , i64 %40 NEW_LINE store i32 %37 %41 NEW_LINE %42 = load i32 %5 NEW_LINE %43 = load * i32 %2 NEW_LINE %44 = load i32 %3 NEW_LINE %45 = sext i32 %44 to i64 NEW_LINE %46 = getelementptr inbounds i32 %43 , i64 %45 NEW_LINE store i32 %42 %46 NEW_LINE br label %47 NEW_LINE 47: NEW_LINE br label %48 NEW_LINE 48: NEW_LINE %49 = load i32 %4 NEW_LINE %50 = add nsw i32 %49 , 1 NEW_LINE store i32 %50 %4 NEW_LINE br label %12 NEW_LINE 51: NEW_LINE br label %52 NEW_LINE 52: NEW_LINE %53 = load i32 %3 NEW_LINE %54 = add nsw i32 %53 , 1 NEW_LINE store i32 %54 %3 NEW_LINE br label %6 NEW_LINE 55: NEW_LINE ret void NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %10 NEW_LINE 9: NEW_LINE br label %26 NEW_LINE 10: NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = phi i32 ARR 2 1 %9 , ARR 2 %25 %10 NEW_LINE %28 = load i32 @i NEW_LINE %29 = add nsw i32 %28 , %27 NEW_LINE store i32 %29 @i NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br i1 %30 , label %31 , label %35 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 9.000000e+01 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %16 , label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = phi i1 ARR 2 true %10 , ARR 2 %15 %13 NEW_LINE br i1 %17 , label %18 , label %41 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load double %6 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = fmul double %22 , 0x400921FAFC8B007A NEW_LINE %24 = call double @sin ( double %23 ) #3 NEW_LINE %25 = fmul double %20 , %24 NEW_LINE %26 = load double %5 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %5 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load double %6 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = fmul double %31 , 0x400921FAFC8B007A NEW_LINE %33 = call double @cos ( double %32 ) #3 NEW_LINE %34 = fmul double %29 , %33 NEW_LINE %35 = load double %4 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %4 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = sitofp i32 %37 to double NEW_LINE %39 = load double %6 NEW_LINE %40 = fsub double %39 , %38 NEW_LINE store double %40 %6 NEW_LINE br label %7 NEW_LINE 41: NEW_LINE %42 = load double %4 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = load double %5 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %43 i32 %45 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %47 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = fdiv double %23 , 1.800000e+02 NEW_LINE %25 = call double @cos ( double %24 ) #3 NEW_LINE %26 = fmul double %19 , %25 NEW_LINE %27 = load double %7 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %4 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE %34 = fmul double %32 , %33 NEW_LINE %35 = fdiv double %34 , 1.800000e+02 NEW_LINE %36 = call double @sin ( double %35 ) #3 NEW_LINE %37 = fmul double %30 , %36 NEW_LINE %38 = load double %8 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %8 NEW_LINE %40 = load i32 %3 NEW_LINE %41 = load i32 %4 NEW_LINE %42 = sub nsw i32 %41 , %40 NEW_LINE store i32 %42 %4 NEW_LINE %43 = load double %7 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE store i32 %44 %5 NEW_LINE %45 = load double %8 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE store i32 %46 %6 NEW_LINE br label %9 NEW_LINE 47: NEW_LINE %48 = load i32 %5 NEW_LINE %49 = load i32 %6 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %48 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = icmp ne i32 %10 , -1 NEW_LINE br i1 %11 , label %12 , label %45 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %45 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE %26 = call double @cos ( double %25 ) #3 NEW_LINE %27 = fmul double %21 , %26 NEW_LINE store double %27 %7 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE store double %35 %8 NEW_LINE %36 = load double %5 NEW_LINE %37 = load double %7 NEW_LINE %38 = fadd double %36 , %37 NEW_LINE store double %38 %5 NEW_LINE %39 = load double %6 NEW_LINE %40 = load double %8 NEW_LINE %41 = fadd double %39 , %40 NEW_LINE store double %41 %6 NEW_LINE %42 = load i32 %4 NEW_LINE %43 = load i32 %3 NEW_LINE %44 = sub nsw i32 %42 , %43 NEW_LINE store i32 %44 %4 NEW_LINE br label %9 NEW_LINE 45: NEW_LINE %46 = load double %5 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = load double %6 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 ) #0 { NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %2 NEW_LINE store i32 %0 %3 NEW_LINE %4 = load i32 %3 NEW_LINE %5 = sext i32 %4 to i64 NEW_LINE %6 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 6 x i32 @a i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = sub nsw i32 %11 , 1 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 6 x i32 @a , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE %22 = call i32 @main ( i32 %21 ) NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %19 i32 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = xor i1 %24 , true NEW_LINE %26 = zext i1 %25 to i32 NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 6 x i32 @a i64 0 i64 1 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = phi i32 ARR 2 %26 %10 , ARR 2 %28 %27 NEW_LINE store i32 %30 @z NEW_LINE %31 = load i32 %2 NEW_LINE ret i32 %31 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sitofp i32 %8 to double NEW_LINE store double %9 %6 NEW_LINE %10 = load i32 %3 NEW_LINE store i32 %10 %4 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %19 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp eq i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %19 NEW_LINE 18: NEW_LINE br label %45 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE %26 = fsub double 0x3FF921FB54442D18 , %25 NEW_LINE %27 = call double @sin ( double %26 ) #3 NEW_LINE %28 = fmul double %21 , %27 NEW_LINE %29 = load double %6 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %6 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load i32 %4 NEW_LINE %34 = sitofp i32 %33 to double NEW_LINE %35 = fmul double %34 , 0x400921FB54442D18 NEW_LINE %36 = fdiv double %35 , 1.800000e+02 NEW_LINE %37 = fsub double 0x3FF921FB54442D18 , %36 NEW_LINE %38 = call double @cos ( double %37 ) #3 NEW_LINE %39 = fmul double %32 , %38 NEW_LINE %40 = load double %5 NEW_LINE %41 = fadd double %40 , %39 NEW_LINE store double %41 %5 NEW_LINE %42 = load i32 %3 NEW_LINE %43 = load i32 %4 NEW_LINE %44 = add nsw i32 %43 , %42 NEW_LINE store i32 %44 %4 NEW_LINE br label %11 NEW_LINE 45: NEW_LINE %46 = load double %5 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = load double %6 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca float NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE store i32 0 %1 NEW_LINE store float 0.000000e+00 %5 NEW_LINE store float 0.000000e+00 %6 NEW_LINE store float 9.000000e+01 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%f,%f~00" i64 0 i64 0 ) * float %2 * float %4 ) NEW_LINE %9 = load float %2 NEW_LINE %10 = fcmp oeq float %9 , 0.000000e+00 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load float %4 NEW_LINE %13 = fcmp oeq float %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %43 NEW_LINE 15: NEW_LINE %16 = load float %3 NEW_LINE %17 = fdiv float %16 , 1.800000e+02 NEW_LINE %18 = fpext float %17 to double NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE %20 = call double @sin ( double %19 ) #3 NEW_LINE %21 = load float %2 NEW_LINE %22 = fpext float %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load float %6 NEW_LINE %25 = fpext float %24 to double NEW_LINE %26 = fadd double %25 , %23 NEW_LINE %27 = fptrunc double %26 to float NEW_LINE store float %27 %6 NEW_LINE %28 = load float %3 NEW_LINE %29 = fdiv float %28 , 1.800000e+02 NEW_LINE %30 = fpext float %29 to double NEW_LINE %31 = fmul double %30 , 0x400921FB54442D18 NEW_LINE %32 = call double @cos ( double %31 ) #3 NEW_LINE %33 = load float %2 NEW_LINE %34 = fpext float %33 to double NEW_LINE %35 = fmul double %32 , %34 NEW_LINE %36 = load float %5 NEW_LINE %37 = fpext float %36 to double NEW_LINE %38 = fadd double %37 , %35 NEW_LINE %39 = fptrunc double %38 to float NEW_LINE store float %39 %5 NEW_LINE %40 = load float %4 NEW_LINE %41 = load float %3 NEW_LINE %42 = fsub float %41 , %40 NEW_LINE store float %42 %3 NEW_LINE br label %7 NEW_LINE 43: NEW_LINE %44 = load float %5 NEW_LINE %45 = fptosi float %44 to i32 NEW_LINE %46 = load float %6 NEW_LINE %47 = fptosi float %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca * i8 NEW_LINE %3 = alloca ARR 3 128 x i8 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 128 x i8 %3 , i64 0 , i64 0 NEW_LINE store * i8 %4 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load * i8 %2 NEW_LINE %7 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i8 ... ) ) ( * i8 %6 ) NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = inttoptr i64 %8 to * i8 NEW_LINE %10 = icmp ne * i8 %9 , null NEW_LINE br i1 %10 , label %11 , label %30 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load * i8 %2 NEW_LINE call void @caesar ( * i8 %13 ) NEW_LINE %14 = load * i8 %2 NEW_LINE %15 = call * i8 @strstr ( * i8 %14 * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:the~00" i64 0 i64 0 ) ) #3 NEW_LINE %16 = icmp ne * i8 %15 , null NEW_LINE br i1 %16 , label %25 , label %17 NEW_LINE 17: NEW_LINE %18 = load * i8 %2 NEW_LINE %19 = call * i8 @strstr ( * i8 %18 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:this~00" i64 0 i64 0 ) ) #3 NEW_LINE %20 = icmp ne * i8 %19 , null NEW_LINE br i1 %20 , label %25 , label %21 NEW_LINE 21: NEW_LINE %22 = load * i8 %2 NEW_LINE %23 = call * i8 @strstr ( * i8 %22 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:that~00" i64 0 i64 0 ) ) #3 NEW_LINE %24 = icmp ne * i8 %23 , null NEW_LINE br i1 %24 , label %25 , label %26 NEW_LINE 25: NEW_LINE br label %27 NEW_LINE 26: NEW_LINE br label %12 NEW_LINE 27: NEW_LINE %28 = load * i8 %2 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%s~0A~00" i64 0 i64 0 ) * i8 %28 ) NEW_LINE br label %5 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp ne i32 %26 , 4 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %2 NEW_LINE store i32 1 %3 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %13 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = phi i1 ARR 2 false %7 , ARR 2 %12 %10 NEW_LINE br i1 %14 , label %15 , label %43 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = call double @cos ( double %20 ) #3 NEW_LINE %22 = load i32 %2 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = fmul double %28 , 0x400921FB54442D18 NEW_LINE %30 = fdiv double %29 , 1.800000e+02 NEW_LINE %31 = call double @sin ( double %30 ) #3 NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sitofp i32 %32 to double NEW_LINE %34 = fmul double %31 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = mul nsw i32 %37 , -1 NEW_LINE store i32 %38 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = load i32 %3 NEW_LINE %41 = add nsw i32 %39 , %40 NEW_LINE %42 = srem i32 %41 , 360 NEW_LINE store i32 %42 %4 NEW_LINE br label %7 NEW_LINE 43: NEW_LINE %44 = load double %5 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = load double %6 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0x400921FB54411744 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store i32 90 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %15 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 true %8 , ARR 2 %14 %12 NEW_LINE br i1 %16 , label %17 , label %47 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load double %4 NEW_LINE %21 = fmul double 2.000000e+00 , %20 NEW_LINE %22 = load i32 %7 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %21 , %23 NEW_LINE %25 = fdiv double %24 , 3.600000e+02 NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %19 , %26 NEW_LINE %28 = load double %6 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %6 NEW_LINE %30 = load i32 %2 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = load double %4 NEW_LINE %33 = fmul double 2.000000e+00 , %32 NEW_LINE %34 = load i32 %7 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fmul double %33 , %35 NEW_LINE %37 = fdiv double %36 , 3.600000e+02 NEW_LINE %38 = call double @cos ( double %37 ) #3 NEW_LINE %39 = fmul double %31 , %38 NEW_LINE %40 = load double %5 NEW_LINE %41 = fadd double %40 , %39 NEW_LINE store double %41 %5 NEW_LINE %42 = load i32 %7 NEW_LINE %43 = load i32 %3 NEW_LINE %44 = sub nsw i32 %42 , %43 NEW_LINE %45 = add nsw i32 %44 , 360 NEW_LINE %46 = srem i32 %45 , 360 NEW_LINE store i32 %46 %7 NEW_LINE br label %8 NEW_LINE 47: NEW_LINE %48 = load double %5 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE %50 = load double %6 NEW_LINE %51 = fptosi double %50 to i32 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %49 i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @sort ) NEW_LINE store i32 0 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp slt i32 %19 , 4 NEW_LINE br i1 %20 , label %21 , label %30 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %3 NEW_LINE br label %18 NEW_LINE 30: NEW_LINE %31 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %32 = load i32 %31 NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %32 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @i NEW_LINE %12 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %11 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 @i NEW_LINE %17 = icmp ne i32 %15 , 0 NEW_LINE br i1 %17 , label %18 , label %31 NEW_LINE 18: NEW_LINE %19 = load i32 @i NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) NEW_LINE %23 = load i32 @i NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 %22 i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE %29 = xor i1 %28 , true NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE store i32 %30 @j NEW_LINE br label %14 NEW_LINE 31: NEW_LINE %32 = load i32 %1 NEW_LINE ret i32 %32 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @bubble_sort ( * i32 %16 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = icmp slt i32 %3 , 5 NEW_LINE br i1 %4 , label %5 , label %11 NEW_LINE 5: NEW_LINE %6 = load i32 @i NEW_LINE %7 = add nsw i32 %6 , 1 NEW_LINE store i32 %7 @i NEW_LINE %8 = sext i32 %6 to i64 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %9 ) NEW_LINE br label %2 NEW_LINE 11: NEW_LINE %12 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 5 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 @i NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 @i NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %23 NEW_LINE 17: NEW_LINE %18 = load i32 @i NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d ▁ ~00" i64 0 i64 0 ) i32 %21 ) NEW_LINE br label %13 NEW_LINE 23: NEW_LINE %24 = load i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = icmp ne i32 %25 , 0 NEW_LINE %27 = xor i1 %26 , true NEW_LINE %28 = zext i1 %27 to i32 NEW_LINE store i32 %28 @i NEW_LINE %29 = load i32 %1 NEW_LINE ret i32 %29 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp eq i32 %15 , 0 NEW_LINE br i1 %16 , label %17 , label %18 NEW_LINE 17: NEW_LINE br label %45 NEW_LINE 18: NEW_LINE %19 = call double @acos ( double -1.000000e+00 ) #3 NEW_LINE store double %19 %9 NEW_LINE %20 = load i32 %2 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = load double %9 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = fmul double %22 , %24 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = fmul double %21 , %27 NEW_LINE %29 = load double %7 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %7 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = load double %9 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = sitofp i32 %34 to double NEW_LINE %36 = fmul double %33 , %35 NEW_LINE %37 = fdiv double %36 , 1.800000e+02 NEW_LINE %38 = call double @sin ( double %37 ) #3 NEW_LINE %39 = fmul double %32 , %38 NEW_LINE %40 = load double %8 NEW_LINE %41 = fadd double %40 , %39 NEW_LINE store double %41 %8 NEW_LINE %42 = load i32 %3 NEW_LINE %43 = load i32 %6 NEW_LINE %44 = sub nsw i32 %43 , %42 NEW_LINE store i32 %44 %6 NEW_LINE br label %10 NEW_LINE 45: NEW_LINE %46 = load double %7 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE store i32 %47 %4 NEW_LINE %48 = load double %8 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE store i32 %49 %5 NEW_LINE %50 = load i32 %4 NEW_LINE %51 = load i32 %5 NEW_LINE %52 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %50 i32 %51 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %38 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = load i32 %5 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE %18 = load i32 %5 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %5 NEW_LINE br label %37 NEW_LINE 20: NEW_LINE %21 = load i32 %5 NEW_LINE %22 = add nsw i32 %21 , -1 NEW_LINE store i32 %22 %5 NEW_LINE %23 = load i32 %5 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load i32 %6 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %31 NEW_LINE %33 = load i32 %32 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %33 ) NEW_LINE %35 = load i32 %6 NEW_LINE %36 = add nsw i32 %35 , 1 NEW_LINE store i32 %36 %6 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE br label %7 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @bubblesort ( * i32 %16 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp ne i32 %26 , 4 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 1 x i8 @.str.2 i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %6 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp ne i32 %10 , 0 NEW_LINE br i1 %11 , label %15 , label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 true %9 , ARR 2 %14 %12 NEW_LINE br i1 %16 , label %17 , label %42 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = fmul double %22 , 0x400921FB54442D18 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %2 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %2 NEW_LINE %28 = load i32 %4 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %6 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = fmul double %32 , 0x400921FB54442D18 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %3 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %3 NEW_LINE %38 = load i32 %5 NEW_LINE %39 = load i32 %6 NEW_LINE %40 = sub nsw i32 %39 , %38 NEW_LINE store i32 %40 %6 NEW_LINE %41 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE br label %9 NEW_LINE 42: NEW_LINE %43 = load double %2 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = load double %3 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %44 i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %4 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %4 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %43 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = call double @asin ( double 1.000000e+00 ) #3 NEW_LINE %23 = fmul double %21 , %22 NEW_LINE %24 = fdiv double %23 , 9.000000e+01 NEW_LINE %25 = call double @sin ( double %24 ) #3 NEW_LINE %26 = fmul double %19 , %25 NEW_LINE %27 = load double %7 NEW_LINE %28 = fadd double %27 , %26 NEW_LINE store double %28 %7 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load i32 %3 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = call double @asin ( double 1.000000e+00 ) #3 NEW_LINE %34 = fmul double %32 , %33 NEW_LINE %35 = fdiv double %34 , 9.000000e+01 NEW_LINE %36 = call double @cos ( double %35 ) #3 NEW_LINE %37 = fmul double %30 , %36 NEW_LINE %38 = load double %8 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %8 NEW_LINE %40 = load i32 %4 NEW_LINE %41 = load i32 %3 NEW_LINE %42 = add nsw i32 %41 , %40 NEW_LINE store i32 %42 %3 NEW_LINE br label %9 NEW_LINE 43: NEW_LINE %44 = load double %7 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE store i32 %45 %5 NEW_LINE %46 = load double %8 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE store i32 %47 %6 NEW_LINE %48 = load i32 %5 NEW_LINE %49 = load i32 %6 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %48 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %41 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @n_<<unk>> NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %35 NEW_LINE 16: NEW_LINE %17 = load i32 @n_<<unk>> NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1000000 x i32 bitcast ( * STRUCT 4 i32 i32 i32 ARR 3 999997 x i32 @k_operafan to * ARR 3 1000000 x i32 ) , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @n_<<unk>> NEW_LINE %23 = call i32 @isPrime ( i32 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = xor i1 %24 , true NEW_LINE %26 = xor i1 %25 , true NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = add nsw i32 %21 , %27 NEW_LINE %29 = load i32 @n_<<unk>> NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i32 bitcast ( * STRUCT 4 i32 i32 i32 ARR 3 999997 x i32 @k_operafan to * ARR 3 1000000 x i32 ) , i64 0 , i64 %30 NEW_LINE store i32 %28 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @n_<<unk>> NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 @n_<<unk>> NEW_LINE br label %12 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 1000000 x i32 bitcast ( * STRUCT 4 i32 i32 i32 ARR 3 999997 x i32 @k_operafan to * ARR 3 1000000 x i32 ) , i64 0 , i64 %37 NEW_LINE %39 = load i32 %38 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE br label %7 NEW_LINE 41: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0x3FF921FB54442D18 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %36 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %6 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %17 , %19 NEW_LINE %21 = load double %4 NEW_LINE %22 = fadd double %21 , %20 NEW_LINE store double %22 %4 NEW_LINE %23 = load i32 %2 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %6 NEW_LINE %26 = call double @sin ( double %25 ) #3 NEW_LINE %27 = fmul double %24 , %26 NEW_LINE %28 = load double %5 NEW_LINE %29 = fadd double %28 , %27 NEW_LINE store double %29 %5 NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = fmul double %32 , 0x400921FB54442D18 NEW_LINE %34 = load double %6 NEW_LINE %35 = fsub double %34 , %33 NEW_LINE store double %35 %6 NEW_LINE br label %7 NEW_LINE 36: NEW_LINE %37 = load double %4 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %38 ) NEW_LINE %40 = load double %5 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 0 %3 NEW_LINE store i32 90 %4 NEW_LINE store i32 0 %5 NEW_LINE store i32 0 %6 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %8 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %11 = load i32 %2 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %17 NEW_LINE 13: NEW_LINE %14 = load i32 %3 NEW_LINE %15 = icmp eq i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %17 NEW_LINE 16: NEW_LINE br label %41 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = sitofp i32 %18 to double NEW_LINE %20 = load i32 %4 NEW_LINE %21 = sitofp i32 %20 to double NEW_LINE %22 = fmul double %21 , 0x400921FB54442D18 NEW_LINE %23 = fdiv double %22 , 1.800000e+02 NEW_LINE %24 = call double @cos ( double %23 ) #3 NEW_LINE %25 = fmul double %19 , %24 NEW_LINE %26 = load double %7 NEW_LINE %27 = fadd double %26 , %25 NEW_LINE store double %27 %7 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = load i32 %4 NEW_LINE %31 = sitofp i32 %30 to double NEW_LINE %32 = fmul double %31 , 0x400921FB54442D18 NEW_LINE %33 = fdiv double %32 , 1.800000e+02 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = fmul double %29 , %34 NEW_LINE %36 = load double %8 NEW_LINE %37 = fadd double %36 , %35 NEW_LINE store double %37 %8 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = load i32 %4 NEW_LINE %40 = sub nsw i32 %39 , %38 NEW_LINE store i32 %40 %4 NEW_LINE br label %9 NEW_LINE 41: NEW_LINE %42 = load double %7 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE store i32 %43 %5 NEW_LINE %44 = load double %8 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE store i32 %45 %6 NEW_LINE %46 = load i32 %5 NEW_LINE %47 = load i32 %6 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %46 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 5 x i32 NEW_LINE %7 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE store i32 0 %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %7 NEW_LINE %10 = icmp slt i32 %9 , 5 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %7 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %7 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %7 NEW_LINE br label %8 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %21 = bitcast * i32 %20 to * i8 NEW_LINE call void @qsort ( * i8 %21 i64 5 i64 4 i32 * ( * i8 * i8 ) @cmp_func ) NEW_LINE store i32 0 %7 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %7 NEW_LINE %24 = icmp slt i32 %23 , 5 NEW_LINE br i1 %24 , label %25 , label %38 NEW_LINE 25: NEW_LINE %26 = load i32 %7 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = load i32 %7 NEW_LINE %31 = icmp ne i32 %30 , 4 NEW_LINE %32 = zext i1 %31 to i64 NEW_LINE %33 = select i1 %31 , i32 32 , i32 10 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%c~00" i64 0 i64 0 ) i32 %29 i32 %33 ) NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %7 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %7 NEW_LINE br label %22 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %6 = getelementptr inbounds i32 %5 , i64 1 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds i32 %7 , i64 2 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = getelementptr inbounds i32 %9 , i64 3 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds i32 %11 , i64 4 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 * i32 %8 * i32 %10 * i32 %12 ) NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %15 = bitcast * i32 %14 to * i8 NEW_LINE call void @qsort ( * i8 %15 i64 5 i64 4 i32 * ( * i8 * i8 ) @si ) NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %17 i32 %19 i32 %21 i32 %23 i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %6 = getelementptr inbounds i32 %5 , i64 1 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds i32 %7 , i64 2 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = getelementptr inbounds i32 %9 , i64 3 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds i32 %11 , i64 4 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 11 x i8 @".str:%d%d%d%d%d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 * i32 %8 * i32 %10 * i32 %12 ) NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @ssort ( * i32 %14 i32 0 i32 4 ) NEW_LINE store i32 0 %3 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = icmp sle i32 %16 , 3 NEW_LINE br i1 %17 , label %18 , label %27 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = sext i32 %19 to i64 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %20 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %3 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %3 NEW_LINE br label %15 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 100 x i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 0 %4 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %4 NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp sle i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %20 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = add nsw i32 %12 , 1 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %4 NEW_LINE br label %7 NEW_LINE 20: NEW_LINE store i32 0 %4 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = load i32 %3 NEW_LINE %24 = icmp slt i32 %22 , %23 NEW_LINE br i1 %24 , label %25 , label %31 NEW_LINE 25: NEW_LINE %26 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 0 NEW_LINE %27 = call i32 @change ( * i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = load i32 %4 NEW_LINE %30 = add nsw i32 %29 , 1 NEW_LINE store i32 %30 %4 NEW_LINE br label %21 NEW_LINE 31: NEW_LINE store i32 0 %4 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %4 NEW_LINE %34 = load i32 %2 NEW_LINE %35 = icmp slt i32 %33 , %34 NEW_LINE br i1 %35 , label %36 , label %45 NEW_LINE 36: NEW_LINE %37 = load i32 %4 NEW_LINE %38 = sext i32 %37 to i64 NEW_LINE %39 = getelementptr inbounds ARR 3 100 x i32 %5 , i64 0 , i64 %38 NEW_LINE %40 = load i32 %39 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %40 ) NEW_LINE br label %42 NEW_LINE 42: NEW_LINE %43 = load i32 %4 NEW_LINE %44 = add nsw i32 %43 , 1 NEW_LINE store i32 %44 %4 NEW_LINE br label %32 NEW_LINE 45: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %13 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = add nsw i32 %8 , 1 NEW_LINE store i32 %9 %3 NEW_LINE %10 = sext i32 %8 to i64 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %10 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %11 ) NEW_LINE br label %4 NEW_LINE 13: NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %15 = bitcast * i32 %14 to * i8 NEW_LINE call void @qsort ( * i8 %15 i64 5 i64 4 i32 * ( * i8 * i8 ) @comp ) NEW_LINE store i32 0 %3 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %3 NEW_LINE %18 = icmp slt i32 %17 , 5 NEW_LINE br i1 %18 , label %19 , label %31 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE %22 = sext i32 %20 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp ne i32 %26 , 5 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %16 NEW_LINE 31: NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 5 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = add nsw i32 %5 , -1 NEW_LINE store i32 %6 %2 NEW_LINE %7 = icmp ne i32 %5 , 0 NEW_LINE br i1 %7 , label %8 , label %15 NEW_LINE 8: NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %11 = load i32 %2 NEW_LINE %12 = sext i32 %11 to i64 NEW_LINE %13 = getelementptr inbounds i32 %10 , i64 %12 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %13 ) NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @compare ) NEW_LINE store i32 5 %2 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %2 NEW_LINE %20 = add nsw i32 %19 , -1 NEW_LINE store i32 %20 %2 NEW_LINE %21 = icmp sgt i32 %19 , 1 NEW_LINE br i1 %21 , label %22 , label %29 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %18 NEW_LINE 29: NEW_LINE %30 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca ARR 3 500000 x i64 NEW_LINE %5 = alloca i64 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %3 NEW_LINE store i64 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = icmp slt i64 %7 , 1000000 NEW_LINE br i1 %8 , label %9 , label %23 NEW_LINE 9: NEW_LINE %10 = load i64 %2 NEW_LINE %11 = call i32 @judgeprime ( i64 %10 ) NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %19 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE %15 = load i64 %3 NEW_LINE %16 = getelementptr inbounds ARR 3 500000 x i64 %4 , i64 0 , i64 %15 NEW_LINE store i64 %14 %16 NEW_LINE %17 = load i64 %3 NEW_LINE %18 = add nsw i64 %17 , 1 NEW_LINE store i64 %18 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i64 %2 NEW_LINE %22 = add nsw i64 %21 , 1 NEW_LINE store i64 %22 %2 NEW_LINE br label %6 NEW_LINE 23: NEW_LINE %24 = load i64 %3 NEW_LINE %25 = getelementptr inbounds ARR 3 500000 x i64 %4 , i64 0 , i64 %24 NEW_LINE store i64 1000001 %25 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %5 ) NEW_LINE %28 = icmp ne i32 %27 , -1 NEW_LINE br i1 %28 , label %29 , label %49 NEW_LINE 29: NEW_LINE store i64 0 %2 NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i64 %2 NEW_LINE %32 = load i64 %3 NEW_LINE %33 = add nsw i64 %32 , 1 NEW_LINE %34 = icmp slt i64 %31 , %33 NEW_LINE br i1 %34 , label %35 , label %46 NEW_LINE 35: NEW_LINE %36 = load i64 %2 NEW_LINE %37 = getelementptr inbounds ARR 3 500000 x i64 %4 , i64 0 , i64 %36 NEW_LINE %38 = load i64 %37 NEW_LINE %39 = load i64 %5 NEW_LINE %40 = icmp sgt i64 %38 , %39 NEW_LINE br i1 %40 , label %41 , label %42 NEW_LINE 41: NEW_LINE br label %46 NEW_LINE 42: NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i64 %2 NEW_LINE %45 = add nsw i64 %44 , 1 NEW_LINE store i64 %45 %2 NEW_LINE br label %30 NEW_LINE 46: NEW_LINE %47 = load i64 %2 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %47 ) NEW_LINE br label %26 NEW_LINE 49: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %3 * i32 %2 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %41 NEW_LINE 15: NEW_LINE %16 = load i32 %3 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = load double %4 NEW_LINE %19 = fmul double %18 , 0x400921FB54442D18 NEW_LINE %20 = fdiv double %19 , 1.800000e+02 NEW_LINE %21 = fneg double %20 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %17 , %22 NEW_LINE %24 = load double %6 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %6 NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sub nsw i32 0 , %26 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load double %4 NEW_LINE %30 = fmul double %29 , 0x400921FB54442D18 NEW_LINE %31 = fdiv double %30 , 1.800000e+02 NEW_LINE %32 = fneg double %31 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %5 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %5 NEW_LINE %37 = load i32 %2 NEW_LINE %38 = sitofp i32 %37 to double NEW_LINE %39 = load double %4 NEW_LINE %40 = fadd double %39 , %38 NEW_LINE store double %40 %4 NEW_LINE br label %7 NEW_LINE 41: NEW_LINE %42 = load double %5 NEW_LINE %43 = fptosi double %42 to i32 NEW_LINE %44 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %43 ) NEW_LINE %45 = load double %6 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE %47 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %46 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE %12 = alloca double NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %13 = call i32 @getchar ( ) NEW_LINE %14 = sub nsw i32 %13 , 48 NEW_LINE store i32 %14 %6 NEW_LINE call void @init ( ) NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = icmp sgt i32 %16 , 0 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 24 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %7 * double %8 * double %9 * double %10 * double %11 * double %12 ) NEW_LINE %20 = load double %7 NEW_LINE %21 = load double %8 NEW_LINE %22 = load double %9 NEW_LINE %23 = load double %10 NEW_LINE %24 = load double %11 NEW_LINE %25 = load double %12 NEW_LINE call void @calc ( double %20 double %21 double %22 double %23 double %24 double %25 ) NEW_LINE %26 = load double @xr NEW_LINE %27 = load double @yr NEW_LINE %28 = load double @r NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%.3f ▁ %.3f ▁ %.3f~0A~00" i64 0 i64 0 ) double %26 double %27 double %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %6 NEW_LINE %32 = add nsw i32 %31 , -1 NEW_LINE store i32 %32 %6 NEW_LINE br label %15 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @j NEW_LINE %4 = add nsw i32 %3 , 1 NEW_LINE store i32 %4 @j NEW_LINE %5 = sext i32 %3 to i64 NEW_LINE %6 = getelementptr inbounds float getelementptr inbounds ( ARR 3 8 x float @c i64 0 i64 0 ) , i64 %5 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%f~00" i64 0 i64 0 ) * float %6 ) NEW_LINE %8 = xor i32 %7 , -1 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %34 NEW_LINE 10: NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 @j NEW_LINE %13 = srem i32 %12 , 8 NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %31 , label %15 NEW_LINE 15: NEW_LINE store i32 0 @j NEW_LINE %16 = call i32 @f ( i32 0 ) NEW_LINE %17 = call i32 @f ( i32 2 ) NEW_LINE %18 = mul nsw i32 %16 , %17 NEW_LINE %19 = icmp sgt i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %25 NEW_LINE 20: NEW_LINE %21 = call i32 @f ( i32 2 ) NEW_LINE %22 = call i32 @f ( i32 4 ) NEW_LINE %23 = mul nsw i32 %21 , %22 NEW_LINE %24 = icmp sgt i32 %23 , 0 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = phi i1 ARR 2 false %15 , ARR 2 %24 %20 NEW_LINE %27 = zext i1 %26 to i64 NEW_LINE %28 = select i1 %26 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) NEW_LINE %29 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @puts to i32 * ( * i8 ... ) ) ( * i8 %28 ) NEW_LINE %30 = icmp ne i32 %29 , 0 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = phi i1 ARR 2 true %11 , ARR 2 %30 %25 NEW_LINE %33 = zext i1 %32 to i32 NEW_LINE br label %2 NEW_LINE 34: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = call i64 @time ( * i64 null ) #3 NEW_LINE %5 = trunc i64 %4 to i32 NEW_LINE call void @srand ( i32 %5 ) #3 NEW_LINE store i32 0 %3 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %7 , 5 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i32 %3 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %11 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %12 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %3 NEW_LINE br label %6 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @bogo ( * i32 %18 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = icmp slt i32 %20 , 5 NEW_LINE br i1 %21 , label %22 , label %38 NEW_LINE 22: NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) i32 %26 ) NEW_LINE %28 = load i32 %3 NEW_LINE %29 = icmp ne i32 %28 , 4 NEW_LINE br i1 %29 , label %30 , label %32 NEW_LINE 30: NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %34 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.3:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %34 NEW_LINE 34: NEW_LINE br label %35 NEW_LINE 35: NEW_LINE %36 = load i32 %3 NEW_LINE %37 = add nsw i32 %36 , 1 NEW_LINE store i32 %37 %3 NEW_LINE br label %19 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = load i32 %6 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %19 NEW_LINE 13: NEW_LINE %14 = load i32 %6 NEW_LINE %15 = load i32 %4 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %4 NEW_LINE %17 = sext i32 %15 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 100000 x i32 @stack , i64 0 , i64 %17 NEW_LINE store i32 %14 %18 NEW_LINE br label %29 NEW_LINE 19: NEW_LINE %20 = load i32 %4 NEW_LINE %21 = add nsw i32 %20 , -1 NEW_LINE store i32 %21 %4 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 100000 x i32 @stack , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %5 NEW_LINE %27 = sext i32 %25 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 100000 x i32 @pop , i64 0 , i64 %27 NEW_LINE store i32 %24 %28 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %7 NEW_LINE 30: NEW_LINE store i32 0 %2 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = icmp slt i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %44 NEW_LINE 35: NEW_LINE %36 = load i32 %2 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 100000 x i32 @pop , i64 0 , i64 %37 NEW_LINE %39 = load i32 %38 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %2 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %2 NEW_LINE br label %31 NEW_LINE 44: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @BubbleSort ( * i32 %16 i32 5 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE store i32 1 %2 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = icmp slt i32 %21 , 5 NEW_LINE br i1 %22 , label %23 , label %32 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = sext i32 %24 to i64 NEW_LINE %26 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %25 NEW_LINE %27 = load i32 %26 NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1: ▁ %d~00" i64 0 i64 0 ) i32 %27 ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %20 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @bubble_sort ( * i32 %16 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %36 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp eq i32 %26 , 4 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %32 NEW_LINE 30: NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %3 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %3 NEW_LINE br label %17 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca STRUCT 2 double double NEW_LINE %3 = alloca STRUCT 2 double double NEW_LINE %4 = alloca STRUCT 2 double double NEW_LINE %5 = alloca STRUCT 2 double double NEW_LINE store i32 0 %1 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = getelementptr inbounds STRUCT 2 double double %2 , i32 0 , i32 0 NEW_LINE %8 = getelementptr inbounds STRUCT 2 double double %2 , i32 0 , i32 1 NEW_LINE %9 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 0 NEW_LINE %10 = getelementptr inbounds STRUCT 2 double double %3 , i32 0 , i32 1 NEW_LINE %11 = getelementptr inbounds STRUCT 2 double double %4 , i32 0 , i32 0 NEW_LINE %12 = getelementptr inbounds STRUCT 2 double double %4 , i32 0 , i32 1 NEW_LINE %13 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 0 NEW_LINE %14 = getelementptr inbounds STRUCT 2 double double %5 , i32 0 , i32 1 NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 32 x i8 @".str:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %7 * double %8 * double %9 * double %10 * double %11 * double %12 * double %13 * double %14 ) NEW_LINE %16 = icmp ne i32 %15 , -1 NEW_LINE br i1 %16 , label %17 , label %25 NEW_LINE 17: NEW_LINE %18 = call i32 @contains ( * STRUCT 2 double double %2 * STRUCT 2 double double %3 * STRUCT 2 double double %4 * STRUCT 2 double double %5 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %22 NEW_LINE 20: NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:YES~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 22: NEW_LINE %23 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:NO~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %6 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE call void @BubbleSort ( * i32 %16 ) NEW_LINE store i32 0 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %36 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %2 NEW_LINE %27 = icmp ne i32 %26 , 4 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %32 NEW_LINE 30: NEW_LINE %31 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %33 NEW_LINE 33: NEW_LINE %34 = load i32 %2 NEW_LINE %35 = add nsw i32 %34 , 1 NEW_LINE store i32 %35 %2 NEW_LINE br label %17 NEW_LINE 36: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 1000000 x i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = bitcast * ARR 3 1000000 x i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 4000000 i1 false ) NEW_LINE store i32 0 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp slt i32 %8 , 1000000 NEW_LINE br i1 %9 , label %10 , label %22 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = call i32 @find ( i32 %11 ) NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 1000000 x i32 %5 , i64 0 , i64 %16 NEW_LINE store i32 1 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE br label %7 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %25 = icmp ne i32 %24 , -1 NEW_LINE br i1 %25 , label %26 , label %47 NEW_LINE 26: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = load i32 %3 NEW_LINE %30 = icmp sle i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 1000000 x i32 %5 , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = icmp ne i32 %35 , 0 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load i32 %4 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %4 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %2 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %2 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %4 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE br label %23 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 i32 5 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE br i1 %22 , label %23 , label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 81 x i8 NEW_LINE %3 = alloca i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %4 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %7 = call i32 ( * i8 ... ) bitcast ( i32 * ( ... ) @gets to i32 * ( * i8 ... ) ) ( * i8 %6 ) NEW_LINE %8 = sext i32 %7 to i64 NEW_LINE %9 = inttoptr i64 %8 to * i8 NEW_LINE %10 = icmp ne * i8 %9 , null NEW_LINE br i1 %10 , label %11 , label %28 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %14 = call i32 @search ( * i8 %13 * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:the~00" i64 0 i64 0 ) ) NEW_LINE %15 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = call i32 @search ( * i8 %15 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:this~00" i64 0 i64 0 ) ) NEW_LINE %17 = add nsw i32 %14 , %16 NEW_LINE %18 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %19 = call i32 @search ( * i8 %18 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:that~00" i64 0 i64 0 ) ) NEW_LINE %20 = add nsw i32 %17 , %19 NEW_LINE %21 = icmp eq i32 %20 , 0 NEW_LINE br i1 %21 , label %22 , label %25 NEW_LINE 22: NEW_LINE %23 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %24 = call i32 @bshift ( * i8 %23 ) NEW_LINE br label %12 NEW_LINE 25: NEW_LINE %26 = getelementptr inbounds ARR 3 81 x i8 %2 , i64 0 , i64 0 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%s~0A~00" i64 0 i64 0 ) * i8 %26 ) NEW_LINE br label %5 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %9 , label %13 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = add nsw i32 %10 , 1 NEW_LINE store i32 %11 @i NEW_LINE %12 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %11 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.1:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 13: NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 @i NEW_LINE %16 = add nsw i32 %15 , -1 NEW_LINE store i32 %16 @i NEW_LINE %17 = icmp ne i32 %15 , 0 NEW_LINE br i1 %17 , label %18 , label %33 NEW_LINE 18: NEW_LINE %19 = load i32 @i NEW_LINE %20 = icmp ne i32 %19 , 0 NEW_LINE %21 = zext i1 %20 to i64 NEW_LINE %22 = select i1 %20 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.3:%d~0A~00" i64 0 i64 0 ) NEW_LINE %23 = load i32 @i NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 %22 i32 %26 ) NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE %29 = xor i1 %28 , true NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE %31 = load i32 @i NEW_LINE %32 = add nsw i32 %31 , %30 NEW_LINE store i32 %32 @i NEW_LINE br label %14 NEW_LINE 33: NEW_LINE %34 = load i32 %1 NEW_LINE ret i32 %34 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %5 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %6 = getelementptr inbounds i32 %5 , i64 1 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds i32 %7 , i64 2 NEW_LINE %9 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %10 = getelementptr inbounds i32 %9 , i64 3 NEW_LINE %11 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds i32 %11 , i64 4 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 * i32 %8 * i32 %10 * i32 %12 ) NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %15 = call i32 ( * i32 i32 i64 i32 * ( * i8 * i8 ) ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i64 i32 * ( * i8 * i8 ) ... ) ) ( * i32 %14 i32 5 i64 4 i32 * ( * i8 * i8 ) @compr ) NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = load i32 %16 NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %17 i32 %19 i32 %21 i32 %23 i32 %25 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fdiv double %15 , 1.800000e+02 NEW_LINE %17 = fmul double %16 , 0x400921FB54442D18 NEW_LINE %18 = call double @cos ( double %17 ) #3 NEW_LINE %19 = fmul double %13 , %18 NEW_LINE %20 = load double %2 NEW_LINE %21 = fsub double %20 , %19 NEW_LINE store double %21 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = fmul double %26 , 0x400921FB54442D18 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %23 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE %32 = load i32 %6 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , %32 NEW_LINE store i32 %34 %5 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %2 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %3 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %14 NEW_LINE 7: NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %2 NEW_LINE %10 = add nsw i32 %9 , 1 NEW_LINE store i32 %10 %2 NEW_LINE %11 = sext i32 %9 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %11 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %12 ) NEW_LINE br label %4 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %16 = bitcast * i32 %15 to * i8 NEW_LINE call void @qsort ( * i8 %16 i64 5 i64 4 i32 * ( * i8 * i8 ) @comp ) NEW_LINE store i32 0 %2 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %2 NEW_LINE %19 = icmp slt i32 %18 , 5 NEW_LINE br i1 %19 , label %20 , label %35 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = add nsw i32 %22 , 1 NEW_LINE store i32 %23 %2 NEW_LINE %24 = sext i32 %22 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = xor i32 %27 , -1 NEW_LINE %29 = sub nsw i32 0 , %28 NEW_LINE %30 = sub nsw i32 %29 , 5 NEW_LINE %31 = icmp ne i32 %30 , 0 NEW_LINE %32 = zext i1 %31 to i64 NEW_LINE %33 = select i1 %31 , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2: ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.3:~0A~00" i64 0 i64 0 ) NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d%s~00" i64 0 i64 0 ) i32 %26 * i8 %33 ) NEW_LINE br label %17 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %2 NEW_LINE %6 = icmp sle i32 %5 , 4 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %2 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %2 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @compar ) NEW_LINE %18 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 0 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %19 ) NEW_LINE store i32 1 %2 NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %2 NEW_LINE %23 = icmp sle i32 %22 , 4 NEW_LINE br i1 %23 , label %24 , label %33 NEW_LINE 24: NEW_LINE %25 = load i32 %2 NEW_LINE %26 = sext i32 %25 to i64 NEW_LINE %27 = getelementptr inbounds ARR 3 5 x i32 %3 , i64 0 , i64 %26 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1: ▁ %d~00" i64 0 i64 0 ) i32 %28 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %2 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %2 NEW_LINE br label %21 NEW_LINE 33: NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store i32 90 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %9 = load i32 %2 NEW_LINE %10 = icmp eq i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %15 NEW_LINE 11: NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp eq i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %39 NEW_LINE 15: NEW_LINE %16 = load i32 %6 NEW_LINE %17 = sitofp i32 %16 to double NEW_LINE %18 = fmul double %17 , 0x400921FAFC8B007A NEW_LINE %19 = fdiv double %18 , 1.800000e+02 NEW_LINE %20 = call double @cos ( double %19 ) #3 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %4 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %4 NEW_LINE %26 = load i32 %6 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = fmul double %27 , 0x400921FAFC8B007A NEW_LINE %29 = fdiv double %28 , 1.800000e+02 NEW_LINE %30 = call double @sin ( double %29 ) #3 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sitofp i32 %31 to double NEW_LINE %33 = fmul double %30 , %32 NEW_LINE %34 = load double %5 NEW_LINE %35 = fadd double %34 , %33 NEW_LINE store double %35 %5 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = load i32 %6 NEW_LINE %38 = sub nsw i32 %37 , %36 NEW_LINE store i32 %38 %6 NEW_LINE br label %7 NEW_LINE 39: NEW_LINE %40 = load double %4 NEW_LINE %41 = fptosi double %40 to i32 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE %43 = load double %5 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca ARR 3 1000000 x i32 NEW_LINE store i32 0 %1 NEW_LINE %6 = bitcast * ARR 3 1000000 x i32 %5 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %6 i8 0 i64 4000000 i1 false ) NEW_LINE store i32 1 %3 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = icmp slt i32 %8 , 1000000 NEW_LINE br i1 %9 , label %10 , label %22 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = call i32 @IsPrime ( i32 %11 ) NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %14 , label %18 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 1000000 x i32 %5 , i64 0 , i64 %16 NEW_LINE store i32 1 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %3 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %3 NEW_LINE br label %7 NEW_LINE 22: NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %25 = icmp ne i32 %24 , -1 NEW_LINE br i1 %25 , label %26 , label %47 NEW_LINE 26: NEW_LINE store i32 0 %4 NEW_LINE store i32 1 %3 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %3 NEW_LINE %29 = load i32 %2 NEW_LINE %30 = icmp sle i32 %28 , %29 NEW_LINE br i1 %30 , label %31 , label %44 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = sext i32 %32 to i64 NEW_LINE %34 = getelementptr inbounds ARR 3 1000000 x i32 %5 , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = icmp eq i32 %35 , 1 NEW_LINE br i1 %36 , label %37 , label %40 NEW_LINE 37: NEW_LINE %38 = load i32 %4 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %4 NEW_LINE br label %40 NEW_LINE 40: NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %3 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %3 NEW_LINE br label %27 NEW_LINE 44: NEW_LINE %45 = load i32 %4 NEW_LINE %46 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %45 ) NEW_LINE br label %23 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca ARR 3 2 x double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store double 0.000000e+00 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE %7 = bitcast * ARR 3 2 x double %6 to * i8 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %7 i8 0 i64 16 i1 false ) NEW_LINE store double 9.000000e+01 %4 NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load double %2 NEW_LINE %11 = fcmp une double 0.000000e+00 , %10 NEW_LINE br i1 %11 , label %15 , label %12 NEW_LINE 12: NEW_LINE %13 = load double %3 NEW_LINE %14 = fcmp une double 0.000000e+00 , %13 NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = phi i1 ARR 2 true %9 , ARR 2 %14 %12 NEW_LINE br i1 %16 , label %17 , label %36 NEW_LINE 17: NEW_LINE %18 = load double %4 NEW_LINE %19 = call double @func_cal_rad ( double %18 ) NEW_LINE store double %19 %5 NEW_LINE %20 = load double %2 NEW_LINE %21 = load double %5 NEW_LINE %22 = getelementptr inbounds ARR 3 2 x double %6 , i64 0 , i64 0 NEW_LINE %23 = load double %22 NEW_LINE %24 = call double @func_cal_x ( double %20 double %21 double %23 ) NEW_LINE %25 = getelementptr inbounds ARR 3 2 x double %6 , i64 0 , i64 0 NEW_LINE store double %24 %25 NEW_LINE %26 = load double %2 NEW_LINE %27 = load double %5 NEW_LINE %28 = getelementptr inbounds ARR 3 2 x double %6 , i64 0 , i64 1 NEW_LINE %29 = load double %28 NEW_LINE %30 = call double @func_cal_y ( double %26 double %27 double %29 ) NEW_LINE %31 = getelementptr inbounds ARR 3 2 x double %6 , i64 0 , i64 1 NEW_LINE store double %30 %31 NEW_LINE %32 = load double %3 NEW_LINE %33 = load double %4 NEW_LINE %34 = fsub double %33 , %32 NEW_LINE store double %34 %4 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE %35 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %2 * double %3 ) NEW_LINE br label %9 NEW_LINE 36: NEW_LINE %37 = getelementptr inbounds ARR 3 2 x double %6 , i64 0 , i64 0 NEW_LINE call void @func_output ( * double %37 i32 2 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 2 getelementptr inbounds ( ARR 3 500000 x i32 @prime i64 0 i64 0 ) NEW_LINE store i32 3 getelementptr inbounds ( ARR 3 500000 x i32 @prime i64 0 i64 1 ) NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %6 = icmp ne i32 %5 , -1 NEW_LINE br i1 %6 , label %7 , label %38 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 @num_prime NEW_LINE %10 = sub nsw i32 %9 , 1 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 500000 x i32 @prime , i64 0 , i64 %11 NEW_LINE %13 = load i32 %12 NEW_LINE %14 = icmp sgt i32 %8 , %13 NEW_LINE br i1 %14 , label %15 , label %20 NEW_LINE 15: NEW_LINE %16 = load i32 %2 NEW_LINE %17 = call i32 @judge ( i32 %16 ) NEW_LINE store i32 %17 %3 NEW_LINE %18 = load i32 %3 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %18 ) NEW_LINE br label %37 NEW_LINE 20: NEW_LINE %21 = load i32 %2 NEW_LINE %22 = load i32 @num_prime NEW_LINE %23 = sub nsw i32 %22 , 1 NEW_LINE %24 = sext i32 %23 to i64 NEW_LINE %25 = getelementptr inbounds ARR 3 500000 x i32 @prime , i64 0 , i64 %24 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = icmp eq i32 %21 , %26 NEW_LINE br i1 %27 , label %28 , label %31 NEW_LINE 28: NEW_LINE %29 = load i32 @num_prime NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE br label %36 NEW_LINE 31: NEW_LINE %32 = load i32 %2 NEW_LINE %33 = call i32 @find ( i32 %32 ) NEW_LINE store i32 %33 %3 NEW_LINE %34 = load i32 %3 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %36 NEW_LINE 36: NEW_LINE br label %37 NEW_LINE 37: NEW_LINE br label %4 NEW_LINE 38: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %2 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0.000000e+00 %5 NEW_LINE %8 = call double @asin ( double 1.000000e+00 ) #3 NEW_LINE %9 = fdiv double %8 , 9.000000e+01 NEW_LINE store double %9 %7 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %3 ) NEW_LINE %12 = load i32 %4 NEW_LINE %13 = load i32 %3 NEW_LINE %14 = or i32 %12 , %13 NEW_LINE %15 = icmp ne i32 %14 , 0 NEW_LINE br i1 %15 , label %16 , label %40 NEW_LINE 16: NEW_LINE %17 = load i32 %4 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %2 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load double %7 NEW_LINE %22 = fmul double %20 , %21 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %4 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %2 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = load double %7 NEW_LINE %32 = fmul double %30 , %31 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %3 NEW_LINE %38 = load i32 %2 NEW_LINE %39 = sub nsw i32 %38 , %37 NEW_LINE store i32 %39 %2 NEW_LINE br label %10 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE store i32 %42 %2 NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE store i32 %44 %3 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE %46 = icmp ne i32 %45 , 0 NEW_LINE %47 = xor i1 %46 , true NEW_LINE %48 = zext i1 %47 to i32 NEW_LINE ret i32 %48 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 82 x i8 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %5 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %6 = call * i8 @fgets ( * i8 %4 i32 82 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %5 ) NEW_LINE %7 = icmp eq * i8 %6 , null NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %25 NEW_LINE 9: NEW_LINE %10 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %11 = call i32 @strcmp ( * i8 %10 * i8 getelementptr inbounds ( ARR 3 1 x i8 @.str.3 i64 0 i64 0 ) ) #3 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %14 NEW_LINE 13: NEW_LINE br label %25 NEW_LINE 14: NEW_LINE br label %15 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @shift ( * i8 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = call i32 @check ( * i8 %17 ) NEW_LINE %19 = icmp ne i32 %18 , 0 NEW_LINE br i1 %19 , label %20 , label %21 NEW_LINE 20: NEW_LINE br label %22 NEW_LINE 21: NEW_LINE br label %15 NEW_LINE 22: NEW_LINE %23 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.4:%s~00" i64 0 i64 0 ) * i8 %23 ) NEW_LINE br label %3 NEW_LINE 25: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp sgt i32 5 , %5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %16 i32 0 i32 4 ) NEW_LINE store i32 0 %3 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = icmp sgt i32 5 , %18 NEW_LINE br i1 %19 , label %20 , label %34 NEW_LINE 20: NEW_LINE %21 = load i32 %3 NEW_LINE %22 = sext i32 %21 to i64 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %22 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %24 ) NEW_LINE %26 = load i32 %3 NEW_LINE %27 = icmp sle i32 %26 , 3 NEW_LINE br i1 %27 , label %28 , label %30 NEW_LINE 28: NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %3 NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 %3 NEW_LINE br label %17 NEW_LINE 34: NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %7 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %8 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %9 = getelementptr inbounds i32 %8 , i64 1 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds i32 %10 , i64 2 NEW_LINE %12 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %13 = getelementptr inbounds i32 %12 , i64 3 NEW_LINE %14 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %15 = getelementptr inbounds i32 %14 , i64 4 NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %7 * i32 %9 * i32 %11 * i32 %13 * i32 %15 ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %18 = bitcast * i32 %17 to * i8 NEW_LINE call void @qsort ( * i8 %18 i64 5 i64 4 i32 * ( * i8 * i8 ) @cmpr ) NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 0 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 1 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 2 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 3 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = getelementptr inbounds ARR 3 5 x i32 %6 , i64 0 , i64 4 NEW_LINE %28 = load i32 %27 NEW_LINE %29 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %20 i32 %22 i32 %24 i32 %26 i32 %28 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i64 NEW_LINE %3 = alloca i64 NEW_LINE %4 = alloca i64 NEW_LINE %5 = alloca ARR 3 78665 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i64 0 %4 NEW_LINE store i64 0 %2 NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i64 %2 NEW_LINE %8 = icmp slt i64 %7 , 1000000 NEW_LINE br i1 %8 , label %9 , label %24 NEW_LINE 9: NEW_LINE %10 = load i64 %2 NEW_LINE %11 = call i32 @judgeprime ( i64 %10 ) NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %20 NEW_LINE 13: NEW_LINE %14 = load i64 %2 NEW_LINE %15 = trunc i64 %14 to i32 NEW_LINE %16 = load i64 %4 NEW_LINE %17 = getelementptr inbounds ARR 3 78665 x i32 %5 , i64 0 , i64 %16 NEW_LINE store i32 %15 %17 NEW_LINE %18 = load i64 %4 NEW_LINE %19 = add nsw i64 %18 , 1 NEW_LINE store i64 %19 %4 NEW_LINE br label %20 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i64 %2 NEW_LINE %23 = add nsw i64 %22 , 1 NEW_LINE store i64 %23 %2 NEW_LINE br label %6 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%ld~00" i64 0 i64 0 ) * i64 %3 ) NEW_LINE %27 = icmp ne i32 %26 , -1 NEW_LINE br i1 %27 , label %28 , label %47 NEW_LINE 28: NEW_LINE store i64 0 %2 NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i64 %2 NEW_LINE %31 = icmp slt i64 %30 , 78665 NEW_LINE br i1 %31 , label %32 , label %46 NEW_LINE 32: NEW_LINE %33 = load i64 %2 NEW_LINE %34 = getelementptr inbounds ARR 3 78665 x i32 %5 , i64 0 , i64 %33 NEW_LINE %35 = load i32 %34 NEW_LINE %36 = sext i32 %35 to i64 NEW_LINE %37 = load i64 %3 NEW_LINE %38 = icmp sgt i64 %36 , %37 NEW_LINE br i1 %38 , label %39 , label %42 NEW_LINE 39: NEW_LINE %40 = load i64 %2 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%ld~0A~00" i64 0 i64 0 ) i64 %40 ) NEW_LINE br label %46 NEW_LINE 42: NEW_LINE br label %43 NEW_LINE 43: NEW_LINE %44 = load i64 %2 NEW_LINE %45 = add nsw i64 %44 , 1 NEW_LINE store i64 %45 %2 NEW_LINE br label %29 NEW_LINE 46: NEW_LINE br label %25 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE store i32 90 %3 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 0x400921FAFC8B007A %7 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%d,~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sitofp i32 %10 to double NEW_LINE %12 = load i32 %3 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = load double %7 NEW_LINE %15 = fmul double %13 , %14 NEW_LINE %16 = fdiv double %15 , 1.800000e+02 NEW_LINE %17 = call double @cos ( double %16 ) #3 NEW_LINE %18 = fmul double %11 , %17 NEW_LINE %19 = load double %5 NEW_LINE %20 = fadd double %19 , %18 NEW_LINE store double %20 %5 NEW_LINE %21 = load i32 %2 NEW_LINE %22 = sitofp i32 %21 to double NEW_LINE %23 = load i32 %3 NEW_LINE %24 = sitofp i32 %23 to double NEW_LINE %25 = load double %7 NEW_LINE %26 = fmul double %24 , %25 NEW_LINE %27 = fdiv double %26 , 1.800000e+02 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %22 , %28 NEW_LINE %30 = load double %6 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %6 NEW_LINE %32 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %33 = load i32 %2 NEW_LINE %34 = icmp eq i32 %33 , 0 NEW_LINE br i1 %34 , label %35 , label %39 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = icmp eq i32 %36 , 0 NEW_LINE br i1 %37 , label %38 , label %39 NEW_LINE 38: NEW_LINE br label %43 NEW_LINE 39: NEW_LINE %40 = load i32 %4 NEW_LINE %41 = load i32 %3 NEW_LINE %42 = sub nsw i32 %41 , %40 NEW_LINE store i32 %42 %3 NEW_LINE br label %8 NEW_LINE 43: NEW_LINE %44 = load double %5 NEW_LINE %45 = fptosi double %44 to i32 NEW_LINE %46 = load double %6 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.2:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %45 i32 %47 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE store i32 0 %1 NEW_LINE %3 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %4 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %5 = getelementptr inbounds i32 %4 , i64 1 NEW_LINE %6 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %7 = getelementptr inbounds i32 %6 , i64 2 NEW_LINE %8 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %9 = getelementptr inbounds i32 %8 , i64 3 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %11 = getelementptr inbounds i32 %10 , i64 4 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 15 x i8 @".str:%d ▁ %d ▁ %d ▁ %d ▁ %d~00" i64 0 i64 0 ) * i32 %3 * i32 %5 * i32 %7 * i32 %9 * i32 %11 ) NEW_LINE %13 = icmp eq i32 %12 , 5 NEW_LINE br i1 %13 , label %14 , label %28 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %16 = bitcast * i32 %15 to * i8 NEW_LINE call void @qsort ( * i8 %16 i64 5 i64 4 i32 * ( * i8 * i8 ) @mycomp ) NEW_LINE %17 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %18 = load i32 %17 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 1 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 2 NEW_LINE %22 = load i32 %21 NEW_LINE %23 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 3 NEW_LINE %24 = load i32 %23 NEW_LINE %25 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 4 NEW_LINE %26 = load i32 %25 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.1:%d ▁ %d ▁ %d ▁ %d ▁ %d~0A~00" i64 0 i64 0 ) i32 %18 i32 %20 i32 %22 i32 %24 i32 %26 ) NEW_LINE br label %28 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca * i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 5 %3 NEW_LINE %5 = load i32 %3 NEW_LINE %6 = sext i32 %5 to i64 NEW_LINE %7 = call noalias * i8 @calloc ( i64 %6 i64 4 ) #3 NEW_LINE %8 = bitcast * i8 %7 to * i32 NEW_LINE store * i32 %8 %4 NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp slt i32 %10 , %11 NEW_LINE br i1 %12 , label %13 , label %22 NEW_LINE 13: NEW_LINE %14 = load * i32 %4 NEW_LINE %15 = load i32 %2 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds i32 %14 , i64 %16 NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %17 ) NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = load i32 %2 NEW_LINE %21 = add nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE br label %9 NEW_LINE 22: NEW_LINE %23 = load * i32 %4 NEW_LINE %24 = load i32 %3 NEW_LINE %25 = call i32 @margesort ( * i32 %23 i32 %24 ) NEW_LINE store i32 0 %2 NEW_LINE br label %26 NEW_LINE 26: NEW_LINE %27 = load i32 %2 NEW_LINE %28 = icmp slt i32 %27 , 4 NEW_LINE br i1 %28 , label %29 , label %39 NEW_LINE 29: NEW_LINE %30 = load * i32 %4 NEW_LINE %31 = load i32 %2 NEW_LINE %32 = sext i32 %31 to i64 NEW_LINE %33 = getelementptr inbounds i32 %30 , i64 %32 NEW_LINE %34 = load i32 %33 NEW_LINE %35 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) i32 %34 ) NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = add nsw i32 %37 , 1 NEW_LINE store i32 %38 %2 NEW_LINE br label %26 NEW_LINE 39: NEW_LINE %40 = load * i32 %4 NEW_LINE %41 = getelementptr inbounds i32 %40 , i64 4 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE %44 = load * i32 %4 NEW_LINE %45 = bitcast * i32 %44 to * i8 NEW_LINE call void @free ( * i8 %45 ) #3 NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 100 x i32 NEW_LINE %3 = alloca ARR 3 100 x i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %6 NEW_LINE store i32 0 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE %9 = icmp ne i32 %8 , -1 NEW_LINE br i1 %9 , label %10 , label %33 NEW_LINE 10: NEW_LINE %11 = load i32 %4 NEW_LINE %12 = icmp eq i32 %11 , 0 NEW_LINE br i1 %12 , label %13 , label %25 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %5 NEW_LINE %16 = load i32 %5 NEW_LINE %17 = sext i32 %16 to i64 NEW_LINE %18 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %17 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = load i32 %6 NEW_LINE %21 = sext i32 %20 to i64 NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %21 NEW_LINE store i32 %19 %22 NEW_LINE %23 = load i32 %6 NEW_LINE %24 = add nsw i32 %23 , 1 NEW_LINE store i32 %24 %6 NEW_LINE br label %32 NEW_LINE 25: NEW_LINE %26 = load i32 %4 NEW_LINE %27 = load i32 %5 NEW_LINE %28 = sext i32 %27 to i64 NEW_LINE %29 = getelementptr inbounds ARR 3 100 x i32 %2 , i64 0 , i64 %28 NEW_LINE store i32 %26 %29 NEW_LINE %30 = load i32 %5 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %5 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE br label %7 NEW_LINE 33: NEW_LINE store i32 0 %4 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %4 NEW_LINE %36 = load i32 %6 NEW_LINE %37 = icmp slt i32 %35 , %36 NEW_LINE br i1 %37 , label %38 , label %47 NEW_LINE 38: NEW_LINE %39 = load i32 %4 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE %41 = getelementptr inbounds ARR 3 100 x i32 %3 , i64 0 , i64 %40 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i32 %4 NEW_LINE %46 = add nsw i32 %45 , 1 NEW_LINE store i32 %46 %4 NEW_LINE br label %34 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 100 x i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 6 %5 NEW_LINE store i32 1 %2 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = load i32 %5 NEW_LINE %10 = icmp slt i32 %8 , %9 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = sext i32 %12 to i64 NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %13 NEW_LINE %15 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %14 ) NEW_LINE br label %16 NEW_LINE 16: NEW_LINE %17 = load i32 %2 NEW_LINE %18 = add nsw i32 %17 , 1 NEW_LINE store i32 %18 %2 NEW_LINE br label %7 NEW_LINE 19: NEW_LINE %20 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 0 NEW_LINE %21 = load i32 %5 NEW_LINE %22 = call i32 @bubble ( * i32 %20 i32 %21 ) NEW_LINE store i32 1 %2 NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %2 NEW_LINE %25 = load i32 %5 NEW_LINE %26 = icmp slt i32 %24 , %25 NEW_LINE br i1 %26 , label %27 , label %43 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sext i32 %28 to i64 NEW_LINE %30 = getelementptr inbounds ARR 3 100 x i32 %4 , i64 0 , i64 %29 NEW_LINE %31 = load i32 %30 NEW_LINE %32 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %31 ) NEW_LINE %33 = load i32 %2 NEW_LINE %34 = icmp slt i32 %33 , 5 NEW_LINE br i1 %34 , label %35 , label %37 NEW_LINE 35: NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %39 NEW_LINE 37: NEW_LINE %38 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %39 NEW_LINE 39: NEW_LINE br label %40 NEW_LINE 40: NEW_LINE %41 = load i32 %2 NEW_LINE %42 = add nsw i32 %41 , 1 NEW_LINE store i32 %42 %2 NEW_LINE br label %23 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 500000 x i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 5 %3 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %2 NEW_LINE %7 = load i32 %3 NEW_LINE %8 = icmp slt i32 %6 , %7 NEW_LINE br i1 %8 , label %9 , label %17 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = sext i32 %10 to i64 NEW_LINE %12 = getelementptr inbounds ARR 3 500000 x i32 %4 , i64 0 , i64 %11 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %12 ) NEW_LINE br label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %2 NEW_LINE %16 = add nsw i32 %15 , 1 NEW_LINE store i32 %16 %2 NEW_LINE br label %5 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 500000 x i32 %4 , i64 0 , i64 0 NEW_LINE %19 = load i32 %3 NEW_LINE call void @MergeSort ( * i32 %18 i32 0 i32 %19 ) NEW_LINE %20 = load i32 %3 NEW_LINE %21 = sub nsw i32 %20 , 1 NEW_LINE store i32 %21 %2 NEW_LINE br label %22 NEW_LINE 22: NEW_LINE %23 = load i32 %2 NEW_LINE %24 = icmp sge i32 %23 , 0 NEW_LINE br i1 %24 , label %25 , label %39 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = sext i32 %26 to i64 NEW_LINE %28 = getelementptr inbounds ARR 3 500000 x i32 %4 , i64 0 , i64 %27 NEW_LINE %29 = load i32 %28 NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %29 ) NEW_LINE %31 = load i32 %2 NEW_LINE %32 = icmp ne i32 %31 , 0 NEW_LINE br i1 %32 , label %33 , label %35 NEW_LINE 33: NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %35 NEW_LINE 35: NEW_LINE br label %36 NEW_LINE 36: NEW_LINE %37 = load i32 %2 NEW_LINE %38 = add nsw i32 %37 , -1 NEW_LINE store i32 %38 %2 NEW_LINE br label %22 NEW_LINE 39: NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE store i32 %26 @j NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE br i1 %29 , label %30 , label %35 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 @i NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 82 x i8 NEW_LINE store i32 0 %1 NEW_LINE br label %3 NEW_LINE 3: NEW_LINE %4 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %5 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %6 = call * i8 @fgets ( * i8 %4 i32 82 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %5 ) NEW_LINE %7 = icmp eq * i8 %6 , null NEW_LINE br i1 %7 , label %8 , label %9 NEW_LINE 8: NEW_LINE br label %20 NEW_LINE 9: NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @shift ( * i8 %11 ) NEW_LINE %12 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %13 = call i32 @check ( * i8 %12 ) NEW_LINE %14 = icmp ne i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %17 NEW_LINE 16: NEW_LINE br label %10 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 82 x i8 %2 , i64 0 , i64 0 NEW_LINE %19 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.3:%s~00" i64 0 i64 0 ) * i8 %18 ) NEW_LINE br label %3 NEW_LINE 20: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca ARR 3 30 x i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %7 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %7 NEW_LINE %11 = icmp slt i32 %10 , 30 NEW_LINE br i1 %11 , label %12 , label %21 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE %15 = load i32 %7 NEW_LINE %16 = sext i32 %15 to i64 NEW_LINE %17 = getelementptr inbounds ARR 3 30 x i32 %6 , i64 0 , i64 %16 NEW_LINE store i32 %14 %17 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %7 NEW_LINE %20 = add nsw i32 %19 , 1 NEW_LINE store i32 %20 %7 NEW_LINE br label %9 NEW_LINE 21: NEW_LINE %22 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE %23 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 0 %7 NEW_LINE br label %24 NEW_LINE 24: NEW_LINE %25 = load i32 %7 NEW_LINE %26 = load i32 %2 NEW_LINE %27 = icmp slt i32 %25 , %26 NEW_LINE br i1 %27 , label %28 , label %33 NEW_LINE 28: NEW_LINE %29 = getelementptr inbounds ARR 3 30 x i32 %6 , i64 0 , i64 0 NEW_LINE call void @sort ( * i32 %29 ) NEW_LINE br label %30 NEW_LINE 30: NEW_LINE %31 = load i32 %7 NEW_LINE %32 = add nsw i32 %31 , 1 NEW_LINE store i32 %32 %7 NEW_LINE br label %24 NEW_LINE 33: NEW_LINE store i32 0 %7 NEW_LINE br label %34 NEW_LINE 34: NEW_LINE %35 = load i32 %7 NEW_LINE %36 = load i32 %3 NEW_LINE %37 = icmp slt i32 %35 , %36 NEW_LINE br i1 %37 , label %38 , label %47 NEW_LINE 38: NEW_LINE %39 = load i32 %7 NEW_LINE %40 = sext i32 %39 to i64 NEW_LINE %41 = getelementptr inbounds ARR 3 30 x i32 %6 , i64 0 , i64 %40 NEW_LINE %42 = load i32 %41 NEW_LINE %43 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.1:%d~0D~0A~00" i64 0 i64 0 ) i32 %42 ) NEW_LINE br label %44 NEW_LINE 44: NEW_LINE %45 = load i32 %7 NEW_LINE %46 = add nsw i32 %45 , 1 NEW_LINE store i32 %46 %7 NEW_LINE br label %34 NEW_LINE 47: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE br i1 %29 , label %30 , label %35 NEW_LINE 30: NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 @i NEW_LINE %33 = add nsw i32 %32 , 1 NEW_LINE store i32 %33 @i NEW_LINE %34 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %33 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 35: NEW_LINE %36 = load i32 %1 NEW_LINE ret i32 %36 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 5 x i32 NEW_LINE %3 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = load i32 %3 NEW_LINE %6 = icmp slt i32 %5 , 5 NEW_LINE br i1 %6 , label %7 , label %15 NEW_LINE 7: NEW_LINE %8 = load i32 %3 NEW_LINE %9 = sext i32 %8 to i64 NEW_LINE %10 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %9 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %10 ) NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = add nsw i32 %13 , 1 NEW_LINE store i32 %14 %3 NEW_LINE br label %4 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 0 NEW_LINE %17 = bitcast * i32 %16 to * i8 NEW_LINE call void @qsort ( * i8 %17 i64 5 i64 4 i32 * ( * i8 * i8 ) @compare ) NEW_LINE store i32 4 %3 NEW_LINE br label %18 NEW_LINE 18: NEW_LINE %19 = load i32 %3 NEW_LINE %20 = icmp sge i32 %19 , 0 NEW_LINE br i1 %20 , label %21 , label %35 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = sext i32 %22 to i64 NEW_LINE %24 = getelementptr inbounds ARR 3 5 x i32 %2 , i64 0 , i64 %23 NEW_LINE %25 = load i32 %24 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) i32 %25 ) NEW_LINE %27 = load i32 %3 NEW_LINE %28 = icmp ne i32 %27 , 0 NEW_LINE br i1 %28 , label %29 , label %31 NEW_LINE 29: NEW_LINE %30 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.1: ▁ ~00" i64 0 i64 0 ) ) NEW_LINE br label %31 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 %3 NEW_LINE %34 = add nsw i32 %33 , -1 NEW_LINE store i32 %34 %3 NEW_LINE br label %18 NEW_LINE 35: NEW_LINE %36 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 2 x i8 @".str.2:~0A~00" i64 0 i64 0 ) ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE store i32 %30 @j NEW_LINE br i1 %29 , label %31 , label %36 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @i NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 @i NEW_LINE %35 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %34 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 36: NEW_LINE %37 = load i32 %1 NEW_LINE ret i32 %37 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca float NEW_LINE %4 = alloca float NEW_LINE %5 = alloca float NEW_LINE %6 = alloca float NEW_LINE %7 = alloca float NEW_LINE %8 = alloca float NEW_LINE %9 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE store i32 1 %9 NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load i32 %9 NEW_LINE %13 = load i32 %2 NEW_LINE %14 = icmp sle i32 %12 , %13 NEW_LINE br i1 %14 , label %15 , label %26 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 19 x i8 @".str.1:%f ▁ %f ▁ %f ▁ %f ▁ %f ▁ %f ▁ ~00" i64 0 i64 0 ) * float %3 * float %4 * float %5 * float %6 * float %7 * float %8 ) NEW_LINE %17 = load float %3 NEW_LINE %18 = load float %4 NEW_LINE %19 = load float %5 NEW_LINE %20 = load float %6 NEW_LINE %21 = load float %7 NEW_LINE %22 = load float %8 NEW_LINE call void @chk ( float %17 float %18 float %19 float %20 float %21 float %22 ) NEW_LINE br label %23 NEW_LINE 23: NEW_LINE %24 = load i32 %9 NEW_LINE %25 = add nsw i32 %24 , 1 NEW_LINE store i32 %25 %9 NEW_LINE br label %11 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 1.000000e+00 %9 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %6 NEW_LINE store double 9.000000e+01 %8 NEW_LINE %10 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %5 ) NEW_LINE br label %11 NEW_LINE 11: NEW_LINE %12 = load double %9 NEW_LINE %13 = fcmp une double %12 , 0.000000e+00 NEW_LINE br i1 %13 , label %14 , label %42 NEW_LINE 14: NEW_LINE %15 = load double %4 NEW_LINE %16 = load double %8 NEW_LINE %17 = fmul double %16 , 0x400921FB54411744 NEW_LINE %18 = fdiv double %17 , 1.800000e+02 NEW_LINE %19 = call double @cos ( double %18 ) #3 NEW_LINE %20 = fmul double %15 , %19 NEW_LINE %21 = load double %6 NEW_LINE %22 = fsub double %21 , %20 NEW_LINE store double %22 %6 NEW_LINE %23 = load double %4 NEW_LINE %24 = load double %8 NEW_LINE %25 = fmul double %24 , 0x400921FB54411744 NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = call double @sin ( double %26 ) #3 NEW_LINE %28 = fmul double %23 , %27 NEW_LINE %29 = load double %7 NEW_LINE %30 = fadd double %29 , %28 NEW_LINE store double %30 %7 NEW_LINE %31 = load double %5 NEW_LINE %32 = load double %8 NEW_LINE %33 = fadd double %32 , %31 NEW_LINE store double %33 %8 NEW_LINE %34 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 8 x i8 @".str:%lf,%lf~00" i64 0 i64 0 ) * double %4 * double %5 ) NEW_LINE %35 = load double %4 NEW_LINE %36 = fcmp oeq double %35 , 0.000000e+00 NEW_LINE br i1 %36 , label %37 , label %41 NEW_LINE 37: NEW_LINE %38 = load double %5 NEW_LINE %39 = fcmp oeq double %38 , 0.000000e+00 NEW_LINE br i1 %39 , label %40 , label %41 NEW_LINE 40: NEW_LINE store double 0.000000e+00 %9 NEW_LINE br label %41 NEW_LINE 41: NEW_LINE br label %11 NEW_LINE 42: NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE store i32 %44 %2 NEW_LINE %45 = load double %7 NEW_LINE %46 = fptosi double %45 to i32 NEW_LINE store i32 %46 %3 NEW_LINE %47 = load i32 %2 NEW_LINE %48 = load i32 %3 NEW_LINE %49 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %48 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 1 %2 NEW_LINE store i32 1 %3 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %5 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %13 , label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %3 NEW_LINE %12 = icmp ne i32 %11 , 0 NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = phi i1 ARR 2 true %7 , ARR 2 %12 %10 NEW_LINE br i1 %14 , label %15 , label %40 NEW_LINE 15: NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = sitofp i32 %17 to double NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = fmul double 0x400921FB54442D18 , %20 NEW_LINE %22 = fdiv double %21 , 1.800000e+02 NEW_LINE %23 = call double @cos ( double %22 ) #3 NEW_LINE %24 = fmul double %18 , %23 NEW_LINE %25 = load double %5 NEW_LINE %26 = fadd double %25 , %24 NEW_LINE store double %26 %5 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = sitofp i32 %27 to double NEW_LINE %29 = load i32 %4 NEW_LINE %30 = sitofp i32 %29 to double NEW_LINE %31 = fmul double 0x400921FB54442D18 , %30 NEW_LINE %32 = fdiv double %31 , 1.800000e+02 NEW_LINE %33 = call double @sin ( double %32 ) #3 NEW_LINE %34 = fmul double %28 , %33 NEW_LINE %35 = load double %6 NEW_LINE %36 = fadd double %35 , %34 NEW_LINE store double %36 %6 NEW_LINE %37 = load i32 %4 NEW_LINE %38 = load i32 %3 NEW_LINE %39 = sub nsw i32 %37 , %38 NEW_LINE store i32 %39 %4 NEW_LINE br label %7 NEW_LINE 40: NEW_LINE %41 = load double %5 NEW_LINE %42 = fptosi double %41 to i32 NEW_LINE %43 = load double %6 NEW_LINE %44 = fptosi double %43 to i32 NEW_LINE %45 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %42 i32 %44 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 80 x i8 NEW_LINE store i32 0 %1 NEW_LINE br label %4 NEW_LINE 4: NEW_LINE %5 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str:%[^~0A]%*c~00" i64 0 i64 0 ) * i8 %5 ) NEW_LINE %7 = icmp ne i32 %6 , -1 NEW_LINE br i1 %7 , label %8 , label %33 NEW_LINE 8: NEW_LINE store i32 0 %2 NEW_LINE br label %9 NEW_LINE 9: NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp sle i32 %10 , 25 NEW_LINE br i1 %11 , label %12 , label %32 NEW_LINE 12: NEW_LINE %13 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @shift ( * i8 %13 i32 1 ) NEW_LINE %14 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE %15 = call i32 @search ( * i8 %14 * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:the~00" i64 0 i64 0 ) ) NEW_LINE %16 = icmp eq i32 %15 , 1 NEW_LINE br i1 %16 , label %25 , label %17 NEW_LINE 17: NEW_LINE %18 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE %19 = call i32 @search ( * i8 %18 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.2:this~00" i64 0 i64 0 ) ) NEW_LINE %20 = icmp eq i32 %19 , 1 NEW_LINE br i1 %20 , label %25 , label %21 NEW_LINE 21: NEW_LINE %22 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE %23 = call i32 @search ( * i8 %22 * i8 getelementptr inbounds ( ARR 3 5 x i8 @".str.3:that~00" i64 0 i64 0 ) ) NEW_LINE %24 = icmp eq i32 %23 , 1 NEW_LINE br i1 %24 , label %25 , label %28 NEW_LINE 25: NEW_LINE %26 = getelementptr inbounds ARR 3 80 x i8 %3 , i64 0 , i64 0 NEW_LINE %27 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.4:%s~0A~00" i64 0 i64 0 ) * i8 %26 ) NEW_LINE br label %32 NEW_LINE 28: NEW_LINE br label %29 NEW_LINE 29: NEW_LINE %30 = load i32 %2 NEW_LINE %31 = add nsw i32 %30 , 1 NEW_LINE store i32 %31 %2 NEW_LINE br label %9 NEW_LINE 32: NEW_LINE br label %4 NEW_LINE 33: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 81 x i8 NEW_LINE %4 = alloca ARR 3 81 x i8 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %2 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = getelementptr inbounds ARR 3 81 x i8 %3 , i64 0 , i64 0 NEW_LINE %7 = load * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 @stdin NEW_LINE %8 = call * i8 @fgets ( * i8 %6 i32 81 * STRUCT 29 i32 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * i8 * %struct._IO_marker * %struct._IO_FILE i32 i32 i64 i16 i8 ARR 3 1 x i8 * i8 i64 * i8 * i8 * i8 * i8 i64 i32 ARR 3 20 x i8 %7 ) NEW_LINE %9 = icmp ne * i8 %8 , null NEW_LINE br i1 %9 , label %10 , label %27 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 81 x i8 %3 , i64 0 , i64 0 NEW_LINE %12 = call i64 @strlen ( * i8 %11 ) #5 NEW_LINE %13 = icmp ule i64 %12 , 1 NEW_LINE br i1 %13 , label %14 , label %15 NEW_LINE 14: NEW_LINE br label %27 NEW_LINE 15: NEW_LINE %16 = getelementptr inbounds ARR 3 81 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @remove_feed ( * i8 %16 ) NEW_LINE %17 = load i32 %2 NEW_LINE %18 = icmp sge i32 %17 , 20 NEW_LINE br i1 %18 , label %19 , label %20 NEW_LINE 19: NEW_LINE br label %27 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 81 x i8 %3 , i64 0 , i64 0 NEW_LINE %22 = getelementptr inbounds ARR 3 81 x i8 %4 , i64 0 , i64 0 NEW_LINE call void @decode ( * i8 %21 * i8 %22 ) NEW_LINE %23 = getelementptr inbounds ARR 3 81 x i8 %4 , i64 0 , i64 0 NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str:%s~0A~00" i64 0 i64 0 ) * i8 %23 ) NEW_LINE %25 = load i32 %2 NEW_LINE %26 = add nsw i32 %25 , 1 NEW_LINE store i32 %26 %2 NEW_LINE br label %5 NEW_LINE 27: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 bitcast ( * ARR 3 1000000 x i32 @k_operafan to * i8 ) i8 -1 i64 4000000 i1 false ) NEW_LINE store i32 0 getelementptr inbounds ( ARR 3 1000000 x i32 @k_operafan i64 0 i64 1 ) NEW_LINE store i32 0 getelementptr inbounds ( ARR 3 1000000 x i32 @k_operafan i64 0 i64 0 ) NEW_LINE store i32 1 getelementptr inbounds ( ARR 3 1000000 x i32 @k_operafan i64 0 i64 2 ) NEW_LINE store i32 3 @n_<<unk>> NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE %9 = icmp ne i32 %8 , 1 NEW_LINE br i1 %9 , label %10 , label %11 NEW_LINE 10: NEW_LINE br label %41 NEW_LINE 11: NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 @n_<<unk>> NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp sle i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %35 NEW_LINE 16: NEW_LINE %17 = load i32 @n_<<unk>> NEW_LINE %18 = sub nsw i32 %17 , 1 NEW_LINE %19 = sext i32 %18 to i64 NEW_LINE %20 = getelementptr inbounds ARR 3 1000000 x i32 @k_operafan , i64 0 , i64 %19 NEW_LINE %21 = load i32 %20 NEW_LINE %22 = load i32 @n_<<unk>> NEW_LINE %23 = call i32 @isPrime ( i32 %22 ) NEW_LINE %24 = icmp ne i32 %23 , 0 NEW_LINE %25 = xor i1 %24 , true NEW_LINE %26 = xor i1 %25 , true NEW_LINE %27 = zext i1 %26 to i32 NEW_LINE %28 = add nsw i32 %21 , %27 NEW_LINE %29 = load i32 @n_<<unk>> NEW_LINE %30 = sext i32 %29 to i64 NEW_LINE %31 = getelementptr inbounds ARR 3 1000000 x i32 @k_operafan , i64 0 , i64 %30 NEW_LINE store i32 %28 %31 NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @n_<<unk>> NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 @n_<<unk>> NEW_LINE br label %12 NEW_LINE 35: NEW_LINE %36 = load i32 %6 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 1000000 x i32 @k_operafan , i64 0 , i64 %37 NEW_LINE %39 = load i32 %38 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE br label %7 NEW_LINE 41: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 90 %5 NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %6 ) NEW_LINE %9 = load i32 %4 NEW_LINE %10 = icmp ne i32 %9 , 0 NEW_LINE br i1 %10 , label %11 , label %35 NEW_LINE 11: NEW_LINE %12 = load i32 %4 NEW_LINE %13 = sitofp i32 %12 to double NEW_LINE %14 = load i32 %5 NEW_LINE %15 = sitofp i32 %14 to double NEW_LINE %16 = fdiv double %15 , 1.800000e+02 NEW_LINE %17 = fmul double %16 , 0x400921FB54442D18 NEW_LINE %18 = call double @cos ( double %17 ) #3 NEW_LINE %19 = fmul double %13 , %18 NEW_LINE %20 = load double %2 NEW_LINE %21 = fsub double %20 , %19 NEW_LINE store double %21 %2 NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = load i32 %5 NEW_LINE %25 = sitofp i32 %24 to double NEW_LINE %26 = fdiv double %25 , 1.800000e+02 NEW_LINE %27 = fmul double %26 , 0x400921FB54442D18 NEW_LINE %28 = call double @sin ( double %27 ) #3 NEW_LINE %29 = fmul double %23 , %28 NEW_LINE %30 = load double %3 NEW_LINE %31 = fadd double %30 , %29 NEW_LINE store double %31 %3 NEW_LINE %32 = load i32 %6 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = add nsw i32 %33 , %32 NEW_LINE store i32 %34 %5 NEW_LINE br label %7 NEW_LINE 35: NEW_LINE %36 = load double %2 NEW_LINE %37 = fptosi double %36 to i32 NEW_LINE %38 = load double %3 NEW_LINE %39 = fptosi double %38 to i32 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %37 i32 %39 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE br label %2 NEW_LINE 2: NEW_LINE %3 = load i32 @i NEW_LINE %4 = sext i32 %3 to i64 NEW_LINE %5 = getelementptr inbounds i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) , i64 %4 NEW_LINE %6 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE %7 = xor i32 %6 , -1 NEW_LINE %8 = icmp ne i32 %7 , 0 NEW_LINE br i1 %8 , label %28 , label %9 NEW_LINE 9: NEW_LINE %10 = load i32 @i NEW_LINE %11 = load i32 @i NEW_LINE %12 = add nsw i32 %11 , -1 NEW_LINE store i32 %12 @i NEW_LINE %13 = icmp ne i32 %11 , 0 NEW_LINE %14 = zext i1 %13 to i64 NEW_LINE %15 = select i1 %13 , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d ▁ ~00" i64 0 i64 0 ) , * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) NEW_LINE %16 = load i32 @i NEW_LINE %17 = add nsw i32 %16 , -1 NEW_LINE store i32 %17 @i NEW_LINE %18 = sext i32 %17 to i64 NEW_LINE %19 = getelementptr inbounds ARR 3 5 x i32 @a , i64 0 , i64 %18 NEW_LINE %20 = load i32 %19 NEW_LINE %21 = call i32 ( * i8 ... ) @printf ( * i8 %15 i32 %20 ) NEW_LINE %22 = icmp ne i32 %21 , 0 NEW_LINE %23 = xor i1 %22 , true NEW_LINE %24 = xor i1 %23 , true NEW_LINE %25 = zext i1 %24 to i32 NEW_LINE %26 = add nsw i32 %10 , %25 NEW_LINE %27 = icmp ne i32 %26 , 0 NEW_LINE br label %28 NEW_LINE 28: NEW_LINE %29 = phi i1 ARR 2 true %2 , ARR 2 %27 %9 NEW_LINE %30 = zext i1 %29 to i32 NEW_LINE store i32 %30 @j NEW_LINE br i1 %29 , label %31 , label %36 NEW_LINE 31: NEW_LINE br label %32 NEW_LINE 32: NEW_LINE %33 = load i32 @i NEW_LINE %34 = add nsw i32 %33 , 1 NEW_LINE store i32 %34 @i NEW_LINE %35 = call i32 ( * i32 i32 i32 * i8 ... ) bitcast ( i32 * ( ... ) @qsort to i32 * ( * i32 i32 i32 * i8 ... ) ) ( * i32 getelementptr inbounds ( ARR 3 5 x i32 @a i64 0 i64 0 ) i32 %34 i32 4 * i8 getelementptr inbounds ( ARR 3 12 x i8 @".str.3:YXZRPQ~8B~00+~02~C3~00" i64 0 i64 0 ) ) NEW_LINE br label %2 NEW_LINE 36: NEW_LINE %37 = load i32 %1 NEW_LINE ret i32 %37 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE store i32 0 %1 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 25 x i8 @".str:%lf%lf%lf%lf%lf%lf%lf%lf~00" i64 0 i64 0 ) * double %2 * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 * double %9 ) NEW_LINE %12 = icmp eq i32 %11 , 8 NEW_LINE br i1 %12 , label %13 , label %53 NEW_LINE 13: NEW_LINE %14 = load double %2 NEW_LINE %15 = load double %3 NEW_LINE %16 = load double %4 NEW_LINE %17 = load double %5 NEW_LINE %18 = load double %6 NEW_LINE %19 = load double %7 NEW_LINE %20 = load double %8 NEW_LINE %21 = load double %9 NEW_LINE %22 = call i32 @isSameSide ( double %14 double %15 double %16 double %17 double %18 double %19 double %20 double %21 ) NEW_LINE %23 = icmp ne i32 %22 , 1 NEW_LINE br i1 %23 , label %24 , label %25 NEW_LINE 24: NEW_LINE br label %51 NEW_LINE 25: NEW_LINE %26 = load double %4 NEW_LINE %27 = load double %5 NEW_LINE %28 = load double %6 NEW_LINE %29 = load double %7 NEW_LINE %30 = load double %2 NEW_LINE %31 = load double %3 NEW_LINE %32 = load double %8 NEW_LINE %33 = load double %9 NEW_LINE %34 = call i32 @isSameSide ( double %26 double %27 double %28 double %29 double %30 double %31 double %32 double %33 ) NEW_LINE %35 = icmp ne i32 %34 , 1 NEW_LINE br i1 %35 , label %36 , label %37 NEW_LINE 36: NEW_LINE br label %51 NEW_LINE 37: NEW_LINE %38 = load double %6 NEW_LINE %39 = load double %7 NEW_LINE %40 = load double %2 NEW_LINE %41 = load double %3 NEW_LINE %42 = load double %4 NEW_LINE %43 = load double %5 NEW_LINE %44 = load double %8 NEW_LINE %45 = load double %9 NEW_LINE %46 = call i32 @isSameSide ( double %38 double %39 double %40 double %41 double %42 double %43 double %44 double %45 ) NEW_LINE %47 = icmp ne i32 %46 , 1 NEW_LINE br i1 %47 , label %48 , label %49 NEW_LINE 48: NEW_LINE br label %51 NEW_LINE 49: NEW_LINE %50 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:YES~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 51: NEW_LINE %52 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.2:NO~00" i64 0 i64 0 ) ) NEW_LINE br label %10 NEW_LINE 53: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca ARR 3 100 x i8 NEW_LINE %4 = alloca ARR 3 100 x i8 NEW_LINE %5 = alloca ARR 3 100 x i8 NEW_LINE store i32 0 %1 NEW_LINE %6 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %7 NEW_LINE 7: NEW_LINE %8 = load i32 %2 NEW_LINE %9 = icmp ne i32 %8 , 0 NEW_LINE br i1 %9 , label %10 , label %28 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %12 = getelementptr inbounds ARR 3 100 x i8 %4 , i64 0 , i64 0 NEW_LINE %13 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 13 x i8 @".str.1: ▁ %100s ▁ %100s~00" i64 0 i64 0 ) * i8 %11 * i8 %12 ) NEW_LINE %14 = getelementptr inbounds ARR 3 100 x i8 %3 , i64 0 , i64 0 NEW_LINE %15 = getelementptr inbounds ARR 3 100 x i8 %4 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %17 = call i32 @add_bignum ( * i8 %14 * i8 %15 * i8 %16 ) NEW_LINE %18 = icmp ne i32 %17 , 0 NEW_LINE br i1 %18 , label %21 , label %19 NEW_LINE 19: NEW_LINE %20 = call i32 @puts ( * i8 getelementptr inbounds ( ARR 3 9 x i8 @".str.2:overflow~00" i64 0 i64 0 ) ) NEW_LINE br label %24 NEW_LINE 21: NEW_LINE %22 = getelementptr inbounds ARR 3 100 x i8 %5 , i64 0 , i64 0 NEW_LINE %23 = call i32 @puts ( * i8 %22 ) NEW_LINE br label %24 NEW_LINE 24: NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %2 NEW_LINE %27 = add nsw i32 %26 , -1 NEW_LINE store i32 %27 %2 NEW_LINE br label %7 NEW_LINE 28: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( i32 %0 * * i8 %1 ) #0 { NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca * * i8 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca ARR 3 101 x i8 NEW_LINE %9 = alloca ARR 3 101 x i8 NEW_LINE %10 = alloca * i8 NEW_LINE store i32 0 %3 NEW_LINE store i32 %0 %4 NEW_LINE store * * i8 %1 %5 NEW_LINE %11 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %6 ) NEW_LINE store i32 0 %7 NEW_LINE br label %12 NEW_LINE 12: NEW_LINE %13 = load i32 %7 NEW_LINE %14 = load i32 %6 NEW_LINE %15 = icmp slt i32 %13 , %14 NEW_LINE br i1 %15 , label %16 , label %30 NEW_LINE 16: NEW_LINE %17 = getelementptr inbounds ARR 3 101 x i8 %8 , i64 0 , i64 0 NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %17 ) NEW_LINE %19 = getelementptr inbounds ARR 3 101 x i8 %9 , i64 0 , i64 0 NEW_LINE %20 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %19 ) NEW_LINE %21 = getelementptr inbounds ARR 3 101 x i8 %8 , i64 0 , i64 0 NEW_LINE %22 = getelementptr inbounds ARR 3 101 x i8 %9 , i64 0 , i64 0 NEW_LINE %23 = call * i8 @add ( * i8 %21 * i8 %22 ) NEW_LINE store * i8 %23 %10 NEW_LINE %24 = load * i8 %10 NEW_LINE %25 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %24 ) NEW_LINE %26 = load * i8 %10 NEW_LINE call void @free ( * i8 %26 ) #4 NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %7 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %7 NEW_LINE br label %12 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca double NEW_LINE %4 = alloca double NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE %8 = alloca double NEW_LINE %9 = alloca double NEW_LINE %10 = alloca double NEW_LINE %11 = alloca double NEW_LINE store i32 0 %1 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %2 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %2 NEW_LINE %16 = icmp ne i32 %14 , 0 NEW_LINE %17 = xor i1 %16 , true NEW_LINE %18 = xor i1 %17 , true NEW_LINE br i1 %18 , label %19 , label %35 NEW_LINE 19: NEW_LINE %20 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 24 x i8 @".str.1:%lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf ▁ %lf~00" i64 0 i64 0 ) * double %3 * double %4 * double %5 * double %6 * double %7 * double %8 ) NEW_LINE %21 = load double %3 NEW_LINE %22 = load double %4 NEW_LINE %23 = load double %5 NEW_LINE %24 = load double %6 NEW_LINE %25 = load double %7 NEW_LINE %26 = load double %8 NEW_LINE call void @calcCentralCoordinate ( double %21 double %22 double %23 double %24 double %25 double %26 * double %9 * double %10 ) NEW_LINE %27 = load double %9 NEW_LINE %28 = load double %10 NEW_LINE %29 = load double %3 NEW_LINE %30 = load double %4 NEW_LINE call void @calcCircumscribedCircleRadius ( double %27 double %28 double %29 double %30 * double %11 ) NEW_LINE %31 = load double %9 NEW_LINE %32 = load double %10 NEW_LINE %33 = load double %11 NEW_LINE %34 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 16 x i8 @".str.2:%.3f ▁ %.3f ▁ %.3f~0A~00" i64 0 i64 0 ) double %31 double %32 double %33 ) NEW_LINE br label %13 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %7 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d ▁ %d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE store i32 1 %4 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = load i32 %4 NEW_LINE %10 = load i32 %2 NEW_LINE %11 = icmp sle i32 %9 , %10 NEW_LINE br i1 %11 , label %12 , label %20 NEW_LINE 12: NEW_LINE %13 = load i32 %4 NEW_LINE %14 = load i32 %4 NEW_LINE %15 = sext i32 %14 to i64 NEW_LINE %16 = getelementptr inbounds ARR 3 31 x i32 @lots , i64 0 , i64 %15 NEW_LINE store i32 %13 %16 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %4 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %4 NEW_LINE br label %8 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = load i32 %3 NEW_LINE %23 = icmp sgt i32 %22 , 0 NEW_LINE br i1 %23 , label %24 , label %30 NEW_LINE 24: NEW_LINE %25 = call i32 ( * i8 ... ) @scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str.1:%d,%d~00" i64 0 i64 0 ) * i32 %5 * i32 %6 ) NEW_LINE %26 = load i32 %5 NEW_LINE %27 = load i32 %6 NEW_LINE call void @change ( i32 %26 i32 %27 ) NEW_LINE %28 = load i32 %3 NEW_LINE %29 = add nsw i32 %28 , -1 NEW_LINE store i32 %29 %3 NEW_LINE br label %21 NEW_LINE 30: NEW_LINE store i32 1 %4 NEW_LINE br label %31 NEW_LINE 31: NEW_LINE %32 = load i32 %4 NEW_LINE %33 = load i32 %2 NEW_LINE %34 = icmp sle i32 %32 , %33 NEW_LINE br i1 %34 , label %35 , label %44 NEW_LINE 35: NEW_LINE %36 = load i32 %4 NEW_LINE %37 = sext i32 %36 to i64 NEW_LINE %38 = getelementptr inbounds ARR 3 31 x i32 @lots , i64 0 , i64 %37 NEW_LINE %39 = load i32 %38 NEW_LINE %40 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%d~0A~00" i64 0 i64 0 ) i32 %39 ) NEW_LINE br label %41 NEW_LINE 41: NEW_LINE %42 = load i32 %4 NEW_LINE %43 = add nsw i32 %42 , 1 NEW_LINE store i32 %43 %4 NEW_LINE br label %31 NEW_LINE 44: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i8 NEW_LINE %3 = alloca ARR 3 80 x i8 NEW_LINE %4 = alloca i8 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca i32 NEW_LINE %8 = alloca i32 NEW_LINE %9 = alloca i32 NEW_LINE %10 = alloca %struct.largenumber NEW_LINE %11 = alloca %struct.largenumber NEW_LINE store i32 0 %1 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %5 ) NEW_LINE br label %13 NEW_LINE 13: NEW_LINE %14 = load i32 %5 NEW_LINE %15 = add nsw i32 %14 , -1 NEW_LINE store i32 %15 %5 NEW_LINE %16 = icmp ne i32 %14 , 0 NEW_LINE br i1 %16 , label %17 , label %35 NEW_LINE 17: NEW_LINE call void @clear_large_number ( * %struct.largenumber %10 ) NEW_LINE call void @clear_large_number ( * %struct.largenumber %11 ) NEW_LINE call void @read_large_number ( * %struct.largenumber %10 ) NEW_LINE call void @read_large_number ( * %struct.largenumber %11 ) NEW_LINE %18 = getelementptr inbounds %struct.largenumber %10 , i32 0 , i32 1 NEW_LINE %19 = load i32 %18 NEW_LINE %20 = icmp eq i32 %19 , -1 NEW_LINE br i1 %20 , label %25 , label %21 NEW_LINE 21: NEW_LINE %22 = getelementptr inbounds %struct.largenumber %11 , i32 0 , i32 1 NEW_LINE %23 = load i32 %22 NEW_LINE %24 = icmp eq i32 %23 , -1 NEW_LINE br i1 %24 , label %25 , label %27 NEW_LINE 25: NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 27: NEW_LINE %28 = call * %struct.largenumber @sum_large_number ( * %struct.largenumber %10 * %struct.largenumber %11 ) NEW_LINE %29 = getelementptr inbounds %struct.largenumber %10 , i32 0 , i32 1 NEW_LINE %30 = load i32 %29 NEW_LINE %31 = icmp eq i32 %30 , -1 NEW_LINE br i1 %31 , label %32 , label %34 NEW_LINE 32: NEW_LINE %33 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %13 NEW_LINE 34: NEW_LINE call void @print_large_number ( * %struct.largenumber %10 ) NEW_LINE br label %13 NEW_LINE 35: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %26 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %12 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %11 ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %15 * i8 %16 ) NEW_LINE %17 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %18 = call i64 @strlen ( * i8 %17 ) #5 NEW_LINE %19 = icmp ult i64 %18 , 81 NEW_LINE br i1 %19 , label %20 , label %23 NEW_LINE 20: NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %21 ) NEW_LINE br label %25 NEW_LINE 23: NEW_LINE %24 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %25 NEW_LINE 25: NEW_LINE br label %6 NEW_LINE 26: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %11 i8 0 i64 1000 i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %12 i8 0 i64 1000 i1 false ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = call i32 @getchar ( ) NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %16 ) NEW_LINE %18 = call i32 @getchar ( ) NEW_LINE %19 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %19 * i8 %20 ) NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i64 @strlen ( * i8 %21 ) #5 NEW_LINE %23 = icmp ult i64 %22 , 81 NEW_LINE br i1 %23 , label %24 , label %27 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %25 ) NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca double NEW_LINE %3 = alloca double NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca i32 NEW_LINE %6 = alloca i32 NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store double 0.000000e+00 %2 NEW_LINE store double 0.000000e+00 %3 NEW_LINE store i32 0 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %4 * i32 %5 ) NEW_LINE %10 = load i32 %4 NEW_LINE %11 = icmp eq i32 %10 , 0 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %5 NEW_LINE %14 = icmp eq i32 %13 , 0 NEW_LINE br i1 %14 , label %15 , label %16 NEW_LINE 15: NEW_LINE br label %36 NEW_LINE 16: NEW_LINE %17 = load i32 %6 NEW_LINE %18 = call double @theta_convert ( i32 %17 ) NEW_LINE store double %18 %7 NEW_LINE %19 = load i32 %4 NEW_LINE %20 = sitofp i32 %19 to double NEW_LINE %21 = load double %7 NEW_LINE %22 = call double @cos ( double %21 ) #3 NEW_LINE %23 = fmul double %20 , %22 NEW_LINE %24 = load double %2 NEW_LINE %25 = fadd double %24 , %23 NEW_LINE store double %25 %2 NEW_LINE %26 = load i32 %4 NEW_LINE %27 = sitofp i32 %26 to double NEW_LINE %28 = load double %7 NEW_LINE %29 = call double @sin ( double %28 ) #3 NEW_LINE %30 = fmul double %27 , %29 NEW_LINE %31 = load double %3 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %3 NEW_LINE %33 = load i32 %5 NEW_LINE %34 = load i32 %6 NEW_LINE %35 = call i32 @theta_add ( i32 %33 i32 %34 ) NEW_LINE store i32 %35 %6 NEW_LINE br label %8 NEW_LINE 36: NEW_LINE %37 = load double %2 NEW_LINE %38 = fptosi double %37 to i32 NEW_LINE %39 = load double %3 NEW_LINE %40 = fptosi double %39 to i32 NEW_LINE %41 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %38 i32 %40 ) NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE store i32 0 %3 NEW_LINE br label %5 NEW_LINE 5: NEW_LINE %6 = load i32 %3 NEW_LINE %7 = icmp slt i32 %6 , 1000000 NEW_LINE br i1 %7 , label %8 , label %20 NEW_LINE 8: NEW_LINE %9 = load i32 %3 NEW_LINE %10 = call i32 @prime ( i32 %9 ) NEW_LINE %11 = icmp eq i32 %10 , 1 NEW_LINE br i1 %11 , label %12 , label %16 NEW_LINE 12: NEW_LINE %13 = load i32 %3 NEW_LINE %14 = sext i32 %13 to i64 NEW_LINE %15 = getelementptr inbounds ARR 3 1000000 x i8 @pn , i64 0 , i64 %14 NEW_LINE store i8 1 %15 NEW_LINE br label %16 NEW_LINE 16: NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = load i32 %3 NEW_LINE %19 = add nsw i32 %18 , 1 NEW_LINE store i32 %19 %3 NEW_LINE br label %5 NEW_LINE 20: NEW_LINE br label %21 NEW_LINE 21: NEW_LINE %22 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %2 ) NEW_LINE %23 = icmp ne i32 %22 , -1 NEW_LINE br i1 %23 , label %24 , label %43 NEW_LINE 24: NEW_LINE store i32 0 %4 NEW_LINE store i32 0 %3 NEW_LINE br label %25 NEW_LINE 25: NEW_LINE %26 = load i32 %3 NEW_LINE %27 = load i32 %2 NEW_LINE %28 = icmp sle i32 %26 , %27 NEW_LINE br i1 %28 , label %29 , label %40 NEW_LINE 29: NEW_LINE %30 = load i32 %3 NEW_LINE %31 = sext i32 %30 to i64 NEW_LINE %32 = getelementptr inbounds ARR 3 1000000 x i8 @pn , i64 0 , i64 %31 NEW_LINE %33 = load i8 %32 NEW_LINE %34 = sext i8 %33 to i32 NEW_LINE %35 = load i32 %4 NEW_LINE %36 = add nsw i32 %35 , %34 NEW_LINE store i32 %36 %4 NEW_LINE br label %37 NEW_LINE 37: NEW_LINE %38 = load i32 %3 NEW_LINE %39 = add nsw i32 %38 , 1 NEW_LINE store i32 %39 %3 NEW_LINE br label %25 NEW_LINE 40: NEW_LINE %41 = load i32 %4 NEW_LINE %42 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.1:%d~0A~00" i64 0 i64 0 ) i32 %41 ) NEW_LINE br label %21 NEW_LINE 43: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %11 i8 0 i64 1000 i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %12 i8 0 i64 1000 i1 false ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = call i32 @getchar ( ) NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %16 ) NEW_LINE %18 = call i32 @getchar ( ) NEW_LINE %19 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %19 * i8 %20 ) NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i64 @strlen ( * i8 %21 ) #5 NEW_LINE %23 = icmp ult i64 %22 , 81 NEW_LINE br i1 %23 , label %24 , label %27 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %25 ) NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca ARR 3 1024 x i32 NEW_LINE %5 = alloca ARR 3 1024 x i32 NEW_LINE %6 = alloca ARR 3 1024 x i32 NEW_LINE %7 = alloca ARR 3 1024 x i8 NEW_LINE %8 = alloca ARR 3 1024 x i8 NEW_LINE store i32 0 %1 NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %3 ) NEW_LINE store i32 0 %2 NEW_LINE br label %10 NEW_LINE 10: NEW_LINE %11 = load i32 %2 NEW_LINE %12 = load i32 %3 NEW_LINE %13 = icmp slt i32 %11 , %12 NEW_LINE br i1 %13 , label %14 , label %30 NEW_LINE 14: NEW_LINE %15 = getelementptr inbounds ARR 3 1024 x i8 %7 , i64 0 , i64 0 NEW_LINE %16 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %15 ) NEW_LINE %17 = getelementptr inbounds ARR 3 1024 x i8 %8 , i64 0 , i64 0 NEW_LINE %18 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %17 ) NEW_LINE %19 = getelementptr inbounds ARR 3 1024 x i8 %7 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 0 NEW_LINE call void @convert ( * i8 %19 * i32 %20 ) NEW_LINE %21 = getelementptr inbounds ARR 3 1024 x i8 %8 , i64 0 , i64 0 NEW_LINE %22 = getelementptr inbounds ARR 3 1024 x i32 %5 , i64 0 , i64 0 NEW_LINE call void @convert ( * i8 %21 * i32 %22 ) NEW_LINE %23 = getelementptr inbounds ARR 3 1024 x i32 %4 , i64 0 , i64 0 NEW_LINE %24 = getelementptr inbounds ARR 3 1024 x i32 %5 , i64 0 , i64 0 NEW_LINE %25 = getelementptr inbounds ARR 3 1024 x i32 %6 , i64 0 , i64 0 NEW_LINE call void @add ( * i32 %23 * i32 %24 * i32 %25 ) NEW_LINE %26 = getelementptr inbounds ARR 3 1024 x i32 %6 , i64 0 , i64 0 NEW_LINE call void @printLDV ( * i32 %26 ) NEW_LINE br label %27 NEW_LINE 27: NEW_LINE %28 = load i32 %2 NEW_LINE %29 = add nsw i32 %28 , 1 NEW_LINE store i32 %29 %2 NEW_LINE br label %10 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca ARR 3 1000 x i8 NEW_LINE %3 = alloca ARR 3 1000 x i8 NEW_LINE %4 = alloca i32 NEW_LINE store i32 0 %1 NEW_LINE %5 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str:%d~00" i64 0 i64 0 ) * i32 %4 ) NEW_LINE br label %6 NEW_LINE 6: NEW_LINE %7 = load i32 %4 NEW_LINE %8 = add nsw i32 %7 , -1 NEW_LINE store i32 %8 %4 NEW_LINE %9 = icmp ne i32 %7 , 0 NEW_LINE br i1 %9 , label %10 , label %30 NEW_LINE 10: NEW_LINE %11 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %11 i8 0 i64 1000 i1 false ) NEW_LINE %12 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @llvm.memset.p0i8.i64 ( * i8 %12 i8 0 i64 1000 i1 false ) NEW_LINE %13 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %14 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %13 ) NEW_LINE %15 = call i32 @getchar ( ) NEW_LINE %16 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE %17 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 3 x i8 @".str.1:%s~00" i64 0 i64 0 ) * i8 %16 ) NEW_LINE %18 = call i32 @getchar ( ) NEW_LINE %19 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %20 = getelementptr inbounds ARR 3 1000 x i8 %3 , i64 0 , i64 0 NEW_LINE call void @addstr ( * i8 %19 * i8 %20 ) NEW_LINE %21 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %22 = call i64 @strlen ( * i8 %21 ) #5 NEW_LINE %23 = icmp ult i64 %22 , 81 NEW_LINE br i1 %23 , label %24 , label %27 NEW_LINE 24: NEW_LINE %25 = getelementptr inbounds ARR 3 1000 x i8 %2 , i64 0 , i64 0 NEW_LINE %26 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 4 x i8 @".str.2:%s~0A~00" i64 0 i64 0 ) * i8 %25 ) NEW_LINE br label %29 NEW_LINE 27: NEW_LINE %28 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 10 x i8 @".str.3:overflow~0A~00" i64 0 i64 0 ) ) NEW_LINE br label %29 NEW_LINE 29: NEW_LINE br label %6 NEW_LINE 30: NEW_LINE ret i32 0 NEW_LINE }
define dso_local i32 @main ( ) #0 { NEW_LINE %1 = alloca i32 NEW_LINE %2 = alloca i32 NEW_LINE %3 = alloca i32 NEW_LINE %4 = alloca i32 NEW_LINE %5 = alloca double NEW_LINE %6 = alloca double NEW_LINE %7 = alloca double NEW_LINE store i32 0 %1 NEW_LINE store i32 90 %4 NEW_LINE store double 0.000000e+00 %7 NEW_LINE store double 0.000000e+00 %6 NEW_LINE br label %8 NEW_LINE 8: NEW_LINE %9 = call i32 ( * i8 ... ) @__isoc99_scanf ( * i8 getelementptr inbounds ( ARR 3 6 x i8 @".str:%d,%d~00" i64 0 i64 0 ) * i32 %2 * i32 %3 ) NEW_LINE %10 = icmp ne i32 %9 , -1 NEW_LINE br i1 %10 , label %11 , label %19 NEW_LINE 11: NEW_LINE %12 = load i32 %2 NEW_LINE %13 = icmp ne i32 %12 , 0 NEW_LINE br i1 %13 , label %17 , label %14 NEW_LINE 14: NEW_LINE %15 = load i32 %3 NEW_LINE %16 = icmp ne i32 %15 , 0 NEW_LINE br label %17 NEW_LINE 17: NEW_LINE %18 = phi i1 ARR 2 true %11 , ARR 2 %16 %14 NEW_LINE br label %19 NEW_LINE 19: NEW_LINE %20 = phi i1 ARR 2 false %8 , ARR 2 %18 %17 NEW_LINE br i1 %20 , label %21 , label %45 NEW_LINE 21: NEW_LINE %22 = load i32 %4 NEW_LINE %23 = sitofp i32 %22 to double NEW_LINE %24 = fmul double %23 , 0x400921FB54442D18 NEW_LINE %25 = fdiv double %24 , 1.800000e+02 NEW_LINE store double %25 %5 NEW_LINE %26 = load double %5 NEW_LINE %27 = call double @cos ( double %26 ) #3 NEW_LINE %28 = load i32 %2 NEW_LINE %29 = sitofp i32 %28 to double NEW_LINE %30 = fmul double %27 , %29 NEW_LINE %31 = load double %6 NEW_LINE %32 = fadd double %31 , %30 NEW_LINE store double %32 %6 NEW_LINE %33 = load double %5 NEW_LINE %34 = call double @sin ( double %33 ) #3 NEW_LINE %35 = load i32 %2 NEW_LINE %36 = sitofp i32 %35 to double NEW_LINE %37 = fmul double %34 , %36 NEW_LINE %38 = load double %7 NEW_LINE %39 = fadd double %38 , %37 NEW_LINE store double %39 %7 NEW_LINE %40 = load i32 %4 NEW_LINE %41 = load i32 %3 NEW_LINE %42 = sub nsw i32 %40 , %41 NEW_LINE %43 = add nsw i32 %42 , 360 NEW_LINE %44 = srem i32 %43 , 360 NEW_LINE store i32 %44 %4 NEW_LINE br label %8 NEW_LINE 45: NEW_LINE %46 = load double %6 NEW_LINE %47 = fptosi double %46 to i32 NEW_LINE %48 = load double %7 NEW_LINE %49 = fptosi double %48 to i32 NEW_LINE %50 = call i32 ( * i8 ... ) @printf ( * i8 getelementptr inbounds ( ARR 3 7 x i8 @".str.1:%d~0A%d~0A~00" i64 0 i64 0 ) i32 %47 i32 %49 ) NEW_LINE ret i32 0 NEW_LINE }
